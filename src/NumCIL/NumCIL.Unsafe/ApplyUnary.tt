<#@ template language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
#region Copyright
/*
This file is part of Bohrium and copyright (c) 2012 the Bohrium
team <http://www.bh107.org>.

Bohrium is free software: you can redistribute it and/or modify
it under the terms of the GNU Lesser General Public License as 
published by the Free Software Foundation, either version 3 
of the License, or (at your option) any later version.

Bohrium is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the 
GNU Lesser General Public License along with Bohrium. 

If not, see <http://www.gnu.org/licenses/>.
*/
#endregion

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using NumCIL.Generic;
using System.Runtime.InteropServices;

namespace NumCIL.Unsafe
{
    internal static partial class Apply
    {
<# 

var convertOps = new string[] { "ToUInt8", "ToInt8", "ToInt16", "ToUInt16", "ToInt32", "ToUInt32", "ToInt64", "ToUInt64", "ToFloat", "ToDouble"};
var opnames = new string[] {"C", "Ceiling", "Floor", "Round", "Sqrt", "Exp", "Abs", "Sin", "Cos", "Tan", "Asin", "Acos", "Atan", "Sinh", "Cosh", "Tanh", "Log", "Log10", "Invert", "Not", "Sign", "Copy"};


foreach(string opname in opnames.Union(convertOps))
foreach(string typename in new string[] {"SByte", "Byte", "Int16", "UInt16", "Int32", "UInt32", "Int64", "UInt64", "Single", "Double", "Boolean"}) { 

	var nctype = typename;
	if (nctype == "SByte")
		nctype = "Int8";
	else if (nctype == "Byte")
		nctype = "UInt8";
	else if (nctype == "Single")
		nctype = "Float";


	if (opname == "Not" && typename != "Boolean")
		continue;

	if (typename == "Boolean" && !(opname == "Not" || opname == "C" || convertOps.Any(x => x == opname)))
		continue;

	if ((opname == "Abs" || opname == "Sign") && nctype.StartsWith("U"))
		continue;

	if ((opname == "Round" || opname == "Ceiling" || opname == "Floor") && (nctype.StartsWith("U") || nctype.StartsWith("I")))
		continue;

	if ((typename == "Single" || typename == "Double") && (opname == "Not" || opname == "Invert"))
		continue;

	if (opname == "To" + typename)
		continue;

	string structname = opname == "C" ? "C" : string.Format("NumCIL.{0}.{1}", nctype, opname);
	string methodextra = opname == "C" ? "" : "_TypedImpl";
	string outbyref = opname == "C" ? "ref " : "";
	string typename_out = typename;

	if (opname == "Copy")
	{
		structname = string.Format("NumCIL.CopyOp<System.{0}>", typename);
	}

	if (convertOps.Any(x => x == opname))
	{
		var tn = opname.Substring("To".Length);
		if (tn == "Float")
			typename_out = "Single";
		else if (tn == "Int8")
			typename_out = "SByte";
		else if (tn == "UInt8")
			typename_out = "Byte";
		else
			typename_out = tn;


		if (typename == "Boolean")
			structname = string.Format("NumCIL.Boolean.{1}", tn, opname);
		else
			structname = string.Format("NumCIL.{0}.{1}", tn, opname);

	}

	string opcode_template = "op.Op({1})";

	if (convertOps.Any(x => x == opname) || opname == "Copy")
		opcode_template = "({0})({1})";


	if (opname == "Ceiling")
		opcode_template = "({0})(Math.Ceiling({1}))";
	else if (opname == "Floor")
		opcode_template = "({0})(Math.Floor({1}))";
	else if (opname == "Round")
		opcode_template = "({0})(Math." + opname + "({1}))";
	else if (opname == "Sqrt")
		opcode_template = "({0})(Math." + opname + "({1}))";
	else if (opname == "Exp")
		opcode_template = "({0})(Math." + opname + "({1}))";
	else if (opname == "Abs")
		opcode_template = "({0})(Math." + opname + "({1}))";
	else if (opname == "Sin")
		opcode_template = "({0})(Math." + opname + "({1}))";
	else if (opname == "Cos")
		opcode_template = "({0})(Math." + opname + "({1}))";
	else if (opname == "Tan")
		opcode_template = "({0})(Math." + opname + "({1}))";
	else if (opname == "Asin")
		opcode_template = "({0})(Math." + opname + "({1}))";
	else if (opname == "Acos")
		opcode_template = "({0})(Math." + opname + "({1}))";
	else if (opname == "Atan")
		opcode_template = "({0})(Math." + opname + "({1}))";
	else if (opname == "Sinh")
		opcode_template = "({0})(Math." + opname + "({1}))";
	else if (opname == "Cosh")
		opcode_template = "({0})(Math." + opname + "({1}))";
	else if (opname == "Tanh")
		opcode_template = "({0})(Math." + opname + "({1}))";
	else if (opname == "Log")
		opcode_template = "({0})(Math." + opname + "({1}))";
	else if (opname == "Log10")
		opcode_template = "({0})(Math." + opname + "({1}))";
	else if (opname == "Invert")
		opcode_template = "({0})(~({1}))";
	else if (opname == "Not")
		opcode_template = "({0})(!({1}))";
	else if (opname == "Sign")
		opcode_template = "({0})(Math." + opname + "({1}))";


	string opcode_a = string.Format(opcode_template, "System." + typename_out, "d1[ix1]" + (typename == "Boolean" && typename_out != "Boolean" ? " ? 1 : 0 " : ""));
	string opcode_s = string.Format(opcode_template, "System." + typename_out, "scalar" + (typename == "Boolean" && typename_out != "Boolean" ? " ? 1 : 0 " : ""));




#>
        /// <summary>
        /// Unsafe implementation of applying a unary operation
        /// </summary>
        /// <typeparam name="C">The type of operation to perform</typeparam>
        /// <param name="op">The operation instance</param>
        /// <param name="in1">The input argument</param>
        /// <param name="out">The output target</param>
        internal static void UFunc_Op_Inner_Unary_Flush_<#=typename#><#=methodextra#><C>(<#=structname#> op, NdArray<System.<#=typename#>> in1, <#=outbyref#>NdArray<System.<#=typename_out#>> @out)
            where C : IUnaryOp<System.<#=typename#>>
        {
<# 
	if (opname == "C")
	{
#>
			if (UFunc_Op_Inner_Unary_Flush_Typed<System.<#=typename#>, System.<#=typename_out#>, C>(op, in1, @out))
				return;

#if DEBUG
			Console.WriteLine("Generic Unary method <#=structname#> for <#=typename#>, with op = {0}, Ta = {1}, Tb = {2}", op.GetType(), typeof(System.<#=typename#>), typeof(System.<#=typename_out#>));
#endif
<# 
	} 
#>
            unsafe
            {
                using (var f1 = new Pinner(in1.DataAccessor))
                using (var f2 = new Pinner(@out.DataAccessor))
                {
                    var d1 = (System.<#=typename#>*)f1.ptr;
                    var d2 = (System.<#=typename_out#>*)f2.ptr;

                    if (@out.Shape.Dimensions.Length == 1)
                    {
                        long totalOps = @out.Shape.Dimensions[0].Length;

                        long ix1 = in1.Shape.Offset;
                        long ix2 = @out.Shape.Offset;

                        long stride1 = in1.Shape.Dimensions[0].Stride;
                        long stride2 = @out.Shape.Dimensions[0].Stride;


                        if (stride1 == stride2 && ix1 == ix2)
                        {
                            //Best case, all are equal, just keep a single counter
                            for (long i = 0; i < totalOps; i++)
                            {
                                d2[ix1] = <#=opcode_a#>;
                                ix1 += stride1;
                            }
                        }
                        else
                        {
                            for (long i = 0; i < totalOps; i++)
                            {
                                d2[ix2] = <#=opcode_a#>;
                                ix1 += stride1;
                                ix2 += stride2;
                            }
                        }
                    }
                    else if (@out.Shape.Dimensions.Length == 2)
                    {
                        long opsOuter = @out.Shape.Dimensions[0].Length;
                        long opsInner = @out.Shape.Dimensions[1].Length;

                        long ix1 = in1.Shape.Offset;
                        long ix2 = @out.Shape.Offset;

                        long outerStride1 = in1.Shape.Dimensions[0].Stride;
                        long outerStride2 = @out.Shape.Dimensions[0].Stride;

                        long innerStride1 = in1.Shape.Dimensions[1].Stride;
                        long innerStride2 = @out.Shape.Dimensions[1].Stride;

                        outerStride1 -= innerStride1 * in1.Shape.Dimensions[1].Length;
                        outerStride2 -= innerStride2 * @out.Shape.Dimensions[1].Length;

                        for (long i = 0; i < opsOuter; i++)
                        {
                            for (long j = 0; j < opsInner; j++)
                            {
                                d2[ix2] = <#=opcode_a#>;
                                ix1 += innerStride1;
                                ix2 += innerStride2;
                            }

                            ix1 += outerStride1;
                            ix2 += outerStride2;
                        }
                    }
                    else
                    {
                        long n = in1.Shape.Dimensions.LongLength - 3;
                        long[] limits = in1.Shape.Dimensions.Where(x => n-- > 0).Select(x => x.Length).ToArray();
                        long[] counters = new long[limits.LongLength];

                        long totalOps = limits.LongLength == 0 ? 1 : limits.Aggregate<long>((a, b) => a * b);

                        //This chunck of variables are used to prevent repeated calculations of offsets
                        long dimIndex0 = 0 + limits.LongLength;
                        long dimIndex1 = 1 + limits.LongLength;
                        long dimIndex2 = 2 + limits.LongLength;

                        long opsOuter = @out.Shape.Dimensions[0 + limits.LongLength].Length;
                        long opsInner = @out.Shape.Dimensions[1 + limits.LongLength].Length;
                        long opsInnerInner = @out.Shape.Dimensions[2 + limits.LongLength].Length;

                        long outerStride1 = in1.Shape.Dimensions[dimIndex0].Stride;
                        long outerStride3 = @out.Shape.Dimensions[dimIndex0].Stride;

                        long innerStride1 = in1.Shape.Dimensions[dimIndex1].Stride;
                        long innerStride3 = @out.Shape.Dimensions[dimIndex1].Stride;

                        long innerInnerStride1 = in1.Shape.Dimensions[dimIndex2].Stride;
                        long innerInnerStride3 = @out.Shape.Dimensions[dimIndex2].Stride;

                        outerStride1 -= innerStride1 * in1.Shape.Dimensions[dimIndex1].Length;
                        outerStride3 -= innerStride3 * @out.Shape.Dimensions[dimIndex1].Length;

                        innerStride1 -= innerInnerStride1 * in1.Shape.Dimensions[dimIndex2].Length;
                        innerStride3 -= innerInnerStride3 * @out.Shape.Dimensions[dimIndex2].Length;

                        for (long outer = 0; outer < totalOps; outer++)
                        {
                            //Get the array offset for the first element in the outer dimension
                            long ix1 = in1.Shape[counters];
                            long ix3 = @out.Shape[counters];


                            for (long i = 0; i < opsOuter; i++)
                            {
                                for (long j = 0; j < opsInner; j++)
                                {
                                    for (long k = 0; k < opsInnerInner; k++)
                                    {
                                        d2[ix3] = <#=opcode_a#>;
                                        ix1 += innerInnerStride1;
                                        ix3 += innerInnerStride3;
                                    }

                                    ix1 += innerStride1;
                                    ix3 += innerStride3;
                                }

                                ix1 += outerStride1;
                                ix3 += outerStride3;
                            }

                            if (counters.LongLength > 0)
                            {
                                //Basically a ripple carry adder
                                long p = counters.LongLength - 1;
                                while (++counters[p] == limits[p] && p > 0)
                                {
                                    counters[p] = 0;
                                    p--;
                                }
                            }
                        }
                    }
                }
            }
        }

        /// <summary>
        /// Unsafe implementation of applying a unary operation
        /// </summary>
        /// <typeparam name="C">The type of operation to perform</typeparam>
        /// <param name="op">The operation instance</param>
        /// <param name="scalar">The input scalar argument</param>
        /// <param name="out">The output target</param>
        internal static void UFunc_Op_Inner_Unary_Scalar_Flush_<#=typename#><#=methodextra#><C>(<#=structname#> op, System.<#=typename#> scalar, <#=outbyref#>NdArray<System.<#=typename_out#>> @out)
            where C : IUnaryOp<System.<#=typename#>>
        {
<# 
	if (opname == "C")
	{
#>
			if (UFunc_Op_Inner_Unary_Scalar_Flush_Typed<System.<#=typename#>, System.<#=typename_out#>, C>(op, scalar, @out))
				return;

#if DEBUG
			Console.WriteLine("Generic Unary scalar method <#=structname#> for <#=typename#>, with op = {0}, Ta = {1}, Tb = {2}", op.GetType(), typeof(System.<#=typename#>), typeof(System.<#=typename_out#>));
#endif
<# 
	} 
#>
            unsafe
            {
                using (var f2 = new Pinner(@out.DataAccessor))
                {
                    var d2 = (System.<#=typename_out#>*)f2.ptr;

                    if (@out.Shape.Dimensions.Length == 1)
                    {
                        long totalOps = @out.Shape.Dimensions[0].Length;
                        long ix2 = @out.Shape.Offset;
                        long stride2 = @out.Shape.Dimensions[0].Stride;

                        for (long i = 0; i < totalOps; i++)
                        {
                            d2[ix2] = <#=opcode_s#>;
                            ix2 += stride2;
                        }
                    }
                    else if (@out.Shape.Dimensions.Length == 2)
                    {
                        long opsOuter = @out.Shape.Dimensions[0].Length;
                        long opsInner = @out.Shape.Dimensions[1].Length;

                        long ix2 = @out.Shape.Offset;
                        long outerStride2 = @out.Shape.Dimensions[0].Stride;
                        long innerStride2 = @out.Shape.Dimensions[1].Stride;
                        outerStride2 -= innerStride2 * @out.Shape.Dimensions[1].Length;

                        for (long i = 0; i < opsOuter; i++)
                        {
                            for (long j = 0; j < opsInner; j++)
                            {
                                d2[ix2] = <#=opcode_s#>;
                                ix2 += innerStride2;
                            }

                            ix2 += outerStride2;
                        }
                    }
                    else
                    {
                        long n = @out.Shape.Dimensions.LongLength - 3;
                        long[] limits = @out.Shape.Dimensions.Where(x => n-- > 0).Select(x => x.Length).ToArray();
                        long[] counters = new long[limits.LongLength];

                        long totalOps = limits.LongLength == 0 ? 1 : limits.Aggregate<long>((a, b) => a * b);

                        //This chunck of variables are used to prevent repeated calculations of offsets
                        long dimIndex0 = 0 + limits.LongLength;
                        long dimIndex1 = 1 + limits.LongLength;
                        long dimIndex2 = 2 + limits.LongLength;

                        long opsOuter = @out.Shape.Dimensions[0 + limits.LongLength].Length;
                        long opsInner = @out.Shape.Dimensions[1 + limits.LongLength].Length;
                        long opsInnerInner = @out.Shape.Dimensions[2 + limits.LongLength].Length;

                        long outerStride3 = @out.Shape.Dimensions[dimIndex0].Stride;
                        long innerStride3 = @out.Shape.Dimensions[dimIndex1].Stride;
                        long innerInnerStride3 = @out.Shape.Dimensions[dimIndex2].Stride;
                        outerStride3 -= innerStride3 * @out.Shape.Dimensions[dimIndex1].Length;
                        innerStride3 -= innerInnerStride3 * @out.Shape.Dimensions[dimIndex2].Length;

                        for (long outer = 0; outer < totalOps; outer++)
                        {
                            //Get the array offset for the first element in the outer dimension
                            long ix3 = @out.Shape[counters];

                            for (long i = 0; i < opsOuter; i++)
                            {
                                for (long j = 0; j < opsInner; j++)
                                {
                                    for (long k = 0; k < opsInnerInner; k++)
                                    {
                                        d2[ix3] = <#=opcode_s#>;
                                        ix3 += innerInnerStride3;
                                    }

                                    ix3 += innerStride3;
                                }

                                ix3 += outerStride3;
                            }

                            if (counters.LongLength > 0)
                            {
                                //Basically a ripple carry adder
                                long p = counters.LongLength - 1;
                                while (++counters[p] == limits[p] && p > 0)
                                {
                                    counters[p] = 0;
                                    p--;
                                }
                            }
                        }
                    }
                }
            }
        }
<# } #>
	}
}