<#@ template language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
#region Copyright
/*
This file is part of Bohrium and copyright (c) 2012 the Bohrium
team <http://www.bh107.org>.

Bohrium is free software: you can redistribute it and/or modify
it under the terms of the GNU Lesser General Public License as 
published by the Free Software Foundation, either version 3 
of the License, or (at your option) any later version.

Bohrium is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the 
GNU Lesser General Public License along with Bohrium. 

If not, see <http://www.gnu.org/licenses/>.
*/
#endregion


using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using NumCIL.Generic;

namespace NumCIL.Unsafe
{
    internal static class Reduce
    {
<# 
var opnames = new string[] {"Add", "Sub", "Mul", "Div", "Mod", "Min", "Max", "Pow", "And", "Or", "Xor"};

foreach(string opname in new string[] {"C"}.Union(opnames))
foreach(string typename in new string[] {"SByte", "Byte", "Int16", "UInt16", "Int32", "UInt32", "Int64", "UInt64", "Single", "Double", "Boolean"}) { 

	var nctype = typename;
	if (nctype == "SByte")
		nctype = "Int8";
	else if (nctype == "Byte")
		nctype = "UInt8";
	else if (nctype == "Single")
		nctype = "Float";

	string structname = opname == "C" ? "C" : string.Format("NumCIL.{0}.{1}", nctype, opname);
	string methodextra = opname == "C" ? "" : "_TypedImpl";
	string outbyref = opname == "C" ? "ref " : "";

	if (typename == "Boolean" && opname != "And" && opname != "Or" && opname != "Xor")
		continue;
		
	if ((typename == "Single" || typename == "Double") && (opname == "And" || opname == "Or" || opname == "Xor"))
		continue;

	string opcode_template = "(System.{0})op.Op({1}, {2})";

	if (opname == "Add")
		opcode_template = "(System.{0})({1} + {2})";
	else if (opname == "Sub") 
		opcode_template = "(System.{0})({1} - {2})";
	else if (opname == "Mul") 
		opcode_template = "(System.{0})({1} * {2})";
	else if (opname == "Div") 
		opcode_template = "(System.{0})({1} / {2})";
	else if (opname == "Mod") 
		opcode_template = "(System.{0})({1} % {2})";
	else if (opname == "Min") 
		opcode_template = "(System.{0})Math.Min({1}, {2})";
	else if (opname == "Max") 
		opcode_template = "(System.{0})Math.Max({1}, {2})";
	else if (opname == "Pow") 
		opcode_template = "(System.{0})Math.Pow({1}, {2})";
	else if (opname == "And") 
		opcode_template = "(System.{0})({1} & {2})";
	else if (opname == "Or") 
		opcode_template = "(System.{0})({1} | {2})";
	else if (opname == "Xor") 
		opcode_template = "(System.{0})({1} ^ {2})";
	else if (opname == "Equal") 
		opcode_template = "(System.{0})({1} == {2})";
	else if (opname == "NotEqual") 
		opcode_template = "(System.{0})({1} != {2})";
	else if (opname == "GreaterThan") 
		opcode_template = "(System.{0})({1} > {2})";
	else if (opname == "GreaterThanOrEqual") 
		opcode_template = "(System.{0})({1} >= {2})";
	else if (opname == "LessThan") 
		opcode_template = "(System.{0})({1} < {2})";
	else if (opname == "LessThanOrEqual") 
		opcode_template = "(System.{0})({1} <= {2})";


#>
        /// <summary>
        /// Unsafe implementation of the reduce operation
        /// </summary>
        /// <typeparam name="C">The type of operation to reduce with</typeparam>
        /// <param name="op">The instance of the operation to reduce with</param>
        /// <param name="in1">The input argument</param>
        /// <param name="axis">The axis to reduce</param>
        /// <param name="out">The output target</param>
        /// <returns>The output target</returns>
        private static NdArray<System.<#=typename#>> UFunc_Reduce_Inner_Flush_<#=typename#><#=methodextra#><C>(<#=structname#> op, long axis, NdArray<System.<#=typename#>> in1, NdArray<System.<#=typename#>> @out)
            where C : struct, IBinaryOp<System.<#=typename#>>
        {
<# 
	if (opname == "C")
	{
#>
			if (Apply.UFunc_Reduce_Inner_Flush_Typed<System.<#=typename#>, <#=structname#>>(op, axis, in1, @out))
				return @out;

#if DEBUG
			Console.WriteLine("Generic Reduce method <#=structname#> for <#=typename#>, with op = {0}, T = {1}", op.GetType(), typeof(System.<#=typename#>));
#endif
<# 
	} 
#>
            if (axis < 0)
                axis = in1.Shape.Dimensions.LongLength - axis;

            //Basic case, just return a reduced array
            if (in1.Shape.Dimensions[axis].Length == 1 && in1.Shape.Dimensions.LongLength > 1)
            {
                //TODO: If both in and out use the same array, just return a reshaped in
                long j = 0;
                var sizes = in1.Shape.Dimensions.Where(x => j++ != axis).ToArray();
                Apply.UFunc_Op_Inner_Unary_Flush_<#=typename#><CopyOp<System.<#=typename#>>>(new CopyOp<System.<#=typename#>>(), in1.Reshape(new Shape(sizes, in1.Shape.Offset)), ref @out);
            }
            else
            {
                unsafe
                {
                    using (var f1 = new Pinner(in1.DataAccessor))
                    using (var f2 = new Pinner(@out.DataAccessor))
                    {
                        var d = (System.<#=typename#>*)f1.ptr;
                        var vd = (System.<#=typename#>*)f2.ptr;

                        //Simple case, reduce 1D array to scalar value
                        if (axis == 0 && in1.Shape.Dimensions.LongLength == 1)
                        {
                            long stride = in1.Shape.Dimensions[0].Stride;
                            long ix = in1.Shape.Offset;
                            long limit = (stride * in1.Shape.Dimensions[0].Length) + ix;

                            System.<#=typename#> value = d[ix];

                            for (long i = ix + stride; i < limit; i += stride)
                                value = <#=string.Format(opcode_template, typename, "value", "d[i]")#>;

                            vd[@out.Shape.Offset] = value;
                        }
                        //Simple case, reduce 2D array to 1D
                        else if (axis == 0 && in1.Shape.Dimensions.LongLength == 2)
                        {
                            long strideInner = in1.Shape.Dimensions[1].Stride;
                            long strideOuter = in1.Shape.Dimensions[0].Stride;

                            long ix = in1.Shape.Offset;
                            long ox = @out.Shape.Offset;
                            long strideRes = @out.Shape.Dimensions[0].Stride;

                            long outerCount = in1.Shape.Dimensions[0].Length;

                            for (long i = 0; i < in1.Shape.Dimensions[1].Length; i++)
                            {
                                System.<#=typename#> value = d[ix];

                                long nx = ix;
                                for (long j = 1; j < outerCount; j++)
                                {
                                    nx += strideOuter;
                                    value = <#=string.Format(opcode_template, typename, "value", "d[nx]")#>;
                                }

                                vd[ox] = value;
                                ox += strideRes;

                                ix += strideInner;
                            }
                        }
                        //Simple case, reduce 2D array to 1D
                        else if (axis == 1 && in1.Shape.Dimensions.LongLength == 2)
                        {
                            long strideInner = in1.Shape.Dimensions[1].Stride;
                            long strideOuter = in1.Shape.Dimensions[0].Stride;

                            long ix = in1.Shape.Offset;
                            long limitInner = strideInner * in1.Shape.Dimensions[1].Length;

                            long ox = @out.Shape.Offset;
                            long strideRes = @out.Shape.Dimensions[0].Stride;

                            for (long i = 0; i < in1.Shape.Dimensions[0].Length; i++)
                            {
                                System.<#=typename#> value = d[ix];

                                for (long j = strideInner; j < limitInner; j += strideInner)
                                    value = <#=string.Format(opcode_template, typename, "value", "d[j + ix]")#>;

                                vd[ox] = value;
                                ox += strideRes;

                                ix += strideOuter;
                            }
                        }
                        //General case
                        else
                        {
                            long size = in1.Shape.Dimensions[axis].Length;
                            NdArray<System.<#=typename#>> vl = @out.Subview(Range.NewAxis, axis);

                            //Initially we just copy the value
                            Apply.UFunc_Op_Inner_Unary_Flush_<#=typename#><CopyOp<System.<#=typename#>>>(new CopyOp<System.<#=typename#>>(), in1.Subview(Range.El(0), axis), ref vl);

                            //If there is more than one element in the dimension to reduce, apply the operation accumulatively
                            for (long j = 1; j < size; j++)
                            {
                                //Select the new dimension
                                //Apply the operation
                                Apply.UFunc_Op_Inner_Binary_Flush_<#=typename#><<#=structname#>>(op, vl, in1.Subview(Range.El(j), axis), ref vl);
                            }
                        }
                    }
                }
            }
            return @out;
        }
<# } #>
	}
}
