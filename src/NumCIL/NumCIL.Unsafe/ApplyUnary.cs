#region Copyright
/*
This file is part of Bohrium and copyright (c) 2012 the Bohrium
team <http://www.bh107.org>.

Bohrium is free software: you can redistribute it and/or modify
it under the terms of the GNU Lesser General Public License as 
published by the Free Software Foundation, either version 3 
of the License, or (at your option) any later version.

Bohrium is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the 
GNU Lesser General Public License along with Bohrium. 

If not, see <http://www.gnu.org/licenses/>.
*/
#endregion

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using NumCIL.Generic;
using System.Runtime.InteropServices;

namespace NumCIL.Unsafe
{
    internal static partial class Apply
    {
        /// <summary>
        /// Unsafe implementation of applying a unary operation
        /// </summary>
        /// <typeparam name="C">The type of operation to perform</typeparam>
        /// <param name="op">The operation instance</param>
        /// <param name="in1">The input argument</param>
        /// <param name="out">The output target</param>
        internal static void UFunc_Op_Inner_Unary_Flush_SByte<C>(C op, NdArray<System.SByte> in1, ref NdArray<System.SByte> @out)
            where C : IUnaryOp<System.SByte>
        {
			if (UFunc_Op_Inner_Unary_Flush_Typed<System.SByte, System.SByte, C>(op, in1, @out))
				return;

#if DEBUG
			Console.WriteLine("Generic Unary method C for SByte, with op = {0}, Ta = {1}, Tb = {2}", op.GetType(), typeof(System.SByte), typeof(System.SByte));
#endif
            unsafe
            {
                using (var f1 = new Pinner(in1.DataAccessor))
                using (var f2 = new Pinner(@out.DataAccessor))
                {
                    var d1 = (System.SByte*)f1.ptr;
                    var d2 = (System.SByte*)f2.ptr;

                    if (@out.Shape.Dimensions.Length == 1)
                    {
                        long totalOps = @out.Shape.Dimensions[0].Length;

                        long ix1 = in1.Shape.Offset;
                        long ix2 = @out.Shape.Offset;

                        long stride1 = in1.Shape.Dimensions[0].Stride;
                        long stride2 = @out.Shape.Dimensions[0].Stride;


                        if (stride1 == stride2 && ix1 == ix2)
                        {
                            //Best case, all are equal, just keep a single counter
                            for (long i = 0; i < totalOps; i++)
                            {
                                d2[ix1] = op.Op(d1[ix1]);
                                ix1 += stride1;
                            }
                        }
                        else
                        {
                            for (long i = 0; i < totalOps; i++)
                            {
                                d2[ix2] = op.Op(d1[ix1]);
                                ix1 += stride1;
                                ix2 += stride2;
                            }
                        }
                    }
                    else if (@out.Shape.Dimensions.Length == 2)
                    {
                        long opsOuter = @out.Shape.Dimensions[0].Length;
                        long opsInner = @out.Shape.Dimensions[1].Length;

                        long ix1 = in1.Shape.Offset;
                        long ix2 = @out.Shape.Offset;

                        long outerStride1 = in1.Shape.Dimensions[0].Stride;
                        long outerStride2 = @out.Shape.Dimensions[0].Stride;

                        long innerStride1 = in1.Shape.Dimensions[1].Stride;
                        long innerStride2 = @out.Shape.Dimensions[1].Stride;

                        outerStride1 -= innerStride1 * in1.Shape.Dimensions[1].Length;
                        outerStride2 -= innerStride2 * @out.Shape.Dimensions[1].Length;

                        for (long i = 0; i < opsOuter; i++)
                        {
                            for (long j = 0; j < opsInner; j++)
                            {
                                d2[ix2] = op.Op(d1[ix1]);
                                ix1 += innerStride1;
                                ix2 += innerStride2;
                            }

                            ix1 += outerStride1;
                            ix2 += outerStride2;
                        }
                    }
                    else
                    {
                        long n = in1.Shape.Dimensions.LongLength - 3;
                        long[] limits = in1.Shape.Dimensions.Where(x => n-- > 0).Select(x => x.Length).ToArray();
                        long[] counters = new long[limits.LongLength];

                        long totalOps = limits.LongLength == 0 ? 1 : limits.Aggregate<long>((a, b) => a * b);

                        //This chunck of variables are used to prevent repeated calculations of offsets
                        long dimIndex0 = 0 + limits.LongLength;
                        long dimIndex1 = 1 + limits.LongLength;
                        long dimIndex2 = 2 + limits.LongLength;

                        long opsOuter = @out.Shape.Dimensions[0 + limits.LongLength].Length;
                        long opsInner = @out.Shape.Dimensions[1 + limits.LongLength].Length;
                        long opsInnerInner = @out.Shape.Dimensions[2 + limits.LongLength].Length;

                        long outerStride1 = in1.Shape.Dimensions[dimIndex0].Stride;
                        long outerStride3 = @out.Shape.Dimensions[dimIndex0].Stride;

                        long innerStride1 = in1.Shape.Dimensions[dimIndex1].Stride;
                        long innerStride3 = @out.Shape.Dimensions[dimIndex1].Stride;

                        long innerInnerStride1 = in1.Shape.Dimensions[dimIndex2].Stride;
                        long innerInnerStride3 = @out.Shape.Dimensions[dimIndex2].Stride;

                        outerStride1 -= innerStride1 * in1.Shape.Dimensions[dimIndex1].Length;
                        outerStride3 -= innerStride3 * @out.Shape.Dimensions[dimIndex1].Length;

                        innerStride1 -= innerInnerStride1 * in1.Shape.Dimensions[dimIndex2].Length;
                        innerStride3 -= innerInnerStride3 * @out.Shape.Dimensions[dimIndex2].Length;

                        for (long outer = 0; outer < totalOps; outer++)
                        {
                            //Get the array offset for the first element in the outer dimension
                            long ix1 = in1.Shape[counters];
                            long ix3 = @out.Shape[counters];


                            for (long i = 0; i < opsOuter; i++)
                            {
                                for (long j = 0; j < opsInner; j++)
                                {
                                    for (long k = 0; k < opsInnerInner; k++)
                                    {
                                        d2[ix3] = op.Op(d1[ix1]);
                                        ix1 += innerInnerStride1;
                                        ix3 += innerInnerStride3;
                                    }

                                    ix1 += innerStride1;
                                    ix3 += innerStride3;
                                }

                                ix1 += outerStride1;
                                ix3 += outerStride3;
                            }

                            if (counters.LongLength > 0)
                            {
                                //Basically a ripple carry adder
                                long p = counters.LongLength - 1;
                                while (++counters[p] == limits[p] && p > 0)
                                {
                                    counters[p] = 0;
                                    p--;
                                }
                            }
                        }
                    }
                }
            }
        }

        /// <summary>
        /// Unsafe implementation of applying a unary operation
        /// </summary>
        /// <typeparam name="C">The type of operation to perform</typeparam>
        /// <param name="op">The operation instance</param>
        /// <param name="scalar">The input scalar argument</param>
        /// <param name="out">The output target</param>
        internal static void UFunc_Op_Inner_Unary_Scalar_Flush_SByte<C>(C op, System.SByte scalar, ref NdArray<System.SByte> @out)
            where C : IUnaryOp<System.SByte>
        {
			if (UFunc_Op_Inner_Unary_Scalar_Flush_Typed<System.SByte, System.SByte, C>(op, scalar, @out))
				return;

#if DEBUG
			Console.WriteLine("Generic Unary scalar method C for SByte, with op = {0}, Ta = {1}, Tb = {2}", op.GetType(), typeof(System.SByte), typeof(System.SByte));
#endif
            unsafe
            {
                using (var f2 = new Pinner(@out.DataAccessor))
                {
                    var d2 = (System.SByte*)f2.ptr;

                    if (@out.Shape.Dimensions.Length == 1)
                    {
                        long totalOps = @out.Shape.Dimensions[0].Length;
                        long ix2 = @out.Shape.Offset;
                        long stride2 = @out.Shape.Dimensions[0].Stride;

                        for (long i = 0; i < totalOps; i++)
                        {
                            d2[ix2] = op.Op(scalar);
                            ix2 += stride2;
                        }
                    }
                    else if (@out.Shape.Dimensions.Length == 2)
                    {
                        long opsOuter = @out.Shape.Dimensions[0].Length;
                        long opsInner = @out.Shape.Dimensions[1].Length;

                        long ix2 = @out.Shape.Offset;
                        long outerStride2 = @out.Shape.Dimensions[0].Stride;
                        long innerStride2 = @out.Shape.Dimensions[1].Stride;
                        outerStride2 -= innerStride2 * @out.Shape.Dimensions[1].Length;

                        for (long i = 0; i < opsOuter; i++)
                        {
                            for (long j = 0; j < opsInner; j++)
                            {
                                d2[ix2] = op.Op(scalar);
                                ix2 += innerStride2;
                            }

                            ix2 += outerStride2;
                        }
                    }
                    else
                    {
                        long n = @out.Shape.Dimensions.LongLength - 3;
                        long[] limits = @out.Shape.Dimensions.Where(x => n-- > 0).Select(x => x.Length).ToArray();
                        long[] counters = new long[limits.LongLength];

                        long totalOps = limits.LongLength == 0 ? 1 : limits.Aggregate<long>((a, b) => a * b);

                        //This chunck of variables are used to prevent repeated calculations of offsets
                        long dimIndex0 = 0 + limits.LongLength;
                        long dimIndex1 = 1 + limits.LongLength;
                        long dimIndex2 = 2 + limits.LongLength;

                        long opsOuter = @out.Shape.Dimensions[0 + limits.LongLength].Length;
                        long opsInner = @out.Shape.Dimensions[1 + limits.LongLength].Length;
                        long opsInnerInner = @out.Shape.Dimensions[2 + limits.LongLength].Length;

                        long outerStride3 = @out.Shape.Dimensions[dimIndex0].Stride;
                        long innerStride3 = @out.Shape.Dimensions[dimIndex1].Stride;
                        long innerInnerStride3 = @out.Shape.Dimensions[dimIndex2].Stride;
                        outerStride3 -= innerStride3 * @out.Shape.Dimensions[dimIndex1].Length;
                        innerStride3 -= innerInnerStride3 * @out.Shape.Dimensions[dimIndex2].Length;

                        for (long outer = 0; outer < totalOps; outer++)
                        {
                            //Get the array offset for the first element in the outer dimension
                            long ix3 = @out.Shape[counters];

                            for (long i = 0; i < opsOuter; i++)
                            {
                                for (long j = 0; j < opsInner; j++)
                                {
                                    for (long k = 0; k < opsInnerInner; k++)
                                    {
                                        d2[ix3] = op.Op(scalar);
                                        ix3 += innerInnerStride3;
                                    }

                                    ix3 += innerStride3;
                                }

                                ix3 += outerStride3;
                            }

                            if (counters.LongLength > 0)
                            {
                                //Basically a ripple carry adder
                                long p = counters.LongLength - 1;
                                while (++counters[p] == limits[p] && p > 0)
                                {
                                    counters[p] = 0;
                                    p--;
                                }
                            }
                        }
                    }
                }
            }
        }
        /// <summary>
        /// Unsafe implementation of applying a unary operation
        /// </summary>
        /// <typeparam name="C">The type of operation to perform</typeparam>
        /// <param name="op">The operation instance</param>
        /// <param name="in1">The input argument</param>
        /// <param name="out">The output target</param>
        internal static void UFunc_Op_Inner_Unary_Flush_Byte<C>(C op, NdArray<System.Byte> in1, ref NdArray<System.Byte> @out)
            where C : IUnaryOp<System.Byte>
        {
			if (UFunc_Op_Inner_Unary_Flush_Typed<System.Byte, System.Byte, C>(op, in1, @out))
				return;

#if DEBUG
			Console.WriteLine("Generic Unary method C for Byte, with op = {0}, Ta = {1}, Tb = {2}", op.GetType(), typeof(System.Byte), typeof(System.Byte));
#endif
            unsafe
            {
                using (var f1 = new Pinner(in1.DataAccessor))
                using (var f2 = new Pinner(@out.DataAccessor))
                {
                    var d1 = (System.Byte*)f1.ptr;
                    var d2 = (System.Byte*)f2.ptr;

                    if (@out.Shape.Dimensions.Length == 1)
                    {
                        long totalOps = @out.Shape.Dimensions[0].Length;

                        long ix1 = in1.Shape.Offset;
                        long ix2 = @out.Shape.Offset;

                        long stride1 = in1.Shape.Dimensions[0].Stride;
                        long stride2 = @out.Shape.Dimensions[0].Stride;


                        if (stride1 == stride2 && ix1 == ix2)
                        {
                            //Best case, all are equal, just keep a single counter
                            for (long i = 0; i < totalOps; i++)
                            {
                                d2[ix1] = op.Op(d1[ix1]);
                                ix1 += stride1;
                            }
                        }
                        else
                        {
                            for (long i = 0; i < totalOps; i++)
                            {
                                d2[ix2] = op.Op(d1[ix1]);
                                ix1 += stride1;
                                ix2 += stride2;
                            }
                        }
                    }
                    else if (@out.Shape.Dimensions.Length == 2)
                    {
                        long opsOuter = @out.Shape.Dimensions[0].Length;
                        long opsInner = @out.Shape.Dimensions[1].Length;

                        long ix1 = in1.Shape.Offset;
                        long ix2 = @out.Shape.Offset;

                        long outerStride1 = in1.Shape.Dimensions[0].Stride;
                        long outerStride2 = @out.Shape.Dimensions[0].Stride;

                        long innerStride1 = in1.Shape.Dimensions[1].Stride;
                        long innerStride2 = @out.Shape.Dimensions[1].Stride;

                        outerStride1 -= innerStride1 * in1.Shape.Dimensions[1].Length;
                        outerStride2 -= innerStride2 * @out.Shape.Dimensions[1].Length;

                        for (long i = 0; i < opsOuter; i++)
                        {
                            for (long j = 0; j < opsInner; j++)
                            {
                                d2[ix2] = op.Op(d1[ix1]);
                                ix1 += innerStride1;
                                ix2 += innerStride2;
                            }

                            ix1 += outerStride1;
                            ix2 += outerStride2;
                        }
                    }
                    else
                    {
                        long n = in1.Shape.Dimensions.LongLength - 3;
                        long[] limits = in1.Shape.Dimensions.Where(x => n-- > 0).Select(x => x.Length).ToArray();
                        long[] counters = new long[limits.LongLength];

                        long totalOps = limits.LongLength == 0 ? 1 : limits.Aggregate<long>((a, b) => a * b);

                        //This chunck of variables are used to prevent repeated calculations of offsets
                        long dimIndex0 = 0 + limits.LongLength;
                        long dimIndex1 = 1 + limits.LongLength;
                        long dimIndex2 = 2 + limits.LongLength;

                        long opsOuter = @out.Shape.Dimensions[0 + limits.LongLength].Length;
                        long opsInner = @out.Shape.Dimensions[1 + limits.LongLength].Length;
                        long opsInnerInner = @out.Shape.Dimensions[2 + limits.LongLength].Length;

                        long outerStride1 = in1.Shape.Dimensions[dimIndex0].Stride;
                        long outerStride3 = @out.Shape.Dimensions[dimIndex0].Stride;

                        long innerStride1 = in1.Shape.Dimensions[dimIndex1].Stride;
                        long innerStride3 = @out.Shape.Dimensions[dimIndex1].Stride;

                        long innerInnerStride1 = in1.Shape.Dimensions[dimIndex2].Stride;
                        long innerInnerStride3 = @out.Shape.Dimensions[dimIndex2].Stride;

                        outerStride1 -= innerStride1 * in1.Shape.Dimensions[dimIndex1].Length;
                        outerStride3 -= innerStride3 * @out.Shape.Dimensions[dimIndex1].Length;

                        innerStride1 -= innerInnerStride1 * in1.Shape.Dimensions[dimIndex2].Length;
                        innerStride3 -= innerInnerStride3 * @out.Shape.Dimensions[dimIndex2].Length;

                        for (long outer = 0; outer < totalOps; outer++)
                        {
                            //Get the array offset for the first element in the outer dimension
                            long ix1 = in1.Shape[counters];
                            long ix3 = @out.Shape[counters];


                            for (long i = 0; i < opsOuter; i++)
                            {
                                for (long j = 0; j < opsInner; j++)
                                {
                                    for (long k = 0; k < opsInnerInner; k++)
                                    {
                                        d2[ix3] = op.Op(d1[ix1]);
                                        ix1 += innerInnerStride1;
                                        ix3 += innerInnerStride3;
                                    }

                                    ix1 += innerStride1;
                                    ix3 += innerStride3;
                                }

                                ix1 += outerStride1;
                                ix3 += outerStride3;
                            }

                            if (counters.LongLength > 0)
                            {
                                //Basically a ripple carry adder
                                long p = counters.LongLength - 1;
                                while (++counters[p] == limits[p] && p > 0)
                                {
                                    counters[p] = 0;
                                    p--;
                                }
                            }
                        }
                    }
                }
            }
        }

        /// <summary>
        /// Unsafe implementation of applying a unary operation
        /// </summary>
        /// <typeparam name="C">The type of operation to perform</typeparam>
        /// <param name="op">The operation instance</param>
        /// <param name="scalar">The input scalar argument</param>
        /// <param name="out">The output target</param>
        internal static void UFunc_Op_Inner_Unary_Scalar_Flush_Byte<C>(C op, System.Byte scalar, ref NdArray<System.Byte> @out)
            where C : IUnaryOp<System.Byte>
        {
			if (UFunc_Op_Inner_Unary_Scalar_Flush_Typed<System.Byte, System.Byte, C>(op, scalar, @out))
				return;

#if DEBUG
			Console.WriteLine("Generic Unary scalar method C for Byte, with op = {0}, Ta = {1}, Tb = {2}", op.GetType(), typeof(System.Byte), typeof(System.Byte));
#endif
            unsafe
            {
                using (var f2 = new Pinner(@out.DataAccessor))
                {
                    var d2 = (System.Byte*)f2.ptr;

                    if (@out.Shape.Dimensions.Length == 1)
                    {
                        long totalOps = @out.Shape.Dimensions[0].Length;
                        long ix2 = @out.Shape.Offset;
                        long stride2 = @out.Shape.Dimensions[0].Stride;

                        for (long i = 0; i < totalOps; i++)
                        {
                            d2[ix2] = op.Op(scalar);
                            ix2 += stride2;
                        }
                    }
                    else if (@out.Shape.Dimensions.Length == 2)
                    {
                        long opsOuter = @out.Shape.Dimensions[0].Length;
                        long opsInner = @out.Shape.Dimensions[1].Length;

                        long ix2 = @out.Shape.Offset;
                        long outerStride2 = @out.Shape.Dimensions[0].Stride;
                        long innerStride2 = @out.Shape.Dimensions[1].Stride;
                        outerStride2 -= innerStride2 * @out.Shape.Dimensions[1].Length;

                        for (long i = 0; i < opsOuter; i++)
                        {
                            for (long j = 0; j < opsInner; j++)
                            {
                                d2[ix2] = op.Op(scalar);
                                ix2 += innerStride2;
                            }

                            ix2 += outerStride2;
                        }
                    }
                    else
                    {
                        long n = @out.Shape.Dimensions.LongLength - 3;
                        long[] limits = @out.Shape.Dimensions.Where(x => n-- > 0).Select(x => x.Length).ToArray();
                        long[] counters = new long[limits.LongLength];

                        long totalOps = limits.LongLength == 0 ? 1 : limits.Aggregate<long>((a, b) => a * b);

                        //This chunck of variables are used to prevent repeated calculations of offsets
                        long dimIndex0 = 0 + limits.LongLength;
                        long dimIndex1 = 1 + limits.LongLength;
                        long dimIndex2 = 2 + limits.LongLength;

                        long opsOuter = @out.Shape.Dimensions[0 + limits.LongLength].Length;
                        long opsInner = @out.Shape.Dimensions[1 + limits.LongLength].Length;
                        long opsInnerInner = @out.Shape.Dimensions[2 + limits.LongLength].Length;

                        long outerStride3 = @out.Shape.Dimensions[dimIndex0].Stride;
                        long innerStride3 = @out.Shape.Dimensions[dimIndex1].Stride;
                        long innerInnerStride3 = @out.Shape.Dimensions[dimIndex2].Stride;
                        outerStride3 -= innerStride3 * @out.Shape.Dimensions[dimIndex1].Length;
                        innerStride3 -= innerInnerStride3 * @out.Shape.Dimensions[dimIndex2].Length;

                        for (long outer = 0; outer < totalOps; outer++)
                        {
                            //Get the array offset for the first element in the outer dimension
                            long ix3 = @out.Shape[counters];

                            for (long i = 0; i < opsOuter; i++)
                            {
                                for (long j = 0; j < opsInner; j++)
                                {
                                    for (long k = 0; k < opsInnerInner; k++)
                                    {
                                        d2[ix3] = op.Op(scalar);
                                        ix3 += innerInnerStride3;
                                    }

                                    ix3 += innerStride3;
                                }

                                ix3 += outerStride3;
                            }

                            if (counters.LongLength > 0)
                            {
                                //Basically a ripple carry adder
                                long p = counters.LongLength - 1;
                                while (++counters[p] == limits[p] && p > 0)
                                {
                                    counters[p] = 0;
                                    p--;
                                }
                            }
                        }
                    }
                }
            }
        }
        /// <summary>
        /// Unsafe implementation of applying a unary operation
        /// </summary>
        /// <typeparam name="C">The type of operation to perform</typeparam>
        /// <param name="op">The operation instance</param>
        /// <param name="in1">The input argument</param>
        /// <param name="out">The output target</param>
        internal static void UFunc_Op_Inner_Unary_Flush_Int16<C>(C op, NdArray<System.Int16> in1, ref NdArray<System.Int16> @out)
            where C : IUnaryOp<System.Int16>
        {
			if (UFunc_Op_Inner_Unary_Flush_Typed<System.Int16, System.Int16, C>(op, in1, @out))
				return;

#if DEBUG
			Console.WriteLine("Generic Unary method C for Int16, with op = {0}, Ta = {1}, Tb = {2}", op.GetType(), typeof(System.Int16), typeof(System.Int16));
#endif
            unsafe
            {
                using (var f1 = new Pinner(in1.DataAccessor))
                using (var f2 = new Pinner(@out.DataAccessor))
                {
                    var d1 = (System.Int16*)f1.ptr;
                    var d2 = (System.Int16*)f2.ptr;

                    if (@out.Shape.Dimensions.Length == 1)
                    {
                        long totalOps = @out.Shape.Dimensions[0].Length;

                        long ix1 = in1.Shape.Offset;
                        long ix2 = @out.Shape.Offset;

                        long stride1 = in1.Shape.Dimensions[0].Stride;
                        long stride2 = @out.Shape.Dimensions[0].Stride;


                        if (stride1 == stride2 && ix1 == ix2)
                        {
                            //Best case, all are equal, just keep a single counter
                            for (long i = 0; i < totalOps; i++)
                            {
                                d2[ix1] = op.Op(d1[ix1]);
                                ix1 += stride1;
                            }
                        }
                        else
                        {
                            for (long i = 0; i < totalOps; i++)
                            {
                                d2[ix2] = op.Op(d1[ix1]);
                                ix1 += stride1;
                                ix2 += stride2;
                            }
                        }
                    }
                    else if (@out.Shape.Dimensions.Length == 2)
                    {
                        long opsOuter = @out.Shape.Dimensions[0].Length;
                        long opsInner = @out.Shape.Dimensions[1].Length;

                        long ix1 = in1.Shape.Offset;
                        long ix2 = @out.Shape.Offset;

                        long outerStride1 = in1.Shape.Dimensions[0].Stride;
                        long outerStride2 = @out.Shape.Dimensions[0].Stride;

                        long innerStride1 = in1.Shape.Dimensions[1].Stride;
                        long innerStride2 = @out.Shape.Dimensions[1].Stride;

                        outerStride1 -= innerStride1 * in1.Shape.Dimensions[1].Length;
                        outerStride2 -= innerStride2 * @out.Shape.Dimensions[1].Length;

                        for (long i = 0; i < opsOuter; i++)
                        {
                            for (long j = 0; j < opsInner; j++)
                            {
                                d2[ix2] = op.Op(d1[ix1]);
                                ix1 += innerStride1;
                                ix2 += innerStride2;
                            }

                            ix1 += outerStride1;
                            ix2 += outerStride2;
                        }
                    }
                    else
                    {
                        long n = in1.Shape.Dimensions.LongLength - 3;
                        long[] limits = in1.Shape.Dimensions.Where(x => n-- > 0).Select(x => x.Length).ToArray();
                        long[] counters = new long[limits.LongLength];

                        long totalOps = limits.LongLength == 0 ? 1 : limits.Aggregate<long>((a, b) => a * b);

                        //This chunck of variables are used to prevent repeated calculations of offsets
                        long dimIndex0 = 0 + limits.LongLength;
                        long dimIndex1 = 1 + limits.LongLength;
                        long dimIndex2 = 2 + limits.LongLength;

                        long opsOuter = @out.Shape.Dimensions[0 + limits.LongLength].Length;
                        long opsInner = @out.Shape.Dimensions[1 + limits.LongLength].Length;
                        long opsInnerInner = @out.Shape.Dimensions[2 + limits.LongLength].Length;

                        long outerStride1 = in1.Shape.Dimensions[dimIndex0].Stride;
                        long outerStride3 = @out.Shape.Dimensions[dimIndex0].Stride;

                        long innerStride1 = in1.Shape.Dimensions[dimIndex1].Stride;
                        long innerStride3 = @out.Shape.Dimensions[dimIndex1].Stride;

                        long innerInnerStride1 = in1.Shape.Dimensions[dimIndex2].Stride;
                        long innerInnerStride3 = @out.Shape.Dimensions[dimIndex2].Stride;

                        outerStride1 -= innerStride1 * in1.Shape.Dimensions[dimIndex1].Length;
                        outerStride3 -= innerStride3 * @out.Shape.Dimensions[dimIndex1].Length;

                        innerStride1 -= innerInnerStride1 * in1.Shape.Dimensions[dimIndex2].Length;
                        innerStride3 -= innerInnerStride3 * @out.Shape.Dimensions[dimIndex2].Length;

                        for (long outer = 0; outer < totalOps; outer++)
                        {
                            //Get the array offset for the first element in the outer dimension
                            long ix1 = in1.Shape[counters];
                            long ix3 = @out.Shape[counters];


                            for (long i = 0; i < opsOuter; i++)
                            {
                                for (long j = 0; j < opsInner; j++)
                                {
                                    for (long k = 0; k < opsInnerInner; k++)
                                    {
                                        d2[ix3] = op.Op(d1[ix1]);
                                        ix1 += innerInnerStride1;
                                        ix3 += innerInnerStride3;
                                    }

                                    ix1 += innerStride1;
                                    ix3 += innerStride3;
                                }

                                ix1 += outerStride1;
                                ix3 += outerStride3;
                            }

                            if (counters.LongLength > 0)
                            {
                                //Basically a ripple carry adder
                                long p = counters.LongLength - 1;
                                while (++counters[p] == limits[p] && p > 0)
                                {
                                    counters[p] = 0;
                                    p--;
                                }
                            }
                        }
                    }
                }
            }
        }

        /// <summary>
        /// Unsafe implementation of applying a unary operation
        /// </summary>
        /// <typeparam name="C">The type of operation to perform</typeparam>
        /// <param name="op">The operation instance</param>
        /// <param name="scalar">The input scalar argument</param>
        /// <param name="out">The output target</param>
        internal static void UFunc_Op_Inner_Unary_Scalar_Flush_Int16<C>(C op, System.Int16 scalar, ref NdArray<System.Int16> @out)
            where C : IUnaryOp<System.Int16>
        {
			if (UFunc_Op_Inner_Unary_Scalar_Flush_Typed<System.Int16, System.Int16, C>(op, scalar, @out))
				return;

#if DEBUG
			Console.WriteLine("Generic Unary scalar method C for Int16, with op = {0}, Ta = {1}, Tb = {2}", op.GetType(), typeof(System.Int16), typeof(System.Int16));
#endif
            unsafe
            {
                using (var f2 = new Pinner(@out.DataAccessor))
                {
                    var d2 = (System.Int16*)f2.ptr;

                    if (@out.Shape.Dimensions.Length == 1)
                    {
                        long totalOps = @out.Shape.Dimensions[0].Length;
                        long ix2 = @out.Shape.Offset;
                        long stride2 = @out.Shape.Dimensions[0].Stride;

                        for (long i = 0; i < totalOps; i++)
                        {
                            d2[ix2] = op.Op(scalar);
                            ix2 += stride2;
                        }
                    }
                    else if (@out.Shape.Dimensions.Length == 2)
                    {
                        long opsOuter = @out.Shape.Dimensions[0].Length;
                        long opsInner = @out.Shape.Dimensions[1].Length;

                        long ix2 = @out.Shape.Offset;
                        long outerStride2 = @out.Shape.Dimensions[0].Stride;
                        long innerStride2 = @out.Shape.Dimensions[1].Stride;
                        outerStride2 -= innerStride2 * @out.Shape.Dimensions[1].Length;

                        for (long i = 0; i < opsOuter; i++)
                        {
                            for (long j = 0; j < opsInner; j++)
                            {
                                d2[ix2] = op.Op(scalar);
                                ix2 += innerStride2;
                            }

                            ix2 += outerStride2;
                        }
                    }
                    else
                    {
                        long n = @out.Shape.Dimensions.LongLength - 3;
                        long[] limits = @out.Shape.Dimensions.Where(x => n-- > 0).Select(x => x.Length).ToArray();
                        long[] counters = new long[limits.LongLength];

                        long totalOps = limits.LongLength == 0 ? 1 : limits.Aggregate<long>((a, b) => a * b);

                        //This chunck of variables are used to prevent repeated calculations of offsets
                        long dimIndex0 = 0 + limits.LongLength;
                        long dimIndex1 = 1 + limits.LongLength;
                        long dimIndex2 = 2 + limits.LongLength;

                        long opsOuter = @out.Shape.Dimensions[0 + limits.LongLength].Length;
                        long opsInner = @out.Shape.Dimensions[1 + limits.LongLength].Length;
                        long opsInnerInner = @out.Shape.Dimensions[2 + limits.LongLength].Length;

                        long outerStride3 = @out.Shape.Dimensions[dimIndex0].Stride;
                        long innerStride3 = @out.Shape.Dimensions[dimIndex1].Stride;
                        long innerInnerStride3 = @out.Shape.Dimensions[dimIndex2].Stride;
                        outerStride3 -= innerStride3 * @out.Shape.Dimensions[dimIndex1].Length;
                        innerStride3 -= innerInnerStride3 * @out.Shape.Dimensions[dimIndex2].Length;

                        for (long outer = 0; outer < totalOps; outer++)
                        {
                            //Get the array offset for the first element in the outer dimension
                            long ix3 = @out.Shape[counters];

                            for (long i = 0; i < opsOuter; i++)
                            {
                                for (long j = 0; j < opsInner; j++)
                                {
                                    for (long k = 0; k < opsInnerInner; k++)
                                    {
                                        d2[ix3] = op.Op(scalar);
                                        ix3 += innerInnerStride3;
                                    }

                                    ix3 += innerStride3;
                                }

                                ix3 += outerStride3;
                            }

                            if (counters.LongLength > 0)
                            {
                                //Basically a ripple carry adder
                                long p = counters.LongLength - 1;
                                while (++counters[p] == limits[p] && p > 0)
                                {
                                    counters[p] = 0;
                                    p--;
                                }
                            }
                        }
                    }
                }
            }
        }
        /// <summary>
        /// Unsafe implementation of applying a unary operation
        /// </summary>
        /// <typeparam name="C">The type of operation to perform</typeparam>
        /// <param name="op">The operation instance</param>
        /// <param name="in1">The input argument</param>
        /// <param name="out">The output target</param>
        internal static void UFunc_Op_Inner_Unary_Flush_UInt16<C>(C op, NdArray<System.UInt16> in1, ref NdArray<System.UInt16> @out)
            where C : IUnaryOp<System.UInt16>
        {
			if (UFunc_Op_Inner_Unary_Flush_Typed<System.UInt16, System.UInt16, C>(op, in1, @out))
				return;

#if DEBUG
			Console.WriteLine("Generic Unary method C for UInt16, with op = {0}, Ta = {1}, Tb = {2}", op.GetType(), typeof(System.UInt16), typeof(System.UInt16));
#endif
            unsafe
            {
                using (var f1 = new Pinner(in1.DataAccessor))
                using (var f2 = new Pinner(@out.DataAccessor))
                {
                    var d1 = (System.UInt16*)f1.ptr;
                    var d2 = (System.UInt16*)f2.ptr;

                    if (@out.Shape.Dimensions.Length == 1)
                    {
                        long totalOps = @out.Shape.Dimensions[0].Length;

                        long ix1 = in1.Shape.Offset;
                        long ix2 = @out.Shape.Offset;

                        long stride1 = in1.Shape.Dimensions[0].Stride;
                        long stride2 = @out.Shape.Dimensions[0].Stride;


                        if (stride1 == stride2 && ix1 == ix2)
                        {
                            //Best case, all are equal, just keep a single counter
                            for (long i = 0; i < totalOps; i++)
                            {
                                d2[ix1] = op.Op(d1[ix1]);
                                ix1 += stride1;
                            }
                        }
                        else
                        {
                            for (long i = 0; i < totalOps; i++)
                            {
                                d2[ix2] = op.Op(d1[ix1]);
                                ix1 += stride1;
                                ix2 += stride2;
                            }
                        }
                    }
                    else if (@out.Shape.Dimensions.Length == 2)
                    {
                        long opsOuter = @out.Shape.Dimensions[0].Length;
                        long opsInner = @out.Shape.Dimensions[1].Length;

                        long ix1 = in1.Shape.Offset;
                        long ix2 = @out.Shape.Offset;

                        long outerStride1 = in1.Shape.Dimensions[0].Stride;
                        long outerStride2 = @out.Shape.Dimensions[0].Stride;

                        long innerStride1 = in1.Shape.Dimensions[1].Stride;
                        long innerStride2 = @out.Shape.Dimensions[1].Stride;

                        outerStride1 -= innerStride1 * in1.Shape.Dimensions[1].Length;
                        outerStride2 -= innerStride2 * @out.Shape.Dimensions[1].Length;

                        for (long i = 0; i < opsOuter; i++)
                        {
                            for (long j = 0; j < opsInner; j++)
                            {
                                d2[ix2] = op.Op(d1[ix1]);
                                ix1 += innerStride1;
                                ix2 += innerStride2;
                            }

                            ix1 += outerStride1;
                            ix2 += outerStride2;
                        }
                    }
                    else
                    {
                        long n = in1.Shape.Dimensions.LongLength - 3;
                        long[] limits = in1.Shape.Dimensions.Where(x => n-- > 0).Select(x => x.Length).ToArray();
                        long[] counters = new long[limits.LongLength];

                        long totalOps = limits.LongLength == 0 ? 1 : limits.Aggregate<long>((a, b) => a * b);

                        //This chunck of variables are used to prevent repeated calculations of offsets
                        long dimIndex0 = 0 + limits.LongLength;
                        long dimIndex1 = 1 + limits.LongLength;
                        long dimIndex2 = 2 + limits.LongLength;

                        long opsOuter = @out.Shape.Dimensions[0 + limits.LongLength].Length;
                        long opsInner = @out.Shape.Dimensions[1 + limits.LongLength].Length;
                        long opsInnerInner = @out.Shape.Dimensions[2 + limits.LongLength].Length;

                        long outerStride1 = in1.Shape.Dimensions[dimIndex0].Stride;
                        long outerStride3 = @out.Shape.Dimensions[dimIndex0].Stride;

                        long innerStride1 = in1.Shape.Dimensions[dimIndex1].Stride;
                        long innerStride3 = @out.Shape.Dimensions[dimIndex1].Stride;

                        long innerInnerStride1 = in1.Shape.Dimensions[dimIndex2].Stride;
                        long innerInnerStride3 = @out.Shape.Dimensions[dimIndex2].Stride;

                        outerStride1 -= innerStride1 * in1.Shape.Dimensions[dimIndex1].Length;
                        outerStride3 -= innerStride3 * @out.Shape.Dimensions[dimIndex1].Length;

                        innerStride1 -= innerInnerStride1 * in1.Shape.Dimensions[dimIndex2].Length;
                        innerStride3 -= innerInnerStride3 * @out.Shape.Dimensions[dimIndex2].Length;

                        for (long outer = 0; outer < totalOps; outer++)
                        {
                            //Get the array offset for the first element in the outer dimension
                            long ix1 = in1.Shape[counters];
                            long ix3 = @out.Shape[counters];


                            for (long i = 0; i < opsOuter; i++)
                            {
                                for (long j = 0; j < opsInner; j++)
                                {
                                    for (long k = 0; k < opsInnerInner; k++)
                                    {
                                        d2[ix3] = op.Op(d1[ix1]);
                                        ix1 += innerInnerStride1;
                                        ix3 += innerInnerStride3;
                                    }

                                    ix1 += innerStride1;
                                    ix3 += innerStride3;
                                }

                                ix1 += outerStride1;
                                ix3 += outerStride3;
                            }

                            if (counters.LongLength > 0)
                            {
                                //Basically a ripple carry adder
                                long p = counters.LongLength - 1;
                                while (++counters[p] == limits[p] && p > 0)
                                {
                                    counters[p] = 0;
                                    p--;
                                }
                            }
                        }
                    }
                }
            }
        }

        /// <summary>
        /// Unsafe implementation of applying a unary operation
        /// </summary>
        /// <typeparam name="C">The type of operation to perform</typeparam>
        /// <param name="op">The operation instance</param>
        /// <param name="scalar">The input scalar argument</param>
        /// <param name="out">The output target</param>
        internal static void UFunc_Op_Inner_Unary_Scalar_Flush_UInt16<C>(C op, System.UInt16 scalar, ref NdArray<System.UInt16> @out)
            where C : IUnaryOp<System.UInt16>
        {
			if (UFunc_Op_Inner_Unary_Scalar_Flush_Typed<System.UInt16, System.UInt16, C>(op, scalar, @out))
				return;

#if DEBUG
			Console.WriteLine("Generic Unary scalar method C for UInt16, with op = {0}, Ta = {1}, Tb = {2}", op.GetType(), typeof(System.UInt16), typeof(System.UInt16));
#endif
            unsafe
            {
                using (var f2 = new Pinner(@out.DataAccessor))
                {
                    var d2 = (System.UInt16*)f2.ptr;

                    if (@out.Shape.Dimensions.Length == 1)
                    {
                        long totalOps = @out.Shape.Dimensions[0].Length;
                        long ix2 = @out.Shape.Offset;
                        long stride2 = @out.Shape.Dimensions[0].Stride;

                        for (long i = 0; i < totalOps; i++)
                        {
                            d2[ix2] = op.Op(scalar);
                            ix2 += stride2;
                        }
                    }
                    else if (@out.Shape.Dimensions.Length == 2)
                    {
                        long opsOuter = @out.Shape.Dimensions[0].Length;
                        long opsInner = @out.Shape.Dimensions[1].Length;

                        long ix2 = @out.Shape.Offset;
                        long outerStride2 = @out.Shape.Dimensions[0].Stride;
                        long innerStride2 = @out.Shape.Dimensions[1].Stride;
                        outerStride2 -= innerStride2 * @out.Shape.Dimensions[1].Length;

                        for (long i = 0; i < opsOuter; i++)
                        {
                            for (long j = 0; j < opsInner; j++)
                            {
                                d2[ix2] = op.Op(scalar);
                                ix2 += innerStride2;
                            }

                            ix2 += outerStride2;
                        }
                    }
                    else
                    {
                        long n = @out.Shape.Dimensions.LongLength - 3;
                        long[] limits = @out.Shape.Dimensions.Where(x => n-- > 0).Select(x => x.Length).ToArray();
                        long[] counters = new long[limits.LongLength];

                        long totalOps = limits.LongLength == 0 ? 1 : limits.Aggregate<long>((a, b) => a * b);

                        //This chunck of variables are used to prevent repeated calculations of offsets
                        long dimIndex0 = 0 + limits.LongLength;
                        long dimIndex1 = 1 + limits.LongLength;
                        long dimIndex2 = 2 + limits.LongLength;

                        long opsOuter = @out.Shape.Dimensions[0 + limits.LongLength].Length;
                        long opsInner = @out.Shape.Dimensions[1 + limits.LongLength].Length;
                        long opsInnerInner = @out.Shape.Dimensions[2 + limits.LongLength].Length;

                        long outerStride3 = @out.Shape.Dimensions[dimIndex0].Stride;
                        long innerStride3 = @out.Shape.Dimensions[dimIndex1].Stride;
                        long innerInnerStride3 = @out.Shape.Dimensions[dimIndex2].Stride;
                        outerStride3 -= innerStride3 * @out.Shape.Dimensions[dimIndex1].Length;
                        innerStride3 -= innerInnerStride3 * @out.Shape.Dimensions[dimIndex2].Length;

                        for (long outer = 0; outer < totalOps; outer++)
                        {
                            //Get the array offset for the first element in the outer dimension
                            long ix3 = @out.Shape[counters];

                            for (long i = 0; i < opsOuter; i++)
                            {
                                for (long j = 0; j < opsInner; j++)
                                {
                                    for (long k = 0; k < opsInnerInner; k++)
                                    {
                                        d2[ix3] = op.Op(scalar);
                                        ix3 += innerInnerStride3;
                                    }

                                    ix3 += innerStride3;
                                }

                                ix3 += outerStride3;
                            }

                            if (counters.LongLength > 0)
                            {
                                //Basically a ripple carry adder
                                long p = counters.LongLength - 1;
                                while (++counters[p] == limits[p] && p > 0)
                                {
                                    counters[p] = 0;
                                    p--;
                                }
                            }
                        }
                    }
                }
            }
        }
        /// <summary>
        /// Unsafe implementation of applying a unary operation
        /// </summary>
        /// <typeparam name="C">The type of operation to perform</typeparam>
        /// <param name="op">The operation instance</param>
        /// <param name="in1">The input argument</param>
        /// <param name="out">The output target</param>
        internal static void UFunc_Op_Inner_Unary_Flush_Int32<C>(C op, NdArray<System.Int32> in1, ref NdArray<System.Int32> @out)
            where C : IUnaryOp<System.Int32>
        {
			if (UFunc_Op_Inner_Unary_Flush_Typed<System.Int32, System.Int32, C>(op, in1, @out))
				return;

#if DEBUG
			Console.WriteLine("Generic Unary method C for Int32, with op = {0}, Ta = {1}, Tb = {2}", op.GetType(), typeof(System.Int32), typeof(System.Int32));
#endif
            unsafe
            {
                using (var f1 = new Pinner(in1.DataAccessor))
                using (var f2 = new Pinner(@out.DataAccessor))
                {
                    var d1 = (System.Int32*)f1.ptr;
                    var d2 = (System.Int32*)f2.ptr;

                    if (@out.Shape.Dimensions.Length == 1)
                    {
                        long totalOps = @out.Shape.Dimensions[0].Length;

                        long ix1 = in1.Shape.Offset;
                        long ix2 = @out.Shape.Offset;

                        long stride1 = in1.Shape.Dimensions[0].Stride;
                        long stride2 = @out.Shape.Dimensions[0].Stride;


                        if (stride1 == stride2 && ix1 == ix2)
                        {
                            //Best case, all are equal, just keep a single counter
                            for (long i = 0; i < totalOps; i++)
                            {
                                d2[ix1] = op.Op(d1[ix1]);
                                ix1 += stride1;
                            }
                        }
                        else
                        {
                            for (long i = 0; i < totalOps; i++)
                            {
                                d2[ix2] = op.Op(d1[ix1]);
                                ix1 += stride1;
                                ix2 += stride2;
                            }
                        }
                    }
                    else if (@out.Shape.Dimensions.Length == 2)
                    {
                        long opsOuter = @out.Shape.Dimensions[0].Length;
                        long opsInner = @out.Shape.Dimensions[1].Length;

                        long ix1 = in1.Shape.Offset;
                        long ix2 = @out.Shape.Offset;

                        long outerStride1 = in1.Shape.Dimensions[0].Stride;
                        long outerStride2 = @out.Shape.Dimensions[0].Stride;

                        long innerStride1 = in1.Shape.Dimensions[1].Stride;
                        long innerStride2 = @out.Shape.Dimensions[1].Stride;

                        outerStride1 -= innerStride1 * in1.Shape.Dimensions[1].Length;
                        outerStride2 -= innerStride2 * @out.Shape.Dimensions[1].Length;

                        for (long i = 0; i < opsOuter; i++)
                        {
                            for (long j = 0; j < opsInner; j++)
                            {
                                d2[ix2] = op.Op(d1[ix1]);
                                ix1 += innerStride1;
                                ix2 += innerStride2;
                            }

                            ix1 += outerStride1;
                            ix2 += outerStride2;
                        }
                    }
                    else
                    {
                        long n = in1.Shape.Dimensions.LongLength - 3;
                        long[] limits = in1.Shape.Dimensions.Where(x => n-- > 0).Select(x => x.Length).ToArray();
                        long[] counters = new long[limits.LongLength];

                        long totalOps = limits.LongLength == 0 ? 1 : limits.Aggregate<long>((a, b) => a * b);

                        //This chunck of variables are used to prevent repeated calculations of offsets
                        long dimIndex0 = 0 + limits.LongLength;
                        long dimIndex1 = 1 + limits.LongLength;
                        long dimIndex2 = 2 + limits.LongLength;

                        long opsOuter = @out.Shape.Dimensions[0 + limits.LongLength].Length;
                        long opsInner = @out.Shape.Dimensions[1 + limits.LongLength].Length;
                        long opsInnerInner = @out.Shape.Dimensions[2 + limits.LongLength].Length;

                        long outerStride1 = in1.Shape.Dimensions[dimIndex0].Stride;
                        long outerStride3 = @out.Shape.Dimensions[dimIndex0].Stride;

                        long innerStride1 = in1.Shape.Dimensions[dimIndex1].Stride;
                        long innerStride3 = @out.Shape.Dimensions[dimIndex1].Stride;

                        long innerInnerStride1 = in1.Shape.Dimensions[dimIndex2].Stride;
                        long innerInnerStride3 = @out.Shape.Dimensions[dimIndex2].Stride;

                        outerStride1 -= innerStride1 * in1.Shape.Dimensions[dimIndex1].Length;
                        outerStride3 -= innerStride3 * @out.Shape.Dimensions[dimIndex1].Length;

                        innerStride1 -= innerInnerStride1 * in1.Shape.Dimensions[dimIndex2].Length;
                        innerStride3 -= innerInnerStride3 * @out.Shape.Dimensions[dimIndex2].Length;

                        for (long outer = 0; outer < totalOps; outer++)
                        {
                            //Get the array offset for the first element in the outer dimension
                            long ix1 = in1.Shape[counters];
                            long ix3 = @out.Shape[counters];


                            for (long i = 0; i < opsOuter; i++)
                            {
                                for (long j = 0; j < opsInner; j++)
                                {
                                    for (long k = 0; k < opsInnerInner; k++)
                                    {
                                        d2[ix3] = op.Op(d1[ix1]);
                                        ix1 += innerInnerStride1;
                                        ix3 += innerInnerStride3;
                                    }

                                    ix1 += innerStride1;
                                    ix3 += innerStride3;
                                }

                                ix1 += outerStride1;
                                ix3 += outerStride3;
                            }

                            if (counters.LongLength > 0)
                            {
                                //Basically a ripple carry adder
                                long p = counters.LongLength - 1;
                                while (++counters[p] == limits[p] && p > 0)
                                {
                                    counters[p] = 0;
                                    p--;
                                }
                            }
                        }
                    }
                }
            }
        }

        /// <summary>
        /// Unsafe implementation of applying a unary operation
        /// </summary>
        /// <typeparam name="C">The type of operation to perform</typeparam>
        /// <param name="op">The operation instance</param>
        /// <param name="scalar">The input scalar argument</param>
        /// <param name="out">The output target</param>
        internal static void UFunc_Op_Inner_Unary_Scalar_Flush_Int32<C>(C op, System.Int32 scalar, ref NdArray<System.Int32> @out)
            where C : IUnaryOp<System.Int32>
        {
			if (UFunc_Op_Inner_Unary_Scalar_Flush_Typed<System.Int32, System.Int32, C>(op, scalar, @out))
				return;

#if DEBUG
			Console.WriteLine("Generic Unary scalar method C for Int32, with op = {0}, Ta = {1}, Tb = {2}", op.GetType(), typeof(System.Int32), typeof(System.Int32));
#endif
            unsafe
            {
                using (var f2 = new Pinner(@out.DataAccessor))
                {
                    var d2 = (System.Int32*)f2.ptr;

                    if (@out.Shape.Dimensions.Length == 1)
                    {
                        long totalOps = @out.Shape.Dimensions[0].Length;
                        long ix2 = @out.Shape.Offset;
                        long stride2 = @out.Shape.Dimensions[0].Stride;

                        for (long i = 0; i < totalOps; i++)
                        {
                            d2[ix2] = op.Op(scalar);
                            ix2 += stride2;
                        }
                    }
                    else if (@out.Shape.Dimensions.Length == 2)
                    {
                        long opsOuter = @out.Shape.Dimensions[0].Length;
                        long opsInner = @out.Shape.Dimensions[1].Length;

                        long ix2 = @out.Shape.Offset;
                        long outerStride2 = @out.Shape.Dimensions[0].Stride;
                        long innerStride2 = @out.Shape.Dimensions[1].Stride;
                        outerStride2 -= innerStride2 * @out.Shape.Dimensions[1].Length;

                        for (long i = 0; i < opsOuter; i++)
                        {
                            for (long j = 0; j < opsInner; j++)
                            {
                                d2[ix2] = op.Op(scalar);
                                ix2 += innerStride2;
                            }

                            ix2 += outerStride2;
                        }
                    }
                    else
                    {
                        long n = @out.Shape.Dimensions.LongLength - 3;
                        long[] limits = @out.Shape.Dimensions.Where(x => n-- > 0).Select(x => x.Length).ToArray();
                        long[] counters = new long[limits.LongLength];

                        long totalOps = limits.LongLength == 0 ? 1 : limits.Aggregate<long>((a, b) => a * b);

                        //This chunck of variables are used to prevent repeated calculations of offsets
                        long dimIndex0 = 0 + limits.LongLength;
                        long dimIndex1 = 1 + limits.LongLength;
                        long dimIndex2 = 2 + limits.LongLength;

                        long opsOuter = @out.Shape.Dimensions[0 + limits.LongLength].Length;
                        long opsInner = @out.Shape.Dimensions[1 + limits.LongLength].Length;
                        long opsInnerInner = @out.Shape.Dimensions[2 + limits.LongLength].Length;

                        long outerStride3 = @out.Shape.Dimensions[dimIndex0].Stride;
                        long innerStride3 = @out.Shape.Dimensions[dimIndex1].Stride;
                        long innerInnerStride3 = @out.Shape.Dimensions[dimIndex2].Stride;
                        outerStride3 -= innerStride3 * @out.Shape.Dimensions[dimIndex1].Length;
                        innerStride3 -= innerInnerStride3 * @out.Shape.Dimensions[dimIndex2].Length;

                        for (long outer = 0; outer < totalOps; outer++)
                        {
                            //Get the array offset for the first element in the outer dimension
                            long ix3 = @out.Shape[counters];

                            for (long i = 0; i < opsOuter; i++)
                            {
                                for (long j = 0; j < opsInner; j++)
                                {
                                    for (long k = 0; k < opsInnerInner; k++)
                                    {
                                        d2[ix3] = op.Op(scalar);
                                        ix3 += innerInnerStride3;
                                    }

                                    ix3 += innerStride3;
                                }

                                ix3 += outerStride3;
                            }

                            if (counters.LongLength > 0)
                            {
                                //Basically a ripple carry adder
                                long p = counters.LongLength - 1;
                                while (++counters[p] == limits[p] && p > 0)
                                {
                                    counters[p] = 0;
                                    p--;
                                }
                            }
                        }
                    }
                }
            }
        }
        /// <summary>
        /// Unsafe implementation of applying a unary operation
        /// </summary>
        /// <typeparam name="C">The type of operation to perform</typeparam>
        /// <param name="op">The operation instance</param>
        /// <param name="in1">The input argument</param>
        /// <param name="out">The output target</param>
        internal static void UFunc_Op_Inner_Unary_Flush_UInt32<C>(C op, NdArray<System.UInt32> in1, ref NdArray<System.UInt32> @out)
            where C : IUnaryOp<System.UInt32>
        {
			if (UFunc_Op_Inner_Unary_Flush_Typed<System.UInt32, System.UInt32, C>(op, in1, @out))
				return;

#if DEBUG
			Console.WriteLine("Generic Unary method C for UInt32, with op = {0}, Ta = {1}, Tb = {2}", op.GetType(), typeof(System.UInt32), typeof(System.UInt32));
#endif
            unsafe
            {
                using (var f1 = new Pinner(in1.DataAccessor))
                using (var f2 = new Pinner(@out.DataAccessor))
                {
                    var d1 = (System.UInt32*)f1.ptr;
                    var d2 = (System.UInt32*)f2.ptr;

                    if (@out.Shape.Dimensions.Length == 1)
                    {
                        long totalOps = @out.Shape.Dimensions[0].Length;

                        long ix1 = in1.Shape.Offset;
                        long ix2 = @out.Shape.Offset;

                        long stride1 = in1.Shape.Dimensions[0].Stride;
                        long stride2 = @out.Shape.Dimensions[0].Stride;


                        if (stride1 == stride2 && ix1 == ix2)
                        {
                            //Best case, all are equal, just keep a single counter
                            for (long i = 0; i < totalOps; i++)
                            {
                                d2[ix1] = op.Op(d1[ix1]);
                                ix1 += stride1;
                            }
                        }
                        else
                        {
                            for (long i = 0; i < totalOps; i++)
                            {
                                d2[ix2] = op.Op(d1[ix1]);
                                ix1 += stride1;
                                ix2 += stride2;
                            }
                        }
                    }
                    else if (@out.Shape.Dimensions.Length == 2)
                    {
                        long opsOuter = @out.Shape.Dimensions[0].Length;
                        long opsInner = @out.Shape.Dimensions[1].Length;

                        long ix1 = in1.Shape.Offset;
                        long ix2 = @out.Shape.Offset;

                        long outerStride1 = in1.Shape.Dimensions[0].Stride;
                        long outerStride2 = @out.Shape.Dimensions[0].Stride;

                        long innerStride1 = in1.Shape.Dimensions[1].Stride;
                        long innerStride2 = @out.Shape.Dimensions[1].Stride;

                        outerStride1 -= innerStride1 * in1.Shape.Dimensions[1].Length;
                        outerStride2 -= innerStride2 * @out.Shape.Dimensions[1].Length;

                        for (long i = 0; i < opsOuter; i++)
                        {
                            for (long j = 0; j < opsInner; j++)
                            {
                                d2[ix2] = op.Op(d1[ix1]);
                                ix1 += innerStride1;
                                ix2 += innerStride2;
                            }

                            ix1 += outerStride1;
                            ix2 += outerStride2;
                        }
                    }
                    else
                    {
                        long n = in1.Shape.Dimensions.LongLength - 3;
                        long[] limits = in1.Shape.Dimensions.Where(x => n-- > 0).Select(x => x.Length).ToArray();
                        long[] counters = new long[limits.LongLength];

                        long totalOps = limits.LongLength == 0 ? 1 : limits.Aggregate<long>((a, b) => a * b);

                        //This chunck of variables are used to prevent repeated calculations of offsets
                        long dimIndex0 = 0 + limits.LongLength;
                        long dimIndex1 = 1 + limits.LongLength;
                        long dimIndex2 = 2 + limits.LongLength;

                        long opsOuter = @out.Shape.Dimensions[0 + limits.LongLength].Length;
                        long opsInner = @out.Shape.Dimensions[1 + limits.LongLength].Length;
                        long opsInnerInner = @out.Shape.Dimensions[2 + limits.LongLength].Length;

                        long outerStride1 = in1.Shape.Dimensions[dimIndex0].Stride;
                        long outerStride3 = @out.Shape.Dimensions[dimIndex0].Stride;

                        long innerStride1 = in1.Shape.Dimensions[dimIndex1].Stride;
                        long innerStride3 = @out.Shape.Dimensions[dimIndex1].Stride;

                        long innerInnerStride1 = in1.Shape.Dimensions[dimIndex2].Stride;
                        long innerInnerStride3 = @out.Shape.Dimensions[dimIndex2].Stride;

                        outerStride1 -= innerStride1 * in1.Shape.Dimensions[dimIndex1].Length;
                        outerStride3 -= innerStride3 * @out.Shape.Dimensions[dimIndex1].Length;

                        innerStride1 -= innerInnerStride1 * in1.Shape.Dimensions[dimIndex2].Length;
                        innerStride3 -= innerInnerStride3 * @out.Shape.Dimensions[dimIndex2].Length;

                        for (long outer = 0; outer < totalOps; outer++)
                        {
                            //Get the array offset for the first element in the outer dimension
                            long ix1 = in1.Shape[counters];
                            long ix3 = @out.Shape[counters];


                            for (long i = 0; i < opsOuter; i++)
                            {
                                for (long j = 0; j < opsInner; j++)
                                {
                                    for (long k = 0; k < opsInnerInner; k++)
                                    {
                                        d2[ix3] = op.Op(d1[ix1]);
                                        ix1 += innerInnerStride1;
                                        ix3 += innerInnerStride3;
                                    }

                                    ix1 += innerStride1;
                                    ix3 += innerStride3;
                                }

                                ix1 += outerStride1;
                                ix3 += outerStride3;
                            }

                            if (counters.LongLength > 0)
                            {
                                //Basically a ripple carry adder
                                long p = counters.LongLength - 1;
                                while (++counters[p] == limits[p] && p > 0)
                                {
                                    counters[p] = 0;
                                    p--;
                                }
                            }
                        }
                    }
                }
            }
        }

        /// <summary>
        /// Unsafe implementation of applying a unary operation
        /// </summary>
        /// <typeparam name="C">The type of operation to perform</typeparam>
        /// <param name="op">The operation instance</param>
        /// <param name="scalar">The input scalar argument</param>
        /// <param name="out">The output target</param>
        internal static void UFunc_Op_Inner_Unary_Scalar_Flush_UInt32<C>(C op, System.UInt32 scalar, ref NdArray<System.UInt32> @out)
            where C : IUnaryOp<System.UInt32>
        {
			if (UFunc_Op_Inner_Unary_Scalar_Flush_Typed<System.UInt32, System.UInt32, C>(op, scalar, @out))
				return;

#if DEBUG
			Console.WriteLine("Generic Unary scalar method C for UInt32, with op = {0}, Ta = {1}, Tb = {2}", op.GetType(), typeof(System.UInt32), typeof(System.UInt32));
#endif
            unsafe
            {
                using (var f2 = new Pinner(@out.DataAccessor))
                {
                    var d2 = (System.UInt32*)f2.ptr;

                    if (@out.Shape.Dimensions.Length == 1)
                    {
                        long totalOps = @out.Shape.Dimensions[0].Length;
                        long ix2 = @out.Shape.Offset;
                        long stride2 = @out.Shape.Dimensions[0].Stride;

                        for (long i = 0; i < totalOps; i++)
                        {
                            d2[ix2] = op.Op(scalar);
                            ix2 += stride2;
                        }
                    }
                    else if (@out.Shape.Dimensions.Length == 2)
                    {
                        long opsOuter = @out.Shape.Dimensions[0].Length;
                        long opsInner = @out.Shape.Dimensions[1].Length;

                        long ix2 = @out.Shape.Offset;
                        long outerStride2 = @out.Shape.Dimensions[0].Stride;
                        long innerStride2 = @out.Shape.Dimensions[1].Stride;
                        outerStride2 -= innerStride2 * @out.Shape.Dimensions[1].Length;

                        for (long i = 0; i < opsOuter; i++)
                        {
                            for (long j = 0; j < opsInner; j++)
                            {
                                d2[ix2] = op.Op(scalar);
                                ix2 += innerStride2;
                            }

                            ix2 += outerStride2;
                        }
                    }
                    else
                    {
                        long n = @out.Shape.Dimensions.LongLength - 3;
                        long[] limits = @out.Shape.Dimensions.Where(x => n-- > 0).Select(x => x.Length).ToArray();
                        long[] counters = new long[limits.LongLength];

                        long totalOps = limits.LongLength == 0 ? 1 : limits.Aggregate<long>((a, b) => a * b);

                        //This chunck of variables are used to prevent repeated calculations of offsets
                        long dimIndex0 = 0 + limits.LongLength;
                        long dimIndex1 = 1 + limits.LongLength;
                        long dimIndex2 = 2 + limits.LongLength;

                        long opsOuter = @out.Shape.Dimensions[0 + limits.LongLength].Length;
                        long opsInner = @out.Shape.Dimensions[1 + limits.LongLength].Length;
                        long opsInnerInner = @out.Shape.Dimensions[2 + limits.LongLength].Length;

                        long outerStride3 = @out.Shape.Dimensions[dimIndex0].Stride;
                        long innerStride3 = @out.Shape.Dimensions[dimIndex1].Stride;
                        long innerInnerStride3 = @out.Shape.Dimensions[dimIndex2].Stride;
                        outerStride3 -= innerStride3 * @out.Shape.Dimensions[dimIndex1].Length;
                        innerStride3 -= innerInnerStride3 * @out.Shape.Dimensions[dimIndex2].Length;

                        for (long outer = 0; outer < totalOps; outer++)
                        {
                            //Get the array offset for the first element in the outer dimension
                            long ix3 = @out.Shape[counters];

                            for (long i = 0; i < opsOuter; i++)
                            {
                                for (long j = 0; j < opsInner; j++)
                                {
                                    for (long k = 0; k < opsInnerInner; k++)
                                    {
                                        d2[ix3] = op.Op(scalar);
                                        ix3 += innerInnerStride3;
                                    }

                                    ix3 += innerStride3;
                                }

                                ix3 += outerStride3;
                            }

                            if (counters.LongLength > 0)
                            {
                                //Basically a ripple carry adder
                                long p = counters.LongLength - 1;
                                while (++counters[p] == limits[p] && p > 0)
                                {
                                    counters[p] = 0;
                                    p--;
                                }
                            }
                        }
                    }
                }
            }
        }
        /// <summary>
        /// Unsafe implementation of applying a unary operation
        /// </summary>
        /// <typeparam name="C">The type of operation to perform</typeparam>
        /// <param name="op">The operation instance</param>
        /// <param name="in1">The input argument</param>
        /// <param name="out">The output target</param>
        internal static void UFunc_Op_Inner_Unary_Flush_Int64<C>(C op, NdArray<System.Int64> in1, ref NdArray<System.Int64> @out)
            where C : IUnaryOp<System.Int64>
        {
			if (UFunc_Op_Inner_Unary_Flush_Typed<System.Int64, System.Int64, C>(op, in1, @out))
				return;

#if DEBUG
			Console.WriteLine("Generic Unary method C for Int64, with op = {0}, Ta = {1}, Tb = {2}", op.GetType(), typeof(System.Int64), typeof(System.Int64));
#endif
            unsafe
            {
                using (var f1 = new Pinner(in1.DataAccessor))
                using (var f2 = new Pinner(@out.DataAccessor))
                {
                    var d1 = (System.Int64*)f1.ptr;
                    var d2 = (System.Int64*)f2.ptr;

                    if (@out.Shape.Dimensions.Length == 1)
                    {
                        long totalOps = @out.Shape.Dimensions[0].Length;

                        long ix1 = in1.Shape.Offset;
                        long ix2 = @out.Shape.Offset;

                        long stride1 = in1.Shape.Dimensions[0].Stride;
                        long stride2 = @out.Shape.Dimensions[0].Stride;


                        if (stride1 == stride2 && ix1 == ix2)
                        {
                            //Best case, all are equal, just keep a single counter
                            for (long i = 0; i < totalOps; i++)
                            {
                                d2[ix1] = op.Op(d1[ix1]);
                                ix1 += stride1;
                            }
                        }
                        else
                        {
                            for (long i = 0; i < totalOps; i++)
                            {
                                d2[ix2] = op.Op(d1[ix1]);
                                ix1 += stride1;
                                ix2 += stride2;
                            }
                        }
                    }
                    else if (@out.Shape.Dimensions.Length == 2)
                    {
                        long opsOuter = @out.Shape.Dimensions[0].Length;
                        long opsInner = @out.Shape.Dimensions[1].Length;

                        long ix1 = in1.Shape.Offset;
                        long ix2 = @out.Shape.Offset;

                        long outerStride1 = in1.Shape.Dimensions[0].Stride;
                        long outerStride2 = @out.Shape.Dimensions[0].Stride;

                        long innerStride1 = in1.Shape.Dimensions[1].Stride;
                        long innerStride2 = @out.Shape.Dimensions[1].Stride;

                        outerStride1 -= innerStride1 * in1.Shape.Dimensions[1].Length;
                        outerStride2 -= innerStride2 * @out.Shape.Dimensions[1].Length;

                        for (long i = 0; i < opsOuter; i++)
                        {
                            for (long j = 0; j < opsInner; j++)
                            {
                                d2[ix2] = op.Op(d1[ix1]);
                                ix1 += innerStride1;
                                ix2 += innerStride2;
                            }

                            ix1 += outerStride1;
                            ix2 += outerStride2;
                        }
                    }
                    else
                    {
                        long n = in1.Shape.Dimensions.LongLength - 3;
                        long[] limits = in1.Shape.Dimensions.Where(x => n-- > 0).Select(x => x.Length).ToArray();
                        long[] counters = new long[limits.LongLength];

                        long totalOps = limits.LongLength == 0 ? 1 : limits.Aggregate<long>((a, b) => a * b);

                        //This chunck of variables are used to prevent repeated calculations of offsets
                        long dimIndex0 = 0 + limits.LongLength;
                        long dimIndex1 = 1 + limits.LongLength;
                        long dimIndex2 = 2 + limits.LongLength;

                        long opsOuter = @out.Shape.Dimensions[0 + limits.LongLength].Length;
                        long opsInner = @out.Shape.Dimensions[1 + limits.LongLength].Length;
                        long opsInnerInner = @out.Shape.Dimensions[2 + limits.LongLength].Length;

                        long outerStride1 = in1.Shape.Dimensions[dimIndex0].Stride;
                        long outerStride3 = @out.Shape.Dimensions[dimIndex0].Stride;

                        long innerStride1 = in1.Shape.Dimensions[dimIndex1].Stride;
                        long innerStride3 = @out.Shape.Dimensions[dimIndex1].Stride;

                        long innerInnerStride1 = in1.Shape.Dimensions[dimIndex2].Stride;
                        long innerInnerStride3 = @out.Shape.Dimensions[dimIndex2].Stride;

                        outerStride1 -= innerStride1 * in1.Shape.Dimensions[dimIndex1].Length;
                        outerStride3 -= innerStride3 * @out.Shape.Dimensions[dimIndex1].Length;

                        innerStride1 -= innerInnerStride1 * in1.Shape.Dimensions[dimIndex2].Length;
                        innerStride3 -= innerInnerStride3 * @out.Shape.Dimensions[dimIndex2].Length;

                        for (long outer = 0; outer < totalOps; outer++)
                        {
                            //Get the array offset for the first element in the outer dimension
                            long ix1 = in1.Shape[counters];
                            long ix3 = @out.Shape[counters];


                            for (long i = 0; i < opsOuter; i++)
                            {
                                for (long j = 0; j < opsInner; j++)
                                {
                                    for (long k = 0; k < opsInnerInner; k++)
                                    {
                                        d2[ix3] = op.Op(d1[ix1]);
                                        ix1 += innerInnerStride1;
                                        ix3 += innerInnerStride3;
                                    }

                                    ix1 += innerStride1;
                                    ix3 += innerStride3;
                                }

                                ix1 += outerStride1;
                                ix3 += outerStride3;
                            }

                            if (counters.LongLength > 0)
                            {
                                //Basically a ripple carry adder
                                long p = counters.LongLength - 1;
                                while (++counters[p] == limits[p] && p > 0)
                                {
                                    counters[p] = 0;
                                    p--;
                                }
                            }
                        }
                    }
                }
            }
        }

        /// <summary>
        /// Unsafe implementation of applying a unary operation
        /// </summary>
        /// <typeparam name="C">The type of operation to perform</typeparam>
        /// <param name="op">The operation instance</param>
        /// <param name="scalar">The input scalar argument</param>
        /// <param name="out">The output target</param>
        internal static void UFunc_Op_Inner_Unary_Scalar_Flush_Int64<C>(C op, System.Int64 scalar, ref NdArray<System.Int64> @out)
            where C : IUnaryOp<System.Int64>
        {
			if (UFunc_Op_Inner_Unary_Scalar_Flush_Typed<System.Int64, System.Int64, C>(op, scalar, @out))
				return;

#if DEBUG
			Console.WriteLine("Generic Unary scalar method C for Int64, with op = {0}, Ta = {1}, Tb = {2}", op.GetType(), typeof(System.Int64), typeof(System.Int64));
#endif
            unsafe
            {
                using (var f2 = new Pinner(@out.DataAccessor))
                {
                    var d2 = (System.Int64*)f2.ptr;

                    if (@out.Shape.Dimensions.Length == 1)
                    {
                        long totalOps = @out.Shape.Dimensions[0].Length;
                        long ix2 = @out.Shape.Offset;
                        long stride2 = @out.Shape.Dimensions[0].Stride;

                        for (long i = 0; i < totalOps; i++)
                        {
                            d2[ix2] = op.Op(scalar);
                            ix2 += stride2;
                        }
                    }
                    else if (@out.Shape.Dimensions.Length == 2)
                    {
                        long opsOuter = @out.Shape.Dimensions[0].Length;
                        long opsInner = @out.Shape.Dimensions[1].Length;

                        long ix2 = @out.Shape.Offset;
                        long outerStride2 = @out.Shape.Dimensions[0].Stride;
                        long innerStride2 = @out.Shape.Dimensions[1].Stride;
                        outerStride2 -= innerStride2 * @out.Shape.Dimensions[1].Length;

                        for (long i = 0; i < opsOuter; i++)
                        {
                            for (long j = 0; j < opsInner; j++)
                            {
                                d2[ix2] = op.Op(scalar);
                                ix2 += innerStride2;
                            }

                            ix2 += outerStride2;
                        }
                    }
                    else
                    {
                        long n = @out.Shape.Dimensions.LongLength - 3;
                        long[] limits = @out.Shape.Dimensions.Where(x => n-- > 0).Select(x => x.Length).ToArray();
                        long[] counters = new long[limits.LongLength];

                        long totalOps = limits.LongLength == 0 ? 1 : limits.Aggregate<long>((a, b) => a * b);

                        //This chunck of variables are used to prevent repeated calculations of offsets
                        long dimIndex0 = 0 + limits.LongLength;
                        long dimIndex1 = 1 + limits.LongLength;
                        long dimIndex2 = 2 + limits.LongLength;

                        long opsOuter = @out.Shape.Dimensions[0 + limits.LongLength].Length;
                        long opsInner = @out.Shape.Dimensions[1 + limits.LongLength].Length;
                        long opsInnerInner = @out.Shape.Dimensions[2 + limits.LongLength].Length;

                        long outerStride3 = @out.Shape.Dimensions[dimIndex0].Stride;
                        long innerStride3 = @out.Shape.Dimensions[dimIndex1].Stride;
                        long innerInnerStride3 = @out.Shape.Dimensions[dimIndex2].Stride;
                        outerStride3 -= innerStride3 * @out.Shape.Dimensions[dimIndex1].Length;
                        innerStride3 -= innerInnerStride3 * @out.Shape.Dimensions[dimIndex2].Length;

                        for (long outer = 0; outer < totalOps; outer++)
                        {
                            //Get the array offset for the first element in the outer dimension
                            long ix3 = @out.Shape[counters];

                            for (long i = 0; i < opsOuter; i++)
                            {
                                for (long j = 0; j < opsInner; j++)
                                {
                                    for (long k = 0; k < opsInnerInner; k++)
                                    {
                                        d2[ix3] = op.Op(scalar);
                                        ix3 += innerInnerStride3;
                                    }

                                    ix3 += innerStride3;
                                }

                                ix3 += outerStride3;
                            }

                            if (counters.LongLength > 0)
                            {
                                //Basically a ripple carry adder
                                long p = counters.LongLength - 1;
                                while (++counters[p] == limits[p] && p > 0)
                                {
                                    counters[p] = 0;
                                    p--;
                                }
                            }
                        }
                    }
                }
            }
        }
        /// <summary>
        /// Unsafe implementation of applying a unary operation
        /// </summary>
        /// <typeparam name="C">The type of operation to perform</typeparam>
        /// <param name="op">The operation instance</param>
        /// <param name="in1">The input argument</param>
        /// <param name="out">The output target</param>
        internal static void UFunc_Op_Inner_Unary_Flush_UInt64<C>(C op, NdArray<System.UInt64> in1, ref NdArray<System.UInt64> @out)
            where C : IUnaryOp<System.UInt64>
        {
			if (UFunc_Op_Inner_Unary_Flush_Typed<System.UInt64, System.UInt64, C>(op, in1, @out))
				return;

#if DEBUG
			Console.WriteLine("Generic Unary method C for UInt64, with op = {0}, Ta = {1}, Tb = {2}", op.GetType(), typeof(System.UInt64), typeof(System.UInt64));
#endif
            unsafe
            {
                using (var f1 = new Pinner(in1.DataAccessor))
                using (var f2 = new Pinner(@out.DataAccessor))
                {
                    var d1 = (System.UInt64*)f1.ptr;
                    var d2 = (System.UInt64*)f2.ptr;

                    if (@out.Shape.Dimensions.Length == 1)
                    {
                        long totalOps = @out.Shape.Dimensions[0].Length;

                        long ix1 = in1.Shape.Offset;
                        long ix2 = @out.Shape.Offset;

                        long stride1 = in1.Shape.Dimensions[0].Stride;
                        long stride2 = @out.Shape.Dimensions[0].Stride;


                        if (stride1 == stride2 && ix1 == ix2)
                        {
                            //Best case, all are equal, just keep a single counter
                            for (long i = 0; i < totalOps; i++)
                            {
                                d2[ix1] = op.Op(d1[ix1]);
                                ix1 += stride1;
                            }
                        }
                        else
                        {
                            for (long i = 0; i < totalOps; i++)
                            {
                                d2[ix2] = op.Op(d1[ix1]);
                                ix1 += stride1;
                                ix2 += stride2;
                            }
                        }
                    }
                    else if (@out.Shape.Dimensions.Length == 2)
                    {
                        long opsOuter = @out.Shape.Dimensions[0].Length;
                        long opsInner = @out.Shape.Dimensions[1].Length;

                        long ix1 = in1.Shape.Offset;
                        long ix2 = @out.Shape.Offset;

                        long outerStride1 = in1.Shape.Dimensions[0].Stride;
                        long outerStride2 = @out.Shape.Dimensions[0].Stride;

                        long innerStride1 = in1.Shape.Dimensions[1].Stride;
                        long innerStride2 = @out.Shape.Dimensions[1].Stride;

                        outerStride1 -= innerStride1 * in1.Shape.Dimensions[1].Length;
                        outerStride2 -= innerStride2 * @out.Shape.Dimensions[1].Length;

                        for (long i = 0; i < opsOuter; i++)
                        {
                            for (long j = 0; j < opsInner; j++)
                            {
                                d2[ix2] = op.Op(d1[ix1]);
                                ix1 += innerStride1;
                                ix2 += innerStride2;
                            }

                            ix1 += outerStride1;
                            ix2 += outerStride2;
                        }
                    }
                    else
                    {
                        long n = in1.Shape.Dimensions.LongLength - 3;
                        long[] limits = in1.Shape.Dimensions.Where(x => n-- > 0).Select(x => x.Length).ToArray();
                        long[] counters = new long[limits.LongLength];

                        long totalOps = limits.LongLength == 0 ? 1 : limits.Aggregate<long>((a, b) => a * b);

                        //This chunck of variables are used to prevent repeated calculations of offsets
                        long dimIndex0 = 0 + limits.LongLength;
                        long dimIndex1 = 1 + limits.LongLength;
                        long dimIndex2 = 2 + limits.LongLength;

                        long opsOuter = @out.Shape.Dimensions[0 + limits.LongLength].Length;
                        long opsInner = @out.Shape.Dimensions[1 + limits.LongLength].Length;
                        long opsInnerInner = @out.Shape.Dimensions[2 + limits.LongLength].Length;

                        long outerStride1 = in1.Shape.Dimensions[dimIndex0].Stride;
                        long outerStride3 = @out.Shape.Dimensions[dimIndex0].Stride;

                        long innerStride1 = in1.Shape.Dimensions[dimIndex1].Stride;
                        long innerStride3 = @out.Shape.Dimensions[dimIndex1].Stride;

                        long innerInnerStride1 = in1.Shape.Dimensions[dimIndex2].Stride;
                        long innerInnerStride3 = @out.Shape.Dimensions[dimIndex2].Stride;

                        outerStride1 -= innerStride1 * in1.Shape.Dimensions[dimIndex1].Length;
                        outerStride3 -= innerStride3 * @out.Shape.Dimensions[dimIndex1].Length;

                        innerStride1 -= innerInnerStride1 * in1.Shape.Dimensions[dimIndex2].Length;
                        innerStride3 -= innerInnerStride3 * @out.Shape.Dimensions[dimIndex2].Length;

                        for (long outer = 0; outer < totalOps; outer++)
                        {
                            //Get the array offset for the first element in the outer dimension
                            long ix1 = in1.Shape[counters];
                            long ix3 = @out.Shape[counters];


                            for (long i = 0; i < opsOuter; i++)
                            {
                                for (long j = 0; j < opsInner; j++)
                                {
                                    for (long k = 0; k < opsInnerInner; k++)
                                    {
                                        d2[ix3] = op.Op(d1[ix1]);
                                        ix1 += innerInnerStride1;
                                        ix3 += innerInnerStride3;
                                    }

                                    ix1 += innerStride1;
                                    ix3 += innerStride3;
                                }

                                ix1 += outerStride1;
                                ix3 += outerStride3;
                            }

                            if (counters.LongLength > 0)
                            {
                                //Basically a ripple carry adder
                                long p = counters.LongLength - 1;
                                while (++counters[p] == limits[p] && p > 0)
                                {
                                    counters[p] = 0;
                                    p--;
                                }
                            }
                        }
                    }
                }
            }
        }

        /// <summary>
        /// Unsafe implementation of applying a unary operation
        /// </summary>
        /// <typeparam name="C">The type of operation to perform</typeparam>
        /// <param name="op">The operation instance</param>
        /// <param name="scalar">The input scalar argument</param>
        /// <param name="out">The output target</param>
        internal static void UFunc_Op_Inner_Unary_Scalar_Flush_UInt64<C>(C op, System.UInt64 scalar, ref NdArray<System.UInt64> @out)
            where C : IUnaryOp<System.UInt64>
        {
			if (UFunc_Op_Inner_Unary_Scalar_Flush_Typed<System.UInt64, System.UInt64, C>(op, scalar, @out))
				return;

#if DEBUG
			Console.WriteLine("Generic Unary scalar method C for UInt64, with op = {0}, Ta = {1}, Tb = {2}", op.GetType(), typeof(System.UInt64), typeof(System.UInt64));
#endif
            unsafe
            {
                using (var f2 = new Pinner(@out.DataAccessor))
                {
                    var d2 = (System.UInt64*)f2.ptr;

                    if (@out.Shape.Dimensions.Length == 1)
                    {
                        long totalOps = @out.Shape.Dimensions[0].Length;
                        long ix2 = @out.Shape.Offset;
                        long stride2 = @out.Shape.Dimensions[0].Stride;

                        for (long i = 0; i < totalOps; i++)
                        {
                            d2[ix2] = op.Op(scalar);
                            ix2 += stride2;
                        }
                    }
                    else if (@out.Shape.Dimensions.Length == 2)
                    {
                        long opsOuter = @out.Shape.Dimensions[0].Length;
                        long opsInner = @out.Shape.Dimensions[1].Length;

                        long ix2 = @out.Shape.Offset;
                        long outerStride2 = @out.Shape.Dimensions[0].Stride;
                        long innerStride2 = @out.Shape.Dimensions[1].Stride;
                        outerStride2 -= innerStride2 * @out.Shape.Dimensions[1].Length;

                        for (long i = 0; i < opsOuter; i++)
                        {
                            for (long j = 0; j < opsInner; j++)
                            {
                                d2[ix2] = op.Op(scalar);
                                ix2 += innerStride2;
                            }

                            ix2 += outerStride2;
                        }
                    }
                    else
                    {
                        long n = @out.Shape.Dimensions.LongLength - 3;
                        long[] limits = @out.Shape.Dimensions.Where(x => n-- > 0).Select(x => x.Length).ToArray();
                        long[] counters = new long[limits.LongLength];

                        long totalOps = limits.LongLength == 0 ? 1 : limits.Aggregate<long>((a, b) => a * b);

                        //This chunck of variables are used to prevent repeated calculations of offsets
                        long dimIndex0 = 0 + limits.LongLength;
                        long dimIndex1 = 1 + limits.LongLength;
                        long dimIndex2 = 2 + limits.LongLength;

                        long opsOuter = @out.Shape.Dimensions[0 + limits.LongLength].Length;
                        long opsInner = @out.Shape.Dimensions[1 + limits.LongLength].Length;
                        long opsInnerInner = @out.Shape.Dimensions[2 + limits.LongLength].Length;

                        long outerStride3 = @out.Shape.Dimensions[dimIndex0].Stride;
                        long innerStride3 = @out.Shape.Dimensions[dimIndex1].Stride;
                        long innerInnerStride3 = @out.Shape.Dimensions[dimIndex2].Stride;
                        outerStride3 -= innerStride3 * @out.Shape.Dimensions[dimIndex1].Length;
                        innerStride3 -= innerInnerStride3 * @out.Shape.Dimensions[dimIndex2].Length;

                        for (long outer = 0; outer < totalOps; outer++)
                        {
                            //Get the array offset for the first element in the outer dimension
                            long ix3 = @out.Shape[counters];

                            for (long i = 0; i < opsOuter; i++)
                            {
                                for (long j = 0; j < opsInner; j++)
                                {
                                    for (long k = 0; k < opsInnerInner; k++)
                                    {
                                        d2[ix3] = op.Op(scalar);
                                        ix3 += innerInnerStride3;
                                    }

                                    ix3 += innerStride3;
                                }

                                ix3 += outerStride3;
                            }

                            if (counters.LongLength > 0)
                            {
                                //Basically a ripple carry adder
                                long p = counters.LongLength - 1;
                                while (++counters[p] == limits[p] && p > 0)
                                {
                                    counters[p] = 0;
                                    p--;
                                }
                            }
                        }
                    }
                }
            }
        }
        /// <summary>
        /// Unsafe implementation of applying a unary operation
        /// </summary>
        /// <typeparam name="C">The type of operation to perform</typeparam>
        /// <param name="op">The operation instance</param>
        /// <param name="in1">The input argument</param>
        /// <param name="out">The output target</param>
        internal static void UFunc_Op_Inner_Unary_Flush_Single<C>(C op, NdArray<System.Single> in1, ref NdArray<System.Single> @out)
            where C : IUnaryOp<System.Single>
        {
			if (UFunc_Op_Inner_Unary_Flush_Typed<System.Single, System.Single, C>(op, in1, @out))
				return;

#if DEBUG
			Console.WriteLine("Generic Unary method C for Single, with op = {0}, Ta = {1}, Tb = {2}", op.GetType(), typeof(System.Single), typeof(System.Single));
#endif
            unsafe
            {
                using (var f1 = new Pinner(in1.DataAccessor))
                using (var f2 = new Pinner(@out.DataAccessor))
                {
                    var d1 = (System.Single*)f1.ptr;
                    var d2 = (System.Single*)f2.ptr;

                    if (@out.Shape.Dimensions.Length == 1)
                    {
                        long totalOps = @out.Shape.Dimensions[0].Length;

                        long ix1 = in1.Shape.Offset;
                        long ix2 = @out.Shape.Offset;

                        long stride1 = in1.Shape.Dimensions[0].Stride;
                        long stride2 = @out.Shape.Dimensions[0].Stride;


                        if (stride1 == stride2 && ix1 == ix2)
                        {
                            //Best case, all are equal, just keep a single counter
                            for (long i = 0; i < totalOps; i++)
                            {
                                d2[ix1] = op.Op(d1[ix1]);
                                ix1 += stride1;
                            }
                        }
                        else
                        {
                            for (long i = 0; i < totalOps; i++)
                            {
                                d2[ix2] = op.Op(d1[ix1]);
                                ix1 += stride1;
                                ix2 += stride2;
                            }
                        }
                    }
                    else if (@out.Shape.Dimensions.Length == 2)
                    {
                        long opsOuter = @out.Shape.Dimensions[0].Length;
                        long opsInner = @out.Shape.Dimensions[1].Length;

                        long ix1 = in1.Shape.Offset;
                        long ix2 = @out.Shape.Offset;

                        long outerStride1 = in1.Shape.Dimensions[0].Stride;
                        long outerStride2 = @out.Shape.Dimensions[0].Stride;

                        long innerStride1 = in1.Shape.Dimensions[1].Stride;
                        long innerStride2 = @out.Shape.Dimensions[1].Stride;

                        outerStride1 -= innerStride1 * in1.Shape.Dimensions[1].Length;
                        outerStride2 -= innerStride2 * @out.Shape.Dimensions[1].Length;

                        for (long i = 0; i < opsOuter; i++)
                        {
                            for (long j = 0; j < opsInner; j++)
                            {
                                d2[ix2] = op.Op(d1[ix1]);
                                ix1 += innerStride1;
                                ix2 += innerStride2;
                            }

                            ix1 += outerStride1;
                            ix2 += outerStride2;
                        }
                    }
                    else
                    {
                        long n = in1.Shape.Dimensions.LongLength - 3;
                        long[] limits = in1.Shape.Dimensions.Where(x => n-- > 0).Select(x => x.Length).ToArray();
                        long[] counters = new long[limits.LongLength];

                        long totalOps = limits.LongLength == 0 ? 1 : limits.Aggregate<long>((a, b) => a * b);

                        //This chunck of variables are used to prevent repeated calculations of offsets
                        long dimIndex0 = 0 + limits.LongLength;
                        long dimIndex1 = 1 + limits.LongLength;
                        long dimIndex2 = 2 + limits.LongLength;

                        long opsOuter = @out.Shape.Dimensions[0 + limits.LongLength].Length;
                        long opsInner = @out.Shape.Dimensions[1 + limits.LongLength].Length;
                        long opsInnerInner = @out.Shape.Dimensions[2 + limits.LongLength].Length;

                        long outerStride1 = in1.Shape.Dimensions[dimIndex0].Stride;
                        long outerStride3 = @out.Shape.Dimensions[dimIndex0].Stride;

                        long innerStride1 = in1.Shape.Dimensions[dimIndex1].Stride;
                        long innerStride3 = @out.Shape.Dimensions[dimIndex1].Stride;

                        long innerInnerStride1 = in1.Shape.Dimensions[dimIndex2].Stride;
                        long innerInnerStride3 = @out.Shape.Dimensions[dimIndex2].Stride;

                        outerStride1 -= innerStride1 * in1.Shape.Dimensions[dimIndex1].Length;
                        outerStride3 -= innerStride3 * @out.Shape.Dimensions[dimIndex1].Length;

                        innerStride1 -= innerInnerStride1 * in1.Shape.Dimensions[dimIndex2].Length;
                        innerStride3 -= innerInnerStride3 * @out.Shape.Dimensions[dimIndex2].Length;

                        for (long outer = 0; outer < totalOps; outer++)
                        {
                            //Get the array offset for the first element in the outer dimension
                            long ix1 = in1.Shape[counters];
                            long ix3 = @out.Shape[counters];


                            for (long i = 0; i < opsOuter; i++)
                            {
                                for (long j = 0; j < opsInner; j++)
                                {
                                    for (long k = 0; k < opsInnerInner; k++)
                                    {
                                        d2[ix3] = op.Op(d1[ix1]);
                                        ix1 += innerInnerStride1;
                                        ix3 += innerInnerStride3;
                                    }

                                    ix1 += innerStride1;
                                    ix3 += innerStride3;
                                }

                                ix1 += outerStride1;
                                ix3 += outerStride3;
                            }

                            if (counters.LongLength > 0)
                            {
                                //Basically a ripple carry adder
                                long p = counters.LongLength - 1;
                                while (++counters[p] == limits[p] && p > 0)
                                {
                                    counters[p] = 0;
                                    p--;
                                }
                            }
                        }
                    }
                }
            }
        }

        /// <summary>
        /// Unsafe implementation of applying a unary operation
        /// </summary>
        /// <typeparam name="C">The type of operation to perform</typeparam>
        /// <param name="op">The operation instance</param>
        /// <param name="scalar">The input scalar argument</param>
        /// <param name="out">The output target</param>
        internal static void UFunc_Op_Inner_Unary_Scalar_Flush_Single<C>(C op, System.Single scalar, ref NdArray<System.Single> @out)
            where C : IUnaryOp<System.Single>
        {
			if (UFunc_Op_Inner_Unary_Scalar_Flush_Typed<System.Single, System.Single, C>(op, scalar, @out))
				return;

#if DEBUG
			Console.WriteLine("Generic Unary scalar method C for Single, with op = {0}, Ta = {1}, Tb = {2}", op.GetType(), typeof(System.Single), typeof(System.Single));
#endif
            unsafe
            {
                using (var f2 = new Pinner(@out.DataAccessor))
                {
                    var d2 = (System.Single*)f2.ptr;

                    if (@out.Shape.Dimensions.Length == 1)
                    {
                        long totalOps = @out.Shape.Dimensions[0].Length;
                        long ix2 = @out.Shape.Offset;
                        long stride2 = @out.Shape.Dimensions[0].Stride;

                        for (long i = 0; i < totalOps; i++)
                        {
                            d2[ix2] = op.Op(scalar);
                            ix2 += stride2;
                        }
                    }
                    else if (@out.Shape.Dimensions.Length == 2)
                    {
                        long opsOuter = @out.Shape.Dimensions[0].Length;
                        long opsInner = @out.Shape.Dimensions[1].Length;

                        long ix2 = @out.Shape.Offset;
                        long outerStride2 = @out.Shape.Dimensions[0].Stride;
                        long innerStride2 = @out.Shape.Dimensions[1].Stride;
                        outerStride2 -= innerStride2 * @out.Shape.Dimensions[1].Length;

                        for (long i = 0; i < opsOuter; i++)
                        {
                            for (long j = 0; j < opsInner; j++)
                            {
                                d2[ix2] = op.Op(scalar);
                                ix2 += innerStride2;
                            }

                            ix2 += outerStride2;
                        }
                    }
                    else
                    {
                        long n = @out.Shape.Dimensions.LongLength - 3;
                        long[] limits = @out.Shape.Dimensions.Where(x => n-- > 0).Select(x => x.Length).ToArray();
                        long[] counters = new long[limits.LongLength];

                        long totalOps = limits.LongLength == 0 ? 1 : limits.Aggregate<long>((a, b) => a * b);

                        //This chunck of variables are used to prevent repeated calculations of offsets
                        long dimIndex0 = 0 + limits.LongLength;
                        long dimIndex1 = 1 + limits.LongLength;
                        long dimIndex2 = 2 + limits.LongLength;

                        long opsOuter = @out.Shape.Dimensions[0 + limits.LongLength].Length;
                        long opsInner = @out.Shape.Dimensions[1 + limits.LongLength].Length;
                        long opsInnerInner = @out.Shape.Dimensions[2 + limits.LongLength].Length;

                        long outerStride3 = @out.Shape.Dimensions[dimIndex0].Stride;
                        long innerStride3 = @out.Shape.Dimensions[dimIndex1].Stride;
                        long innerInnerStride3 = @out.Shape.Dimensions[dimIndex2].Stride;
                        outerStride3 -= innerStride3 * @out.Shape.Dimensions[dimIndex1].Length;
                        innerStride3 -= innerInnerStride3 * @out.Shape.Dimensions[dimIndex2].Length;

                        for (long outer = 0; outer < totalOps; outer++)
                        {
                            //Get the array offset for the first element in the outer dimension
                            long ix3 = @out.Shape[counters];

                            for (long i = 0; i < opsOuter; i++)
                            {
                                for (long j = 0; j < opsInner; j++)
                                {
                                    for (long k = 0; k < opsInnerInner; k++)
                                    {
                                        d2[ix3] = op.Op(scalar);
                                        ix3 += innerInnerStride3;
                                    }

                                    ix3 += innerStride3;
                                }

                                ix3 += outerStride3;
                            }

                            if (counters.LongLength > 0)
                            {
                                //Basically a ripple carry adder
                                long p = counters.LongLength - 1;
                                while (++counters[p] == limits[p] && p > 0)
                                {
                                    counters[p] = 0;
                                    p--;
                                }
                            }
                        }
                    }
                }
            }
        }
        /// <summary>
        /// Unsafe implementation of applying a unary operation
        /// </summary>
        /// <typeparam name="C">The type of operation to perform</typeparam>
        /// <param name="op">The operation instance</param>
        /// <param name="in1">The input argument</param>
        /// <param name="out">The output target</param>
        internal static void UFunc_Op_Inner_Unary_Flush_Double<C>(C op, NdArray<System.Double> in1, ref NdArray<System.Double> @out)
            where C : IUnaryOp<System.Double>
        {
			if (UFunc_Op_Inner_Unary_Flush_Typed<System.Double, System.Double, C>(op, in1, @out))
				return;

#if DEBUG
			Console.WriteLine("Generic Unary method C for Double, with op = {0}, Ta = {1}, Tb = {2}", op.GetType(), typeof(System.Double), typeof(System.Double));
#endif
            unsafe
            {
                using (var f1 = new Pinner(in1.DataAccessor))
                using (var f2 = new Pinner(@out.DataAccessor))
                {
                    var d1 = (System.Double*)f1.ptr;
                    var d2 = (System.Double*)f2.ptr;

                    if (@out.Shape.Dimensions.Length == 1)
                    {
                        long totalOps = @out.Shape.Dimensions[0].Length;

                        long ix1 = in1.Shape.Offset;
                        long ix2 = @out.Shape.Offset;

                        long stride1 = in1.Shape.Dimensions[0].Stride;
                        long stride2 = @out.Shape.Dimensions[0].Stride;


                        if (stride1 == stride2 && ix1 == ix2)
                        {
                            //Best case, all are equal, just keep a single counter
                            for (long i = 0; i < totalOps; i++)
                            {
                                d2[ix1] = op.Op(d1[ix1]);
                                ix1 += stride1;
                            }
                        }
                        else
                        {
                            for (long i = 0; i < totalOps; i++)
                            {
                                d2[ix2] = op.Op(d1[ix1]);
                                ix1 += stride1;
                                ix2 += stride2;
                            }
                        }
                    }
                    else if (@out.Shape.Dimensions.Length == 2)
                    {
                        long opsOuter = @out.Shape.Dimensions[0].Length;
                        long opsInner = @out.Shape.Dimensions[1].Length;

                        long ix1 = in1.Shape.Offset;
                        long ix2 = @out.Shape.Offset;

                        long outerStride1 = in1.Shape.Dimensions[0].Stride;
                        long outerStride2 = @out.Shape.Dimensions[0].Stride;

                        long innerStride1 = in1.Shape.Dimensions[1].Stride;
                        long innerStride2 = @out.Shape.Dimensions[1].Stride;

                        outerStride1 -= innerStride1 * in1.Shape.Dimensions[1].Length;
                        outerStride2 -= innerStride2 * @out.Shape.Dimensions[1].Length;

                        for (long i = 0; i < opsOuter; i++)
                        {
                            for (long j = 0; j < opsInner; j++)
                            {
                                d2[ix2] = op.Op(d1[ix1]);
                                ix1 += innerStride1;
                                ix2 += innerStride2;
                            }

                            ix1 += outerStride1;
                            ix2 += outerStride2;
                        }
                    }
                    else
                    {
                        long n = in1.Shape.Dimensions.LongLength - 3;
                        long[] limits = in1.Shape.Dimensions.Where(x => n-- > 0).Select(x => x.Length).ToArray();
                        long[] counters = new long[limits.LongLength];

                        long totalOps = limits.LongLength == 0 ? 1 : limits.Aggregate<long>((a, b) => a * b);

                        //This chunck of variables are used to prevent repeated calculations of offsets
                        long dimIndex0 = 0 + limits.LongLength;
                        long dimIndex1 = 1 + limits.LongLength;
                        long dimIndex2 = 2 + limits.LongLength;

                        long opsOuter = @out.Shape.Dimensions[0 + limits.LongLength].Length;
                        long opsInner = @out.Shape.Dimensions[1 + limits.LongLength].Length;
                        long opsInnerInner = @out.Shape.Dimensions[2 + limits.LongLength].Length;

                        long outerStride1 = in1.Shape.Dimensions[dimIndex0].Stride;
                        long outerStride3 = @out.Shape.Dimensions[dimIndex0].Stride;

                        long innerStride1 = in1.Shape.Dimensions[dimIndex1].Stride;
                        long innerStride3 = @out.Shape.Dimensions[dimIndex1].Stride;

                        long innerInnerStride1 = in1.Shape.Dimensions[dimIndex2].Stride;
                        long innerInnerStride3 = @out.Shape.Dimensions[dimIndex2].Stride;

                        outerStride1 -= innerStride1 * in1.Shape.Dimensions[dimIndex1].Length;
                        outerStride3 -= innerStride3 * @out.Shape.Dimensions[dimIndex1].Length;

                        innerStride1 -= innerInnerStride1 * in1.Shape.Dimensions[dimIndex2].Length;
                        innerStride3 -= innerInnerStride3 * @out.Shape.Dimensions[dimIndex2].Length;

                        for (long outer = 0; outer < totalOps; outer++)
                        {
                            //Get the array offset for the first element in the outer dimension
                            long ix1 = in1.Shape[counters];
                            long ix3 = @out.Shape[counters];


                            for (long i = 0; i < opsOuter; i++)
                            {
                                for (long j = 0; j < opsInner; j++)
                                {
                                    for (long k = 0; k < opsInnerInner; k++)
                                    {
                                        d2[ix3] = op.Op(d1[ix1]);
                                        ix1 += innerInnerStride1;
                                        ix3 += innerInnerStride3;
                                    }

                                    ix1 += innerStride1;
                                    ix3 += innerStride3;
                                }

                                ix1 += outerStride1;
                                ix3 += outerStride3;
                            }

                            if (counters.LongLength > 0)
                            {
                                //Basically a ripple carry adder
                                long p = counters.LongLength - 1;
                                while (++counters[p] == limits[p] && p > 0)
                                {
                                    counters[p] = 0;
                                    p--;
                                }
                            }
                        }
                    }
                }
            }
        }

        /// <summary>
        /// Unsafe implementation of applying a unary operation
        /// </summary>
        /// <typeparam name="C">The type of operation to perform</typeparam>
        /// <param name="op">The operation instance</param>
        /// <param name="scalar">The input scalar argument</param>
        /// <param name="out">The output target</param>
        internal static void UFunc_Op_Inner_Unary_Scalar_Flush_Double<C>(C op, System.Double scalar, ref NdArray<System.Double> @out)
            where C : IUnaryOp<System.Double>
        {
			if (UFunc_Op_Inner_Unary_Scalar_Flush_Typed<System.Double, System.Double, C>(op, scalar, @out))
				return;

#if DEBUG
			Console.WriteLine("Generic Unary scalar method C for Double, with op = {0}, Ta = {1}, Tb = {2}", op.GetType(), typeof(System.Double), typeof(System.Double));
#endif
            unsafe
            {
                using (var f2 = new Pinner(@out.DataAccessor))
                {
                    var d2 = (System.Double*)f2.ptr;

                    if (@out.Shape.Dimensions.Length == 1)
                    {
                        long totalOps = @out.Shape.Dimensions[0].Length;
                        long ix2 = @out.Shape.Offset;
                        long stride2 = @out.Shape.Dimensions[0].Stride;

                        for (long i = 0; i < totalOps; i++)
                        {
                            d2[ix2] = op.Op(scalar);
                            ix2 += stride2;
                        }
                    }
                    else if (@out.Shape.Dimensions.Length == 2)
                    {
                        long opsOuter = @out.Shape.Dimensions[0].Length;
                        long opsInner = @out.Shape.Dimensions[1].Length;

                        long ix2 = @out.Shape.Offset;
                        long outerStride2 = @out.Shape.Dimensions[0].Stride;
                        long innerStride2 = @out.Shape.Dimensions[1].Stride;
                        outerStride2 -= innerStride2 * @out.Shape.Dimensions[1].Length;

                        for (long i = 0; i < opsOuter; i++)
                        {
                            for (long j = 0; j < opsInner; j++)
                            {
                                d2[ix2] = op.Op(scalar);
                                ix2 += innerStride2;
                            }

                            ix2 += outerStride2;
                        }
                    }
                    else
                    {
                        long n = @out.Shape.Dimensions.LongLength - 3;
                        long[] limits = @out.Shape.Dimensions.Where(x => n-- > 0).Select(x => x.Length).ToArray();
                        long[] counters = new long[limits.LongLength];

                        long totalOps = limits.LongLength == 0 ? 1 : limits.Aggregate<long>((a, b) => a * b);

                        //This chunck of variables are used to prevent repeated calculations of offsets
                        long dimIndex0 = 0 + limits.LongLength;
                        long dimIndex1 = 1 + limits.LongLength;
                        long dimIndex2 = 2 + limits.LongLength;

                        long opsOuter = @out.Shape.Dimensions[0 + limits.LongLength].Length;
                        long opsInner = @out.Shape.Dimensions[1 + limits.LongLength].Length;
                        long opsInnerInner = @out.Shape.Dimensions[2 + limits.LongLength].Length;

                        long outerStride3 = @out.Shape.Dimensions[dimIndex0].Stride;
                        long innerStride3 = @out.Shape.Dimensions[dimIndex1].Stride;
                        long innerInnerStride3 = @out.Shape.Dimensions[dimIndex2].Stride;
                        outerStride3 -= innerStride3 * @out.Shape.Dimensions[dimIndex1].Length;
                        innerStride3 -= innerInnerStride3 * @out.Shape.Dimensions[dimIndex2].Length;

                        for (long outer = 0; outer < totalOps; outer++)
                        {
                            //Get the array offset for the first element in the outer dimension
                            long ix3 = @out.Shape[counters];

                            for (long i = 0; i < opsOuter; i++)
                            {
                                for (long j = 0; j < opsInner; j++)
                                {
                                    for (long k = 0; k < opsInnerInner; k++)
                                    {
                                        d2[ix3] = op.Op(scalar);
                                        ix3 += innerInnerStride3;
                                    }

                                    ix3 += innerStride3;
                                }

                                ix3 += outerStride3;
                            }

                            if (counters.LongLength > 0)
                            {
                                //Basically a ripple carry adder
                                long p = counters.LongLength - 1;
                                while (++counters[p] == limits[p] && p > 0)
                                {
                                    counters[p] = 0;
                                    p--;
                                }
                            }
                        }
                    }
                }
            }
        }
        /// <summary>
        /// Unsafe implementation of applying a unary operation
        /// </summary>
        /// <typeparam name="C">The type of operation to perform</typeparam>
        /// <param name="op">The operation instance</param>
        /// <param name="in1">The input argument</param>
        /// <param name="out">The output target</param>
        internal static void UFunc_Op_Inner_Unary_Flush_Boolean<C>(C op, NdArray<System.Boolean> in1, ref NdArray<System.Boolean> @out)
            where C : IUnaryOp<System.Boolean>
        {
			if (UFunc_Op_Inner_Unary_Flush_Typed<System.Boolean, System.Boolean, C>(op, in1, @out))
				return;

#if DEBUG
			Console.WriteLine("Generic Unary method C for Boolean, with op = {0}, Ta = {1}, Tb = {2}", op.GetType(), typeof(System.Boolean), typeof(System.Boolean));
#endif
            unsafe
            {
                using (var f1 = new Pinner(in1.DataAccessor))
                using (var f2 = new Pinner(@out.DataAccessor))
                {
                    var d1 = (System.Boolean*)f1.ptr;
                    var d2 = (System.Boolean*)f2.ptr;

                    if (@out.Shape.Dimensions.Length == 1)
                    {
                        long totalOps = @out.Shape.Dimensions[0].Length;

                        long ix1 = in1.Shape.Offset;
                        long ix2 = @out.Shape.Offset;

                        long stride1 = in1.Shape.Dimensions[0].Stride;
                        long stride2 = @out.Shape.Dimensions[0].Stride;


                        if (stride1 == stride2 && ix1 == ix2)
                        {
                            //Best case, all are equal, just keep a single counter
                            for (long i = 0; i < totalOps; i++)
                            {
                                d2[ix1] = op.Op(d1[ix1]);
                                ix1 += stride1;
                            }
                        }
                        else
                        {
                            for (long i = 0; i < totalOps; i++)
                            {
                                d2[ix2] = op.Op(d1[ix1]);
                                ix1 += stride1;
                                ix2 += stride2;
                            }
                        }
                    }
                    else if (@out.Shape.Dimensions.Length == 2)
                    {
                        long opsOuter = @out.Shape.Dimensions[0].Length;
                        long opsInner = @out.Shape.Dimensions[1].Length;

                        long ix1 = in1.Shape.Offset;
                        long ix2 = @out.Shape.Offset;

                        long outerStride1 = in1.Shape.Dimensions[0].Stride;
                        long outerStride2 = @out.Shape.Dimensions[0].Stride;

                        long innerStride1 = in1.Shape.Dimensions[1].Stride;
                        long innerStride2 = @out.Shape.Dimensions[1].Stride;

                        outerStride1 -= innerStride1 * in1.Shape.Dimensions[1].Length;
                        outerStride2 -= innerStride2 * @out.Shape.Dimensions[1].Length;

                        for (long i = 0; i < opsOuter; i++)
                        {
                            for (long j = 0; j < opsInner; j++)
                            {
                                d2[ix2] = op.Op(d1[ix1]);
                                ix1 += innerStride1;
                                ix2 += innerStride2;
                            }

                            ix1 += outerStride1;
                            ix2 += outerStride2;
                        }
                    }
                    else
                    {
                        long n = in1.Shape.Dimensions.LongLength - 3;
                        long[] limits = in1.Shape.Dimensions.Where(x => n-- > 0).Select(x => x.Length).ToArray();
                        long[] counters = new long[limits.LongLength];

                        long totalOps = limits.LongLength == 0 ? 1 : limits.Aggregate<long>((a, b) => a * b);

                        //This chunck of variables are used to prevent repeated calculations of offsets
                        long dimIndex0 = 0 + limits.LongLength;
                        long dimIndex1 = 1 + limits.LongLength;
                        long dimIndex2 = 2 + limits.LongLength;

                        long opsOuter = @out.Shape.Dimensions[0 + limits.LongLength].Length;
                        long opsInner = @out.Shape.Dimensions[1 + limits.LongLength].Length;
                        long opsInnerInner = @out.Shape.Dimensions[2 + limits.LongLength].Length;

                        long outerStride1 = in1.Shape.Dimensions[dimIndex0].Stride;
                        long outerStride3 = @out.Shape.Dimensions[dimIndex0].Stride;

                        long innerStride1 = in1.Shape.Dimensions[dimIndex1].Stride;
                        long innerStride3 = @out.Shape.Dimensions[dimIndex1].Stride;

                        long innerInnerStride1 = in1.Shape.Dimensions[dimIndex2].Stride;
                        long innerInnerStride3 = @out.Shape.Dimensions[dimIndex2].Stride;

                        outerStride1 -= innerStride1 * in1.Shape.Dimensions[dimIndex1].Length;
                        outerStride3 -= innerStride3 * @out.Shape.Dimensions[dimIndex1].Length;

                        innerStride1 -= innerInnerStride1 * in1.Shape.Dimensions[dimIndex2].Length;
                        innerStride3 -= innerInnerStride3 * @out.Shape.Dimensions[dimIndex2].Length;

                        for (long outer = 0; outer < totalOps; outer++)
                        {
                            //Get the array offset for the first element in the outer dimension
                            long ix1 = in1.Shape[counters];
                            long ix3 = @out.Shape[counters];


                            for (long i = 0; i < opsOuter; i++)
                            {
                                for (long j = 0; j < opsInner; j++)
                                {
                                    for (long k = 0; k < opsInnerInner; k++)
                                    {
                                        d2[ix3] = op.Op(d1[ix1]);
                                        ix1 += innerInnerStride1;
                                        ix3 += innerInnerStride3;
                                    }

                                    ix1 += innerStride1;
                                    ix3 += innerStride3;
                                }

                                ix1 += outerStride1;
                                ix3 += outerStride3;
                            }

                            if (counters.LongLength > 0)
                            {
                                //Basically a ripple carry adder
                                long p = counters.LongLength - 1;
                                while (++counters[p] == limits[p] && p > 0)
                                {
                                    counters[p] = 0;
                                    p--;
                                }
                            }
                        }
                    }
                }
            }
        }

        /// <summary>
        /// Unsafe implementation of applying a unary operation
        /// </summary>
        /// <typeparam name="C">The type of operation to perform</typeparam>
        /// <param name="op">The operation instance</param>
        /// <param name="scalar">The input scalar argument</param>
        /// <param name="out">The output target</param>
        internal static void UFunc_Op_Inner_Unary_Scalar_Flush_Boolean<C>(C op, System.Boolean scalar, ref NdArray<System.Boolean> @out)
            where C : IUnaryOp<System.Boolean>
        {
			if (UFunc_Op_Inner_Unary_Scalar_Flush_Typed<System.Boolean, System.Boolean, C>(op, scalar, @out))
				return;

#if DEBUG
			Console.WriteLine("Generic Unary scalar method C for Boolean, with op = {0}, Ta = {1}, Tb = {2}", op.GetType(), typeof(System.Boolean), typeof(System.Boolean));
#endif
            unsafe
            {
                using (var f2 = new Pinner(@out.DataAccessor))
                {
                    var d2 = (System.Boolean*)f2.ptr;

                    if (@out.Shape.Dimensions.Length == 1)
                    {
                        long totalOps = @out.Shape.Dimensions[0].Length;
                        long ix2 = @out.Shape.Offset;
                        long stride2 = @out.Shape.Dimensions[0].Stride;

                        for (long i = 0; i < totalOps; i++)
                        {
                            d2[ix2] = op.Op(scalar);
                            ix2 += stride2;
                        }
                    }
                    else if (@out.Shape.Dimensions.Length == 2)
                    {
                        long opsOuter = @out.Shape.Dimensions[0].Length;
                        long opsInner = @out.Shape.Dimensions[1].Length;

                        long ix2 = @out.Shape.Offset;
                        long outerStride2 = @out.Shape.Dimensions[0].Stride;
                        long innerStride2 = @out.Shape.Dimensions[1].Stride;
                        outerStride2 -= innerStride2 * @out.Shape.Dimensions[1].Length;

                        for (long i = 0; i < opsOuter; i++)
                        {
                            for (long j = 0; j < opsInner; j++)
                            {
                                d2[ix2] = op.Op(scalar);
                                ix2 += innerStride2;
                            }

                            ix2 += outerStride2;
                        }
                    }
                    else
                    {
                        long n = @out.Shape.Dimensions.LongLength - 3;
                        long[] limits = @out.Shape.Dimensions.Where(x => n-- > 0).Select(x => x.Length).ToArray();
                        long[] counters = new long[limits.LongLength];

                        long totalOps = limits.LongLength == 0 ? 1 : limits.Aggregate<long>((a, b) => a * b);

                        //This chunck of variables are used to prevent repeated calculations of offsets
                        long dimIndex0 = 0 + limits.LongLength;
                        long dimIndex1 = 1 + limits.LongLength;
                        long dimIndex2 = 2 + limits.LongLength;

                        long opsOuter = @out.Shape.Dimensions[0 + limits.LongLength].Length;
                        long opsInner = @out.Shape.Dimensions[1 + limits.LongLength].Length;
                        long opsInnerInner = @out.Shape.Dimensions[2 + limits.LongLength].Length;

                        long outerStride3 = @out.Shape.Dimensions[dimIndex0].Stride;
                        long innerStride3 = @out.Shape.Dimensions[dimIndex1].Stride;
                        long innerInnerStride3 = @out.Shape.Dimensions[dimIndex2].Stride;
                        outerStride3 -= innerStride3 * @out.Shape.Dimensions[dimIndex1].Length;
                        innerStride3 -= innerInnerStride3 * @out.Shape.Dimensions[dimIndex2].Length;

                        for (long outer = 0; outer < totalOps; outer++)
                        {
                            //Get the array offset for the first element in the outer dimension
                            long ix3 = @out.Shape[counters];

                            for (long i = 0; i < opsOuter; i++)
                            {
                                for (long j = 0; j < opsInner; j++)
                                {
                                    for (long k = 0; k < opsInnerInner; k++)
                                    {
                                        d2[ix3] = op.Op(scalar);
                                        ix3 += innerInnerStride3;
                                    }

                                    ix3 += innerStride3;
                                }

                                ix3 += outerStride3;
                            }

                            if (counters.LongLength > 0)
                            {
                                //Basically a ripple carry adder
                                long p = counters.LongLength - 1;
                                while (++counters[p] == limits[p] && p > 0)
                                {
                                    counters[p] = 0;
                                    p--;
                                }
                            }
                        }
                    }
                }
            }
        }
        /// <summary>
        /// Unsafe implementation of applying a unary operation
        /// </summary>
        /// <typeparam name="C">The type of operation to perform</typeparam>
        /// <param name="op">The operation instance</param>
        /// <param name="in1">The input argument</param>
        /// <param name="out">The output target</param>
        internal static void UFunc_Op_Inner_Unary_Flush_Single_TypedImpl<C>(NumCIL.Float.Ceiling op, NdArray<System.Single> in1, NdArray<System.Single> @out)
            where C : IUnaryOp<System.Single>
        {
            unsafe
            {
                using (var f1 = new Pinner(in1.DataAccessor))
                using (var f2 = new Pinner(@out.DataAccessor))
                {
                    var d1 = (System.Single*)f1.ptr;
                    var d2 = (System.Single*)f2.ptr;

                    if (@out.Shape.Dimensions.Length == 1)
                    {
                        long totalOps = @out.Shape.Dimensions[0].Length;

                        long ix1 = in1.Shape.Offset;
                        long ix2 = @out.Shape.Offset;

                        long stride1 = in1.Shape.Dimensions[0].Stride;
                        long stride2 = @out.Shape.Dimensions[0].Stride;


                        if (stride1 == stride2 && ix1 == ix2)
                        {
                            //Best case, all are equal, just keep a single counter
                            for (long i = 0; i < totalOps; i++)
                            {
                                d2[ix1] = (System.Single)(Math.Ceiling(d1[ix1]));
                                ix1 += stride1;
                            }
                        }
                        else
                        {
                            for (long i = 0; i < totalOps; i++)
                            {
                                d2[ix2] = (System.Single)(Math.Ceiling(d1[ix1]));
                                ix1 += stride1;
                                ix2 += stride2;
                            }
                        }
                    }
                    else if (@out.Shape.Dimensions.Length == 2)
                    {
                        long opsOuter = @out.Shape.Dimensions[0].Length;
                        long opsInner = @out.Shape.Dimensions[1].Length;

                        long ix1 = in1.Shape.Offset;
                        long ix2 = @out.Shape.Offset;

                        long outerStride1 = in1.Shape.Dimensions[0].Stride;
                        long outerStride2 = @out.Shape.Dimensions[0].Stride;

                        long innerStride1 = in1.Shape.Dimensions[1].Stride;
                        long innerStride2 = @out.Shape.Dimensions[1].Stride;

                        outerStride1 -= innerStride1 * in1.Shape.Dimensions[1].Length;
                        outerStride2 -= innerStride2 * @out.Shape.Dimensions[1].Length;

                        for (long i = 0; i < opsOuter; i++)
                        {
                            for (long j = 0; j < opsInner; j++)
                            {
                                d2[ix2] = (System.Single)(Math.Ceiling(d1[ix1]));
                                ix1 += innerStride1;
                                ix2 += innerStride2;
                            }

                            ix1 += outerStride1;
                            ix2 += outerStride2;
                        }
                    }
                    else
                    {
                        long n = in1.Shape.Dimensions.LongLength - 3;
                        long[] limits = in1.Shape.Dimensions.Where(x => n-- > 0).Select(x => x.Length).ToArray();
                        long[] counters = new long[limits.LongLength];

                        long totalOps = limits.LongLength == 0 ? 1 : limits.Aggregate<long>((a, b) => a * b);

                        //This chunck of variables are used to prevent repeated calculations of offsets
                        long dimIndex0 = 0 + limits.LongLength;
                        long dimIndex1 = 1 + limits.LongLength;
                        long dimIndex2 = 2 + limits.LongLength;

                        long opsOuter = @out.Shape.Dimensions[0 + limits.LongLength].Length;
                        long opsInner = @out.Shape.Dimensions[1 + limits.LongLength].Length;
                        long opsInnerInner = @out.Shape.Dimensions[2 + limits.LongLength].Length;

                        long outerStride1 = in1.Shape.Dimensions[dimIndex0].Stride;
                        long outerStride3 = @out.Shape.Dimensions[dimIndex0].Stride;

                        long innerStride1 = in1.Shape.Dimensions[dimIndex1].Stride;
                        long innerStride3 = @out.Shape.Dimensions[dimIndex1].Stride;

                        long innerInnerStride1 = in1.Shape.Dimensions[dimIndex2].Stride;
                        long innerInnerStride3 = @out.Shape.Dimensions[dimIndex2].Stride;

                        outerStride1 -= innerStride1 * in1.Shape.Dimensions[dimIndex1].Length;
                        outerStride3 -= innerStride3 * @out.Shape.Dimensions[dimIndex1].Length;

                        innerStride1 -= innerInnerStride1 * in1.Shape.Dimensions[dimIndex2].Length;
                        innerStride3 -= innerInnerStride3 * @out.Shape.Dimensions[dimIndex2].Length;

                        for (long outer = 0; outer < totalOps; outer++)
                        {
                            //Get the array offset for the first element in the outer dimension
                            long ix1 = in1.Shape[counters];
                            long ix3 = @out.Shape[counters];


                            for (long i = 0; i < opsOuter; i++)
                            {
                                for (long j = 0; j < opsInner; j++)
                                {
                                    for (long k = 0; k < opsInnerInner; k++)
                                    {
                                        d2[ix3] = (System.Single)(Math.Ceiling(d1[ix1]));
                                        ix1 += innerInnerStride1;
                                        ix3 += innerInnerStride3;
                                    }

                                    ix1 += innerStride1;
                                    ix3 += innerStride3;
                                }

                                ix1 += outerStride1;
                                ix3 += outerStride3;
                            }

                            if (counters.LongLength > 0)
                            {
                                //Basically a ripple carry adder
                                long p = counters.LongLength - 1;
                                while (++counters[p] == limits[p] && p > 0)
                                {
                                    counters[p] = 0;
                                    p--;
                                }
                            }
                        }
                    }
                }
            }
        }

        /// <summary>
        /// Unsafe implementation of applying a unary operation
        /// </summary>
        /// <typeparam name="C">The type of operation to perform</typeparam>
        /// <param name="op">The operation instance</param>
        /// <param name="scalar">The input scalar argument</param>
        /// <param name="out">The output target</param>
        internal static void UFunc_Op_Inner_Unary_Scalar_Flush_Single_TypedImpl<C>(NumCIL.Float.Ceiling op, System.Single scalar, NdArray<System.Single> @out)
            where C : IUnaryOp<System.Single>
        {
            unsafe
            {
                using (var f2 = new Pinner(@out.DataAccessor))
                {
                    var d2 = (System.Single*)f2.ptr;

                    if (@out.Shape.Dimensions.Length == 1)
                    {
                        long totalOps = @out.Shape.Dimensions[0].Length;
                        long ix2 = @out.Shape.Offset;
                        long stride2 = @out.Shape.Dimensions[0].Stride;

                        for (long i = 0; i < totalOps; i++)
                        {
                            d2[ix2] = (System.Single)(Math.Ceiling(scalar));
                            ix2 += stride2;
                        }
                    }
                    else if (@out.Shape.Dimensions.Length == 2)
                    {
                        long opsOuter = @out.Shape.Dimensions[0].Length;
                        long opsInner = @out.Shape.Dimensions[1].Length;

                        long ix2 = @out.Shape.Offset;
                        long outerStride2 = @out.Shape.Dimensions[0].Stride;
                        long innerStride2 = @out.Shape.Dimensions[1].Stride;
                        outerStride2 -= innerStride2 * @out.Shape.Dimensions[1].Length;

                        for (long i = 0; i < opsOuter; i++)
                        {
                            for (long j = 0; j < opsInner; j++)
                            {
                                d2[ix2] = (System.Single)(Math.Ceiling(scalar));
                                ix2 += innerStride2;
                            }

                            ix2 += outerStride2;
                        }
                    }
                    else
                    {
                        long n = @out.Shape.Dimensions.LongLength - 3;
                        long[] limits = @out.Shape.Dimensions.Where(x => n-- > 0).Select(x => x.Length).ToArray();
                        long[] counters = new long[limits.LongLength];

                        long totalOps = limits.LongLength == 0 ? 1 : limits.Aggregate<long>((a, b) => a * b);

                        //This chunck of variables are used to prevent repeated calculations of offsets
                        long dimIndex0 = 0 + limits.LongLength;
                        long dimIndex1 = 1 + limits.LongLength;
                        long dimIndex2 = 2 + limits.LongLength;

                        long opsOuter = @out.Shape.Dimensions[0 + limits.LongLength].Length;
                        long opsInner = @out.Shape.Dimensions[1 + limits.LongLength].Length;
                        long opsInnerInner = @out.Shape.Dimensions[2 + limits.LongLength].Length;

                        long outerStride3 = @out.Shape.Dimensions[dimIndex0].Stride;
                        long innerStride3 = @out.Shape.Dimensions[dimIndex1].Stride;
                        long innerInnerStride3 = @out.Shape.Dimensions[dimIndex2].Stride;
                        outerStride3 -= innerStride3 * @out.Shape.Dimensions[dimIndex1].Length;
                        innerStride3 -= innerInnerStride3 * @out.Shape.Dimensions[dimIndex2].Length;

                        for (long outer = 0; outer < totalOps; outer++)
                        {
                            //Get the array offset for the first element in the outer dimension
                            long ix3 = @out.Shape[counters];

                            for (long i = 0; i < opsOuter; i++)
                            {
                                for (long j = 0; j < opsInner; j++)
                                {
                                    for (long k = 0; k < opsInnerInner; k++)
                                    {
                                        d2[ix3] = (System.Single)(Math.Ceiling(scalar));
                                        ix3 += innerInnerStride3;
                                    }

                                    ix3 += innerStride3;
                                }

                                ix3 += outerStride3;
                            }

                            if (counters.LongLength > 0)
                            {
                                //Basically a ripple carry adder
                                long p = counters.LongLength - 1;
                                while (++counters[p] == limits[p] && p > 0)
                                {
                                    counters[p] = 0;
                                    p--;
                                }
                            }
                        }
                    }
                }
            }
        }
        /// <summary>
        /// Unsafe implementation of applying a unary operation
        /// </summary>
        /// <typeparam name="C">The type of operation to perform</typeparam>
        /// <param name="op">The operation instance</param>
        /// <param name="in1">The input argument</param>
        /// <param name="out">The output target</param>
        internal static void UFunc_Op_Inner_Unary_Flush_Double_TypedImpl<C>(NumCIL.Double.Ceiling op, NdArray<System.Double> in1, NdArray<System.Double> @out)
            where C : IUnaryOp<System.Double>
        {
            unsafe
            {
                using (var f1 = new Pinner(in1.DataAccessor))
                using (var f2 = new Pinner(@out.DataAccessor))
                {
                    var d1 = (System.Double*)f1.ptr;
                    var d2 = (System.Double*)f2.ptr;

                    if (@out.Shape.Dimensions.Length == 1)
                    {
                        long totalOps = @out.Shape.Dimensions[0].Length;

                        long ix1 = in1.Shape.Offset;
                        long ix2 = @out.Shape.Offset;

                        long stride1 = in1.Shape.Dimensions[0].Stride;
                        long stride2 = @out.Shape.Dimensions[0].Stride;


                        if (stride1 == stride2 && ix1 == ix2)
                        {
                            //Best case, all are equal, just keep a single counter
                            for (long i = 0; i < totalOps; i++)
                            {
                                d2[ix1] = (System.Double)(Math.Ceiling(d1[ix1]));
                                ix1 += stride1;
                            }
                        }
                        else
                        {
                            for (long i = 0; i < totalOps; i++)
                            {
                                d2[ix2] = (System.Double)(Math.Ceiling(d1[ix1]));
                                ix1 += stride1;
                                ix2 += stride2;
                            }
                        }
                    }
                    else if (@out.Shape.Dimensions.Length == 2)
                    {
                        long opsOuter = @out.Shape.Dimensions[0].Length;
                        long opsInner = @out.Shape.Dimensions[1].Length;

                        long ix1 = in1.Shape.Offset;
                        long ix2 = @out.Shape.Offset;

                        long outerStride1 = in1.Shape.Dimensions[0].Stride;
                        long outerStride2 = @out.Shape.Dimensions[0].Stride;

                        long innerStride1 = in1.Shape.Dimensions[1].Stride;
                        long innerStride2 = @out.Shape.Dimensions[1].Stride;

                        outerStride1 -= innerStride1 * in1.Shape.Dimensions[1].Length;
                        outerStride2 -= innerStride2 * @out.Shape.Dimensions[1].Length;

                        for (long i = 0; i < opsOuter; i++)
                        {
                            for (long j = 0; j < opsInner; j++)
                            {
                                d2[ix2] = (System.Double)(Math.Ceiling(d1[ix1]));
                                ix1 += innerStride1;
                                ix2 += innerStride2;
                            }

                            ix1 += outerStride1;
                            ix2 += outerStride2;
                        }
                    }
                    else
                    {
                        long n = in1.Shape.Dimensions.LongLength - 3;
                        long[] limits = in1.Shape.Dimensions.Where(x => n-- > 0).Select(x => x.Length).ToArray();
                        long[] counters = new long[limits.LongLength];

                        long totalOps = limits.LongLength == 0 ? 1 : limits.Aggregate<long>((a, b) => a * b);

                        //This chunck of variables are used to prevent repeated calculations of offsets
                        long dimIndex0 = 0 + limits.LongLength;
                        long dimIndex1 = 1 + limits.LongLength;
                        long dimIndex2 = 2 + limits.LongLength;

                        long opsOuter = @out.Shape.Dimensions[0 + limits.LongLength].Length;
                        long opsInner = @out.Shape.Dimensions[1 + limits.LongLength].Length;
                        long opsInnerInner = @out.Shape.Dimensions[2 + limits.LongLength].Length;

                        long outerStride1 = in1.Shape.Dimensions[dimIndex0].Stride;
                        long outerStride3 = @out.Shape.Dimensions[dimIndex0].Stride;

                        long innerStride1 = in1.Shape.Dimensions[dimIndex1].Stride;
                        long innerStride3 = @out.Shape.Dimensions[dimIndex1].Stride;

                        long innerInnerStride1 = in1.Shape.Dimensions[dimIndex2].Stride;
                        long innerInnerStride3 = @out.Shape.Dimensions[dimIndex2].Stride;

                        outerStride1 -= innerStride1 * in1.Shape.Dimensions[dimIndex1].Length;
                        outerStride3 -= innerStride3 * @out.Shape.Dimensions[dimIndex1].Length;

                        innerStride1 -= innerInnerStride1 * in1.Shape.Dimensions[dimIndex2].Length;
                        innerStride3 -= innerInnerStride3 * @out.Shape.Dimensions[dimIndex2].Length;

                        for (long outer = 0; outer < totalOps; outer++)
                        {
                            //Get the array offset for the first element in the outer dimension
                            long ix1 = in1.Shape[counters];
                            long ix3 = @out.Shape[counters];


                            for (long i = 0; i < opsOuter; i++)
                            {
                                for (long j = 0; j < opsInner; j++)
                                {
                                    for (long k = 0; k < opsInnerInner; k++)
                                    {
                                        d2[ix3] = (System.Double)(Math.Ceiling(d1[ix1]));
                                        ix1 += innerInnerStride1;
                                        ix3 += innerInnerStride3;
                                    }

                                    ix1 += innerStride1;
                                    ix3 += innerStride3;
                                }

                                ix1 += outerStride1;
                                ix3 += outerStride3;
                            }

                            if (counters.LongLength > 0)
                            {
                                //Basically a ripple carry adder
                                long p = counters.LongLength - 1;
                                while (++counters[p] == limits[p] && p > 0)
                                {
                                    counters[p] = 0;
                                    p--;
                                }
                            }
                        }
                    }
                }
            }
        }

        /// <summary>
        /// Unsafe implementation of applying a unary operation
        /// </summary>
        /// <typeparam name="C">The type of operation to perform</typeparam>
        /// <param name="op">The operation instance</param>
        /// <param name="scalar">The input scalar argument</param>
        /// <param name="out">The output target</param>
        internal static void UFunc_Op_Inner_Unary_Scalar_Flush_Double_TypedImpl<C>(NumCIL.Double.Ceiling op, System.Double scalar, NdArray<System.Double> @out)
            where C : IUnaryOp<System.Double>
        {
            unsafe
            {
                using (var f2 = new Pinner(@out.DataAccessor))
                {
                    var d2 = (System.Double*)f2.ptr;

                    if (@out.Shape.Dimensions.Length == 1)
                    {
                        long totalOps = @out.Shape.Dimensions[0].Length;
                        long ix2 = @out.Shape.Offset;
                        long stride2 = @out.Shape.Dimensions[0].Stride;

                        for (long i = 0; i < totalOps; i++)
                        {
                            d2[ix2] = (System.Double)(Math.Ceiling(scalar));
                            ix2 += stride2;
                        }
                    }
                    else if (@out.Shape.Dimensions.Length == 2)
                    {
                        long opsOuter = @out.Shape.Dimensions[0].Length;
                        long opsInner = @out.Shape.Dimensions[1].Length;

                        long ix2 = @out.Shape.Offset;
                        long outerStride2 = @out.Shape.Dimensions[0].Stride;
                        long innerStride2 = @out.Shape.Dimensions[1].Stride;
                        outerStride2 -= innerStride2 * @out.Shape.Dimensions[1].Length;

                        for (long i = 0; i < opsOuter; i++)
                        {
                            for (long j = 0; j < opsInner; j++)
                            {
                                d2[ix2] = (System.Double)(Math.Ceiling(scalar));
                                ix2 += innerStride2;
                            }

                            ix2 += outerStride2;
                        }
                    }
                    else
                    {
                        long n = @out.Shape.Dimensions.LongLength - 3;
                        long[] limits = @out.Shape.Dimensions.Where(x => n-- > 0).Select(x => x.Length).ToArray();
                        long[] counters = new long[limits.LongLength];

                        long totalOps = limits.LongLength == 0 ? 1 : limits.Aggregate<long>((a, b) => a * b);

                        //This chunck of variables are used to prevent repeated calculations of offsets
                        long dimIndex0 = 0 + limits.LongLength;
                        long dimIndex1 = 1 + limits.LongLength;
                        long dimIndex2 = 2 + limits.LongLength;

                        long opsOuter = @out.Shape.Dimensions[0 + limits.LongLength].Length;
                        long opsInner = @out.Shape.Dimensions[1 + limits.LongLength].Length;
                        long opsInnerInner = @out.Shape.Dimensions[2 + limits.LongLength].Length;

                        long outerStride3 = @out.Shape.Dimensions[dimIndex0].Stride;
                        long innerStride3 = @out.Shape.Dimensions[dimIndex1].Stride;
                        long innerInnerStride3 = @out.Shape.Dimensions[dimIndex2].Stride;
                        outerStride3 -= innerStride3 * @out.Shape.Dimensions[dimIndex1].Length;
                        innerStride3 -= innerInnerStride3 * @out.Shape.Dimensions[dimIndex2].Length;

                        for (long outer = 0; outer < totalOps; outer++)
                        {
                            //Get the array offset for the first element in the outer dimension
                            long ix3 = @out.Shape[counters];

                            for (long i = 0; i < opsOuter; i++)
                            {
                                for (long j = 0; j < opsInner; j++)
                                {
                                    for (long k = 0; k < opsInnerInner; k++)
                                    {
                                        d2[ix3] = (System.Double)(Math.Ceiling(scalar));
                                        ix3 += innerInnerStride3;
                                    }

                                    ix3 += innerStride3;
                                }

                                ix3 += outerStride3;
                            }

                            if (counters.LongLength > 0)
                            {
                                //Basically a ripple carry adder
                                long p = counters.LongLength - 1;
                                while (++counters[p] == limits[p] && p > 0)
                                {
                                    counters[p] = 0;
                                    p--;
                                }
                            }
                        }
                    }
                }
            }
        }
        /// <summary>
        /// Unsafe implementation of applying a unary operation
        /// </summary>
        /// <typeparam name="C">The type of operation to perform</typeparam>
        /// <param name="op">The operation instance</param>
        /// <param name="in1">The input argument</param>
        /// <param name="out">The output target</param>
        internal static void UFunc_Op_Inner_Unary_Flush_Single_TypedImpl<C>(NumCIL.Float.Floor op, NdArray<System.Single> in1, NdArray<System.Single> @out)
            where C : IUnaryOp<System.Single>
        {
            unsafe
            {
                using (var f1 = new Pinner(in1.DataAccessor))
                using (var f2 = new Pinner(@out.DataAccessor))
                {
                    var d1 = (System.Single*)f1.ptr;
                    var d2 = (System.Single*)f2.ptr;

                    if (@out.Shape.Dimensions.Length == 1)
                    {
                        long totalOps = @out.Shape.Dimensions[0].Length;

                        long ix1 = in1.Shape.Offset;
                        long ix2 = @out.Shape.Offset;

                        long stride1 = in1.Shape.Dimensions[0].Stride;
                        long stride2 = @out.Shape.Dimensions[0].Stride;


                        if (stride1 == stride2 && ix1 == ix2)
                        {
                            //Best case, all are equal, just keep a single counter
                            for (long i = 0; i < totalOps; i++)
                            {
                                d2[ix1] = (System.Single)(Math.Floor(d1[ix1]));
                                ix1 += stride1;
                            }
                        }
                        else
                        {
                            for (long i = 0; i < totalOps; i++)
                            {
                                d2[ix2] = (System.Single)(Math.Floor(d1[ix1]));
                                ix1 += stride1;
                                ix2 += stride2;
                            }
                        }
                    }
                    else if (@out.Shape.Dimensions.Length == 2)
                    {
                        long opsOuter = @out.Shape.Dimensions[0].Length;
                        long opsInner = @out.Shape.Dimensions[1].Length;

                        long ix1 = in1.Shape.Offset;
                        long ix2 = @out.Shape.Offset;

                        long outerStride1 = in1.Shape.Dimensions[0].Stride;
                        long outerStride2 = @out.Shape.Dimensions[0].Stride;

                        long innerStride1 = in1.Shape.Dimensions[1].Stride;
                        long innerStride2 = @out.Shape.Dimensions[1].Stride;

                        outerStride1 -= innerStride1 * in1.Shape.Dimensions[1].Length;
                        outerStride2 -= innerStride2 * @out.Shape.Dimensions[1].Length;

                        for (long i = 0; i < opsOuter; i++)
                        {
                            for (long j = 0; j < opsInner; j++)
                            {
                                d2[ix2] = (System.Single)(Math.Floor(d1[ix1]));
                                ix1 += innerStride1;
                                ix2 += innerStride2;
                            }

                            ix1 += outerStride1;
                            ix2 += outerStride2;
                        }
                    }
                    else
                    {
                        long n = in1.Shape.Dimensions.LongLength - 3;
                        long[] limits = in1.Shape.Dimensions.Where(x => n-- > 0).Select(x => x.Length).ToArray();
                        long[] counters = new long[limits.LongLength];

                        long totalOps = limits.LongLength == 0 ? 1 : limits.Aggregate<long>((a, b) => a * b);

                        //This chunck of variables are used to prevent repeated calculations of offsets
                        long dimIndex0 = 0 + limits.LongLength;
                        long dimIndex1 = 1 + limits.LongLength;
                        long dimIndex2 = 2 + limits.LongLength;

                        long opsOuter = @out.Shape.Dimensions[0 + limits.LongLength].Length;
                        long opsInner = @out.Shape.Dimensions[1 + limits.LongLength].Length;
                        long opsInnerInner = @out.Shape.Dimensions[2 + limits.LongLength].Length;

                        long outerStride1 = in1.Shape.Dimensions[dimIndex0].Stride;
                        long outerStride3 = @out.Shape.Dimensions[dimIndex0].Stride;

                        long innerStride1 = in1.Shape.Dimensions[dimIndex1].Stride;
                        long innerStride3 = @out.Shape.Dimensions[dimIndex1].Stride;

                        long innerInnerStride1 = in1.Shape.Dimensions[dimIndex2].Stride;
                        long innerInnerStride3 = @out.Shape.Dimensions[dimIndex2].Stride;

                        outerStride1 -= innerStride1 * in1.Shape.Dimensions[dimIndex1].Length;
                        outerStride3 -= innerStride3 * @out.Shape.Dimensions[dimIndex1].Length;

                        innerStride1 -= innerInnerStride1 * in1.Shape.Dimensions[dimIndex2].Length;
                        innerStride3 -= innerInnerStride3 * @out.Shape.Dimensions[dimIndex2].Length;

                        for (long outer = 0; outer < totalOps; outer++)
                        {
                            //Get the array offset for the first element in the outer dimension
                            long ix1 = in1.Shape[counters];
                            long ix3 = @out.Shape[counters];


                            for (long i = 0; i < opsOuter; i++)
                            {
                                for (long j = 0; j < opsInner; j++)
                                {
                                    for (long k = 0; k < opsInnerInner; k++)
                                    {
                                        d2[ix3] = (System.Single)(Math.Floor(d1[ix1]));
                                        ix1 += innerInnerStride1;
                                        ix3 += innerInnerStride3;
                                    }

                                    ix1 += innerStride1;
                                    ix3 += innerStride3;
                                }

                                ix1 += outerStride1;
                                ix3 += outerStride3;
                            }

                            if (counters.LongLength > 0)
                            {
                                //Basically a ripple carry adder
                                long p = counters.LongLength - 1;
                                while (++counters[p] == limits[p] && p > 0)
                                {
                                    counters[p] = 0;
                                    p--;
                                }
                            }
                        }
                    }
                }
            }
        }

        /// <summary>
        /// Unsafe implementation of applying a unary operation
        /// </summary>
        /// <typeparam name="C">The type of operation to perform</typeparam>
        /// <param name="op">The operation instance</param>
        /// <param name="scalar">The input scalar argument</param>
        /// <param name="out">The output target</param>
        internal static void UFunc_Op_Inner_Unary_Scalar_Flush_Single_TypedImpl<C>(NumCIL.Float.Floor op, System.Single scalar, NdArray<System.Single> @out)
            where C : IUnaryOp<System.Single>
        {
            unsafe
            {
                using (var f2 = new Pinner(@out.DataAccessor))
                {
                    var d2 = (System.Single*)f2.ptr;

                    if (@out.Shape.Dimensions.Length == 1)
                    {
                        long totalOps = @out.Shape.Dimensions[0].Length;
                        long ix2 = @out.Shape.Offset;
                        long stride2 = @out.Shape.Dimensions[0].Stride;

                        for (long i = 0; i < totalOps; i++)
                        {
                            d2[ix2] = (System.Single)(Math.Floor(scalar));
                            ix2 += stride2;
                        }
                    }
                    else if (@out.Shape.Dimensions.Length == 2)
                    {
                        long opsOuter = @out.Shape.Dimensions[0].Length;
                        long opsInner = @out.Shape.Dimensions[1].Length;

                        long ix2 = @out.Shape.Offset;
                        long outerStride2 = @out.Shape.Dimensions[0].Stride;
                        long innerStride2 = @out.Shape.Dimensions[1].Stride;
                        outerStride2 -= innerStride2 * @out.Shape.Dimensions[1].Length;

                        for (long i = 0; i < opsOuter; i++)
                        {
                            for (long j = 0; j < opsInner; j++)
                            {
                                d2[ix2] = (System.Single)(Math.Floor(scalar));
                                ix2 += innerStride2;
                            }

                            ix2 += outerStride2;
                        }
                    }
                    else
                    {
                        long n = @out.Shape.Dimensions.LongLength - 3;
                        long[] limits = @out.Shape.Dimensions.Where(x => n-- > 0).Select(x => x.Length).ToArray();
                        long[] counters = new long[limits.LongLength];

                        long totalOps = limits.LongLength == 0 ? 1 : limits.Aggregate<long>((a, b) => a * b);

                        //This chunck of variables are used to prevent repeated calculations of offsets
                        long dimIndex0 = 0 + limits.LongLength;
                        long dimIndex1 = 1 + limits.LongLength;
                        long dimIndex2 = 2 + limits.LongLength;

                        long opsOuter = @out.Shape.Dimensions[0 + limits.LongLength].Length;
                        long opsInner = @out.Shape.Dimensions[1 + limits.LongLength].Length;
                        long opsInnerInner = @out.Shape.Dimensions[2 + limits.LongLength].Length;

                        long outerStride3 = @out.Shape.Dimensions[dimIndex0].Stride;
                        long innerStride3 = @out.Shape.Dimensions[dimIndex1].Stride;
                        long innerInnerStride3 = @out.Shape.Dimensions[dimIndex2].Stride;
                        outerStride3 -= innerStride3 * @out.Shape.Dimensions[dimIndex1].Length;
                        innerStride3 -= innerInnerStride3 * @out.Shape.Dimensions[dimIndex2].Length;

                        for (long outer = 0; outer < totalOps; outer++)
                        {
                            //Get the array offset for the first element in the outer dimension
                            long ix3 = @out.Shape[counters];

                            for (long i = 0; i < opsOuter; i++)
                            {
                                for (long j = 0; j < opsInner; j++)
                                {
                                    for (long k = 0; k < opsInnerInner; k++)
                                    {
                                        d2[ix3] = (System.Single)(Math.Floor(scalar));
                                        ix3 += innerInnerStride3;
                                    }

                                    ix3 += innerStride3;
                                }

                                ix3 += outerStride3;
                            }

                            if (counters.LongLength > 0)
                            {
                                //Basically a ripple carry adder
                                long p = counters.LongLength - 1;
                                while (++counters[p] == limits[p] && p > 0)
                                {
                                    counters[p] = 0;
                                    p--;
                                }
                            }
                        }
                    }
                }
            }
        }
        /// <summary>
        /// Unsafe implementation of applying a unary operation
        /// </summary>
        /// <typeparam name="C">The type of operation to perform</typeparam>
        /// <param name="op">The operation instance</param>
        /// <param name="in1">The input argument</param>
        /// <param name="out">The output target</param>
        internal static void UFunc_Op_Inner_Unary_Flush_Double_TypedImpl<C>(NumCIL.Double.Floor op, NdArray<System.Double> in1, NdArray<System.Double> @out)
            where C : IUnaryOp<System.Double>
        {
            unsafe
            {
                using (var f1 = new Pinner(in1.DataAccessor))
                using (var f2 = new Pinner(@out.DataAccessor))
                {
                    var d1 = (System.Double*)f1.ptr;
                    var d2 = (System.Double*)f2.ptr;

                    if (@out.Shape.Dimensions.Length == 1)
                    {
                        long totalOps = @out.Shape.Dimensions[0].Length;

                        long ix1 = in1.Shape.Offset;
                        long ix2 = @out.Shape.Offset;

                        long stride1 = in1.Shape.Dimensions[0].Stride;
                        long stride2 = @out.Shape.Dimensions[0].Stride;


                        if (stride1 == stride2 && ix1 == ix2)
                        {
                            //Best case, all are equal, just keep a single counter
                            for (long i = 0; i < totalOps; i++)
                            {
                                d2[ix1] = (System.Double)(Math.Floor(d1[ix1]));
                                ix1 += stride1;
                            }
                        }
                        else
                        {
                            for (long i = 0; i < totalOps; i++)
                            {
                                d2[ix2] = (System.Double)(Math.Floor(d1[ix1]));
                                ix1 += stride1;
                                ix2 += stride2;
                            }
                        }
                    }
                    else if (@out.Shape.Dimensions.Length == 2)
                    {
                        long opsOuter = @out.Shape.Dimensions[0].Length;
                        long opsInner = @out.Shape.Dimensions[1].Length;

                        long ix1 = in1.Shape.Offset;
                        long ix2 = @out.Shape.Offset;

                        long outerStride1 = in1.Shape.Dimensions[0].Stride;
                        long outerStride2 = @out.Shape.Dimensions[0].Stride;

                        long innerStride1 = in1.Shape.Dimensions[1].Stride;
                        long innerStride2 = @out.Shape.Dimensions[1].Stride;

                        outerStride1 -= innerStride1 * in1.Shape.Dimensions[1].Length;
                        outerStride2 -= innerStride2 * @out.Shape.Dimensions[1].Length;

                        for (long i = 0; i < opsOuter; i++)
                        {
                            for (long j = 0; j < opsInner; j++)
                            {
                                d2[ix2] = (System.Double)(Math.Floor(d1[ix1]));
                                ix1 += innerStride1;
                                ix2 += innerStride2;
                            }

                            ix1 += outerStride1;
                            ix2 += outerStride2;
                        }
                    }
                    else
                    {
                        long n = in1.Shape.Dimensions.LongLength - 3;
                        long[] limits = in1.Shape.Dimensions.Where(x => n-- > 0).Select(x => x.Length).ToArray();
                        long[] counters = new long[limits.LongLength];

                        long totalOps = limits.LongLength == 0 ? 1 : limits.Aggregate<long>((a, b) => a * b);

                        //This chunck of variables are used to prevent repeated calculations of offsets
                        long dimIndex0 = 0 + limits.LongLength;
                        long dimIndex1 = 1 + limits.LongLength;
                        long dimIndex2 = 2 + limits.LongLength;

                        long opsOuter = @out.Shape.Dimensions[0 + limits.LongLength].Length;
                        long opsInner = @out.Shape.Dimensions[1 + limits.LongLength].Length;
                        long opsInnerInner = @out.Shape.Dimensions[2 + limits.LongLength].Length;

                        long outerStride1 = in1.Shape.Dimensions[dimIndex0].Stride;
                        long outerStride3 = @out.Shape.Dimensions[dimIndex0].Stride;

                        long innerStride1 = in1.Shape.Dimensions[dimIndex1].Stride;
                        long innerStride3 = @out.Shape.Dimensions[dimIndex1].Stride;

                        long innerInnerStride1 = in1.Shape.Dimensions[dimIndex2].Stride;
                        long innerInnerStride3 = @out.Shape.Dimensions[dimIndex2].Stride;

                        outerStride1 -= innerStride1 * in1.Shape.Dimensions[dimIndex1].Length;
                        outerStride3 -= innerStride3 * @out.Shape.Dimensions[dimIndex1].Length;

                        innerStride1 -= innerInnerStride1 * in1.Shape.Dimensions[dimIndex2].Length;
                        innerStride3 -= innerInnerStride3 * @out.Shape.Dimensions[dimIndex2].Length;

                        for (long outer = 0; outer < totalOps; outer++)
                        {
                            //Get the array offset for the first element in the outer dimension
                            long ix1 = in1.Shape[counters];
                            long ix3 = @out.Shape[counters];


                            for (long i = 0; i < opsOuter; i++)
                            {
                                for (long j = 0; j < opsInner; j++)
                                {
                                    for (long k = 0; k < opsInnerInner; k++)
                                    {
                                        d2[ix3] = (System.Double)(Math.Floor(d1[ix1]));
                                        ix1 += innerInnerStride1;
                                        ix3 += innerInnerStride3;
                                    }

                                    ix1 += innerStride1;
                                    ix3 += innerStride3;
                                }

                                ix1 += outerStride1;
                                ix3 += outerStride3;
                            }

                            if (counters.LongLength > 0)
                            {
                                //Basically a ripple carry adder
                                long p = counters.LongLength - 1;
                                while (++counters[p] == limits[p] && p > 0)
                                {
                                    counters[p] = 0;
                                    p--;
                                }
                            }
                        }
                    }
                }
            }
        }

        /// <summary>
        /// Unsafe implementation of applying a unary operation
        /// </summary>
        /// <typeparam name="C">The type of operation to perform</typeparam>
        /// <param name="op">The operation instance</param>
        /// <param name="scalar">The input scalar argument</param>
        /// <param name="out">The output target</param>
        internal static void UFunc_Op_Inner_Unary_Scalar_Flush_Double_TypedImpl<C>(NumCIL.Double.Floor op, System.Double scalar, NdArray<System.Double> @out)
            where C : IUnaryOp<System.Double>
        {
            unsafe
            {
                using (var f2 = new Pinner(@out.DataAccessor))
                {
                    var d2 = (System.Double*)f2.ptr;

                    if (@out.Shape.Dimensions.Length == 1)
                    {
                        long totalOps = @out.Shape.Dimensions[0].Length;
                        long ix2 = @out.Shape.Offset;
                        long stride2 = @out.Shape.Dimensions[0].Stride;

                        for (long i = 0; i < totalOps; i++)
                        {
                            d2[ix2] = (System.Double)(Math.Floor(scalar));
                            ix2 += stride2;
                        }
                    }
                    else if (@out.Shape.Dimensions.Length == 2)
                    {
                        long opsOuter = @out.Shape.Dimensions[0].Length;
                        long opsInner = @out.Shape.Dimensions[1].Length;

                        long ix2 = @out.Shape.Offset;
                        long outerStride2 = @out.Shape.Dimensions[0].Stride;
                        long innerStride2 = @out.Shape.Dimensions[1].Stride;
                        outerStride2 -= innerStride2 * @out.Shape.Dimensions[1].Length;

                        for (long i = 0; i < opsOuter; i++)
                        {
                            for (long j = 0; j < opsInner; j++)
                            {
                                d2[ix2] = (System.Double)(Math.Floor(scalar));
                                ix2 += innerStride2;
                            }

                            ix2 += outerStride2;
                        }
                    }
                    else
                    {
                        long n = @out.Shape.Dimensions.LongLength - 3;
                        long[] limits = @out.Shape.Dimensions.Where(x => n-- > 0).Select(x => x.Length).ToArray();
                        long[] counters = new long[limits.LongLength];

                        long totalOps = limits.LongLength == 0 ? 1 : limits.Aggregate<long>((a, b) => a * b);

                        //This chunck of variables are used to prevent repeated calculations of offsets
                        long dimIndex0 = 0 + limits.LongLength;
                        long dimIndex1 = 1 + limits.LongLength;
                        long dimIndex2 = 2 + limits.LongLength;

                        long opsOuter = @out.Shape.Dimensions[0 + limits.LongLength].Length;
                        long opsInner = @out.Shape.Dimensions[1 + limits.LongLength].Length;
                        long opsInnerInner = @out.Shape.Dimensions[2 + limits.LongLength].Length;

                        long outerStride3 = @out.Shape.Dimensions[dimIndex0].Stride;
                        long innerStride3 = @out.Shape.Dimensions[dimIndex1].Stride;
                        long innerInnerStride3 = @out.Shape.Dimensions[dimIndex2].Stride;
                        outerStride3 -= innerStride3 * @out.Shape.Dimensions[dimIndex1].Length;
                        innerStride3 -= innerInnerStride3 * @out.Shape.Dimensions[dimIndex2].Length;

                        for (long outer = 0; outer < totalOps; outer++)
                        {
                            //Get the array offset for the first element in the outer dimension
                            long ix3 = @out.Shape[counters];

                            for (long i = 0; i < opsOuter; i++)
                            {
                                for (long j = 0; j < opsInner; j++)
                                {
                                    for (long k = 0; k < opsInnerInner; k++)
                                    {
                                        d2[ix3] = (System.Double)(Math.Floor(scalar));
                                        ix3 += innerInnerStride3;
                                    }

                                    ix3 += innerStride3;
                                }

                                ix3 += outerStride3;
                            }

                            if (counters.LongLength > 0)
                            {
                                //Basically a ripple carry adder
                                long p = counters.LongLength - 1;
                                while (++counters[p] == limits[p] && p > 0)
                                {
                                    counters[p] = 0;
                                    p--;
                                }
                            }
                        }
                    }
                }
            }
        }
        /// <summary>
        /// Unsafe implementation of applying a unary operation
        /// </summary>
        /// <typeparam name="C">The type of operation to perform</typeparam>
        /// <param name="op">The operation instance</param>
        /// <param name="in1">The input argument</param>
        /// <param name="out">The output target</param>
        internal static void UFunc_Op_Inner_Unary_Flush_Single_TypedImpl<C>(NumCIL.Float.Round op, NdArray<System.Single> in1, NdArray<System.Single> @out)
            where C : IUnaryOp<System.Single>
        {
            unsafe
            {
                using (var f1 = new Pinner(in1.DataAccessor))
                using (var f2 = new Pinner(@out.DataAccessor))
                {
                    var d1 = (System.Single*)f1.ptr;
                    var d2 = (System.Single*)f2.ptr;

                    if (@out.Shape.Dimensions.Length == 1)
                    {
                        long totalOps = @out.Shape.Dimensions[0].Length;

                        long ix1 = in1.Shape.Offset;
                        long ix2 = @out.Shape.Offset;

                        long stride1 = in1.Shape.Dimensions[0].Stride;
                        long stride2 = @out.Shape.Dimensions[0].Stride;


                        if (stride1 == stride2 && ix1 == ix2)
                        {
                            //Best case, all are equal, just keep a single counter
                            for (long i = 0; i < totalOps; i++)
                            {
                                d2[ix1] = (System.Single)(Math.Round(d1[ix1]));
                                ix1 += stride1;
                            }
                        }
                        else
                        {
                            for (long i = 0; i < totalOps; i++)
                            {
                                d2[ix2] = (System.Single)(Math.Round(d1[ix1]));
                                ix1 += stride1;
                                ix2 += stride2;
                            }
                        }
                    }
                    else if (@out.Shape.Dimensions.Length == 2)
                    {
                        long opsOuter = @out.Shape.Dimensions[0].Length;
                        long opsInner = @out.Shape.Dimensions[1].Length;

                        long ix1 = in1.Shape.Offset;
                        long ix2 = @out.Shape.Offset;

                        long outerStride1 = in1.Shape.Dimensions[0].Stride;
                        long outerStride2 = @out.Shape.Dimensions[0].Stride;

                        long innerStride1 = in1.Shape.Dimensions[1].Stride;
                        long innerStride2 = @out.Shape.Dimensions[1].Stride;

                        outerStride1 -= innerStride1 * in1.Shape.Dimensions[1].Length;
                        outerStride2 -= innerStride2 * @out.Shape.Dimensions[1].Length;

                        for (long i = 0; i < opsOuter; i++)
                        {
                            for (long j = 0; j < opsInner; j++)
                            {
                                d2[ix2] = (System.Single)(Math.Round(d1[ix1]));
                                ix1 += innerStride1;
                                ix2 += innerStride2;
                            }

                            ix1 += outerStride1;
                            ix2 += outerStride2;
                        }
                    }
                    else
                    {
                        long n = in1.Shape.Dimensions.LongLength - 3;
                        long[] limits = in1.Shape.Dimensions.Where(x => n-- > 0).Select(x => x.Length).ToArray();
                        long[] counters = new long[limits.LongLength];

                        long totalOps = limits.LongLength == 0 ? 1 : limits.Aggregate<long>((a, b) => a * b);

                        //This chunck of variables are used to prevent repeated calculations of offsets
                        long dimIndex0 = 0 + limits.LongLength;
                        long dimIndex1 = 1 + limits.LongLength;
                        long dimIndex2 = 2 + limits.LongLength;

                        long opsOuter = @out.Shape.Dimensions[0 + limits.LongLength].Length;
                        long opsInner = @out.Shape.Dimensions[1 + limits.LongLength].Length;
                        long opsInnerInner = @out.Shape.Dimensions[2 + limits.LongLength].Length;

                        long outerStride1 = in1.Shape.Dimensions[dimIndex0].Stride;
                        long outerStride3 = @out.Shape.Dimensions[dimIndex0].Stride;

                        long innerStride1 = in1.Shape.Dimensions[dimIndex1].Stride;
                        long innerStride3 = @out.Shape.Dimensions[dimIndex1].Stride;

                        long innerInnerStride1 = in1.Shape.Dimensions[dimIndex2].Stride;
                        long innerInnerStride3 = @out.Shape.Dimensions[dimIndex2].Stride;

                        outerStride1 -= innerStride1 * in1.Shape.Dimensions[dimIndex1].Length;
                        outerStride3 -= innerStride3 * @out.Shape.Dimensions[dimIndex1].Length;

                        innerStride1 -= innerInnerStride1 * in1.Shape.Dimensions[dimIndex2].Length;
                        innerStride3 -= innerInnerStride3 * @out.Shape.Dimensions[dimIndex2].Length;

                        for (long outer = 0; outer < totalOps; outer++)
                        {
                            //Get the array offset for the first element in the outer dimension
                            long ix1 = in1.Shape[counters];
                            long ix3 = @out.Shape[counters];


                            for (long i = 0; i < opsOuter; i++)
                            {
                                for (long j = 0; j < opsInner; j++)
                                {
                                    for (long k = 0; k < opsInnerInner; k++)
                                    {
                                        d2[ix3] = (System.Single)(Math.Round(d1[ix1]));
                                        ix1 += innerInnerStride1;
                                        ix3 += innerInnerStride3;
                                    }

                                    ix1 += innerStride1;
                                    ix3 += innerStride3;
                                }

                                ix1 += outerStride1;
                                ix3 += outerStride3;
                            }

                            if (counters.LongLength > 0)
                            {
                                //Basically a ripple carry adder
                                long p = counters.LongLength - 1;
                                while (++counters[p] == limits[p] && p > 0)
                                {
                                    counters[p] = 0;
                                    p--;
                                }
                            }
                        }
                    }
                }
            }
        }

        /// <summary>
        /// Unsafe implementation of applying a unary operation
        /// </summary>
        /// <typeparam name="C">The type of operation to perform</typeparam>
        /// <param name="op">The operation instance</param>
        /// <param name="scalar">The input scalar argument</param>
        /// <param name="out">The output target</param>
        internal static void UFunc_Op_Inner_Unary_Scalar_Flush_Single_TypedImpl<C>(NumCIL.Float.Round op, System.Single scalar, NdArray<System.Single> @out)
            where C : IUnaryOp<System.Single>
        {
            unsafe
            {
                using (var f2 = new Pinner(@out.DataAccessor))
                {
                    var d2 = (System.Single*)f2.ptr;

                    if (@out.Shape.Dimensions.Length == 1)
                    {
                        long totalOps = @out.Shape.Dimensions[0].Length;
                        long ix2 = @out.Shape.Offset;
                        long stride2 = @out.Shape.Dimensions[0].Stride;

                        for (long i = 0; i < totalOps; i++)
                        {
                            d2[ix2] = (System.Single)(Math.Round(scalar));
                            ix2 += stride2;
                        }
                    }
                    else if (@out.Shape.Dimensions.Length == 2)
                    {
                        long opsOuter = @out.Shape.Dimensions[0].Length;
                        long opsInner = @out.Shape.Dimensions[1].Length;

                        long ix2 = @out.Shape.Offset;
                        long outerStride2 = @out.Shape.Dimensions[0].Stride;
                        long innerStride2 = @out.Shape.Dimensions[1].Stride;
                        outerStride2 -= innerStride2 * @out.Shape.Dimensions[1].Length;

                        for (long i = 0; i < opsOuter; i++)
                        {
                            for (long j = 0; j < opsInner; j++)
                            {
                                d2[ix2] = (System.Single)(Math.Round(scalar));
                                ix2 += innerStride2;
                            }

                            ix2 += outerStride2;
                        }
                    }
                    else
                    {
                        long n = @out.Shape.Dimensions.LongLength - 3;
                        long[] limits = @out.Shape.Dimensions.Where(x => n-- > 0).Select(x => x.Length).ToArray();
                        long[] counters = new long[limits.LongLength];

                        long totalOps = limits.LongLength == 0 ? 1 : limits.Aggregate<long>((a, b) => a * b);

                        //This chunck of variables are used to prevent repeated calculations of offsets
                        long dimIndex0 = 0 + limits.LongLength;
                        long dimIndex1 = 1 + limits.LongLength;
                        long dimIndex2 = 2 + limits.LongLength;

                        long opsOuter = @out.Shape.Dimensions[0 + limits.LongLength].Length;
                        long opsInner = @out.Shape.Dimensions[1 + limits.LongLength].Length;
                        long opsInnerInner = @out.Shape.Dimensions[2 + limits.LongLength].Length;

                        long outerStride3 = @out.Shape.Dimensions[dimIndex0].Stride;
                        long innerStride3 = @out.Shape.Dimensions[dimIndex1].Stride;
                        long innerInnerStride3 = @out.Shape.Dimensions[dimIndex2].Stride;
                        outerStride3 -= innerStride3 * @out.Shape.Dimensions[dimIndex1].Length;
                        innerStride3 -= innerInnerStride3 * @out.Shape.Dimensions[dimIndex2].Length;

                        for (long outer = 0; outer < totalOps; outer++)
                        {
                            //Get the array offset for the first element in the outer dimension
                            long ix3 = @out.Shape[counters];

                            for (long i = 0; i < opsOuter; i++)
                            {
                                for (long j = 0; j < opsInner; j++)
                                {
                                    for (long k = 0; k < opsInnerInner; k++)
                                    {
                                        d2[ix3] = (System.Single)(Math.Round(scalar));
                                        ix3 += innerInnerStride3;
                                    }

                                    ix3 += innerStride3;
                                }

                                ix3 += outerStride3;
                            }

                            if (counters.LongLength > 0)
                            {
                                //Basically a ripple carry adder
                                long p = counters.LongLength - 1;
                                while (++counters[p] == limits[p] && p > 0)
                                {
                                    counters[p] = 0;
                                    p--;
                                }
                            }
                        }
                    }
                }
            }
        }
        /// <summary>
        /// Unsafe implementation of applying a unary operation
        /// </summary>
        /// <typeparam name="C">The type of operation to perform</typeparam>
        /// <param name="op">The operation instance</param>
        /// <param name="in1">The input argument</param>
        /// <param name="out">The output target</param>
        internal static void UFunc_Op_Inner_Unary_Flush_Double_TypedImpl<C>(NumCIL.Double.Round op, NdArray<System.Double> in1, NdArray<System.Double> @out)
            where C : IUnaryOp<System.Double>
        {
            unsafe
            {
                using (var f1 = new Pinner(in1.DataAccessor))
                using (var f2 = new Pinner(@out.DataAccessor))
                {
                    var d1 = (System.Double*)f1.ptr;
                    var d2 = (System.Double*)f2.ptr;

                    if (@out.Shape.Dimensions.Length == 1)
                    {
                        long totalOps = @out.Shape.Dimensions[0].Length;

                        long ix1 = in1.Shape.Offset;
                        long ix2 = @out.Shape.Offset;

                        long stride1 = in1.Shape.Dimensions[0].Stride;
                        long stride2 = @out.Shape.Dimensions[0].Stride;


                        if (stride1 == stride2 && ix1 == ix2)
                        {
                            //Best case, all are equal, just keep a single counter
                            for (long i = 0; i < totalOps; i++)
                            {
                                d2[ix1] = (System.Double)(Math.Round(d1[ix1]));
                                ix1 += stride1;
                            }
                        }
                        else
                        {
                            for (long i = 0; i < totalOps; i++)
                            {
                                d2[ix2] = (System.Double)(Math.Round(d1[ix1]));
                                ix1 += stride1;
                                ix2 += stride2;
                            }
                        }
                    }
                    else if (@out.Shape.Dimensions.Length == 2)
                    {
                        long opsOuter = @out.Shape.Dimensions[0].Length;
                        long opsInner = @out.Shape.Dimensions[1].Length;

                        long ix1 = in1.Shape.Offset;
                        long ix2 = @out.Shape.Offset;

                        long outerStride1 = in1.Shape.Dimensions[0].Stride;
                        long outerStride2 = @out.Shape.Dimensions[0].Stride;

                        long innerStride1 = in1.Shape.Dimensions[1].Stride;
                        long innerStride2 = @out.Shape.Dimensions[1].Stride;

                        outerStride1 -= innerStride1 * in1.Shape.Dimensions[1].Length;
                        outerStride2 -= innerStride2 * @out.Shape.Dimensions[1].Length;

                        for (long i = 0; i < opsOuter; i++)
                        {
                            for (long j = 0; j < opsInner; j++)
                            {
                                d2[ix2] = (System.Double)(Math.Round(d1[ix1]));
                                ix1 += innerStride1;
                                ix2 += innerStride2;
                            }

                            ix1 += outerStride1;
                            ix2 += outerStride2;
                        }
                    }
                    else
                    {
                        long n = in1.Shape.Dimensions.LongLength - 3;
                        long[] limits = in1.Shape.Dimensions.Where(x => n-- > 0).Select(x => x.Length).ToArray();
                        long[] counters = new long[limits.LongLength];

                        long totalOps = limits.LongLength == 0 ? 1 : limits.Aggregate<long>((a, b) => a * b);

                        //This chunck of variables are used to prevent repeated calculations of offsets
                        long dimIndex0 = 0 + limits.LongLength;
                        long dimIndex1 = 1 + limits.LongLength;
                        long dimIndex2 = 2 + limits.LongLength;

                        long opsOuter = @out.Shape.Dimensions[0 + limits.LongLength].Length;
                        long opsInner = @out.Shape.Dimensions[1 + limits.LongLength].Length;
                        long opsInnerInner = @out.Shape.Dimensions[2 + limits.LongLength].Length;

                        long outerStride1 = in1.Shape.Dimensions[dimIndex0].Stride;
                        long outerStride3 = @out.Shape.Dimensions[dimIndex0].Stride;

                        long innerStride1 = in1.Shape.Dimensions[dimIndex1].Stride;
                        long innerStride3 = @out.Shape.Dimensions[dimIndex1].Stride;

                        long innerInnerStride1 = in1.Shape.Dimensions[dimIndex2].Stride;
                        long innerInnerStride3 = @out.Shape.Dimensions[dimIndex2].Stride;

                        outerStride1 -= innerStride1 * in1.Shape.Dimensions[dimIndex1].Length;
                        outerStride3 -= innerStride3 * @out.Shape.Dimensions[dimIndex1].Length;

                        innerStride1 -= innerInnerStride1 * in1.Shape.Dimensions[dimIndex2].Length;
                        innerStride3 -= innerInnerStride3 * @out.Shape.Dimensions[dimIndex2].Length;

                        for (long outer = 0; outer < totalOps; outer++)
                        {
                            //Get the array offset for the first element in the outer dimension
                            long ix1 = in1.Shape[counters];
                            long ix3 = @out.Shape[counters];


                            for (long i = 0; i < opsOuter; i++)
                            {
                                for (long j = 0; j < opsInner; j++)
                                {
                                    for (long k = 0; k < opsInnerInner; k++)
                                    {
                                        d2[ix3] = (System.Double)(Math.Round(d1[ix1]));
                                        ix1 += innerInnerStride1;
                                        ix3 += innerInnerStride3;
                                    }

                                    ix1 += innerStride1;
                                    ix3 += innerStride3;
                                }

                                ix1 += outerStride1;
                                ix3 += outerStride3;
                            }

                            if (counters.LongLength > 0)
                            {
                                //Basically a ripple carry adder
                                long p = counters.LongLength - 1;
                                while (++counters[p] == limits[p] && p > 0)
                                {
                                    counters[p] = 0;
                                    p--;
                                }
                            }
                        }
                    }
                }
            }
        }

        /// <summary>
        /// Unsafe implementation of applying a unary operation
        /// </summary>
        /// <typeparam name="C">The type of operation to perform</typeparam>
        /// <param name="op">The operation instance</param>
        /// <param name="scalar">The input scalar argument</param>
        /// <param name="out">The output target</param>
        internal static void UFunc_Op_Inner_Unary_Scalar_Flush_Double_TypedImpl<C>(NumCIL.Double.Round op, System.Double scalar, NdArray<System.Double> @out)
            where C : IUnaryOp<System.Double>
        {
            unsafe
            {
                using (var f2 = new Pinner(@out.DataAccessor))
                {
                    var d2 = (System.Double*)f2.ptr;

                    if (@out.Shape.Dimensions.Length == 1)
                    {
                        long totalOps = @out.Shape.Dimensions[0].Length;
                        long ix2 = @out.Shape.Offset;
                        long stride2 = @out.Shape.Dimensions[0].Stride;

                        for (long i = 0; i < totalOps; i++)
                        {
                            d2[ix2] = (System.Double)(Math.Round(scalar));
                            ix2 += stride2;
                        }
                    }
                    else if (@out.Shape.Dimensions.Length == 2)
                    {
                        long opsOuter = @out.Shape.Dimensions[0].Length;
                        long opsInner = @out.Shape.Dimensions[1].Length;

                        long ix2 = @out.Shape.Offset;
                        long outerStride2 = @out.Shape.Dimensions[0].Stride;
                        long innerStride2 = @out.Shape.Dimensions[1].Stride;
                        outerStride2 -= innerStride2 * @out.Shape.Dimensions[1].Length;

                        for (long i = 0; i < opsOuter; i++)
                        {
                            for (long j = 0; j < opsInner; j++)
                            {
                                d2[ix2] = (System.Double)(Math.Round(scalar));
                                ix2 += innerStride2;
                            }

                            ix2 += outerStride2;
                        }
                    }
                    else
                    {
                        long n = @out.Shape.Dimensions.LongLength - 3;
                        long[] limits = @out.Shape.Dimensions.Where(x => n-- > 0).Select(x => x.Length).ToArray();
                        long[] counters = new long[limits.LongLength];

                        long totalOps = limits.LongLength == 0 ? 1 : limits.Aggregate<long>((a, b) => a * b);

                        //This chunck of variables are used to prevent repeated calculations of offsets
                        long dimIndex0 = 0 + limits.LongLength;
                        long dimIndex1 = 1 + limits.LongLength;
                        long dimIndex2 = 2 + limits.LongLength;

                        long opsOuter = @out.Shape.Dimensions[0 + limits.LongLength].Length;
                        long opsInner = @out.Shape.Dimensions[1 + limits.LongLength].Length;
                        long opsInnerInner = @out.Shape.Dimensions[2 + limits.LongLength].Length;

                        long outerStride3 = @out.Shape.Dimensions[dimIndex0].Stride;
                        long innerStride3 = @out.Shape.Dimensions[dimIndex1].Stride;
                        long innerInnerStride3 = @out.Shape.Dimensions[dimIndex2].Stride;
                        outerStride3 -= innerStride3 * @out.Shape.Dimensions[dimIndex1].Length;
                        innerStride3 -= innerInnerStride3 * @out.Shape.Dimensions[dimIndex2].Length;

                        for (long outer = 0; outer < totalOps; outer++)
                        {
                            //Get the array offset for the first element in the outer dimension
                            long ix3 = @out.Shape[counters];

                            for (long i = 0; i < opsOuter; i++)
                            {
                                for (long j = 0; j < opsInner; j++)
                                {
                                    for (long k = 0; k < opsInnerInner; k++)
                                    {
                                        d2[ix3] = (System.Double)(Math.Round(scalar));
                                        ix3 += innerInnerStride3;
                                    }

                                    ix3 += innerStride3;
                                }

                                ix3 += outerStride3;
                            }

                            if (counters.LongLength > 0)
                            {
                                //Basically a ripple carry adder
                                long p = counters.LongLength - 1;
                                while (++counters[p] == limits[p] && p > 0)
                                {
                                    counters[p] = 0;
                                    p--;
                                }
                            }
                        }
                    }
                }
            }
        }
        /// <summary>
        /// Unsafe implementation of applying a unary operation
        /// </summary>
        /// <typeparam name="C">The type of operation to perform</typeparam>
        /// <param name="op">The operation instance</param>
        /// <param name="in1">The input argument</param>
        /// <param name="out">The output target</param>
        internal static void UFunc_Op_Inner_Unary_Flush_SByte_TypedImpl<C>(NumCIL.Int8.Sqrt op, NdArray<System.SByte> in1, NdArray<System.SByte> @out)
            where C : IUnaryOp<System.SByte>
        {
            unsafe
            {
                using (var f1 = new Pinner(in1.DataAccessor))
                using (var f2 = new Pinner(@out.DataAccessor))
                {
                    var d1 = (System.SByte*)f1.ptr;
                    var d2 = (System.SByte*)f2.ptr;

                    if (@out.Shape.Dimensions.Length == 1)
                    {
                        long totalOps = @out.Shape.Dimensions[0].Length;

                        long ix1 = in1.Shape.Offset;
                        long ix2 = @out.Shape.Offset;

                        long stride1 = in1.Shape.Dimensions[0].Stride;
                        long stride2 = @out.Shape.Dimensions[0].Stride;


                        if (stride1 == stride2 && ix1 == ix2)
                        {
                            //Best case, all are equal, just keep a single counter
                            for (long i = 0; i < totalOps; i++)
                            {
                                d2[ix1] = (System.SByte)(Math.Sqrt(d1[ix1]));
                                ix1 += stride1;
                            }
                        }
                        else
                        {
                            for (long i = 0; i < totalOps; i++)
                            {
                                d2[ix2] = (System.SByte)(Math.Sqrt(d1[ix1]));
                                ix1 += stride1;
                                ix2 += stride2;
                            }
                        }
                    }
                    else if (@out.Shape.Dimensions.Length == 2)
                    {
                        long opsOuter = @out.Shape.Dimensions[0].Length;
                        long opsInner = @out.Shape.Dimensions[1].Length;

                        long ix1 = in1.Shape.Offset;
                        long ix2 = @out.Shape.Offset;

                        long outerStride1 = in1.Shape.Dimensions[0].Stride;
                        long outerStride2 = @out.Shape.Dimensions[0].Stride;

                        long innerStride1 = in1.Shape.Dimensions[1].Stride;
                        long innerStride2 = @out.Shape.Dimensions[1].Stride;

                        outerStride1 -= innerStride1 * in1.Shape.Dimensions[1].Length;
                        outerStride2 -= innerStride2 * @out.Shape.Dimensions[1].Length;

                        for (long i = 0; i < opsOuter; i++)
                        {
                            for (long j = 0; j < opsInner; j++)
                            {
                                d2[ix2] = (System.SByte)(Math.Sqrt(d1[ix1]));
                                ix1 += innerStride1;
                                ix2 += innerStride2;
                            }

                            ix1 += outerStride1;
                            ix2 += outerStride2;
                        }
                    }
                    else
                    {
                        long n = in1.Shape.Dimensions.LongLength - 3;
                        long[] limits = in1.Shape.Dimensions.Where(x => n-- > 0).Select(x => x.Length).ToArray();
                        long[] counters = new long[limits.LongLength];

                        long totalOps = limits.LongLength == 0 ? 1 : limits.Aggregate<long>((a, b) => a * b);

                        //This chunck of variables are used to prevent repeated calculations of offsets
                        long dimIndex0 = 0 + limits.LongLength;
                        long dimIndex1 = 1 + limits.LongLength;
                        long dimIndex2 = 2 + limits.LongLength;

                        long opsOuter = @out.Shape.Dimensions[0 + limits.LongLength].Length;
                        long opsInner = @out.Shape.Dimensions[1 + limits.LongLength].Length;
                        long opsInnerInner = @out.Shape.Dimensions[2 + limits.LongLength].Length;

                        long outerStride1 = in1.Shape.Dimensions[dimIndex0].Stride;
                        long outerStride3 = @out.Shape.Dimensions[dimIndex0].Stride;

                        long innerStride1 = in1.Shape.Dimensions[dimIndex1].Stride;
                        long innerStride3 = @out.Shape.Dimensions[dimIndex1].Stride;

                        long innerInnerStride1 = in1.Shape.Dimensions[dimIndex2].Stride;
                        long innerInnerStride3 = @out.Shape.Dimensions[dimIndex2].Stride;

                        outerStride1 -= innerStride1 * in1.Shape.Dimensions[dimIndex1].Length;
                        outerStride3 -= innerStride3 * @out.Shape.Dimensions[dimIndex1].Length;

                        innerStride1 -= innerInnerStride1 * in1.Shape.Dimensions[dimIndex2].Length;
                        innerStride3 -= innerInnerStride3 * @out.Shape.Dimensions[dimIndex2].Length;

                        for (long outer = 0; outer < totalOps; outer++)
                        {
                            //Get the array offset for the first element in the outer dimension
                            long ix1 = in1.Shape[counters];
                            long ix3 = @out.Shape[counters];


                            for (long i = 0; i < opsOuter; i++)
                            {
                                for (long j = 0; j < opsInner; j++)
                                {
                                    for (long k = 0; k < opsInnerInner; k++)
                                    {
                                        d2[ix3] = (System.SByte)(Math.Sqrt(d1[ix1]));
                                        ix1 += innerInnerStride1;
                                        ix3 += innerInnerStride3;
                                    }

                                    ix1 += innerStride1;
                                    ix3 += innerStride3;
                                }

                                ix1 += outerStride1;
                                ix3 += outerStride3;
                            }

                            if (counters.LongLength > 0)
                            {
                                //Basically a ripple carry adder
                                long p = counters.LongLength - 1;
                                while (++counters[p] == limits[p] && p > 0)
                                {
                                    counters[p] = 0;
                                    p--;
                                }
                            }
                        }
                    }
                }
            }
        }

        /// <summary>
        /// Unsafe implementation of applying a unary operation
        /// </summary>
        /// <typeparam name="C">The type of operation to perform</typeparam>
        /// <param name="op">The operation instance</param>
        /// <param name="scalar">The input scalar argument</param>
        /// <param name="out">The output target</param>
        internal static void UFunc_Op_Inner_Unary_Scalar_Flush_SByte_TypedImpl<C>(NumCIL.Int8.Sqrt op, System.SByte scalar, NdArray<System.SByte> @out)
            where C : IUnaryOp<System.SByte>
        {
            unsafe
            {
                using (var f2 = new Pinner(@out.DataAccessor))
                {
                    var d2 = (System.SByte*)f2.ptr;

                    if (@out.Shape.Dimensions.Length == 1)
                    {
                        long totalOps = @out.Shape.Dimensions[0].Length;
                        long ix2 = @out.Shape.Offset;
                        long stride2 = @out.Shape.Dimensions[0].Stride;

                        for (long i = 0; i < totalOps; i++)
                        {
                            d2[ix2] = (System.SByte)(Math.Sqrt(scalar));
                            ix2 += stride2;
                        }
                    }
                    else if (@out.Shape.Dimensions.Length == 2)
                    {
                        long opsOuter = @out.Shape.Dimensions[0].Length;
                        long opsInner = @out.Shape.Dimensions[1].Length;

                        long ix2 = @out.Shape.Offset;
                        long outerStride2 = @out.Shape.Dimensions[0].Stride;
                        long innerStride2 = @out.Shape.Dimensions[1].Stride;
                        outerStride2 -= innerStride2 * @out.Shape.Dimensions[1].Length;

                        for (long i = 0; i < opsOuter; i++)
                        {
                            for (long j = 0; j < opsInner; j++)
                            {
                                d2[ix2] = (System.SByte)(Math.Sqrt(scalar));
                                ix2 += innerStride2;
                            }

                            ix2 += outerStride2;
                        }
                    }
                    else
                    {
                        long n = @out.Shape.Dimensions.LongLength - 3;
                        long[] limits = @out.Shape.Dimensions.Where(x => n-- > 0).Select(x => x.Length).ToArray();
                        long[] counters = new long[limits.LongLength];

                        long totalOps = limits.LongLength == 0 ? 1 : limits.Aggregate<long>((a, b) => a * b);

                        //This chunck of variables are used to prevent repeated calculations of offsets
                        long dimIndex0 = 0 + limits.LongLength;
                        long dimIndex1 = 1 + limits.LongLength;
                        long dimIndex2 = 2 + limits.LongLength;

                        long opsOuter = @out.Shape.Dimensions[0 + limits.LongLength].Length;
                        long opsInner = @out.Shape.Dimensions[1 + limits.LongLength].Length;
                        long opsInnerInner = @out.Shape.Dimensions[2 + limits.LongLength].Length;

                        long outerStride3 = @out.Shape.Dimensions[dimIndex0].Stride;
                        long innerStride3 = @out.Shape.Dimensions[dimIndex1].Stride;
                        long innerInnerStride3 = @out.Shape.Dimensions[dimIndex2].Stride;
                        outerStride3 -= innerStride3 * @out.Shape.Dimensions[dimIndex1].Length;
                        innerStride3 -= innerInnerStride3 * @out.Shape.Dimensions[dimIndex2].Length;

                        for (long outer = 0; outer < totalOps; outer++)
                        {
                            //Get the array offset for the first element in the outer dimension
                            long ix3 = @out.Shape[counters];

                            for (long i = 0; i < opsOuter; i++)
                            {
                                for (long j = 0; j < opsInner; j++)
                                {
                                    for (long k = 0; k < opsInnerInner; k++)
                                    {
                                        d2[ix3] = (System.SByte)(Math.Sqrt(scalar));
                                        ix3 += innerInnerStride3;
                                    }

                                    ix3 += innerStride3;
                                }

                                ix3 += outerStride3;
                            }

                            if (counters.LongLength > 0)
                            {
                                //Basically a ripple carry adder
                                long p = counters.LongLength - 1;
                                while (++counters[p] == limits[p] && p > 0)
                                {
                                    counters[p] = 0;
                                    p--;
                                }
                            }
                        }
                    }
                }
            }
        }
        /// <summary>
        /// Unsafe implementation of applying a unary operation
        /// </summary>
        /// <typeparam name="C">The type of operation to perform</typeparam>
        /// <param name="op">The operation instance</param>
        /// <param name="in1">The input argument</param>
        /// <param name="out">The output target</param>
        internal static void UFunc_Op_Inner_Unary_Flush_Byte_TypedImpl<C>(NumCIL.UInt8.Sqrt op, NdArray<System.Byte> in1, NdArray<System.Byte> @out)
            where C : IUnaryOp<System.Byte>
        {
            unsafe
            {
                using (var f1 = new Pinner(in1.DataAccessor))
                using (var f2 = new Pinner(@out.DataAccessor))
                {
                    var d1 = (System.Byte*)f1.ptr;
                    var d2 = (System.Byte*)f2.ptr;

                    if (@out.Shape.Dimensions.Length == 1)
                    {
                        long totalOps = @out.Shape.Dimensions[0].Length;

                        long ix1 = in1.Shape.Offset;
                        long ix2 = @out.Shape.Offset;

                        long stride1 = in1.Shape.Dimensions[0].Stride;
                        long stride2 = @out.Shape.Dimensions[0].Stride;


                        if (stride1 == stride2 && ix1 == ix2)
                        {
                            //Best case, all are equal, just keep a single counter
                            for (long i = 0; i < totalOps; i++)
                            {
                                d2[ix1] = (System.Byte)(Math.Sqrt(d1[ix1]));
                                ix1 += stride1;
                            }
                        }
                        else
                        {
                            for (long i = 0; i < totalOps; i++)
                            {
                                d2[ix2] = (System.Byte)(Math.Sqrt(d1[ix1]));
                                ix1 += stride1;
                                ix2 += stride2;
                            }
                        }
                    }
                    else if (@out.Shape.Dimensions.Length == 2)
                    {
                        long opsOuter = @out.Shape.Dimensions[0].Length;
                        long opsInner = @out.Shape.Dimensions[1].Length;

                        long ix1 = in1.Shape.Offset;
                        long ix2 = @out.Shape.Offset;

                        long outerStride1 = in1.Shape.Dimensions[0].Stride;
                        long outerStride2 = @out.Shape.Dimensions[0].Stride;

                        long innerStride1 = in1.Shape.Dimensions[1].Stride;
                        long innerStride2 = @out.Shape.Dimensions[1].Stride;

                        outerStride1 -= innerStride1 * in1.Shape.Dimensions[1].Length;
                        outerStride2 -= innerStride2 * @out.Shape.Dimensions[1].Length;

                        for (long i = 0; i < opsOuter; i++)
                        {
                            for (long j = 0; j < opsInner; j++)
                            {
                                d2[ix2] = (System.Byte)(Math.Sqrt(d1[ix1]));
                                ix1 += innerStride1;
                                ix2 += innerStride2;
                            }

                            ix1 += outerStride1;
                            ix2 += outerStride2;
                        }
                    }
                    else
                    {
                        long n = in1.Shape.Dimensions.LongLength - 3;
                        long[] limits = in1.Shape.Dimensions.Where(x => n-- > 0).Select(x => x.Length).ToArray();
                        long[] counters = new long[limits.LongLength];

                        long totalOps = limits.LongLength == 0 ? 1 : limits.Aggregate<long>((a, b) => a * b);

                        //This chunck of variables are used to prevent repeated calculations of offsets
                        long dimIndex0 = 0 + limits.LongLength;
                        long dimIndex1 = 1 + limits.LongLength;
                        long dimIndex2 = 2 + limits.LongLength;

                        long opsOuter = @out.Shape.Dimensions[0 + limits.LongLength].Length;
                        long opsInner = @out.Shape.Dimensions[1 + limits.LongLength].Length;
                        long opsInnerInner = @out.Shape.Dimensions[2 + limits.LongLength].Length;

                        long outerStride1 = in1.Shape.Dimensions[dimIndex0].Stride;
                        long outerStride3 = @out.Shape.Dimensions[dimIndex0].Stride;

                        long innerStride1 = in1.Shape.Dimensions[dimIndex1].Stride;
                        long innerStride3 = @out.Shape.Dimensions[dimIndex1].Stride;

                        long innerInnerStride1 = in1.Shape.Dimensions[dimIndex2].Stride;
                        long innerInnerStride3 = @out.Shape.Dimensions[dimIndex2].Stride;

                        outerStride1 -= innerStride1 * in1.Shape.Dimensions[dimIndex1].Length;
                        outerStride3 -= innerStride3 * @out.Shape.Dimensions[dimIndex1].Length;

                        innerStride1 -= innerInnerStride1 * in1.Shape.Dimensions[dimIndex2].Length;
                        innerStride3 -= innerInnerStride3 * @out.Shape.Dimensions[dimIndex2].Length;

                        for (long outer = 0; outer < totalOps; outer++)
                        {
                            //Get the array offset for the first element in the outer dimension
                            long ix1 = in1.Shape[counters];
                            long ix3 = @out.Shape[counters];


                            for (long i = 0; i < opsOuter; i++)
                            {
                                for (long j = 0; j < opsInner; j++)
                                {
                                    for (long k = 0; k < opsInnerInner; k++)
                                    {
                                        d2[ix3] = (System.Byte)(Math.Sqrt(d1[ix1]));
                                        ix1 += innerInnerStride1;
                                        ix3 += innerInnerStride3;
                                    }

                                    ix1 += innerStride1;
                                    ix3 += innerStride3;
                                }

                                ix1 += outerStride1;
                                ix3 += outerStride3;
                            }

                            if (counters.LongLength > 0)
                            {
                                //Basically a ripple carry adder
                                long p = counters.LongLength - 1;
                                while (++counters[p] == limits[p] && p > 0)
                                {
                                    counters[p] = 0;
                                    p--;
                                }
                            }
                        }
                    }
                }
            }
        }

        /// <summary>
        /// Unsafe implementation of applying a unary operation
        /// </summary>
        /// <typeparam name="C">The type of operation to perform</typeparam>
        /// <param name="op">The operation instance</param>
        /// <param name="scalar">The input scalar argument</param>
        /// <param name="out">The output target</param>
        internal static void UFunc_Op_Inner_Unary_Scalar_Flush_Byte_TypedImpl<C>(NumCIL.UInt8.Sqrt op, System.Byte scalar, NdArray<System.Byte> @out)
            where C : IUnaryOp<System.Byte>
        {
            unsafe
            {
                using (var f2 = new Pinner(@out.DataAccessor))
                {
                    var d2 = (System.Byte*)f2.ptr;

                    if (@out.Shape.Dimensions.Length == 1)
                    {
                        long totalOps = @out.Shape.Dimensions[0].Length;
                        long ix2 = @out.Shape.Offset;
                        long stride2 = @out.Shape.Dimensions[0].Stride;

                        for (long i = 0; i < totalOps; i++)
                        {
                            d2[ix2] = (System.Byte)(Math.Sqrt(scalar));
                            ix2 += stride2;
                        }
                    }
                    else if (@out.Shape.Dimensions.Length == 2)
                    {
                        long opsOuter = @out.Shape.Dimensions[0].Length;
                        long opsInner = @out.Shape.Dimensions[1].Length;

                        long ix2 = @out.Shape.Offset;
                        long outerStride2 = @out.Shape.Dimensions[0].Stride;
                        long innerStride2 = @out.Shape.Dimensions[1].Stride;
                        outerStride2 -= innerStride2 * @out.Shape.Dimensions[1].Length;

                        for (long i = 0; i < opsOuter; i++)
                        {
                            for (long j = 0; j < opsInner; j++)
                            {
                                d2[ix2] = (System.Byte)(Math.Sqrt(scalar));
                                ix2 += innerStride2;
                            }

                            ix2 += outerStride2;
                        }
                    }
                    else
                    {
                        long n = @out.Shape.Dimensions.LongLength - 3;
                        long[] limits = @out.Shape.Dimensions.Where(x => n-- > 0).Select(x => x.Length).ToArray();
                        long[] counters = new long[limits.LongLength];

                        long totalOps = limits.LongLength == 0 ? 1 : limits.Aggregate<long>((a, b) => a * b);

                        //This chunck of variables are used to prevent repeated calculations of offsets
                        long dimIndex0 = 0 + limits.LongLength;
                        long dimIndex1 = 1 + limits.LongLength;
                        long dimIndex2 = 2 + limits.LongLength;

                        long opsOuter = @out.Shape.Dimensions[0 + limits.LongLength].Length;
                        long opsInner = @out.Shape.Dimensions[1 + limits.LongLength].Length;
                        long opsInnerInner = @out.Shape.Dimensions[2 + limits.LongLength].Length;

                        long outerStride3 = @out.Shape.Dimensions[dimIndex0].Stride;
                        long innerStride3 = @out.Shape.Dimensions[dimIndex1].Stride;
                        long innerInnerStride3 = @out.Shape.Dimensions[dimIndex2].Stride;
                        outerStride3 -= innerStride3 * @out.Shape.Dimensions[dimIndex1].Length;
                        innerStride3 -= innerInnerStride3 * @out.Shape.Dimensions[dimIndex2].Length;

                        for (long outer = 0; outer < totalOps; outer++)
                        {
                            //Get the array offset for the first element in the outer dimension
                            long ix3 = @out.Shape[counters];

                            for (long i = 0; i < opsOuter; i++)
                            {
                                for (long j = 0; j < opsInner; j++)
                                {
                                    for (long k = 0; k < opsInnerInner; k++)
                                    {
                                        d2[ix3] = (System.Byte)(Math.Sqrt(scalar));
                                        ix3 += innerInnerStride3;
                                    }

                                    ix3 += innerStride3;
                                }

                                ix3 += outerStride3;
                            }

                            if (counters.LongLength > 0)
                            {
                                //Basically a ripple carry adder
                                long p = counters.LongLength - 1;
                                while (++counters[p] == limits[p] && p > 0)
                                {
                                    counters[p] = 0;
                                    p--;
                                }
                            }
                        }
                    }
                }
            }
        }
        /// <summary>
        /// Unsafe implementation of applying a unary operation
        /// </summary>
        /// <typeparam name="C">The type of operation to perform</typeparam>
        /// <param name="op">The operation instance</param>
        /// <param name="in1">The input argument</param>
        /// <param name="out">The output target</param>
        internal static void UFunc_Op_Inner_Unary_Flush_Int16_TypedImpl<C>(NumCIL.Int16.Sqrt op, NdArray<System.Int16> in1, NdArray<System.Int16> @out)
            where C : IUnaryOp<System.Int16>
        {
            unsafe
            {
                using (var f1 = new Pinner(in1.DataAccessor))
                using (var f2 = new Pinner(@out.DataAccessor))
                {
                    var d1 = (System.Int16*)f1.ptr;
                    var d2 = (System.Int16*)f2.ptr;

                    if (@out.Shape.Dimensions.Length == 1)
                    {
                        long totalOps = @out.Shape.Dimensions[0].Length;

                        long ix1 = in1.Shape.Offset;
                        long ix2 = @out.Shape.Offset;

                        long stride1 = in1.Shape.Dimensions[0].Stride;
                        long stride2 = @out.Shape.Dimensions[0].Stride;


                        if (stride1 == stride2 && ix1 == ix2)
                        {
                            //Best case, all are equal, just keep a single counter
                            for (long i = 0; i < totalOps; i++)
                            {
                                d2[ix1] = (System.Int16)(Math.Sqrt(d1[ix1]));
                                ix1 += stride1;
                            }
                        }
                        else
                        {
                            for (long i = 0; i < totalOps; i++)
                            {
                                d2[ix2] = (System.Int16)(Math.Sqrt(d1[ix1]));
                                ix1 += stride1;
                                ix2 += stride2;
                            }
                        }
                    }
                    else if (@out.Shape.Dimensions.Length == 2)
                    {
                        long opsOuter = @out.Shape.Dimensions[0].Length;
                        long opsInner = @out.Shape.Dimensions[1].Length;

                        long ix1 = in1.Shape.Offset;
                        long ix2 = @out.Shape.Offset;

                        long outerStride1 = in1.Shape.Dimensions[0].Stride;
                        long outerStride2 = @out.Shape.Dimensions[0].Stride;

                        long innerStride1 = in1.Shape.Dimensions[1].Stride;
                        long innerStride2 = @out.Shape.Dimensions[1].Stride;

                        outerStride1 -= innerStride1 * in1.Shape.Dimensions[1].Length;
                        outerStride2 -= innerStride2 * @out.Shape.Dimensions[1].Length;

                        for (long i = 0; i < opsOuter; i++)
                        {
                            for (long j = 0; j < opsInner; j++)
                            {
                                d2[ix2] = (System.Int16)(Math.Sqrt(d1[ix1]));
                                ix1 += innerStride1;
                                ix2 += innerStride2;
                            }

                            ix1 += outerStride1;
                            ix2 += outerStride2;
                        }
                    }
                    else
                    {
                        long n = in1.Shape.Dimensions.LongLength - 3;
                        long[] limits = in1.Shape.Dimensions.Where(x => n-- > 0).Select(x => x.Length).ToArray();
                        long[] counters = new long[limits.LongLength];

                        long totalOps = limits.LongLength == 0 ? 1 : limits.Aggregate<long>((a, b) => a * b);

                        //This chunck of variables are used to prevent repeated calculations of offsets
                        long dimIndex0 = 0 + limits.LongLength;
                        long dimIndex1 = 1 + limits.LongLength;
                        long dimIndex2 = 2 + limits.LongLength;

                        long opsOuter = @out.Shape.Dimensions[0 + limits.LongLength].Length;
                        long opsInner = @out.Shape.Dimensions[1 + limits.LongLength].Length;
                        long opsInnerInner = @out.Shape.Dimensions[2 + limits.LongLength].Length;

                        long outerStride1 = in1.Shape.Dimensions[dimIndex0].Stride;
                        long outerStride3 = @out.Shape.Dimensions[dimIndex0].Stride;

                        long innerStride1 = in1.Shape.Dimensions[dimIndex1].Stride;
                        long innerStride3 = @out.Shape.Dimensions[dimIndex1].Stride;

                        long innerInnerStride1 = in1.Shape.Dimensions[dimIndex2].Stride;
                        long innerInnerStride3 = @out.Shape.Dimensions[dimIndex2].Stride;

                        outerStride1 -= innerStride1 * in1.Shape.Dimensions[dimIndex1].Length;
                        outerStride3 -= innerStride3 * @out.Shape.Dimensions[dimIndex1].Length;

                        innerStride1 -= innerInnerStride1 * in1.Shape.Dimensions[dimIndex2].Length;
                        innerStride3 -= innerInnerStride3 * @out.Shape.Dimensions[dimIndex2].Length;

                        for (long outer = 0; outer < totalOps; outer++)
                        {
                            //Get the array offset for the first element in the outer dimension
                            long ix1 = in1.Shape[counters];
                            long ix3 = @out.Shape[counters];


                            for (long i = 0; i < opsOuter; i++)
                            {
                                for (long j = 0; j < opsInner; j++)
                                {
                                    for (long k = 0; k < opsInnerInner; k++)
                                    {
                                        d2[ix3] = (System.Int16)(Math.Sqrt(d1[ix1]));
                                        ix1 += innerInnerStride1;
                                        ix3 += innerInnerStride3;
                                    }

                                    ix1 += innerStride1;
                                    ix3 += innerStride3;
                                }

                                ix1 += outerStride1;
                                ix3 += outerStride3;
                            }

                            if (counters.LongLength > 0)
                            {
                                //Basically a ripple carry adder
                                long p = counters.LongLength - 1;
                                while (++counters[p] == limits[p] && p > 0)
                                {
                                    counters[p] = 0;
                                    p--;
                                }
                            }
                        }
                    }
                }
            }
        }

        /// <summary>
        /// Unsafe implementation of applying a unary operation
        /// </summary>
        /// <typeparam name="C">The type of operation to perform</typeparam>
        /// <param name="op">The operation instance</param>
        /// <param name="scalar">The input scalar argument</param>
        /// <param name="out">The output target</param>
        internal static void UFunc_Op_Inner_Unary_Scalar_Flush_Int16_TypedImpl<C>(NumCIL.Int16.Sqrt op, System.Int16 scalar, NdArray<System.Int16> @out)
            where C : IUnaryOp<System.Int16>
        {
            unsafe
            {
                using (var f2 = new Pinner(@out.DataAccessor))
                {
                    var d2 = (System.Int16*)f2.ptr;

                    if (@out.Shape.Dimensions.Length == 1)
                    {
                        long totalOps = @out.Shape.Dimensions[0].Length;
                        long ix2 = @out.Shape.Offset;
                        long stride2 = @out.Shape.Dimensions[0].Stride;

                        for (long i = 0; i < totalOps; i++)
                        {
                            d2[ix2] = (System.Int16)(Math.Sqrt(scalar));
                            ix2 += stride2;
                        }
                    }
                    else if (@out.Shape.Dimensions.Length == 2)
                    {
                        long opsOuter = @out.Shape.Dimensions[0].Length;
                        long opsInner = @out.Shape.Dimensions[1].Length;

                        long ix2 = @out.Shape.Offset;
                        long outerStride2 = @out.Shape.Dimensions[0].Stride;
                        long innerStride2 = @out.Shape.Dimensions[1].Stride;
                        outerStride2 -= innerStride2 * @out.Shape.Dimensions[1].Length;

                        for (long i = 0; i < opsOuter; i++)
                        {
                            for (long j = 0; j < opsInner; j++)
                            {
                                d2[ix2] = (System.Int16)(Math.Sqrt(scalar));
                                ix2 += innerStride2;
                            }

                            ix2 += outerStride2;
                        }
                    }
                    else
                    {
                        long n = @out.Shape.Dimensions.LongLength - 3;
                        long[] limits = @out.Shape.Dimensions.Where(x => n-- > 0).Select(x => x.Length).ToArray();
                        long[] counters = new long[limits.LongLength];

                        long totalOps = limits.LongLength == 0 ? 1 : limits.Aggregate<long>((a, b) => a * b);

                        //This chunck of variables are used to prevent repeated calculations of offsets
                        long dimIndex0 = 0 + limits.LongLength;
                        long dimIndex1 = 1 + limits.LongLength;
                        long dimIndex2 = 2 + limits.LongLength;

                        long opsOuter = @out.Shape.Dimensions[0 + limits.LongLength].Length;
                        long opsInner = @out.Shape.Dimensions[1 + limits.LongLength].Length;
                        long opsInnerInner = @out.Shape.Dimensions[2 + limits.LongLength].Length;

                        long outerStride3 = @out.Shape.Dimensions[dimIndex0].Stride;
                        long innerStride3 = @out.Shape.Dimensions[dimIndex1].Stride;
                        long innerInnerStride3 = @out.Shape.Dimensions[dimIndex2].Stride;
                        outerStride3 -= innerStride3 * @out.Shape.Dimensions[dimIndex1].Length;
                        innerStride3 -= innerInnerStride3 * @out.Shape.Dimensions[dimIndex2].Length;

                        for (long outer = 0; outer < totalOps; outer++)
                        {
                            //Get the array offset for the first element in the outer dimension
                            long ix3 = @out.Shape[counters];

                            for (long i = 0; i < opsOuter; i++)
                            {
                                for (long j = 0; j < opsInner; j++)
                                {
                                    for (long k = 0; k < opsInnerInner; k++)
                                    {
                                        d2[ix3] = (System.Int16)(Math.Sqrt(scalar));
                                        ix3 += innerInnerStride3;
                                    }

                                    ix3 += innerStride3;
                                }

                                ix3 += outerStride3;
                            }

                            if (counters.LongLength > 0)
                            {
                                //Basically a ripple carry adder
                                long p = counters.LongLength - 1;
                                while (++counters[p] == limits[p] && p > 0)
                                {
                                    counters[p] = 0;
                                    p--;
                                }
                            }
                        }
                    }
                }
            }
        }
        /// <summary>
        /// Unsafe implementation of applying a unary operation
        /// </summary>
        /// <typeparam name="C">The type of operation to perform</typeparam>
        /// <param name="op">The operation instance</param>
        /// <param name="in1">The input argument</param>
        /// <param name="out">The output target</param>
        internal static void UFunc_Op_Inner_Unary_Flush_UInt16_TypedImpl<C>(NumCIL.UInt16.Sqrt op, NdArray<System.UInt16> in1, NdArray<System.UInt16> @out)
            where C : IUnaryOp<System.UInt16>
        {
            unsafe
            {
                using (var f1 = new Pinner(in1.DataAccessor))
                using (var f2 = new Pinner(@out.DataAccessor))
                {
                    var d1 = (System.UInt16*)f1.ptr;
                    var d2 = (System.UInt16*)f2.ptr;

                    if (@out.Shape.Dimensions.Length == 1)
                    {
                        long totalOps = @out.Shape.Dimensions[0].Length;

                        long ix1 = in1.Shape.Offset;
                        long ix2 = @out.Shape.Offset;

                        long stride1 = in1.Shape.Dimensions[0].Stride;
                        long stride2 = @out.Shape.Dimensions[0].Stride;


                        if (stride1 == stride2 && ix1 == ix2)
                        {
                            //Best case, all are equal, just keep a single counter
                            for (long i = 0; i < totalOps; i++)
                            {
                                d2[ix1] = (System.UInt16)(Math.Sqrt(d1[ix1]));
                                ix1 += stride1;
                            }
                        }
                        else
                        {
                            for (long i = 0; i < totalOps; i++)
                            {
                                d2[ix2] = (System.UInt16)(Math.Sqrt(d1[ix1]));
                                ix1 += stride1;
                                ix2 += stride2;
                            }
                        }
                    }
                    else if (@out.Shape.Dimensions.Length == 2)
                    {
                        long opsOuter = @out.Shape.Dimensions[0].Length;
                        long opsInner = @out.Shape.Dimensions[1].Length;

                        long ix1 = in1.Shape.Offset;
                        long ix2 = @out.Shape.Offset;

                        long outerStride1 = in1.Shape.Dimensions[0].Stride;
                        long outerStride2 = @out.Shape.Dimensions[0].Stride;

                        long innerStride1 = in1.Shape.Dimensions[1].Stride;
                        long innerStride2 = @out.Shape.Dimensions[1].Stride;

                        outerStride1 -= innerStride1 * in1.Shape.Dimensions[1].Length;
                        outerStride2 -= innerStride2 * @out.Shape.Dimensions[1].Length;

                        for (long i = 0; i < opsOuter; i++)
                        {
                            for (long j = 0; j < opsInner; j++)
                            {
                                d2[ix2] = (System.UInt16)(Math.Sqrt(d1[ix1]));
                                ix1 += innerStride1;
                                ix2 += innerStride2;
                            }

                            ix1 += outerStride1;
                            ix2 += outerStride2;
                        }
                    }
                    else
                    {
                        long n = in1.Shape.Dimensions.LongLength - 3;
                        long[] limits = in1.Shape.Dimensions.Where(x => n-- > 0).Select(x => x.Length).ToArray();
                        long[] counters = new long[limits.LongLength];

                        long totalOps = limits.LongLength == 0 ? 1 : limits.Aggregate<long>((a, b) => a * b);

                        //This chunck of variables are used to prevent repeated calculations of offsets
                        long dimIndex0 = 0 + limits.LongLength;
                        long dimIndex1 = 1 + limits.LongLength;
                        long dimIndex2 = 2 + limits.LongLength;

                        long opsOuter = @out.Shape.Dimensions[0 + limits.LongLength].Length;
                        long opsInner = @out.Shape.Dimensions[1 + limits.LongLength].Length;
                        long opsInnerInner = @out.Shape.Dimensions[2 + limits.LongLength].Length;

                        long outerStride1 = in1.Shape.Dimensions[dimIndex0].Stride;
                        long outerStride3 = @out.Shape.Dimensions[dimIndex0].Stride;

                        long innerStride1 = in1.Shape.Dimensions[dimIndex1].Stride;
                        long innerStride3 = @out.Shape.Dimensions[dimIndex1].Stride;

                        long innerInnerStride1 = in1.Shape.Dimensions[dimIndex2].Stride;
                        long innerInnerStride3 = @out.Shape.Dimensions[dimIndex2].Stride;

                        outerStride1 -= innerStride1 * in1.Shape.Dimensions[dimIndex1].Length;
                        outerStride3 -= innerStride3 * @out.Shape.Dimensions[dimIndex1].Length;

                        innerStride1 -= innerInnerStride1 * in1.Shape.Dimensions[dimIndex2].Length;
                        innerStride3 -= innerInnerStride3 * @out.Shape.Dimensions[dimIndex2].Length;

                        for (long outer = 0; outer < totalOps; outer++)
                        {
                            //Get the array offset for the first element in the outer dimension
                            long ix1 = in1.Shape[counters];
                            long ix3 = @out.Shape[counters];


                            for (long i = 0; i < opsOuter; i++)
                            {
                                for (long j = 0; j < opsInner; j++)
                                {
                                    for (long k = 0; k < opsInnerInner; k++)
                                    {
                                        d2[ix3] = (System.UInt16)(Math.Sqrt(d1[ix1]));
                                        ix1 += innerInnerStride1;
                                        ix3 += innerInnerStride3;
                                    }

                                    ix1 += innerStride1;
                                    ix3 += innerStride3;
                                }

                                ix1 += outerStride1;
                                ix3 += outerStride3;
                            }

                            if (counters.LongLength > 0)
                            {
                                //Basically a ripple carry adder
                                long p = counters.LongLength - 1;
                                while (++counters[p] == limits[p] && p > 0)
                                {
                                    counters[p] = 0;
                                    p--;
                                }
                            }
                        }
                    }
                }
            }
        }

        /// <summary>
        /// Unsafe implementation of applying a unary operation
        /// </summary>
        /// <typeparam name="C">The type of operation to perform</typeparam>
        /// <param name="op">The operation instance</param>
        /// <param name="scalar">The input scalar argument</param>
        /// <param name="out">The output target</param>
        internal static void UFunc_Op_Inner_Unary_Scalar_Flush_UInt16_TypedImpl<C>(NumCIL.UInt16.Sqrt op, System.UInt16 scalar, NdArray<System.UInt16> @out)
            where C : IUnaryOp<System.UInt16>
        {
            unsafe
            {
                using (var f2 = new Pinner(@out.DataAccessor))
                {
                    var d2 = (System.UInt16*)f2.ptr;

                    if (@out.Shape.Dimensions.Length == 1)
                    {
                        long totalOps = @out.Shape.Dimensions[0].Length;
                        long ix2 = @out.Shape.Offset;
                        long stride2 = @out.Shape.Dimensions[0].Stride;

                        for (long i = 0; i < totalOps; i++)
                        {
                            d2[ix2] = (System.UInt16)(Math.Sqrt(scalar));
                            ix2 += stride2;
                        }
                    }
                    else if (@out.Shape.Dimensions.Length == 2)
                    {
                        long opsOuter = @out.Shape.Dimensions[0].Length;
                        long opsInner = @out.Shape.Dimensions[1].Length;

                        long ix2 = @out.Shape.Offset;
                        long outerStride2 = @out.Shape.Dimensions[0].Stride;
                        long innerStride2 = @out.Shape.Dimensions[1].Stride;
                        outerStride2 -= innerStride2 * @out.Shape.Dimensions[1].Length;

                        for (long i = 0; i < opsOuter; i++)
                        {
                            for (long j = 0; j < opsInner; j++)
                            {
                                d2[ix2] = (System.UInt16)(Math.Sqrt(scalar));
                                ix2 += innerStride2;
                            }

                            ix2 += outerStride2;
                        }
                    }
                    else
                    {
                        long n = @out.Shape.Dimensions.LongLength - 3;
                        long[] limits = @out.Shape.Dimensions.Where(x => n-- > 0).Select(x => x.Length).ToArray();
                        long[] counters = new long[limits.LongLength];

                        long totalOps = limits.LongLength == 0 ? 1 : limits.Aggregate<long>((a, b) => a * b);

                        //This chunck of variables are used to prevent repeated calculations of offsets
                        long dimIndex0 = 0 + limits.LongLength;
                        long dimIndex1 = 1 + limits.LongLength;
                        long dimIndex2 = 2 + limits.LongLength;

                        long opsOuter = @out.Shape.Dimensions[0 + limits.LongLength].Length;
                        long opsInner = @out.Shape.Dimensions[1 + limits.LongLength].Length;
                        long opsInnerInner = @out.Shape.Dimensions[2 + limits.LongLength].Length;

                        long outerStride3 = @out.Shape.Dimensions[dimIndex0].Stride;
                        long innerStride3 = @out.Shape.Dimensions[dimIndex1].Stride;
                        long innerInnerStride3 = @out.Shape.Dimensions[dimIndex2].Stride;
                        outerStride3 -= innerStride3 * @out.Shape.Dimensions[dimIndex1].Length;
                        innerStride3 -= innerInnerStride3 * @out.Shape.Dimensions[dimIndex2].Length;

                        for (long outer = 0; outer < totalOps; outer++)
                        {
                            //Get the array offset for the first element in the outer dimension
                            long ix3 = @out.Shape[counters];

                            for (long i = 0; i < opsOuter; i++)
                            {
                                for (long j = 0; j < opsInner; j++)
                                {
                                    for (long k = 0; k < opsInnerInner; k++)
                                    {
                                        d2[ix3] = (System.UInt16)(Math.Sqrt(scalar));
                                        ix3 += innerInnerStride3;
                                    }

                                    ix3 += innerStride3;
                                }

                                ix3 += outerStride3;
                            }

                            if (counters.LongLength > 0)
                            {
                                //Basically a ripple carry adder
                                long p = counters.LongLength - 1;
                                while (++counters[p] == limits[p] && p > 0)
                                {
                                    counters[p] = 0;
                                    p--;
                                }
                            }
                        }
                    }
                }
            }
        }
        /// <summary>
        /// Unsafe implementation of applying a unary operation
        /// </summary>
        /// <typeparam name="C">The type of operation to perform</typeparam>
        /// <param name="op">The operation instance</param>
        /// <param name="in1">The input argument</param>
        /// <param name="out">The output target</param>
        internal static void UFunc_Op_Inner_Unary_Flush_Int32_TypedImpl<C>(NumCIL.Int32.Sqrt op, NdArray<System.Int32> in1, NdArray<System.Int32> @out)
            where C : IUnaryOp<System.Int32>
        {
            unsafe
            {
                using (var f1 = new Pinner(in1.DataAccessor))
                using (var f2 = new Pinner(@out.DataAccessor))
                {
                    var d1 = (System.Int32*)f1.ptr;
                    var d2 = (System.Int32*)f2.ptr;

                    if (@out.Shape.Dimensions.Length == 1)
                    {
                        long totalOps = @out.Shape.Dimensions[0].Length;

                        long ix1 = in1.Shape.Offset;
                        long ix2 = @out.Shape.Offset;

                        long stride1 = in1.Shape.Dimensions[0].Stride;
                        long stride2 = @out.Shape.Dimensions[0].Stride;


                        if (stride1 == stride2 && ix1 == ix2)
                        {
                            //Best case, all are equal, just keep a single counter
                            for (long i = 0; i < totalOps; i++)
                            {
                                d2[ix1] = (System.Int32)(Math.Sqrt(d1[ix1]));
                                ix1 += stride1;
                            }
                        }
                        else
                        {
                            for (long i = 0; i < totalOps; i++)
                            {
                                d2[ix2] = (System.Int32)(Math.Sqrt(d1[ix1]));
                                ix1 += stride1;
                                ix2 += stride2;
                            }
                        }
                    }
                    else if (@out.Shape.Dimensions.Length == 2)
                    {
                        long opsOuter = @out.Shape.Dimensions[0].Length;
                        long opsInner = @out.Shape.Dimensions[1].Length;

                        long ix1 = in1.Shape.Offset;
                        long ix2 = @out.Shape.Offset;

                        long outerStride1 = in1.Shape.Dimensions[0].Stride;
                        long outerStride2 = @out.Shape.Dimensions[0].Stride;

                        long innerStride1 = in1.Shape.Dimensions[1].Stride;
                        long innerStride2 = @out.Shape.Dimensions[1].Stride;

                        outerStride1 -= innerStride1 * in1.Shape.Dimensions[1].Length;
                        outerStride2 -= innerStride2 * @out.Shape.Dimensions[1].Length;

                        for (long i = 0; i < opsOuter; i++)
                        {
                            for (long j = 0; j < opsInner; j++)
                            {
                                d2[ix2] = (System.Int32)(Math.Sqrt(d1[ix1]));
                                ix1 += innerStride1;
                                ix2 += innerStride2;
                            }

                            ix1 += outerStride1;
                            ix2 += outerStride2;
                        }
                    }
                    else
                    {
                        long n = in1.Shape.Dimensions.LongLength - 3;
                        long[] limits = in1.Shape.Dimensions.Where(x => n-- > 0).Select(x => x.Length).ToArray();
                        long[] counters = new long[limits.LongLength];

                        long totalOps = limits.LongLength == 0 ? 1 : limits.Aggregate<long>((a, b) => a * b);

                        //This chunck of variables are used to prevent repeated calculations of offsets
                        long dimIndex0 = 0 + limits.LongLength;
                        long dimIndex1 = 1 + limits.LongLength;
                        long dimIndex2 = 2 + limits.LongLength;

                        long opsOuter = @out.Shape.Dimensions[0 + limits.LongLength].Length;
                        long opsInner = @out.Shape.Dimensions[1 + limits.LongLength].Length;
                        long opsInnerInner = @out.Shape.Dimensions[2 + limits.LongLength].Length;

                        long outerStride1 = in1.Shape.Dimensions[dimIndex0].Stride;
                        long outerStride3 = @out.Shape.Dimensions[dimIndex0].Stride;

                        long innerStride1 = in1.Shape.Dimensions[dimIndex1].Stride;
                        long innerStride3 = @out.Shape.Dimensions[dimIndex1].Stride;

                        long innerInnerStride1 = in1.Shape.Dimensions[dimIndex2].Stride;
                        long innerInnerStride3 = @out.Shape.Dimensions[dimIndex2].Stride;

                        outerStride1 -= innerStride1 * in1.Shape.Dimensions[dimIndex1].Length;
                        outerStride3 -= innerStride3 * @out.Shape.Dimensions[dimIndex1].Length;

                        innerStride1 -= innerInnerStride1 * in1.Shape.Dimensions[dimIndex2].Length;
                        innerStride3 -= innerInnerStride3 * @out.Shape.Dimensions[dimIndex2].Length;

                        for (long outer = 0; outer < totalOps; outer++)
                        {
                            //Get the array offset for the first element in the outer dimension
                            long ix1 = in1.Shape[counters];
                            long ix3 = @out.Shape[counters];


                            for (long i = 0; i < opsOuter; i++)
                            {
                                for (long j = 0; j < opsInner; j++)
                                {
                                    for (long k = 0; k < opsInnerInner; k++)
                                    {
                                        d2[ix3] = (System.Int32)(Math.Sqrt(d1[ix1]));
                                        ix1 += innerInnerStride1;
                                        ix3 += innerInnerStride3;
                                    }

                                    ix1 += innerStride1;
                                    ix3 += innerStride3;
                                }

                                ix1 += outerStride1;
                                ix3 += outerStride3;
                            }

                            if (counters.LongLength > 0)
                            {
                                //Basically a ripple carry adder
                                long p = counters.LongLength - 1;
                                while (++counters[p] == limits[p] && p > 0)
                                {
                                    counters[p] = 0;
                                    p--;
                                }
                            }
                        }
                    }
                }
            }
        }

        /// <summary>
        /// Unsafe implementation of applying a unary operation
        /// </summary>
        /// <typeparam name="C">The type of operation to perform</typeparam>
        /// <param name="op">The operation instance</param>
        /// <param name="scalar">The input scalar argument</param>
        /// <param name="out">The output target</param>
        internal static void UFunc_Op_Inner_Unary_Scalar_Flush_Int32_TypedImpl<C>(NumCIL.Int32.Sqrt op, System.Int32 scalar, NdArray<System.Int32> @out)
            where C : IUnaryOp<System.Int32>
        {
            unsafe
            {
                using (var f2 = new Pinner(@out.DataAccessor))
                {
                    var d2 = (System.Int32*)f2.ptr;

                    if (@out.Shape.Dimensions.Length == 1)
                    {
                        long totalOps = @out.Shape.Dimensions[0].Length;
                        long ix2 = @out.Shape.Offset;
                        long stride2 = @out.Shape.Dimensions[0].Stride;

                        for (long i = 0; i < totalOps; i++)
                        {
                            d2[ix2] = (System.Int32)(Math.Sqrt(scalar));
                            ix2 += stride2;
                        }
                    }
                    else if (@out.Shape.Dimensions.Length == 2)
                    {
                        long opsOuter = @out.Shape.Dimensions[0].Length;
                        long opsInner = @out.Shape.Dimensions[1].Length;

                        long ix2 = @out.Shape.Offset;
                        long outerStride2 = @out.Shape.Dimensions[0].Stride;
                        long innerStride2 = @out.Shape.Dimensions[1].Stride;
                        outerStride2 -= innerStride2 * @out.Shape.Dimensions[1].Length;

                        for (long i = 0; i < opsOuter; i++)
                        {
                            for (long j = 0; j < opsInner; j++)
                            {
                                d2[ix2] = (System.Int32)(Math.Sqrt(scalar));
                                ix2 += innerStride2;
                            }

                            ix2 += outerStride2;
                        }
                    }
                    else
                    {
                        long n = @out.Shape.Dimensions.LongLength - 3;
                        long[] limits = @out.Shape.Dimensions.Where(x => n-- > 0).Select(x => x.Length).ToArray();
                        long[] counters = new long[limits.LongLength];

                        long totalOps = limits.LongLength == 0 ? 1 : limits.Aggregate<long>((a, b) => a * b);

                        //This chunck of variables are used to prevent repeated calculations of offsets
                        long dimIndex0 = 0 + limits.LongLength;
                        long dimIndex1 = 1 + limits.LongLength;
                        long dimIndex2 = 2 + limits.LongLength;

                        long opsOuter = @out.Shape.Dimensions[0 + limits.LongLength].Length;
                        long opsInner = @out.Shape.Dimensions[1 + limits.LongLength].Length;
                        long opsInnerInner = @out.Shape.Dimensions[2 + limits.LongLength].Length;

                        long outerStride3 = @out.Shape.Dimensions[dimIndex0].Stride;
                        long innerStride3 = @out.Shape.Dimensions[dimIndex1].Stride;
                        long innerInnerStride3 = @out.Shape.Dimensions[dimIndex2].Stride;
                        outerStride3 -= innerStride3 * @out.Shape.Dimensions[dimIndex1].Length;
                        innerStride3 -= innerInnerStride3 * @out.Shape.Dimensions[dimIndex2].Length;

                        for (long outer = 0; outer < totalOps; outer++)
                        {
                            //Get the array offset for the first element in the outer dimension
                            long ix3 = @out.Shape[counters];

                            for (long i = 0; i < opsOuter; i++)
                            {
                                for (long j = 0; j < opsInner; j++)
                                {
                                    for (long k = 0; k < opsInnerInner; k++)
                                    {
                                        d2[ix3] = (System.Int32)(Math.Sqrt(scalar));
                                        ix3 += innerInnerStride3;
                                    }

                                    ix3 += innerStride3;
                                }

                                ix3 += outerStride3;
                            }

                            if (counters.LongLength > 0)
                            {
                                //Basically a ripple carry adder
                                long p = counters.LongLength - 1;
                                while (++counters[p] == limits[p] && p > 0)
                                {
                                    counters[p] = 0;
                                    p--;
                                }
                            }
                        }
                    }
                }
            }
        }
        /// <summary>
        /// Unsafe implementation of applying a unary operation
        /// </summary>
        /// <typeparam name="C">The type of operation to perform</typeparam>
        /// <param name="op">The operation instance</param>
        /// <param name="in1">The input argument</param>
        /// <param name="out">The output target</param>
        internal static void UFunc_Op_Inner_Unary_Flush_UInt32_TypedImpl<C>(NumCIL.UInt32.Sqrt op, NdArray<System.UInt32> in1, NdArray<System.UInt32> @out)
            where C : IUnaryOp<System.UInt32>
        {
            unsafe
            {
                using (var f1 = new Pinner(in1.DataAccessor))
                using (var f2 = new Pinner(@out.DataAccessor))
                {
                    var d1 = (System.UInt32*)f1.ptr;
                    var d2 = (System.UInt32*)f2.ptr;

                    if (@out.Shape.Dimensions.Length == 1)
                    {
                        long totalOps = @out.Shape.Dimensions[0].Length;

                        long ix1 = in1.Shape.Offset;
                        long ix2 = @out.Shape.Offset;

                        long stride1 = in1.Shape.Dimensions[0].Stride;
                        long stride2 = @out.Shape.Dimensions[0].Stride;


                        if (stride1 == stride2 && ix1 == ix2)
                        {
                            //Best case, all are equal, just keep a single counter
                            for (long i = 0; i < totalOps; i++)
                            {
                                d2[ix1] = (System.UInt32)(Math.Sqrt(d1[ix1]));
                                ix1 += stride1;
                            }
                        }
                        else
                        {
                            for (long i = 0; i < totalOps; i++)
                            {
                                d2[ix2] = (System.UInt32)(Math.Sqrt(d1[ix1]));
                                ix1 += stride1;
                                ix2 += stride2;
                            }
                        }
                    }
                    else if (@out.Shape.Dimensions.Length == 2)
                    {
                        long opsOuter = @out.Shape.Dimensions[0].Length;
                        long opsInner = @out.Shape.Dimensions[1].Length;

                        long ix1 = in1.Shape.Offset;
                        long ix2 = @out.Shape.Offset;

                        long outerStride1 = in1.Shape.Dimensions[0].Stride;
                        long outerStride2 = @out.Shape.Dimensions[0].Stride;

                        long innerStride1 = in1.Shape.Dimensions[1].Stride;
                        long innerStride2 = @out.Shape.Dimensions[1].Stride;

                        outerStride1 -= innerStride1 * in1.Shape.Dimensions[1].Length;
                        outerStride2 -= innerStride2 * @out.Shape.Dimensions[1].Length;

                        for (long i = 0; i < opsOuter; i++)
                        {
                            for (long j = 0; j < opsInner; j++)
                            {
                                d2[ix2] = (System.UInt32)(Math.Sqrt(d1[ix1]));
                                ix1 += innerStride1;
                                ix2 += innerStride2;
                            }

                            ix1 += outerStride1;
                            ix2 += outerStride2;
                        }
                    }
                    else
                    {
                        long n = in1.Shape.Dimensions.LongLength - 3;
                        long[] limits = in1.Shape.Dimensions.Where(x => n-- > 0).Select(x => x.Length).ToArray();
                        long[] counters = new long[limits.LongLength];

                        long totalOps = limits.LongLength == 0 ? 1 : limits.Aggregate<long>((a, b) => a * b);

                        //This chunck of variables are used to prevent repeated calculations of offsets
                        long dimIndex0 = 0 + limits.LongLength;
                        long dimIndex1 = 1 + limits.LongLength;
                        long dimIndex2 = 2 + limits.LongLength;

                        long opsOuter = @out.Shape.Dimensions[0 + limits.LongLength].Length;
                        long opsInner = @out.Shape.Dimensions[1 + limits.LongLength].Length;
                        long opsInnerInner = @out.Shape.Dimensions[2 + limits.LongLength].Length;

                        long outerStride1 = in1.Shape.Dimensions[dimIndex0].Stride;
                        long outerStride3 = @out.Shape.Dimensions[dimIndex0].Stride;

                        long innerStride1 = in1.Shape.Dimensions[dimIndex1].Stride;
                        long innerStride3 = @out.Shape.Dimensions[dimIndex1].Stride;

                        long innerInnerStride1 = in1.Shape.Dimensions[dimIndex2].Stride;
                        long innerInnerStride3 = @out.Shape.Dimensions[dimIndex2].Stride;

                        outerStride1 -= innerStride1 * in1.Shape.Dimensions[dimIndex1].Length;
                        outerStride3 -= innerStride3 * @out.Shape.Dimensions[dimIndex1].Length;

                        innerStride1 -= innerInnerStride1 * in1.Shape.Dimensions[dimIndex2].Length;
                        innerStride3 -= innerInnerStride3 * @out.Shape.Dimensions[dimIndex2].Length;

                        for (long outer = 0; outer < totalOps; outer++)
                        {
                            //Get the array offset for the first element in the outer dimension
                            long ix1 = in1.Shape[counters];
                            long ix3 = @out.Shape[counters];


                            for (long i = 0; i < opsOuter; i++)
                            {
                                for (long j = 0; j < opsInner; j++)
                                {
                                    for (long k = 0; k < opsInnerInner; k++)
                                    {
                                        d2[ix3] = (System.UInt32)(Math.Sqrt(d1[ix1]));
                                        ix1 += innerInnerStride1;
                                        ix3 += innerInnerStride3;
                                    }

                                    ix1 += innerStride1;
                                    ix3 += innerStride3;
                                }

                                ix1 += outerStride1;
                                ix3 += outerStride3;
                            }

                            if (counters.LongLength > 0)
                            {
                                //Basically a ripple carry adder
                                long p = counters.LongLength - 1;
                                while (++counters[p] == limits[p] && p > 0)
                                {
                                    counters[p] = 0;
                                    p--;
                                }
                            }
                        }
                    }
                }
            }
        }

        /// <summary>
        /// Unsafe implementation of applying a unary operation
        /// </summary>
        /// <typeparam name="C">The type of operation to perform</typeparam>
        /// <param name="op">The operation instance</param>
        /// <param name="scalar">The input scalar argument</param>
        /// <param name="out">The output target</param>
        internal static void UFunc_Op_Inner_Unary_Scalar_Flush_UInt32_TypedImpl<C>(NumCIL.UInt32.Sqrt op, System.UInt32 scalar, NdArray<System.UInt32> @out)
            where C : IUnaryOp<System.UInt32>
        {
            unsafe
            {
                using (var f2 = new Pinner(@out.DataAccessor))
                {
                    var d2 = (System.UInt32*)f2.ptr;

                    if (@out.Shape.Dimensions.Length == 1)
                    {
                        long totalOps = @out.Shape.Dimensions[0].Length;
                        long ix2 = @out.Shape.Offset;
                        long stride2 = @out.Shape.Dimensions[0].Stride;

                        for (long i = 0; i < totalOps; i++)
                        {
                            d2[ix2] = (System.UInt32)(Math.Sqrt(scalar));
                            ix2 += stride2;
                        }
                    }
                    else if (@out.Shape.Dimensions.Length == 2)
                    {
                        long opsOuter = @out.Shape.Dimensions[0].Length;
                        long opsInner = @out.Shape.Dimensions[1].Length;

                        long ix2 = @out.Shape.Offset;
                        long outerStride2 = @out.Shape.Dimensions[0].Stride;
                        long innerStride2 = @out.Shape.Dimensions[1].Stride;
                        outerStride2 -= innerStride2 * @out.Shape.Dimensions[1].Length;

                        for (long i = 0; i < opsOuter; i++)
                        {
                            for (long j = 0; j < opsInner; j++)
                            {
                                d2[ix2] = (System.UInt32)(Math.Sqrt(scalar));
                                ix2 += innerStride2;
                            }

                            ix2 += outerStride2;
                        }
                    }
                    else
                    {
                        long n = @out.Shape.Dimensions.LongLength - 3;
                        long[] limits = @out.Shape.Dimensions.Where(x => n-- > 0).Select(x => x.Length).ToArray();
                        long[] counters = new long[limits.LongLength];

                        long totalOps = limits.LongLength == 0 ? 1 : limits.Aggregate<long>((a, b) => a * b);

                        //This chunck of variables are used to prevent repeated calculations of offsets
                        long dimIndex0 = 0 + limits.LongLength;
                        long dimIndex1 = 1 + limits.LongLength;
                        long dimIndex2 = 2 + limits.LongLength;

                        long opsOuter = @out.Shape.Dimensions[0 + limits.LongLength].Length;
                        long opsInner = @out.Shape.Dimensions[1 + limits.LongLength].Length;
                        long opsInnerInner = @out.Shape.Dimensions[2 + limits.LongLength].Length;

                        long outerStride3 = @out.Shape.Dimensions[dimIndex0].Stride;
                        long innerStride3 = @out.Shape.Dimensions[dimIndex1].Stride;
                        long innerInnerStride3 = @out.Shape.Dimensions[dimIndex2].Stride;
                        outerStride3 -= innerStride3 * @out.Shape.Dimensions[dimIndex1].Length;
                        innerStride3 -= innerInnerStride3 * @out.Shape.Dimensions[dimIndex2].Length;

                        for (long outer = 0; outer < totalOps; outer++)
                        {
                            //Get the array offset for the first element in the outer dimension
                            long ix3 = @out.Shape[counters];

                            for (long i = 0; i < opsOuter; i++)
                            {
                                for (long j = 0; j < opsInner; j++)
                                {
                                    for (long k = 0; k < opsInnerInner; k++)
                                    {
                                        d2[ix3] = (System.UInt32)(Math.Sqrt(scalar));
                                        ix3 += innerInnerStride3;
                                    }

                                    ix3 += innerStride3;
                                }

                                ix3 += outerStride3;
                            }

                            if (counters.LongLength > 0)
                            {
                                //Basically a ripple carry adder
                                long p = counters.LongLength - 1;
                                while (++counters[p] == limits[p] && p > 0)
                                {
                                    counters[p] = 0;
                                    p--;
                                }
                            }
                        }
                    }
                }
            }
        }
        /// <summary>
        /// Unsafe implementation of applying a unary operation
        /// </summary>
        /// <typeparam name="C">The type of operation to perform</typeparam>
        /// <param name="op">The operation instance</param>
        /// <param name="in1">The input argument</param>
        /// <param name="out">The output target</param>
        internal static void UFunc_Op_Inner_Unary_Flush_Int64_TypedImpl<C>(NumCIL.Int64.Sqrt op, NdArray<System.Int64> in1, NdArray<System.Int64> @out)
            where C : IUnaryOp<System.Int64>
        {
            unsafe
            {
                using (var f1 = new Pinner(in1.DataAccessor))
                using (var f2 = new Pinner(@out.DataAccessor))
                {
                    var d1 = (System.Int64*)f1.ptr;
                    var d2 = (System.Int64*)f2.ptr;

                    if (@out.Shape.Dimensions.Length == 1)
                    {
                        long totalOps = @out.Shape.Dimensions[0].Length;

                        long ix1 = in1.Shape.Offset;
                        long ix2 = @out.Shape.Offset;

                        long stride1 = in1.Shape.Dimensions[0].Stride;
                        long stride2 = @out.Shape.Dimensions[0].Stride;


                        if (stride1 == stride2 && ix1 == ix2)
                        {
                            //Best case, all are equal, just keep a single counter
                            for (long i = 0; i < totalOps; i++)
                            {
                                d2[ix1] = (System.Int64)(Math.Sqrt(d1[ix1]));
                                ix1 += stride1;
                            }
                        }
                        else
                        {
                            for (long i = 0; i < totalOps; i++)
                            {
                                d2[ix2] = (System.Int64)(Math.Sqrt(d1[ix1]));
                                ix1 += stride1;
                                ix2 += stride2;
                            }
                        }
                    }
                    else if (@out.Shape.Dimensions.Length == 2)
                    {
                        long opsOuter = @out.Shape.Dimensions[0].Length;
                        long opsInner = @out.Shape.Dimensions[1].Length;

                        long ix1 = in1.Shape.Offset;
                        long ix2 = @out.Shape.Offset;

                        long outerStride1 = in1.Shape.Dimensions[0].Stride;
                        long outerStride2 = @out.Shape.Dimensions[0].Stride;

                        long innerStride1 = in1.Shape.Dimensions[1].Stride;
                        long innerStride2 = @out.Shape.Dimensions[1].Stride;

                        outerStride1 -= innerStride1 * in1.Shape.Dimensions[1].Length;
                        outerStride2 -= innerStride2 * @out.Shape.Dimensions[1].Length;

                        for (long i = 0; i < opsOuter; i++)
                        {
                            for (long j = 0; j < opsInner; j++)
                            {
                                d2[ix2] = (System.Int64)(Math.Sqrt(d1[ix1]));
                                ix1 += innerStride1;
                                ix2 += innerStride2;
                            }

                            ix1 += outerStride1;
                            ix2 += outerStride2;
                        }
                    }
                    else
                    {
                        long n = in1.Shape.Dimensions.LongLength - 3;
                        long[] limits = in1.Shape.Dimensions.Where(x => n-- > 0).Select(x => x.Length).ToArray();
                        long[] counters = new long[limits.LongLength];

                        long totalOps = limits.LongLength == 0 ? 1 : limits.Aggregate<long>((a, b) => a * b);

                        //This chunck of variables are used to prevent repeated calculations of offsets
                        long dimIndex0 = 0 + limits.LongLength;
                        long dimIndex1 = 1 + limits.LongLength;
                        long dimIndex2 = 2 + limits.LongLength;

                        long opsOuter = @out.Shape.Dimensions[0 + limits.LongLength].Length;
                        long opsInner = @out.Shape.Dimensions[1 + limits.LongLength].Length;
                        long opsInnerInner = @out.Shape.Dimensions[2 + limits.LongLength].Length;

                        long outerStride1 = in1.Shape.Dimensions[dimIndex0].Stride;
                        long outerStride3 = @out.Shape.Dimensions[dimIndex0].Stride;

                        long innerStride1 = in1.Shape.Dimensions[dimIndex1].Stride;
                        long innerStride3 = @out.Shape.Dimensions[dimIndex1].Stride;

                        long innerInnerStride1 = in1.Shape.Dimensions[dimIndex2].Stride;
                        long innerInnerStride3 = @out.Shape.Dimensions[dimIndex2].Stride;

                        outerStride1 -= innerStride1 * in1.Shape.Dimensions[dimIndex1].Length;
                        outerStride3 -= innerStride3 * @out.Shape.Dimensions[dimIndex1].Length;

                        innerStride1 -= innerInnerStride1 * in1.Shape.Dimensions[dimIndex2].Length;
                        innerStride3 -= innerInnerStride3 * @out.Shape.Dimensions[dimIndex2].Length;

                        for (long outer = 0; outer < totalOps; outer++)
                        {
                            //Get the array offset for the first element in the outer dimension
                            long ix1 = in1.Shape[counters];
                            long ix3 = @out.Shape[counters];


                            for (long i = 0; i < opsOuter; i++)
                            {
                                for (long j = 0; j < opsInner; j++)
                                {
                                    for (long k = 0; k < opsInnerInner; k++)
                                    {
                                        d2[ix3] = (System.Int64)(Math.Sqrt(d1[ix1]));
                                        ix1 += innerInnerStride1;
                                        ix3 += innerInnerStride3;
                                    }

                                    ix1 += innerStride1;
                                    ix3 += innerStride3;
                                }

                                ix1 += outerStride1;
                                ix3 += outerStride3;
                            }

                            if (counters.LongLength > 0)
                            {
                                //Basically a ripple carry adder
                                long p = counters.LongLength - 1;
                                while (++counters[p] == limits[p] && p > 0)
                                {
                                    counters[p] = 0;
                                    p--;
                                }
                            }
                        }
                    }
                }
            }
        }

        /// <summary>
        /// Unsafe implementation of applying a unary operation
        /// </summary>
        /// <typeparam name="C">The type of operation to perform</typeparam>
        /// <param name="op">The operation instance</param>
        /// <param name="scalar">The input scalar argument</param>
        /// <param name="out">The output target</param>
        internal static void UFunc_Op_Inner_Unary_Scalar_Flush_Int64_TypedImpl<C>(NumCIL.Int64.Sqrt op, System.Int64 scalar, NdArray<System.Int64> @out)
            where C : IUnaryOp<System.Int64>
        {
            unsafe
            {
                using (var f2 = new Pinner(@out.DataAccessor))
                {
                    var d2 = (System.Int64*)f2.ptr;

                    if (@out.Shape.Dimensions.Length == 1)
                    {
                        long totalOps = @out.Shape.Dimensions[0].Length;
                        long ix2 = @out.Shape.Offset;
                        long stride2 = @out.Shape.Dimensions[0].Stride;

                        for (long i = 0; i < totalOps; i++)
                        {
                            d2[ix2] = (System.Int64)(Math.Sqrt(scalar));
                            ix2 += stride2;
                        }
                    }
                    else if (@out.Shape.Dimensions.Length == 2)
                    {
                        long opsOuter = @out.Shape.Dimensions[0].Length;
                        long opsInner = @out.Shape.Dimensions[1].Length;

                        long ix2 = @out.Shape.Offset;
                        long outerStride2 = @out.Shape.Dimensions[0].Stride;
                        long innerStride2 = @out.Shape.Dimensions[1].Stride;
                        outerStride2 -= innerStride2 * @out.Shape.Dimensions[1].Length;

                        for (long i = 0; i < opsOuter; i++)
                        {
                            for (long j = 0; j < opsInner; j++)
                            {
                                d2[ix2] = (System.Int64)(Math.Sqrt(scalar));
                                ix2 += innerStride2;
                            }

                            ix2 += outerStride2;
                        }
                    }
                    else
                    {
                        long n = @out.Shape.Dimensions.LongLength - 3;
                        long[] limits = @out.Shape.Dimensions.Where(x => n-- > 0).Select(x => x.Length).ToArray();
                        long[] counters = new long[limits.LongLength];

                        long totalOps = limits.LongLength == 0 ? 1 : limits.Aggregate<long>((a, b) => a * b);

                        //This chunck of variables are used to prevent repeated calculations of offsets
                        long dimIndex0 = 0 + limits.LongLength;
                        long dimIndex1 = 1 + limits.LongLength;
                        long dimIndex2 = 2 + limits.LongLength;

                        long opsOuter = @out.Shape.Dimensions[0 + limits.LongLength].Length;
                        long opsInner = @out.Shape.Dimensions[1 + limits.LongLength].Length;
                        long opsInnerInner = @out.Shape.Dimensions[2 + limits.LongLength].Length;

                        long outerStride3 = @out.Shape.Dimensions[dimIndex0].Stride;
                        long innerStride3 = @out.Shape.Dimensions[dimIndex1].Stride;
                        long innerInnerStride3 = @out.Shape.Dimensions[dimIndex2].Stride;
                        outerStride3 -= innerStride3 * @out.Shape.Dimensions[dimIndex1].Length;
                        innerStride3 -= innerInnerStride3 * @out.Shape.Dimensions[dimIndex2].Length;

                        for (long outer = 0; outer < totalOps; outer++)
                        {
                            //Get the array offset for the first element in the outer dimension
                            long ix3 = @out.Shape[counters];

                            for (long i = 0; i < opsOuter; i++)
                            {
                                for (long j = 0; j < opsInner; j++)
                                {
                                    for (long k = 0; k < opsInnerInner; k++)
                                    {
                                        d2[ix3] = (System.Int64)(Math.Sqrt(scalar));
                                        ix3 += innerInnerStride3;
                                    }

                                    ix3 += innerStride3;
                                }

                                ix3 += outerStride3;
                            }

                            if (counters.LongLength > 0)
                            {
                                //Basically a ripple carry adder
                                long p = counters.LongLength - 1;
                                while (++counters[p] == limits[p] && p > 0)
                                {
                                    counters[p] = 0;
                                    p--;
                                }
                            }
                        }
                    }
                }
            }
        }
        /// <summary>
        /// Unsafe implementation of applying a unary operation
        /// </summary>
        /// <typeparam name="C">The type of operation to perform</typeparam>
        /// <param name="op">The operation instance</param>
        /// <param name="in1">The input argument</param>
        /// <param name="out">The output target</param>
        internal static void UFunc_Op_Inner_Unary_Flush_UInt64_TypedImpl<C>(NumCIL.UInt64.Sqrt op, NdArray<System.UInt64> in1, NdArray<System.UInt64> @out)
            where C : IUnaryOp<System.UInt64>
        {
            unsafe
            {
                using (var f1 = new Pinner(in1.DataAccessor))
                using (var f2 = new Pinner(@out.DataAccessor))
                {
                    var d1 = (System.UInt64*)f1.ptr;
                    var d2 = (System.UInt64*)f2.ptr;

                    if (@out.Shape.Dimensions.Length == 1)
                    {
                        long totalOps = @out.Shape.Dimensions[0].Length;

                        long ix1 = in1.Shape.Offset;
                        long ix2 = @out.Shape.Offset;

                        long stride1 = in1.Shape.Dimensions[0].Stride;
                        long stride2 = @out.Shape.Dimensions[0].Stride;


                        if (stride1 == stride2 && ix1 == ix2)
                        {
                            //Best case, all are equal, just keep a single counter
                            for (long i = 0; i < totalOps; i++)
                            {
                                d2[ix1] = (System.UInt64)(Math.Sqrt(d1[ix1]));
                                ix1 += stride1;
                            }
                        }
                        else
                        {
                            for (long i = 0; i < totalOps; i++)
                            {
                                d2[ix2] = (System.UInt64)(Math.Sqrt(d1[ix1]));
                                ix1 += stride1;
                                ix2 += stride2;
                            }
                        }
                    }
                    else if (@out.Shape.Dimensions.Length == 2)
                    {
                        long opsOuter = @out.Shape.Dimensions[0].Length;
                        long opsInner = @out.Shape.Dimensions[1].Length;

                        long ix1 = in1.Shape.Offset;
                        long ix2 = @out.Shape.Offset;

                        long outerStride1 = in1.Shape.Dimensions[0].Stride;
                        long outerStride2 = @out.Shape.Dimensions[0].Stride;

                        long innerStride1 = in1.Shape.Dimensions[1].Stride;
                        long innerStride2 = @out.Shape.Dimensions[1].Stride;

                        outerStride1 -= innerStride1 * in1.Shape.Dimensions[1].Length;
                        outerStride2 -= innerStride2 * @out.Shape.Dimensions[1].Length;

                        for (long i = 0; i < opsOuter; i++)
                        {
                            for (long j = 0; j < opsInner; j++)
                            {
                                d2[ix2] = (System.UInt64)(Math.Sqrt(d1[ix1]));
                                ix1 += innerStride1;
                                ix2 += innerStride2;
                            }

                            ix1 += outerStride1;
                            ix2 += outerStride2;
                        }
                    }
                    else
                    {
                        long n = in1.Shape.Dimensions.LongLength - 3;
                        long[] limits = in1.Shape.Dimensions.Where(x => n-- > 0).Select(x => x.Length).ToArray();
                        long[] counters = new long[limits.LongLength];

                        long totalOps = limits.LongLength == 0 ? 1 : limits.Aggregate<long>((a, b) => a * b);

                        //This chunck of variables are used to prevent repeated calculations of offsets
                        long dimIndex0 = 0 + limits.LongLength;
                        long dimIndex1 = 1 + limits.LongLength;
                        long dimIndex2 = 2 + limits.LongLength;

                        long opsOuter = @out.Shape.Dimensions[0 + limits.LongLength].Length;
                        long opsInner = @out.Shape.Dimensions[1 + limits.LongLength].Length;
                        long opsInnerInner = @out.Shape.Dimensions[2 + limits.LongLength].Length;

                        long outerStride1 = in1.Shape.Dimensions[dimIndex0].Stride;
                        long outerStride3 = @out.Shape.Dimensions[dimIndex0].Stride;

                        long innerStride1 = in1.Shape.Dimensions[dimIndex1].Stride;
                        long innerStride3 = @out.Shape.Dimensions[dimIndex1].Stride;

                        long innerInnerStride1 = in1.Shape.Dimensions[dimIndex2].Stride;
                        long innerInnerStride3 = @out.Shape.Dimensions[dimIndex2].Stride;

                        outerStride1 -= innerStride1 * in1.Shape.Dimensions[dimIndex1].Length;
                        outerStride3 -= innerStride3 * @out.Shape.Dimensions[dimIndex1].Length;

                        innerStride1 -= innerInnerStride1 * in1.Shape.Dimensions[dimIndex2].Length;
                        innerStride3 -= innerInnerStride3 * @out.Shape.Dimensions[dimIndex2].Length;

                        for (long outer = 0; outer < totalOps; outer++)
                        {
                            //Get the array offset for the first element in the outer dimension
                            long ix1 = in1.Shape[counters];
                            long ix3 = @out.Shape[counters];


                            for (long i = 0; i < opsOuter; i++)
                            {
                                for (long j = 0; j < opsInner; j++)
                                {
                                    for (long k = 0; k < opsInnerInner; k++)
                                    {
                                        d2[ix3] = (System.UInt64)(Math.Sqrt(d1[ix1]));
                                        ix1 += innerInnerStride1;
                                        ix3 += innerInnerStride3;
                                    }

                                    ix1 += innerStride1;
                                    ix3 += innerStride3;
                                }

                                ix1 += outerStride1;
                                ix3 += outerStride3;
                            }

                            if (counters.LongLength > 0)
                            {
                                //Basically a ripple carry adder
                                long p = counters.LongLength - 1;
                                while (++counters[p] == limits[p] && p > 0)
                                {
                                    counters[p] = 0;
                                    p--;
                                }
                            }
                        }
                    }
                }
            }
        }

        /// <summary>
        /// Unsafe implementation of applying a unary operation
        /// </summary>
        /// <typeparam name="C">The type of operation to perform</typeparam>
        /// <param name="op">The operation instance</param>
        /// <param name="scalar">The input scalar argument</param>
        /// <param name="out">The output target</param>
        internal static void UFunc_Op_Inner_Unary_Scalar_Flush_UInt64_TypedImpl<C>(NumCIL.UInt64.Sqrt op, System.UInt64 scalar, NdArray<System.UInt64> @out)
            where C : IUnaryOp<System.UInt64>
        {
            unsafe
            {
                using (var f2 = new Pinner(@out.DataAccessor))
                {
                    var d2 = (System.UInt64*)f2.ptr;

                    if (@out.Shape.Dimensions.Length == 1)
                    {
                        long totalOps = @out.Shape.Dimensions[0].Length;
                        long ix2 = @out.Shape.Offset;
                        long stride2 = @out.Shape.Dimensions[0].Stride;

                        for (long i = 0; i < totalOps; i++)
                        {
                            d2[ix2] = (System.UInt64)(Math.Sqrt(scalar));
                            ix2 += stride2;
                        }
                    }
                    else if (@out.Shape.Dimensions.Length == 2)
                    {
                        long opsOuter = @out.Shape.Dimensions[0].Length;
                        long opsInner = @out.Shape.Dimensions[1].Length;

                        long ix2 = @out.Shape.Offset;
                        long outerStride2 = @out.Shape.Dimensions[0].Stride;
                        long innerStride2 = @out.Shape.Dimensions[1].Stride;
                        outerStride2 -= innerStride2 * @out.Shape.Dimensions[1].Length;

                        for (long i = 0; i < opsOuter; i++)
                        {
                            for (long j = 0; j < opsInner; j++)
                            {
                                d2[ix2] = (System.UInt64)(Math.Sqrt(scalar));
                                ix2 += innerStride2;
                            }

                            ix2 += outerStride2;
                        }
                    }
                    else
                    {
                        long n = @out.Shape.Dimensions.LongLength - 3;
                        long[] limits = @out.Shape.Dimensions.Where(x => n-- > 0).Select(x => x.Length).ToArray();
                        long[] counters = new long[limits.LongLength];

                        long totalOps = limits.LongLength == 0 ? 1 : limits.Aggregate<long>((a, b) => a * b);

                        //This chunck of variables are used to prevent repeated calculations of offsets
                        long dimIndex0 = 0 + limits.LongLength;
                        long dimIndex1 = 1 + limits.LongLength;
                        long dimIndex2 = 2 + limits.LongLength;

                        long opsOuter = @out.Shape.Dimensions[0 + limits.LongLength].Length;
                        long opsInner = @out.Shape.Dimensions[1 + limits.LongLength].Length;
                        long opsInnerInner = @out.Shape.Dimensions[2 + limits.LongLength].Length;

                        long outerStride3 = @out.Shape.Dimensions[dimIndex0].Stride;
                        long innerStride3 = @out.Shape.Dimensions[dimIndex1].Stride;
                        long innerInnerStride3 = @out.Shape.Dimensions[dimIndex2].Stride;
                        outerStride3 -= innerStride3 * @out.Shape.Dimensions[dimIndex1].Length;
                        innerStride3 -= innerInnerStride3 * @out.Shape.Dimensions[dimIndex2].Length;

                        for (long outer = 0; outer < totalOps; outer++)
                        {
                            //Get the array offset for the first element in the outer dimension
                            long ix3 = @out.Shape[counters];

                            for (long i = 0; i < opsOuter; i++)
                            {
                                for (long j = 0; j < opsInner; j++)
                                {
                                    for (long k = 0; k < opsInnerInner; k++)
                                    {
                                        d2[ix3] = (System.UInt64)(Math.Sqrt(scalar));
                                        ix3 += innerInnerStride3;
                                    }

                                    ix3 += innerStride3;
                                }

                                ix3 += outerStride3;
                            }

                            if (counters.LongLength > 0)
                            {
                                //Basically a ripple carry adder
                                long p = counters.LongLength - 1;
                                while (++counters[p] == limits[p] && p > 0)
                                {
                                    counters[p] = 0;
                                    p--;
                                }
                            }
                        }
                    }
                }
            }
        }
        /// <summary>
        /// Unsafe implementation of applying a unary operation
        /// </summary>
        /// <typeparam name="C">The type of operation to perform</typeparam>
        /// <param name="op">The operation instance</param>
        /// <param name="in1">The input argument</param>
        /// <param name="out">The output target</param>
        internal static void UFunc_Op_Inner_Unary_Flush_Single_TypedImpl<C>(NumCIL.Float.Sqrt op, NdArray<System.Single> in1, NdArray<System.Single> @out)
            where C : IUnaryOp<System.Single>
        {
            unsafe
            {
                using (var f1 = new Pinner(in1.DataAccessor))
                using (var f2 = new Pinner(@out.DataAccessor))
                {
                    var d1 = (System.Single*)f1.ptr;
                    var d2 = (System.Single*)f2.ptr;

                    if (@out.Shape.Dimensions.Length == 1)
                    {
                        long totalOps = @out.Shape.Dimensions[0].Length;

                        long ix1 = in1.Shape.Offset;
                        long ix2 = @out.Shape.Offset;

                        long stride1 = in1.Shape.Dimensions[0].Stride;
                        long stride2 = @out.Shape.Dimensions[0].Stride;


                        if (stride1 == stride2 && ix1 == ix2)
                        {
                            //Best case, all are equal, just keep a single counter
                            for (long i = 0; i < totalOps; i++)
                            {
                                d2[ix1] = (System.Single)(Math.Sqrt(d1[ix1]));
                                ix1 += stride1;
                            }
                        }
                        else
                        {
                            for (long i = 0; i < totalOps; i++)
                            {
                                d2[ix2] = (System.Single)(Math.Sqrt(d1[ix1]));
                                ix1 += stride1;
                                ix2 += stride2;
                            }
                        }
                    }
                    else if (@out.Shape.Dimensions.Length == 2)
                    {
                        long opsOuter = @out.Shape.Dimensions[0].Length;
                        long opsInner = @out.Shape.Dimensions[1].Length;

                        long ix1 = in1.Shape.Offset;
                        long ix2 = @out.Shape.Offset;

                        long outerStride1 = in1.Shape.Dimensions[0].Stride;
                        long outerStride2 = @out.Shape.Dimensions[0].Stride;

                        long innerStride1 = in1.Shape.Dimensions[1].Stride;
                        long innerStride2 = @out.Shape.Dimensions[1].Stride;

                        outerStride1 -= innerStride1 * in1.Shape.Dimensions[1].Length;
                        outerStride2 -= innerStride2 * @out.Shape.Dimensions[1].Length;

                        for (long i = 0; i < opsOuter; i++)
                        {
                            for (long j = 0; j < opsInner; j++)
                            {
                                d2[ix2] = (System.Single)(Math.Sqrt(d1[ix1]));
                                ix1 += innerStride1;
                                ix2 += innerStride2;
                            }

                            ix1 += outerStride1;
                            ix2 += outerStride2;
                        }
                    }
                    else
                    {
                        long n = in1.Shape.Dimensions.LongLength - 3;
                        long[] limits = in1.Shape.Dimensions.Where(x => n-- > 0).Select(x => x.Length).ToArray();
                        long[] counters = new long[limits.LongLength];

                        long totalOps = limits.LongLength == 0 ? 1 : limits.Aggregate<long>((a, b) => a * b);

                        //This chunck of variables are used to prevent repeated calculations of offsets
                        long dimIndex0 = 0 + limits.LongLength;
                        long dimIndex1 = 1 + limits.LongLength;
                        long dimIndex2 = 2 + limits.LongLength;

                        long opsOuter = @out.Shape.Dimensions[0 + limits.LongLength].Length;
                        long opsInner = @out.Shape.Dimensions[1 + limits.LongLength].Length;
                        long opsInnerInner = @out.Shape.Dimensions[2 + limits.LongLength].Length;

                        long outerStride1 = in1.Shape.Dimensions[dimIndex0].Stride;
                        long outerStride3 = @out.Shape.Dimensions[dimIndex0].Stride;

                        long innerStride1 = in1.Shape.Dimensions[dimIndex1].Stride;
                        long innerStride3 = @out.Shape.Dimensions[dimIndex1].Stride;

                        long innerInnerStride1 = in1.Shape.Dimensions[dimIndex2].Stride;
                        long innerInnerStride3 = @out.Shape.Dimensions[dimIndex2].Stride;

                        outerStride1 -= innerStride1 * in1.Shape.Dimensions[dimIndex1].Length;
                        outerStride3 -= innerStride3 * @out.Shape.Dimensions[dimIndex1].Length;

                        innerStride1 -= innerInnerStride1 * in1.Shape.Dimensions[dimIndex2].Length;
                        innerStride3 -= innerInnerStride3 * @out.Shape.Dimensions[dimIndex2].Length;

                        for (long outer = 0; outer < totalOps; outer++)
                        {
                            //Get the array offset for the first element in the outer dimension
                            long ix1 = in1.Shape[counters];
                            long ix3 = @out.Shape[counters];


                            for (long i = 0; i < opsOuter; i++)
                            {
                                for (long j = 0; j < opsInner; j++)
                                {
                                    for (long k = 0; k < opsInnerInner; k++)
                                    {
                                        d2[ix3] = (System.Single)(Math.Sqrt(d1[ix1]));
                                        ix1 += innerInnerStride1;
                                        ix3 += innerInnerStride3;
                                    }

                                    ix1 += innerStride1;
                                    ix3 += innerStride3;
                                }

                                ix1 += outerStride1;
                                ix3 += outerStride3;
                            }

                            if (counters.LongLength > 0)
                            {
                                //Basically a ripple carry adder
                                long p = counters.LongLength - 1;
                                while (++counters[p] == limits[p] && p > 0)
                                {
                                    counters[p] = 0;
                                    p--;
                                }
                            }
                        }
                    }
                }
            }
        }

        /// <summary>
        /// Unsafe implementation of applying a unary operation
        /// </summary>
        /// <typeparam name="C">The type of operation to perform</typeparam>
        /// <param name="op">The operation instance</param>
        /// <param name="scalar">The input scalar argument</param>
        /// <param name="out">The output target</param>
        internal static void UFunc_Op_Inner_Unary_Scalar_Flush_Single_TypedImpl<C>(NumCIL.Float.Sqrt op, System.Single scalar, NdArray<System.Single> @out)
            where C : IUnaryOp<System.Single>
        {
            unsafe
            {
                using (var f2 = new Pinner(@out.DataAccessor))
                {
                    var d2 = (System.Single*)f2.ptr;

                    if (@out.Shape.Dimensions.Length == 1)
                    {
                        long totalOps = @out.Shape.Dimensions[0].Length;
                        long ix2 = @out.Shape.Offset;
                        long stride2 = @out.Shape.Dimensions[0].Stride;

                        for (long i = 0; i < totalOps; i++)
                        {
                            d2[ix2] = (System.Single)(Math.Sqrt(scalar));
                            ix2 += stride2;
                        }
                    }
                    else if (@out.Shape.Dimensions.Length == 2)
                    {
                        long opsOuter = @out.Shape.Dimensions[0].Length;
                        long opsInner = @out.Shape.Dimensions[1].Length;

                        long ix2 = @out.Shape.Offset;
                        long outerStride2 = @out.Shape.Dimensions[0].Stride;
                        long innerStride2 = @out.Shape.Dimensions[1].Stride;
                        outerStride2 -= innerStride2 * @out.Shape.Dimensions[1].Length;

                        for (long i = 0; i < opsOuter; i++)
                        {
                            for (long j = 0; j < opsInner; j++)
                            {
                                d2[ix2] = (System.Single)(Math.Sqrt(scalar));
                                ix2 += innerStride2;
                            }

                            ix2 += outerStride2;
                        }
                    }
                    else
                    {
                        long n = @out.Shape.Dimensions.LongLength - 3;
                        long[] limits = @out.Shape.Dimensions.Where(x => n-- > 0).Select(x => x.Length).ToArray();
                        long[] counters = new long[limits.LongLength];

                        long totalOps = limits.LongLength == 0 ? 1 : limits.Aggregate<long>((a, b) => a * b);

                        //This chunck of variables are used to prevent repeated calculations of offsets
                        long dimIndex0 = 0 + limits.LongLength;
                        long dimIndex1 = 1 + limits.LongLength;
                        long dimIndex2 = 2 + limits.LongLength;

                        long opsOuter = @out.Shape.Dimensions[0 + limits.LongLength].Length;
                        long opsInner = @out.Shape.Dimensions[1 + limits.LongLength].Length;
                        long opsInnerInner = @out.Shape.Dimensions[2 + limits.LongLength].Length;

                        long outerStride3 = @out.Shape.Dimensions[dimIndex0].Stride;
                        long innerStride3 = @out.Shape.Dimensions[dimIndex1].Stride;
                        long innerInnerStride3 = @out.Shape.Dimensions[dimIndex2].Stride;
                        outerStride3 -= innerStride3 * @out.Shape.Dimensions[dimIndex1].Length;
                        innerStride3 -= innerInnerStride3 * @out.Shape.Dimensions[dimIndex2].Length;

                        for (long outer = 0; outer < totalOps; outer++)
                        {
                            //Get the array offset for the first element in the outer dimension
                            long ix3 = @out.Shape[counters];

                            for (long i = 0; i < opsOuter; i++)
                            {
                                for (long j = 0; j < opsInner; j++)
                                {
                                    for (long k = 0; k < opsInnerInner; k++)
                                    {
                                        d2[ix3] = (System.Single)(Math.Sqrt(scalar));
                                        ix3 += innerInnerStride3;
                                    }

                                    ix3 += innerStride3;
                                }

                                ix3 += outerStride3;
                            }

                            if (counters.LongLength > 0)
                            {
                                //Basically a ripple carry adder
                                long p = counters.LongLength - 1;
                                while (++counters[p] == limits[p] && p > 0)
                                {
                                    counters[p] = 0;
                                    p--;
                                }
                            }
                        }
                    }
                }
            }
        }
        /// <summary>
        /// Unsafe implementation of applying a unary operation
        /// </summary>
        /// <typeparam name="C">The type of operation to perform</typeparam>
        /// <param name="op">The operation instance</param>
        /// <param name="in1">The input argument</param>
        /// <param name="out">The output target</param>
        internal static void UFunc_Op_Inner_Unary_Flush_Double_TypedImpl<C>(NumCIL.Double.Sqrt op, NdArray<System.Double> in1, NdArray<System.Double> @out)
            where C : IUnaryOp<System.Double>
        {
            unsafe
            {
                using (var f1 = new Pinner(in1.DataAccessor))
                using (var f2 = new Pinner(@out.DataAccessor))
                {
                    var d1 = (System.Double*)f1.ptr;
                    var d2 = (System.Double*)f2.ptr;

                    if (@out.Shape.Dimensions.Length == 1)
                    {
                        long totalOps = @out.Shape.Dimensions[0].Length;

                        long ix1 = in1.Shape.Offset;
                        long ix2 = @out.Shape.Offset;

                        long stride1 = in1.Shape.Dimensions[0].Stride;
                        long stride2 = @out.Shape.Dimensions[0].Stride;


                        if (stride1 == stride2 && ix1 == ix2)
                        {
                            //Best case, all are equal, just keep a single counter
                            for (long i = 0; i < totalOps; i++)
                            {
                                d2[ix1] = (System.Double)(Math.Sqrt(d1[ix1]));
                                ix1 += stride1;
                            }
                        }
                        else
                        {
                            for (long i = 0; i < totalOps; i++)
                            {
                                d2[ix2] = (System.Double)(Math.Sqrt(d1[ix1]));
                                ix1 += stride1;
                                ix2 += stride2;
                            }
                        }
                    }
                    else if (@out.Shape.Dimensions.Length == 2)
                    {
                        long opsOuter = @out.Shape.Dimensions[0].Length;
                        long opsInner = @out.Shape.Dimensions[1].Length;

                        long ix1 = in1.Shape.Offset;
                        long ix2 = @out.Shape.Offset;

                        long outerStride1 = in1.Shape.Dimensions[0].Stride;
                        long outerStride2 = @out.Shape.Dimensions[0].Stride;

                        long innerStride1 = in1.Shape.Dimensions[1].Stride;
                        long innerStride2 = @out.Shape.Dimensions[1].Stride;

                        outerStride1 -= innerStride1 * in1.Shape.Dimensions[1].Length;
                        outerStride2 -= innerStride2 * @out.Shape.Dimensions[1].Length;

                        for (long i = 0; i < opsOuter; i++)
                        {
                            for (long j = 0; j < opsInner; j++)
                            {
                                d2[ix2] = (System.Double)(Math.Sqrt(d1[ix1]));
                                ix1 += innerStride1;
                                ix2 += innerStride2;
                            }

                            ix1 += outerStride1;
                            ix2 += outerStride2;
                        }
                    }
                    else
                    {
                        long n = in1.Shape.Dimensions.LongLength - 3;
                        long[] limits = in1.Shape.Dimensions.Where(x => n-- > 0).Select(x => x.Length).ToArray();
                        long[] counters = new long[limits.LongLength];

                        long totalOps = limits.LongLength == 0 ? 1 : limits.Aggregate<long>((a, b) => a * b);

                        //This chunck of variables are used to prevent repeated calculations of offsets
                        long dimIndex0 = 0 + limits.LongLength;
                        long dimIndex1 = 1 + limits.LongLength;
                        long dimIndex2 = 2 + limits.LongLength;

                        long opsOuter = @out.Shape.Dimensions[0 + limits.LongLength].Length;
                        long opsInner = @out.Shape.Dimensions[1 + limits.LongLength].Length;
                        long opsInnerInner = @out.Shape.Dimensions[2 + limits.LongLength].Length;

                        long outerStride1 = in1.Shape.Dimensions[dimIndex0].Stride;
                        long outerStride3 = @out.Shape.Dimensions[dimIndex0].Stride;

                        long innerStride1 = in1.Shape.Dimensions[dimIndex1].Stride;
                        long innerStride3 = @out.Shape.Dimensions[dimIndex1].Stride;

                        long innerInnerStride1 = in1.Shape.Dimensions[dimIndex2].Stride;
                        long innerInnerStride3 = @out.Shape.Dimensions[dimIndex2].Stride;

                        outerStride1 -= innerStride1 * in1.Shape.Dimensions[dimIndex1].Length;
                        outerStride3 -= innerStride3 * @out.Shape.Dimensions[dimIndex1].Length;

                        innerStride1 -= innerInnerStride1 * in1.Shape.Dimensions[dimIndex2].Length;
                        innerStride3 -= innerInnerStride3 * @out.Shape.Dimensions[dimIndex2].Length;

                        for (long outer = 0; outer < totalOps; outer++)
                        {
                            //Get the array offset for the first element in the outer dimension
                            long ix1 = in1.Shape[counters];
                            long ix3 = @out.Shape[counters];


                            for (long i = 0; i < opsOuter; i++)
                            {
                                for (long j = 0; j < opsInner; j++)
                                {
                                    for (long k = 0; k < opsInnerInner; k++)
                                    {
                                        d2[ix3] = (System.Double)(Math.Sqrt(d1[ix1]));
                                        ix1 += innerInnerStride1;
                                        ix3 += innerInnerStride3;
                                    }

                                    ix1 += innerStride1;
                                    ix3 += innerStride3;
                                }

                                ix1 += outerStride1;
                                ix3 += outerStride3;
                            }

                            if (counters.LongLength > 0)
                            {
                                //Basically a ripple carry adder
                                long p = counters.LongLength - 1;
                                while (++counters[p] == limits[p] && p > 0)
                                {
                                    counters[p] = 0;
                                    p--;
                                }
                            }
                        }
                    }
                }
            }
        }

        /// <summary>
        /// Unsafe implementation of applying a unary operation
        /// </summary>
        /// <typeparam name="C">The type of operation to perform</typeparam>
        /// <param name="op">The operation instance</param>
        /// <param name="scalar">The input scalar argument</param>
        /// <param name="out">The output target</param>
        internal static void UFunc_Op_Inner_Unary_Scalar_Flush_Double_TypedImpl<C>(NumCIL.Double.Sqrt op, System.Double scalar, NdArray<System.Double> @out)
            where C : IUnaryOp<System.Double>
        {
            unsafe
            {
                using (var f2 = new Pinner(@out.DataAccessor))
                {
                    var d2 = (System.Double*)f2.ptr;

                    if (@out.Shape.Dimensions.Length == 1)
                    {
                        long totalOps = @out.Shape.Dimensions[0].Length;
                        long ix2 = @out.Shape.Offset;
                        long stride2 = @out.Shape.Dimensions[0].Stride;

                        for (long i = 0; i < totalOps; i++)
                        {
                            d2[ix2] = (System.Double)(Math.Sqrt(scalar));
                            ix2 += stride2;
                        }
                    }
                    else if (@out.Shape.Dimensions.Length == 2)
                    {
                        long opsOuter = @out.Shape.Dimensions[0].Length;
                        long opsInner = @out.Shape.Dimensions[1].Length;

                        long ix2 = @out.Shape.Offset;
                        long outerStride2 = @out.Shape.Dimensions[0].Stride;
                        long innerStride2 = @out.Shape.Dimensions[1].Stride;
                        outerStride2 -= innerStride2 * @out.Shape.Dimensions[1].Length;

                        for (long i = 0; i < opsOuter; i++)
                        {
                            for (long j = 0; j < opsInner; j++)
                            {
                                d2[ix2] = (System.Double)(Math.Sqrt(scalar));
                                ix2 += innerStride2;
                            }

                            ix2 += outerStride2;
                        }
                    }
                    else
                    {
                        long n = @out.Shape.Dimensions.LongLength - 3;
                        long[] limits = @out.Shape.Dimensions.Where(x => n-- > 0).Select(x => x.Length).ToArray();
                        long[] counters = new long[limits.LongLength];

                        long totalOps = limits.LongLength == 0 ? 1 : limits.Aggregate<long>((a, b) => a * b);

                        //This chunck of variables are used to prevent repeated calculations of offsets
                        long dimIndex0 = 0 + limits.LongLength;
                        long dimIndex1 = 1 + limits.LongLength;
                        long dimIndex2 = 2 + limits.LongLength;

                        long opsOuter = @out.Shape.Dimensions[0 + limits.LongLength].Length;
                        long opsInner = @out.Shape.Dimensions[1 + limits.LongLength].Length;
                        long opsInnerInner = @out.Shape.Dimensions[2 + limits.LongLength].Length;

                        long outerStride3 = @out.Shape.Dimensions[dimIndex0].Stride;
                        long innerStride3 = @out.Shape.Dimensions[dimIndex1].Stride;
                        long innerInnerStride3 = @out.Shape.Dimensions[dimIndex2].Stride;
                        outerStride3 -= innerStride3 * @out.Shape.Dimensions[dimIndex1].Length;
                        innerStride3 -= innerInnerStride3 * @out.Shape.Dimensions[dimIndex2].Length;

                        for (long outer = 0; outer < totalOps; outer++)
                        {
                            //Get the array offset for the first element in the outer dimension
                            long ix3 = @out.Shape[counters];

                            for (long i = 0; i < opsOuter; i++)
                            {
                                for (long j = 0; j < opsInner; j++)
                                {
                                    for (long k = 0; k < opsInnerInner; k++)
                                    {
                                        d2[ix3] = (System.Double)(Math.Sqrt(scalar));
                                        ix3 += innerInnerStride3;
                                    }

                                    ix3 += innerStride3;
                                }

                                ix3 += outerStride3;
                            }

                            if (counters.LongLength > 0)
                            {
                                //Basically a ripple carry adder
                                long p = counters.LongLength - 1;
                                while (++counters[p] == limits[p] && p > 0)
                                {
                                    counters[p] = 0;
                                    p--;
                                }
                            }
                        }
                    }
                }
            }
        }
        /// <summary>
        /// Unsafe implementation of applying a unary operation
        /// </summary>
        /// <typeparam name="C">The type of operation to perform</typeparam>
        /// <param name="op">The operation instance</param>
        /// <param name="in1">The input argument</param>
        /// <param name="out">The output target</param>
        internal static void UFunc_Op_Inner_Unary_Flush_SByte_TypedImpl<C>(NumCIL.Int8.Exp op, NdArray<System.SByte> in1, NdArray<System.SByte> @out)
            where C : IUnaryOp<System.SByte>
        {
            unsafe
            {
                using (var f1 = new Pinner(in1.DataAccessor))
                using (var f2 = new Pinner(@out.DataAccessor))
                {
                    var d1 = (System.SByte*)f1.ptr;
                    var d2 = (System.SByte*)f2.ptr;

                    if (@out.Shape.Dimensions.Length == 1)
                    {
                        long totalOps = @out.Shape.Dimensions[0].Length;

                        long ix1 = in1.Shape.Offset;
                        long ix2 = @out.Shape.Offset;

                        long stride1 = in1.Shape.Dimensions[0].Stride;
                        long stride2 = @out.Shape.Dimensions[0].Stride;


                        if (stride1 == stride2 && ix1 == ix2)
                        {
                            //Best case, all are equal, just keep a single counter
                            for (long i = 0; i < totalOps; i++)
                            {
                                d2[ix1] = (System.SByte)(Math.Exp(d1[ix1]));
                                ix1 += stride1;
                            }
                        }
                        else
                        {
                            for (long i = 0; i < totalOps; i++)
                            {
                                d2[ix2] = (System.SByte)(Math.Exp(d1[ix1]));
                                ix1 += stride1;
                                ix2 += stride2;
                            }
                        }
                    }
                    else if (@out.Shape.Dimensions.Length == 2)
                    {
                        long opsOuter = @out.Shape.Dimensions[0].Length;
                        long opsInner = @out.Shape.Dimensions[1].Length;

                        long ix1 = in1.Shape.Offset;
                        long ix2 = @out.Shape.Offset;

                        long outerStride1 = in1.Shape.Dimensions[0].Stride;
                        long outerStride2 = @out.Shape.Dimensions[0].Stride;

                        long innerStride1 = in1.Shape.Dimensions[1].Stride;
                        long innerStride2 = @out.Shape.Dimensions[1].Stride;

                        outerStride1 -= innerStride1 * in1.Shape.Dimensions[1].Length;
                        outerStride2 -= innerStride2 * @out.Shape.Dimensions[1].Length;

                        for (long i = 0; i < opsOuter; i++)
                        {
                            for (long j = 0; j < opsInner; j++)
                            {
                                d2[ix2] = (System.SByte)(Math.Exp(d1[ix1]));
                                ix1 += innerStride1;
                                ix2 += innerStride2;
                            }

                            ix1 += outerStride1;
                            ix2 += outerStride2;
                        }
                    }
                    else
                    {
                        long n = in1.Shape.Dimensions.LongLength - 3;
                        long[] limits = in1.Shape.Dimensions.Where(x => n-- > 0).Select(x => x.Length).ToArray();
                        long[] counters = new long[limits.LongLength];

                        long totalOps = limits.LongLength == 0 ? 1 : limits.Aggregate<long>((a, b) => a * b);

                        //This chunck of variables are used to prevent repeated calculations of offsets
                        long dimIndex0 = 0 + limits.LongLength;
                        long dimIndex1 = 1 + limits.LongLength;
                        long dimIndex2 = 2 + limits.LongLength;

                        long opsOuter = @out.Shape.Dimensions[0 + limits.LongLength].Length;
                        long opsInner = @out.Shape.Dimensions[1 + limits.LongLength].Length;
                        long opsInnerInner = @out.Shape.Dimensions[2 + limits.LongLength].Length;

                        long outerStride1 = in1.Shape.Dimensions[dimIndex0].Stride;
                        long outerStride3 = @out.Shape.Dimensions[dimIndex0].Stride;

                        long innerStride1 = in1.Shape.Dimensions[dimIndex1].Stride;
                        long innerStride3 = @out.Shape.Dimensions[dimIndex1].Stride;

                        long innerInnerStride1 = in1.Shape.Dimensions[dimIndex2].Stride;
                        long innerInnerStride3 = @out.Shape.Dimensions[dimIndex2].Stride;

                        outerStride1 -= innerStride1 * in1.Shape.Dimensions[dimIndex1].Length;
                        outerStride3 -= innerStride3 * @out.Shape.Dimensions[dimIndex1].Length;

                        innerStride1 -= innerInnerStride1 * in1.Shape.Dimensions[dimIndex2].Length;
                        innerStride3 -= innerInnerStride3 * @out.Shape.Dimensions[dimIndex2].Length;

                        for (long outer = 0; outer < totalOps; outer++)
                        {
                            //Get the array offset for the first element in the outer dimension
                            long ix1 = in1.Shape[counters];
                            long ix3 = @out.Shape[counters];


                            for (long i = 0; i < opsOuter; i++)
                            {
                                for (long j = 0; j < opsInner; j++)
                                {
                                    for (long k = 0; k < opsInnerInner; k++)
                                    {
                                        d2[ix3] = (System.SByte)(Math.Exp(d1[ix1]));
                                        ix1 += innerInnerStride1;
                                        ix3 += innerInnerStride3;
                                    }

                                    ix1 += innerStride1;
                                    ix3 += innerStride3;
                                }

                                ix1 += outerStride1;
                                ix3 += outerStride3;
                            }

                            if (counters.LongLength > 0)
                            {
                                //Basically a ripple carry adder
                                long p = counters.LongLength - 1;
                                while (++counters[p] == limits[p] && p > 0)
                                {
                                    counters[p] = 0;
                                    p--;
                                }
                            }
                        }
                    }
                }
            }
        }

        /// <summary>
        /// Unsafe implementation of applying a unary operation
        /// </summary>
        /// <typeparam name="C">The type of operation to perform</typeparam>
        /// <param name="op">The operation instance</param>
        /// <param name="scalar">The input scalar argument</param>
        /// <param name="out">The output target</param>
        internal static void UFunc_Op_Inner_Unary_Scalar_Flush_SByte_TypedImpl<C>(NumCIL.Int8.Exp op, System.SByte scalar, NdArray<System.SByte> @out)
            where C : IUnaryOp<System.SByte>
        {
            unsafe
            {
                using (var f2 = new Pinner(@out.DataAccessor))
                {
                    var d2 = (System.SByte*)f2.ptr;

                    if (@out.Shape.Dimensions.Length == 1)
                    {
                        long totalOps = @out.Shape.Dimensions[0].Length;
                        long ix2 = @out.Shape.Offset;
                        long stride2 = @out.Shape.Dimensions[0].Stride;

                        for (long i = 0; i < totalOps; i++)
                        {
                            d2[ix2] = (System.SByte)(Math.Exp(scalar));
                            ix2 += stride2;
                        }
                    }
                    else if (@out.Shape.Dimensions.Length == 2)
                    {
                        long opsOuter = @out.Shape.Dimensions[0].Length;
                        long opsInner = @out.Shape.Dimensions[1].Length;

                        long ix2 = @out.Shape.Offset;
                        long outerStride2 = @out.Shape.Dimensions[0].Stride;
                        long innerStride2 = @out.Shape.Dimensions[1].Stride;
                        outerStride2 -= innerStride2 * @out.Shape.Dimensions[1].Length;

                        for (long i = 0; i < opsOuter; i++)
                        {
                            for (long j = 0; j < opsInner; j++)
                            {
                                d2[ix2] = (System.SByte)(Math.Exp(scalar));
                                ix2 += innerStride2;
                            }

                            ix2 += outerStride2;
                        }
                    }
                    else
                    {
                        long n = @out.Shape.Dimensions.LongLength - 3;
                        long[] limits = @out.Shape.Dimensions.Where(x => n-- > 0).Select(x => x.Length).ToArray();
                        long[] counters = new long[limits.LongLength];

                        long totalOps = limits.LongLength == 0 ? 1 : limits.Aggregate<long>((a, b) => a * b);

                        //This chunck of variables are used to prevent repeated calculations of offsets
                        long dimIndex0 = 0 + limits.LongLength;
                        long dimIndex1 = 1 + limits.LongLength;
                        long dimIndex2 = 2 + limits.LongLength;

                        long opsOuter = @out.Shape.Dimensions[0 + limits.LongLength].Length;
                        long opsInner = @out.Shape.Dimensions[1 + limits.LongLength].Length;
                        long opsInnerInner = @out.Shape.Dimensions[2 + limits.LongLength].Length;

                        long outerStride3 = @out.Shape.Dimensions[dimIndex0].Stride;
                        long innerStride3 = @out.Shape.Dimensions[dimIndex1].Stride;
                        long innerInnerStride3 = @out.Shape.Dimensions[dimIndex2].Stride;
                        outerStride3 -= innerStride3 * @out.Shape.Dimensions[dimIndex1].Length;
                        innerStride3 -= innerInnerStride3 * @out.Shape.Dimensions[dimIndex2].Length;

                        for (long outer = 0; outer < totalOps; outer++)
                        {
                            //Get the array offset for the first element in the outer dimension
                            long ix3 = @out.Shape[counters];

                            for (long i = 0; i < opsOuter; i++)
                            {
                                for (long j = 0; j < opsInner; j++)
                                {
                                    for (long k = 0; k < opsInnerInner; k++)
                                    {
                                        d2[ix3] = (System.SByte)(Math.Exp(scalar));
                                        ix3 += innerInnerStride3;
                                    }

                                    ix3 += innerStride3;
                                }

                                ix3 += outerStride3;
                            }

                            if (counters.LongLength > 0)
                            {
                                //Basically a ripple carry adder
                                long p = counters.LongLength - 1;
                                while (++counters[p] == limits[p] && p > 0)
                                {
                                    counters[p] = 0;
                                    p--;
                                }
                            }
                        }
                    }
                }
            }
        }
        /// <summary>
        /// Unsafe implementation of applying a unary operation
        /// </summary>
        /// <typeparam name="C">The type of operation to perform</typeparam>
        /// <param name="op">The operation instance</param>
        /// <param name="in1">The input argument</param>
        /// <param name="out">The output target</param>
        internal static void UFunc_Op_Inner_Unary_Flush_Byte_TypedImpl<C>(NumCIL.UInt8.Exp op, NdArray<System.Byte> in1, NdArray<System.Byte> @out)
            where C : IUnaryOp<System.Byte>
        {
            unsafe
            {
                using (var f1 = new Pinner(in1.DataAccessor))
                using (var f2 = new Pinner(@out.DataAccessor))
                {
                    var d1 = (System.Byte*)f1.ptr;
                    var d2 = (System.Byte*)f2.ptr;

                    if (@out.Shape.Dimensions.Length == 1)
                    {
                        long totalOps = @out.Shape.Dimensions[0].Length;

                        long ix1 = in1.Shape.Offset;
                        long ix2 = @out.Shape.Offset;

                        long stride1 = in1.Shape.Dimensions[0].Stride;
                        long stride2 = @out.Shape.Dimensions[0].Stride;


                        if (stride1 == stride2 && ix1 == ix2)
                        {
                            //Best case, all are equal, just keep a single counter
                            for (long i = 0; i < totalOps; i++)
                            {
                                d2[ix1] = (System.Byte)(Math.Exp(d1[ix1]));
                                ix1 += stride1;
                            }
                        }
                        else
                        {
                            for (long i = 0; i < totalOps; i++)
                            {
                                d2[ix2] = (System.Byte)(Math.Exp(d1[ix1]));
                                ix1 += stride1;
                                ix2 += stride2;
                            }
                        }
                    }
                    else if (@out.Shape.Dimensions.Length == 2)
                    {
                        long opsOuter = @out.Shape.Dimensions[0].Length;
                        long opsInner = @out.Shape.Dimensions[1].Length;

                        long ix1 = in1.Shape.Offset;
                        long ix2 = @out.Shape.Offset;

                        long outerStride1 = in1.Shape.Dimensions[0].Stride;
                        long outerStride2 = @out.Shape.Dimensions[0].Stride;

                        long innerStride1 = in1.Shape.Dimensions[1].Stride;
                        long innerStride2 = @out.Shape.Dimensions[1].Stride;

                        outerStride1 -= innerStride1 * in1.Shape.Dimensions[1].Length;
                        outerStride2 -= innerStride2 * @out.Shape.Dimensions[1].Length;

                        for (long i = 0; i < opsOuter; i++)
                        {
                            for (long j = 0; j < opsInner; j++)
                            {
                                d2[ix2] = (System.Byte)(Math.Exp(d1[ix1]));
                                ix1 += innerStride1;
                                ix2 += innerStride2;
                            }

                            ix1 += outerStride1;
                            ix2 += outerStride2;
                        }
                    }
                    else
                    {
                        long n = in1.Shape.Dimensions.LongLength - 3;
                        long[] limits = in1.Shape.Dimensions.Where(x => n-- > 0).Select(x => x.Length).ToArray();
                        long[] counters = new long[limits.LongLength];

                        long totalOps = limits.LongLength == 0 ? 1 : limits.Aggregate<long>((a, b) => a * b);

                        //This chunck of variables are used to prevent repeated calculations of offsets
                        long dimIndex0 = 0 + limits.LongLength;
                        long dimIndex1 = 1 + limits.LongLength;
                        long dimIndex2 = 2 + limits.LongLength;

                        long opsOuter = @out.Shape.Dimensions[0 + limits.LongLength].Length;
                        long opsInner = @out.Shape.Dimensions[1 + limits.LongLength].Length;
                        long opsInnerInner = @out.Shape.Dimensions[2 + limits.LongLength].Length;

                        long outerStride1 = in1.Shape.Dimensions[dimIndex0].Stride;
                        long outerStride3 = @out.Shape.Dimensions[dimIndex0].Stride;

                        long innerStride1 = in1.Shape.Dimensions[dimIndex1].Stride;
                        long innerStride3 = @out.Shape.Dimensions[dimIndex1].Stride;

                        long innerInnerStride1 = in1.Shape.Dimensions[dimIndex2].Stride;
                        long innerInnerStride3 = @out.Shape.Dimensions[dimIndex2].Stride;

                        outerStride1 -= innerStride1 * in1.Shape.Dimensions[dimIndex1].Length;
                        outerStride3 -= innerStride3 * @out.Shape.Dimensions[dimIndex1].Length;

                        innerStride1 -= innerInnerStride1 * in1.Shape.Dimensions[dimIndex2].Length;
                        innerStride3 -= innerInnerStride3 * @out.Shape.Dimensions[dimIndex2].Length;

                        for (long outer = 0; outer < totalOps; outer++)
                        {
                            //Get the array offset for the first element in the outer dimension
                            long ix1 = in1.Shape[counters];
                            long ix3 = @out.Shape[counters];


                            for (long i = 0; i < opsOuter; i++)
                            {
                                for (long j = 0; j < opsInner; j++)
                                {
                                    for (long k = 0; k < opsInnerInner; k++)
                                    {
                                        d2[ix3] = (System.Byte)(Math.Exp(d1[ix1]));
                                        ix1 += innerInnerStride1;
                                        ix3 += innerInnerStride3;
                                    }

                                    ix1 += innerStride1;
                                    ix3 += innerStride3;
                                }

                                ix1 += outerStride1;
                                ix3 += outerStride3;
                            }

                            if (counters.LongLength > 0)
                            {
                                //Basically a ripple carry adder
                                long p = counters.LongLength - 1;
                                while (++counters[p] == limits[p] && p > 0)
                                {
                                    counters[p] = 0;
                                    p--;
                                }
                            }
                        }
                    }
                }
            }
        }

        /// <summary>
        /// Unsafe implementation of applying a unary operation
        /// </summary>
        /// <typeparam name="C">The type of operation to perform</typeparam>
        /// <param name="op">The operation instance</param>
        /// <param name="scalar">The input scalar argument</param>
        /// <param name="out">The output target</param>
        internal static void UFunc_Op_Inner_Unary_Scalar_Flush_Byte_TypedImpl<C>(NumCIL.UInt8.Exp op, System.Byte scalar, NdArray<System.Byte> @out)
            where C : IUnaryOp<System.Byte>
        {
            unsafe
            {
                using (var f2 = new Pinner(@out.DataAccessor))
                {
                    var d2 = (System.Byte*)f2.ptr;

                    if (@out.Shape.Dimensions.Length == 1)
                    {
                        long totalOps = @out.Shape.Dimensions[0].Length;
                        long ix2 = @out.Shape.Offset;
                        long stride2 = @out.Shape.Dimensions[0].Stride;

                        for (long i = 0; i < totalOps; i++)
                        {
                            d2[ix2] = (System.Byte)(Math.Exp(scalar));
                            ix2 += stride2;
                        }
                    }
                    else if (@out.Shape.Dimensions.Length == 2)
                    {
                        long opsOuter = @out.Shape.Dimensions[0].Length;
                        long opsInner = @out.Shape.Dimensions[1].Length;

                        long ix2 = @out.Shape.Offset;
                        long outerStride2 = @out.Shape.Dimensions[0].Stride;
                        long innerStride2 = @out.Shape.Dimensions[1].Stride;
                        outerStride2 -= innerStride2 * @out.Shape.Dimensions[1].Length;

                        for (long i = 0; i < opsOuter; i++)
                        {
                            for (long j = 0; j < opsInner; j++)
                            {
                                d2[ix2] = (System.Byte)(Math.Exp(scalar));
                                ix2 += innerStride2;
                            }

                            ix2 += outerStride2;
                        }
                    }
                    else
                    {
                        long n = @out.Shape.Dimensions.LongLength - 3;
                        long[] limits = @out.Shape.Dimensions.Where(x => n-- > 0).Select(x => x.Length).ToArray();
                        long[] counters = new long[limits.LongLength];

                        long totalOps = limits.LongLength == 0 ? 1 : limits.Aggregate<long>((a, b) => a * b);

                        //This chunck of variables are used to prevent repeated calculations of offsets
                        long dimIndex0 = 0 + limits.LongLength;
                        long dimIndex1 = 1 + limits.LongLength;
                        long dimIndex2 = 2 + limits.LongLength;

                        long opsOuter = @out.Shape.Dimensions[0 + limits.LongLength].Length;
                        long opsInner = @out.Shape.Dimensions[1 + limits.LongLength].Length;
                        long opsInnerInner = @out.Shape.Dimensions[2 + limits.LongLength].Length;

                        long outerStride3 = @out.Shape.Dimensions[dimIndex0].Stride;
                        long innerStride3 = @out.Shape.Dimensions[dimIndex1].Stride;
                        long innerInnerStride3 = @out.Shape.Dimensions[dimIndex2].Stride;
                        outerStride3 -= innerStride3 * @out.Shape.Dimensions[dimIndex1].Length;
                        innerStride3 -= innerInnerStride3 * @out.Shape.Dimensions[dimIndex2].Length;

                        for (long outer = 0; outer < totalOps; outer++)
                        {
                            //Get the array offset for the first element in the outer dimension
                            long ix3 = @out.Shape[counters];

                            for (long i = 0; i < opsOuter; i++)
                            {
                                for (long j = 0; j < opsInner; j++)
                                {
                                    for (long k = 0; k < opsInnerInner; k++)
                                    {
                                        d2[ix3] = (System.Byte)(Math.Exp(scalar));
                                        ix3 += innerInnerStride3;
                                    }

                                    ix3 += innerStride3;
                                }

                                ix3 += outerStride3;
                            }

                            if (counters.LongLength > 0)
                            {
                                //Basically a ripple carry adder
                                long p = counters.LongLength - 1;
                                while (++counters[p] == limits[p] && p > 0)
                                {
                                    counters[p] = 0;
                                    p--;
                                }
                            }
                        }
                    }
                }
            }
        }
        /// <summary>
        /// Unsafe implementation of applying a unary operation
        /// </summary>
        /// <typeparam name="C">The type of operation to perform</typeparam>
        /// <param name="op">The operation instance</param>
        /// <param name="in1">The input argument</param>
        /// <param name="out">The output target</param>
        internal static void UFunc_Op_Inner_Unary_Flush_Int16_TypedImpl<C>(NumCIL.Int16.Exp op, NdArray<System.Int16> in1, NdArray<System.Int16> @out)
            where C : IUnaryOp<System.Int16>
        {
            unsafe
            {
                using (var f1 = new Pinner(in1.DataAccessor))
                using (var f2 = new Pinner(@out.DataAccessor))
                {
                    var d1 = (System.Int16*)f1.ptr;
                    var d2 = (System.Int16*)f2.ptr;

                    if (@out.Shape.Dimensions.Length == 1)
                    {
                        long totalOps = @out.Shape.Dimensions[0].Length;

                        long ix1 = in1.Shape.Offset;
                        long ix2 = @out.Shape.Offset;

                        long stride1 = in1.Shape.Dimensions[0].Stride;
                        long stride2 = @out.Shape.Dimensions[0].Stride;


                        if (stride1 == stride2 && ix1 == ix2)
                        {
                            //Best case, all are equal, just keep a single counter
                            for (long i = 0; i < totalOps; i++)
                            {
                                d2[ix1] = (System.Int16)(Math.Exp(d1[ix1]));
                                ix1 += stride1;
                            }
                        }
                        else
                        {
                            for (long i = 0; i < totalOps; i++)
                            {
                                d2[ix2] = (System.Int16)(Math.Exp(d1[ix1]));
                                ix1 += stride1;
                                ix2 += stride2;
                            }
                        }
                    }
                    else if (@out.Shape.Dimensions.Length == 2)
                    {
                        long opsOuter = @out.Shape.Dimensions[0].Length;
                        long opsInner = @out.Shape.Dimensions[1].Length;

                        long ix1 = in1.Shape.Offset;
                        long ix2 = @out.Shape.Offset;

                        long outerStride1 = in1.Shape.Dimensions[0].Stride;
                        long outerStride2 = @out.Shape.Dimensions[0].Stride;

                        long innerStride1 = in1.Shape.Dimensions[1].Stride;
                        long innerStride2 = @out.Shape.Dimensions[1].Stride;

                        outerStride1 -= innerStride1 * in1.Shape.Dimensions[1].Length;
                        outerStride2 -= innerStride2 * @out.Shape.Dimensions[1].Length;

                        for (long i = 0; i < opsOuter; i++)
                        {
                            for (long j = 0; j < opsInner; j++)
                            {
                                d2[ix2] = (System.Int16)(Math.Exp(d1[ix1]));
                                ix1 += innerStride1;
                                ix2 += innerStride2;
                            }

                            ix1 += outerStride1;
                            ix2 += outerStride2;
                        }
                    }
                    else
                    {
                        long n = in1.Shape.Dimensions.LongLength - 3;
                        long[] limits = in1.Shape.Dimensions.Where(x => n-- > 0).Select(x => x.Length).ToArray();
                        long[] counters = new long[limits.LongLength];

                        long totalOps = limits.LongLength == 0 ? 1 : limits.Aggregate<long>((a, b) => a * b);

                        //This chunck of variables are used to prevent repeated calculations of offsets
                        long dimIndex0 = 0 + limits.LongLength;
                        long dimIndex1 = 1 + limits.LongLength;
                        long dimIndex2 = 2 + limits.LongLength;

                        long opsOuter = @out.Shape.Dimensions[0 + limits.LongLength].Length;
                        long opsInner = @out.Shape.Dimensions[1 + limits.LongLength].Length;
                        long opsInnerInner = @out.Shape.Dimensions[2 + limits.LongLength].Length;

                        long outerStride1 = in1.Shape.Dimensions[dimIndex0].Stride;
                        long outerStride3 = @out.Shape.Dimensions[dimIndex0].Stride;

                        long innerStride1 = in1.Shape.Dimensions[dimIndex1].Stride;
                        long innerStride3 = @out.Shape.Dimensions[dimIndex1].Stride;

                        long innerInnerStride1 = in1.Shape.Dimensions[dimIndex2].Stride;
                        long innerInnerStride3 = @out.Shape.Dimensions[dimIndex2].Stride;

                        outerStride1 -= innerStride1 * in1.Shape.Dimensions[dimIndex1].Length;
                        outerStride3 -= innerStride3 * @out.Shape.Dimensions[dimIndex1].Length;

                        innerStride1 -= innerInnerStride1 * in1.Shape.Dimensions[dimIndex2].Length;
                        innerStride3 -= innerInnerStride3 * @out.Shape.Dimensions[dimIndex2].Length;

                        for (long outer = 0; outer < totalOps; outer++)
                        {
                            //Get the array offset for the first element in the outer dimension
                            long ix1 = in1.Shape[counters];
                            long ix3 = @out.Shape[counters];


                            for (long i = 0; i < opsOuter; i++)
                            {
                                for (long j = 0; j < opsInner; j++)
                                {
                                    for (long k = 0; k < opsInnerInner; k++)
                                    {
                                        d2[ix3] = (System.Int16)(Math.Exp(d1[ix1]));
                                        ix1 += innerInnerStride1;
                                        ix3 += innerInnerStride3;
                                    }

                                    ix1 += innerStride1;
                                    ix3 += innerStride3;
                                }

                                ix1 += outerStride1;
                                ix3 += outerStride3;
                            }

                            if (counters.LongLength > 0)
                            {
                                //Basically a ripple carry adder
                                long p = counters.LongLength - 1;
                                while (++counters[p] == limits[p] && p > 0)
                                {
                                    counters[p] = 0;
                                    p--;
                                }
                            }
                        }
                    }
                }
            }
        }

        /// <summary>
        /// Unsafe implementation of applying a unary operation
        /// </summary>
        /// <typeparam name="C">The type of operation to perform</typeparam>
        /// <param name="op">The operation instance</param>
        /// <param name="scalar">The input scalar argument</param>
        /// <param name="out">The output target</param>
        internal static void UFunc_Op_Inner_Unary_Scalar_Flush_Int16_TypedImpl<C>(NumCIL.Int16.Exp op, System.Int16 scalar, NdArray<System.Int16> @out)
            where C : IUnaryOp<System.Int16>
        {
            unsafe
            {
                using (var f2 = new Pinner(@out.DataAccessor))
                {
                    var d2 = (System.Int16*)f2.ptr;

                    if (@out.Shape.Dimensions.Length == 1)
                    {
                        long totalOps = @out.Shape.Dimensions[0].Length;
                        long ix2 = @out.Shape.Offset;
                        long stride2 = @out.Shape.Dimensions[0].Stride;

                        for (long i = 0; i < totalOps; i++)
                        {
                            d2[ix2] = (System.Int16)(Math.Exp(scalar));
                            ix2 += stride2;
                        }
                    }
                    else if (@out.Shape.Dimensions.Length == 2)
                    {
                        long opsOuter = @out.Shape.Dimensions[0].Length;
                        long opsInner = @out.Shape.Dimensions[1].Length;

                        long ix2 = @out.Shape.Offset;
                        long outerStride2 = @out.Shape.Dimensions[0].Stride;
                        long innerStride2 = @out.Shape.Dimensions[1].Stride;
                        outerStride2 -= innerStride2 * @out.Shape.Dimensions[1].Length;

                        for (long i = 0; i < opsOuter; i++)
                        {
                            for (long j = 0; j < opsInner; j++)
                            {
                                d2[ix2] = (System.Int16)(Math.Exp(scalar));
                                ix2 += innerStride2;
                            }

                            ix2 += outerStride2;
                        }
                    }
                    else
                    {
                        long n = @out.Shape.Dimensions.LongLength - 3;
                        long[] limits = @out.Shape.Dimensions.Where(x => n-- > 0).Select(x => x.Length).ToArray();
                        long[] counters = new long[limits.LongLength];

                        long totalOps = limits.LongLength == 0 ? 1 : limits.Aggregate<long>((a, b) => a * b);

                        //This chunck of variables are used to prevent repeated calculations of offsets
                        long dimIndex0 = 0 + limits.LongLength;
                        long dimIndex1 = 1 + limits.LongLength;
                        long dimIndex2 = 2 + limits.LongLength;

                        long opsOuter = @out.Shape.Dimensions[0 + limits.LongLength].Length;
                        long opsInner = @out.Shape.Dimensions[1 + limits.LongLength].Length;
                        long opsInnerInner = @out.Shape.Dimensions[2 + limits.LongLength].Length;

                        long outerStride3 = @out.Shape.Dimensions[dimIndex0].Stride;
                        long innerStride3 = @out.Shape.Dimensions[dimIndex1].Stride;
                        long innerInnerStride3 = @out.Shape.Dimensions[dimIndex2].Stride;
                        outerStride3 -= innerStride3 * @out.Shape.Dimensions[dimIndex1].Length;
                        innerStride3 -= innerInnerStride3 * @out.Shape.Dimensions[dimIndex2].Length;

                        for (long outer = 0; outer < totalOps; outer++)
                        {
                            //Get the array offset for the first element in the outer dimension
                            long ix3 = @out.Shape[counters];

                            for (long i = 0; i < opsOuter; i++)
                            {
                                for (long j = 0; j < opsInner; j++)
                                {
                                    for (long k = 0; k < opsInnerInner; k++)
                                    {
                                        d2[ix3] = (System.Int16)(Math.Exp(scalar));
                                        ix3 += innerInnerStride3;
                                    }

                                    ix3 += innerStride3;
                                }

                                ix3 += outerStride3;
                            }

                            if (counters.LongLength > 0)
                            {
                                //Basically a ripple carry adder
                                long p = counters.LongLength - 1;
                                while (++counters[p] == limits[p] && p > 0)
                                {
                                    counters[p] = 0;
                                    p--;
                                }
                            }
                        }
                    }
                }
            }
        }
        /// <summary>
        /// Unsafe implementation of applying a unary operation
        /// </summary>
        /// <typeparam name="C">The type of operation to perform</typeparam>
        /// <param name="op">The operation instance</param>
        /// <param name="in1">The input argument</param>
        /// <param name="out">The output target</param>
        internal static void UFunc_Op_Inner_Unary_Flush_UInt16_TypedImpl<C>(NumCIL.UInt16.Exp op, NdArray<System.UInt16> in1, NdArray<System.UInt16> @out)
            where C : IUnaryOp<System.UInt16>
        {
            unsafe
            {
                using (var f1 = new Pinner(in1.DataAccessor))
                using (var f2 = new Pinner(@out.DataAccessor))
                {
                    var d1 = (System.UInt16*)f1.ptr;
                    var d2 = (System.UInt16*)f2.ptr;

                    if (@out.Shape.Dimensions.Length == 1)
                    {
                        long totalOps = @out.Shape.Dimensions[0].Length;

                        long ix1 = in1.Shape.Offset;
                        long ix2 = @out.Shape.Offset;

                        long stride1 = in1.Shape.Dimensions[0].Stride;
                        long stride2 = @out.Shape.Dimensions[0].Stride;


                        if (stride1 == stride2 && ix1 == ix2)
                        {
                            //Best case, all are equal, just keep a single counter
                            for (long i = 0; i < totalOps; i++)
                            {
                                d2[ix1] = (System.UInt16)(Math.Exp(d1[ix1]));
                                ix1 += stride1;
                            }
                        }
                        else
                        {
                            for (long i = 0; i < totalOps; i++)
                            {
                                d2[ix2] = (System.UInt16)(Math.Exp(d1[ix1]));
                                ix1 += stride1;
                                ix2 += stride2;
                            }
                        }
                    }
                    else if (@out.Shape.Dimensions.Length == 2)
                    {
                        long opsOuter = @out.Shape.Dimensions[0].Length;
                        long opsInner = @out.Shape.Dimensions[1].Length;

                        long ix1 = in1.Shape.Offset;
                        long ix2 = @out.Shape.Offset;

                        long outerStride1 = in1.Shape.Dimensions[0].Stride;
                        long outerStride2 = @out.Shape.Dimensions[0].Stride;

                        long innerStride1 = in1.Shape.Dimensions[1].Stride;
                        long innerStride2 = @out.Shape.Dimensions[1].Stride;

                        outerStride1 -= innerStride1 * in1.Shape.Dimensions[1].Length;
                        outerStride2 -= innerStride2 * @out.Shape.Dimensions[1].Length;

                        for (long i = 0; i < opsOuter; i++)
                        {
                            for (long j = 0; j < opsInner; j++)
                            {
                                d2[ix2] = (System.UInt16)(Math.Exp(d1[ix1]));
                                ix1 += innerStride1;
                                ix2 += innerStride2;
                            }

                            ix1 += outerStride1;
                            ix2 += outerStride2;
                        }
                    }
                    else
                    {
                        long n = in1.Shape.Dimensions.LongLength - 3;
                        long[] limits = in1.Shape.Dimensions.Where(x => n-- > 0).Select(x => x.Length).ToArray();
                        long[] counters = new long[limits.LongLength];

                        long totalOps = limits.LongLength == 0 ? 1 : limits.Aggregate<long>((a, b) => a * b);

                        //This chunck of variables are used to prevent repeated calculations of offsets
                        long dimIndex0 = 0 + limits.LongLength;
                        long dimIndex1 = 1 + limits.LongLength;
                        long dimIndex2 = 2 + limits.LongLength;

                        long opsOuter = @out.Shape.Dimensions[0 + limits.LongLength].Length;
                        long opsInner = @out.Shape.Dimensions[1 + limits.LongLength].Length;
                        long opsInnerInner = @out.Shape.Dimensions[2 + limits.LongLength].Length;

                        long outerStride1 = in1.Shape.Dimensions[dimIndex0].Stride;
                        long outerStride3 = @out.Shape.Dimensions[dimIndex0].Stride;

                        long innerStride1 = in1.Shape.Dimensions[dimIndex1].Stride;
                        long innerStride3 = @out.Shape.Dimensions[dimIndex1].Stride;

                        long innerInnerStride1 = in1.Shape.Dimensions[dimIndex2].Stride;
                        long innerInnerStride3 = @out.Shape.Dimensions[dimIndex2].Stride;

                        outerStride1 -= innerStride1 * in1.Shape.Dimensions[dimIndex1].Length;
                        outerStride3 -= innerStride3 * @out.Shape.Dimensions[dimIndex1].Length;

                        innerStride1 -= innerInnerStride1 * in1.Shape.Dimensions[dimIndex2].Length;
                        innerStride3 -= innerInnerStride3 * @out.Shape.Dimensions[dimIndex2].Length;

                        for (long outer = 0; outer < totalOps; outer++)
                        {
                            //Get the array offset for the first element in the outer dimension
                            long ix1 = in1.Shape[counters];
                            long ix3 = @out.Shape[counters];


                            for (long i = 0; i < opsOuter; i++)
                            {
                                for (long j = 0; j < opsInner; j++)
                                {
                                    for (long k = 0; k < opsInnerInner; k++)
                                    {
                                        d2[ix3] = (System.UInt16)(Math.Exp(d1[ix1]));
                                        ix1 += innerInnerStride1;
                                        ix3 += innerInnerStride3;
                                    }

                                    ix1 += innerStride1;
                                    ix3 += innerStride3;
                                }

                                ix1 += outerStride1;
                                ix3 += outerStride3;
                            }

                            if (counters.LongLength > 0)
                            {
                                //Basically a ripple carry adder
                                long p = counters.LongLength - 1;
                                while (++counters[p] == limits[p] && p > 0)
                                {
                                    counters[p] = 0;
                                    p--;
                                }
                            }
                        }
                    }
                }
            }
        }

        /// <summary>
        /// Unsafe implementation of applying a unary operation
        /// </summary>
        /// <typeparam name="C">The type of operation to perform</typeparam>
        /// <param name="op">The operation instance</param>
        /// <param name="scalar">The input scalar argument</param>
        /// <param name="out">The output target</param>
        internal static void UFunc_Op_Inner_Unary_Scalar_Flush_UInt16_TypedImpl<C>(NumCIL.UInt16.Exp op, System.UInt16 scalar, NdArray<System.UInt16> @out)
            where C : IUnaryOp<System.UInt16>
        {
            unsafe
            {
                using (var f2 = new Pinner(@out.DataAccessor))
                {
                    var d2 = (System.UInt16*)f2.ptr;

                    if (@out.Shape.Dimensions.Length == 1)
                    {
                        long totalOps = @out.Shape.Dimensions[0].Length;
                        long ix2 = @out.Shape.Offset;
                        long stride2 = @out.Shape.Dimensions[0].Stride;

                        for (long i = 0; i < totalOps; i++)
                        {
                            d2[ix2] = (System.UInt16)(Math.Exp(scalar));
                            ix2 += stride2;
                        }
                    }
                    else if (@out.Shape.Dimensions.Length == 2)
                    {
                        long opsOuter = @out.Shape.Dimensions[0].Length;
                        long opsInner = @out.Shape.Dimensions[1].Length;

                        long ix2 = @out.Shape.Offset;
                        long outerStride2 = @out.Shape.Dimensions[0].Stride;
                        long innerStride2 = @out.Shape.Dimensions[1].Stride;
                        outerStride2 -= innerStride2 * @out.Shape.Dimensions[1].Length;

                        for (long i = 0; i < opsOuter; i++)
                        {
                            for (long j = 0; j < opsInner; j++)
                            {
                                d2[ix2] = (System.UInt16)(Math.Exp(scalar));
                                ix2 += innerStride2;
                            }

                            ix2 += outerStride2;
                        }
                    }
                    else
                    {
                        long n = @out.Shape.Dimensions.LongLength - 3;
                        long[] limits = @out.Shape.Dimensions.Where(x => n-- > 0).Select(x => x.Length).ToArray();
                        long[] counters = new long[limits.LongLength];

                        long totalOps = limits.LongLength == 0 ? 1 : limits.Aggregate<long>((a, b) => a * b);

                        //This chunck of variables are used to prevent repeated calculations of offsets
                        long dimIndex0 = 0 + limits.LongLength;
                        long dimIndex1 = 1 + limits.LongLength;
                        long dimIndex2 = 2 + limits.LongLength;

                        long opsOuter = @out.Shape.Dimensions[0 + limits.LongLength].Length;
                        long opsInner = @out.Shape.Dimensions[1 + limits.LongLength].Length;
                        long opsInnerInner = @out.Shape.Dimensions[2 + limits.LongLength].Length;

                        long outerStride3 = @out.Shape.Dimensions[dimIndex0].Stride;
                        long innerStride3 = @out.Shape.Dimensions[dimIndex1].Stride;
                        long innerInnerStride3 = @out.Shape.Dimensions[dimIndex2].Stride;
                        outerStride3 -= innerStride3 * @out.Shape.Dimensions[dimIndex1].Length;
                        innerStride3 -= innerInnerStride3 * @out.Shape.Dimensions[dimIndex2].Length;

                        for (long outer = 0; outer < totalOps; outer++)
                        {
                            //Get the array offset for the first element in the outer dimension
                            long ix3 = @out.Shape[counters];

                            for (long i = 0; i < opsOuter; i++)
                            {
                                for (long j = 0; j < opsInner; j++)
                                {
                                    for (long k = 0; k < opsInnerInner; k++)
                                    {
                                        d2[ix3] = (System.UInt16)(Math.Exp(scalar));
                                        ix3 += innerInnerStride3;
                                    }

                                    ix3 += innerStride3;
                                }

                                ix3 += outerStride3;
                            }

                            if (counters.LongLength > 0)
                            {
                                //Basically a ripple carry adder
                                long p = counters.LongLength - 1;
                                while (++counters[p] == limits[p] && p > 0)
                                {
                                    counters[p] = 0;
                                    p--;
                                }
                            }
                        }
                    }
                }
            }
        }
        /// <summary>
        /// Unsafe implementation of applying a unary operation
        /// </summary>
        /// <typeparam name="C">The type of operation to perform</typeparam>
        /// <param name="op">The operation instance</param>
        /// <param name="in1">The input argument</param>
        /// <param name="out">The output target</param>
        internal static void UFunc_Op_Inner_Unary_Flush_Int32_TypedImpl<C>(NumCIL.Int32.Exp op, NdArray<System.Int32> in1, NdArray<System.Int32> @out)
            where C : IUnaryOp<System.Int32>
        {
            unsafe
            {
                using (var f1 = new Pinner(in1.DataAccessor))
                using (var f2 = new Pinner(@out.DataAccessor))
                {
                    var d1 = (System.Int32*)f1.ptr;
                    var d2 = (System.Int32*)f2.ptr;

                    if (@out.Shape.Dimensions.Length == 1)
                    {
                        long totalOps = @out.Shape.Dimensions[0].Length;

                        long ix1 = in1.Shape.Offset;
                        long ix2 = @out.Shape.Offset;

                        long stride1 = in1.Shape.Dimensions[0].Stride;
                        long stride2 = @out.Shape.Dimensions[0].Stride;


                        if (stride1 == stride2 && ix1 == ix2)
                        {
                            //Best case, all are equal, just keep a single counter
                            for (long i = 0; i < totalOps; i++)
                            {
                                d2[ix1] = (System.Int32)(Math.Exp(d1[ix1]));
                                ix1 += stride1;
                            }
                        }
                        else
                        {
                            for (long i = 0; i < totalOps; i++)
                            {
                                d2[ix2] = (System.Int32)(Math.Exp(d1[ix1]));
                                ix1 += stride1;
                                ix2 += stride2;
                            }
                        }
                    }
                    else if (@out.Shape.Dimensions.Length == 2)
                    {
                        long opsOuter = @out.Shape.Dimensions[0].Length;
                        long opsInner = @out.Shape.Dimensions[1].Length;

                        long ix1 = in1.Shape.Offset;
                        long ix2 = @out.Shape.Offset;

                        long outerStride1 = in1.Shape.Dimensions[0].Stride;
                        long outerStride2 = @out.Shape.Dimensions[0].Stride;

                        long innerStride1 = in1.Shape.Dimensions[1].Stride;
                        long innerStride2 = @out.Shape.Dimensions[1].Stride;

                        outerStride1 -= innerStride1 * in1.Shape.Dimensions[1].Length;
                        outerStride2 -= innerStride2 * @out.Shape.Dimensions[1].Length;

                        for (long i = 0; i < opsOuter; i++)
                        {
                            for (long j = 0; j < opsInner; j++)
                            {
                                d2[ix2] = (System.Int32)(Math.Exp(d1[ix1]));
                                ix1 += innerStride1;
                                ix2 += innerStride2;
                            }

                            ix1 += outerStride1;
                            ix2 += outerStride2;
                        }
                    }
                    else
                    {
                        long n = in1.Shape.Dimensions.LongLength - 3;
                        long[] limits = in1.Shape.Dimensions.Where(x => n-- > 0).Select(x => x.Length).ToArray();
                        long[] counters = new long[limits.LongLength];

                        long totalOps = limits.LongLength == 0 ? 1 : limits.Aggregate<long>((a, b) => a * b);

                        //This chunck of variables are used to prevent repeated calculations of offsets
                        long dimIndex0 = 0 + limits.LongLength;
                        long dimIndex1 = 1 + limits.LongLength;
                        long dimIndex2 = 2 + limits.LongLength;

                        long opsOuter = @out.Shape.Dimensions[0 + limits.LongLength].Length;
                        long opsInner = @out.Shape.Dimensions[1 + limits.LongLength].Length;
                        long opsInnerInner = @out.Shape.Dimensions[2 + limits.LongLength].Length;

                        long outerStride1 = in1.Shape.Dimensions[dimIndex0].Stride;
                        long outerStride3 = @out.Shape.Dimensions[dimIndex0].Stride;

                        long innerStride1 = in1.Shape.Dimensions[dimIndex1].Stride;
                        long innerStride3 = @out.Shape.Dimensions[dimIndex1].Stride;

                        long innerInnerStride1 = in1.Shape.Dimensions[dimIndex2].Stride;
                        long innerInnerStride3 = @out.Shape.Dimensions[dimIndex2].Stride;

                        outerStride1 -= innerStride1 * in1.Shape.Dimensions[dimIndex1].Length;
                        outerStride3 -= innerStride3 * @out.Shape.Dimensions[dimIndex1].Length;

                        innerStride1 -= innerInnerStride1 * in1.Shape.Dimensions[dimIndex2].Length;
                        innerStride3 -= innerInnerStride3 * @out.Shape.Dimensions[dimIndex2].Length;

                        for (long outer = 0; outer < totalOps; outer++)
                        {
                            //Get the array offset for the first element in the outer dimension
                            long ix1 = in1.Shape[counters];
                            long ix3 = @out.Shape[counters];


                            for (long i = 0; i < opsOuter; i++)
                            {
                                for (long j = 0; j < opsInner; j++)
                                {
                                    for (long k = 0; k < opsInnerInner; k++)
                                    {
                                        d2[ix3] = (System.Int32)(Math.Exp(d1[ix1]));
                                        ix1 += innerInnerStride1;
                                        ix3 += innerInnerStride3;
                                    }

                                    ix1 += innerStride1;
                                    ix3 += innerStride3;
                                }

                                ix1 += outerStride1;
                                ix3 += outerStride3;
                            }

                            if (counters.LongLength > 0)
                            {
                                //Basically a ripple carry adder
                                long p = counters.LongLength - 1;
                                while (++counters[p] == limits[p] && p > 0)
                                {
                                    counters[p] = 0;
                                    p--;
                                }
                            }
                        }
                    }
                }
            }
        }

        /// <summary>
        /// Unsafe implementation of applying a unary operation
        /// </summary>
        /// <typeparam name="C">The type of operation to perform</typeparam>
        /// <param name="op">The operation instance</param>
        /// <param name="scalar">The input scalar argument</param>
        /// <param name="out">The output target</param>
        internal static void UFunc_Op_Inner_Unary_Scalar_Flush_Int32_TypedImpl<C>(NumCIL.Int32.Exp op, System.Int32 scalar, NdArray<System.Int32> @out)
            where C : IUnaryOp<System.Int32>
        {
            unsafe
            {
                using (var f2 = new Pinner(@out.DataAccessor))
                {
                    var d2 = (System.Int32*)f2.ptr;

                    if (@out.Shape.Dimensions.Length == 1)
                    {
                        long totalOps = @out.Shape.Dimensions[0].Length;
                        long ix2 = @out.Shape.Offset;
                        long stride2 = @out.Shape.Dimensions[0].Stride;

                        for (long i = 0; i < totalOps; i++)
                        {
                            d2[ix2] = (System.Int32)(Math.Exp(scalar));
                            ix2 += stride2;
                        }
                    }
                    else if (@out.Shape.Dimensions.Length == 2)
                    {
                        long opsOuter = @out.Shape.Dimensions[0].Length;
                        long opsInner = @out.Shape.Dimensions[1].Length;

                        long ix2 = @out.Shape.Offset;
                        long outerStride2 = @out.Shape.Dimensions[0].Stride;
                        long innerStride2 = @out.Shape.Dimensions[1].Stride;
                        outerStride2 -= innerStride2 * @out.Shape.Dimensions[1].Length;

                        for (long i = 0; i < opsOuter; i++)
                        {
                            for (long j = 0; j < opsInner; j++)
                            {
                                d2[ix2] = (System.Int32)(Math.Exp(scalar));
                                ix2 += innerStride2;
                            }

                            ix2 += outerStride2;
                        }
                    }
                    else
                    {
                        long n = @out.Shape.Dimensions.LongLength - 3;
                        long[] limits = @out.Shape.Dimensions.Where(x => n-- > 0).Select(x => x.Length).ToArray();
                        long[] counters = new long[limits.LongLength];

                        long totalOps = limits.LongLength == 0 ? 1 : limits.Aggregate<long>((a, b) => a * b);

                        //This chunck of variables are used to prevent repeated calculations of offsets
                        long dimIndex0 = 0 + limits.LongLength;
                        long dimIndex1 = 1 + limits.LongLength;
                        long dimIndex2 = 2 + limits.LongLength;

                        long opsOuter = @out.Shape.Dimensions[0 + limits.LongLength].Length;
                        long opsInner = @out.Shape.Dimensions[1 + limits.LongLength].Length;
                        long opsInnerInner = @out.Shape.Dimensions[2 + limits.LongLength].Length;

                        long outerStride3 = @out.Shape.Dimensions[dimIndex0].Stride;
                        long innerStride3 = @out.Shape.Dimensions[dimIndex1].Stride;
                        long innerInnerStride3 = @out.Shape.Dimensions[dimIndex2].Stride;
                        outerStride3 -= innerStride3 * @out.Shape.Dimensions[dimIndex1].Length;
                        innerStride3 -= innerInnerStride3 * @out.Shape.Dimensions[dimIndex2].Length;

                        for (long outer = 0; outer < totalOps; outer++)
                        {
                            //Get the array offset for the first element in the outer dimension
                            long ix3 = @out.Shape[counters];

                            for (long i = 0; i < opsOuter; i++)
                            {
                                for (long j = 0; j < opsInner; j++)
                                {
                                    for (long k = 0; k < opsInnerInner; k++)
                                    {
                                        d2[ix3] = (System.Int32)(Math.Exp(scalar));
                                        ix3 += innerInnerStride3;
                                    }

                                    ix3 += innerStride3;
                                }

                                ix3 += outerStride3;
                            }

                            if (counters.LongLength > 0)
                            {
                                //Basically a ripple carry adder
                                long p = counters.LongLength - 1;
                                while (++counters[p] == limits[p] && p > 0)
                                {
                                    counters[p] = 0;
                                    p--;
                                }
                            }
                        }
                    }
                }
            }
        }
        /// <summary>
        /// Unsafe implementation of applying a unary operation
        /// </summary>
        /// <typeparam name="C">The type of operation to perform</typeparam>
        /// <param name="op">The operation instance</param>
        /// <param name="in1">The input argument</param>
        /// <param name="out">The output target</param>
        internal static void UFunc_Op_Inner_Unary_Flush_UInt32_TypedImpl<C>(NumCIL.UInt32.Exp op, NdArray<System.UInt32> in1, NdArray<System.UInt32> @out)
            where C : IUnaryOp<System.UInt32>
        {
            unsafe
            {
                using (var f1 = new Pinner(in1.DataAccessor))
                using (var f2 = new Pinner(@out.DataAccessor))
                {
                    var d1 = (System.UInt32*)f1.ptr;
                    var d2 = (System.UInt32*)f2.ptr;

                    if (@out.Shape.Dimensions.Length == 1)
                    {
                        long totalOps = @out.Shape.Dimensions[0].Length;

                        long ix1 = in1.Shape.Offset;
                        long ix2 = @out.Shape.Offset;

                        long stride1 = in1.Shape.Dimensions[0].Stride;
                        long stride2 = @out.Shape.Dimensions[0].Stride;


                        if (stride1 == stride2 && ix1 == ix2)
                        {
                            //Best case, all are equal, just keep a single counter
                            for (long i = 0; i < totalOps; i++)
                            {
                                d2[ix1] = (System.UInt32)(Math.Exp(d1[ix1]));
                                ix1 += stride1;
                            }
                        }
                        else
                        {
                            for (long i = 0; i < totalOps; i++)
                            {
                                d2[ix2] = (System.UInt32)(Math.Exp(d1[ix1]));
                                ix1 += stride1;
                                ix2 += stride2;
                            }
                        }
                    }
                    else if (@out.Shape.Dimensions.Length == 2)
                    {
                        long opsOuter = @out.Shape.Dimensions[0].Length;
                        long opsInner = @out.Shape.Dimensions[1].Length;

                        long ix1 = in1.Shape.Offset;
                        long ix2 = @out.Shape.Offset;

                        long outerStride1 = in1.Shape.Dimensions[0].Stride;
                        long outerStride2 = @out.Shape.Dimensions[0].Stride;

                        long innerStride1 = in1.Shape.Dimensions[1].Stride;
                        long innerStride2 = @out.Shape.Dimensions[1].Stride;

                        outerStride1 -= innerStride1 * in1.Shape.Dimensions[1].Length;
                        outerStride2 -= innerStride2 * @out.Shape.Dimensions[1].Length;

                        for (long i = 0; i < opsOuter; i++)
                        {
                            for (long j = 0; j < opsInner; j++)
                            {
                                d2[ix2] = (System.UInt32)(Math.Exp(d1[ix1]));
                                ix1 += innerStride1;
                                ix2 += innerStride2;
                            }

                            ix1 += outerStride1;
                            ix2 += outerStride2;
                        }
                    }
                    else
                    {
                        long n = in1.Shape.Dimensions.LongLength - 3;
                        long[] limits = in1.Shape.Dimensions.Where(x => n-- > 0).Select(x => x.Length).ToArray();
                        long[] counters = new long[limits.LongLength];

                        long totalOps = limits.LongLength == 0 ? 1 : limits.Aggregate<long>((a, b) => a * b);

                        //This chunck of variables are used to prevent repeated calculations of offsets
                        long dimIndex0 = 0 + limits.LongLength;
                        long dimIndex1 = 1 + limits.LongLength;
                        long dimIndex2 = 2 + limits.LongLength;

                        long opsOuter = @out.Shape.Dimensions[0 + limits.LongLength].Length;
                        long opsInner = @out.Shape.Dimensions[1 + limits.LongLength].Length;
                        long opsInnerInner = @out.Shape.Dimensions[2 + limits.LongLength].Length;

                        long outerStride1 = in1.Shape.Dimensions[dimIndex0].Stride;
                        long outerStride3 = @out.Shape.Dimensions[dimIndex0].Stride;

                        long innerStride1 = in1.Shape.Dimensions[dimIndex1].Stride;
                        long innerStride3 = @out.Shape.Dimensions[dimIndex1].Stride;

                        long innerInnerStride1 = in1.Shape.Dimensions[dimIndex2].Stride;
                        long innerInnerStride3 = @out.Shape.Dimensions[dimIndex2].Stride;

                        outerStride1 -= innerStride1 * in1.Shape.Dimensions[dimIndex1].Length;
                        outerStride3 -= innerStride3 * @out.Shape.Dimensions[dimIndex1].Length;

                        innerStride1 -= innerInnerStride1 * in1.Shape.Dimensions[dimIndex2].Length;
                        innerStride3 -= innerInnerStride3 * @out.Shape.Dimensions[dimIndex2].Length;

                        for (long outer = 0; outer < totalOps; outer++)
                        {
                            //Get the array offset for the first element in the outer dimension
                            long ix1 = in1.Shape[counters];
                            long ix3 = @out.Shape[counters];


                            for (long i = 0; i < opsOuter; i++)
                            {
                                for (long j = 0; j < opsInner; j++)
                                {
                                    for (long k = 0; k < opsInnerInner; k++)
                                    {
                                        d2[ix3] = (System.UInt32)(Math.Exp(d1[ix1]));
                                        ix1 += innerInnerStride1;
                                        ix3 += innerInnerStride3;
                                    }

                                    ix1 += innerStride1;
                                    ix3 += innerStride3;
                                }

                                ix1 += outerStride1;
                                ix3 += outerStride3;
                            }

                            if (counters.LongLength > 0)
                            {
                                //Basically a ripple carry adder
                                long p = counters.LongLength - 1;
                                while (++counters[p] == limits[p] && p > 0)
                                {
                                    counters[p] = 0;
                                    p--;
                                }
                            }
                        }
                    }
                }
            }
        }

        /// <summary>
        /// Unsafe implementation of applying a unary operation
        /// </summary>
        /// <typeparam name="C">The type of operation to perform</typeparam>
        /// <param name="op">The operation instance</param>
        /// <param name="scalar">The input scalar argument</param>
        /// <param name="out">The output target</param>
        internal static void UFunc_Op_Inner_Unary_Scalar_Flush_UInt32_TypedImpl<C>(NumCIL.UInt32.Exp op, System.UInt32 scalar, NdArray<System.UInt32> @out)
            where C : IUnaryOp<System.UInt32>
        {
            unsafe
            {
                using (var f2 = new Pinner(@out.DataAccessor))
                {
                    var d2 = (System.UInt32*)f2.ptr;

                    if (@out.Shape.Dimensions.Length == 1)
                    {
                        long totalOps = @out.Shape.Dimensions[0].Length;
                        long ix2 = @out.Shape.Offset;
                        long stride2 = @out.Shape.Dimensions[0].Stride;

                        for (long i = 0; i < totalOps; i++)
                        {
                            d2[ix2] = (System.UInt32)(Math.Exp(scalar));
                            ix2 += stride2;
                        }
                    }
                    else if (@out.Shape.Dimensions.Length == 2)
                    {
                        long opsOuter = @out.Shape.Dimensions[0].Length;
                        long opsInner = @out.Shape.Dimensions[1].Length;

                        long ix2 = @out.Shape.Offset;
                        long outerStride2 = @out.Shape.Dimensions[0].Stride;
                        long innerStride2 = @out.Shape.Dimensions[1].Stride;
                        outerStride2 -= innerStride2 * @out.Shape.Dimensions[1].Length;

                        for (long i = 0; i < opsOuter; i++)
                        {
                            for (long j = 0; j < opsInner; j++)
                            {
                                d2[ix2] = (System.UInt32)(Math.Exp(scalar));
                                ix2 += innerStride2;
                            }

                            ix2 += outerStride2;
                        }
                    }
                    else
                    {
                        long n = @out.Shape.Dimensions.LongLength - 3;
                        long[] limits = @out.Shape.Dimensions.Where(x => n-- > 0).Select(x => x.Length).ToArray();
                        long[] counters = new long[limits.LongLength];

                        long totalOps = limits.LongLength == 0 ? 1 : limits.Aggregate<long>((a, b) => a * b);

                        //This chunck of variables are used to prevent repeated calculations of offsets
                        long dimIndex0 = 0 + limits.LongLength;
                        long dimIndex1 = 1 + limits.LongLength;
                        long dimIndex2 = 2 + limits.LongLength;

                        long opsOuter = @out.Shape.Dimensions[0 + limits.LongLength].Length;
                        long opsInner = @out.Shape.Dimensions[1 + limits.LongLength].Length;
                        long opsInnerInner = @out.Shape.Dimensions[2 + limits.LongLength].Length;

                        long outerStride3 = @out.Shape.Dimensions[dimIndex0].Stride;
                        long innerStride3 = @out.Shape.Dimensions[dimIndex1].Stride;
                        long innerInnerStride3 = @out.Shape.Dimensions[dimIndex2].Stride;
                        outerStride3 -= innerStride3 * @out.Shape.Dimensions[dimIndex1].Length;
                        innerStride3 -= innerInnerStride3 * @out.Shape.Dimensions[dimIndex2].Length;

                        for (long outer = 0; outer < totalOps; outer++)
                        {
                            //Get the array offset for the first element in the outer dimension
                            long ix3 = @out.Shape[counters];

                            for (long i = 0; i < opsOuter; i++)
                            {
                                for (long j = 0; j < opsInner; j++)
                                {
                                    for (long k = 0; k < opsInnerInner; k++)
                                    {
                                        d2[ix3] = (System.UInt32)(Math.Exp(scalar));
                                        ix3 += innerInnerStride3;
                                    }

                                    ix3 += innerStride3;
                                }

                                ix3 += outerStride3;
                            }

                            if (counters.LongLength > 0)
                            {
                                //Basically a ripple carry adder
                                long p = counters.LongLength - 1;
                                while (++counters[p] == limits[p] && p > 0)
                                {
                                    counters[p] = 0;
                                    p--;
                                }
                            }
                        }
                    }
                }
            }
        }
        /// <summary>
        /// Unsafe implementation of applying a unary operation
        /// </summary>
        /// <typeparam name="C">The type of operation to perform</typeparam>
        /// <param name="op">The operation instance</param>
        /// <param name="in1">The input argument</param>
        /// <param name="out">The output target</param>
        internal static void UFunc_Op_Inner_Unary_Flush_Int64_TypedImpl<C>(NumCIL.Int64.Exp op, NdArray<System.Int64> in1, NdArray<System.Int64> @out)
            where C : IUnaryOp<System.Int64>
        {
            unsafe
            {
                using (var f1 = new Pinner(in1.DataAccessor))
                using (var f2 = new Pinner(@out.DataAccessor))
                {
                    var d1 = (System.Int64*)f1.ptr;
                    var d2 = (System.Int64*)f2.ptr;

                    if (@out.Shape.Dimensions.Length == 1)
                    {
                        long totalOps = @out.Shape.Dimensions[0].Length;

                        long ix1 = in1.Shape.Offset;
                        long ix2 = @out.Shape.Offset;

                        long stride1 = in1.Shape.Dimensions[0].Stride;
                        long stride2 = @out.Shape.Dimensions[0].Stride;


                        if (stride1 == stride2 && ix1 == ix2)
                        {
                            //Best case, all are equal, just keep a single counter
                            for (long i = 0; i < totalOps; i++)
                            {
                                d2[ix1] = (System.Int64)(Math.Exp(d1[ix1]));
                                ix1 += stride1;
                            }
                        }
                        else
                        {
                            for (long i = 0; i < totalOps; i++)
                            {
                                d2[ix2] = (System.Int64)(Math.Exp(d1[ix1]));
                                ix1 += stride1;
                                ix2 += stride2;
                            }
                        }
                    }
                    else if (@out.Shape.Dimensions.Length == 2)
                    {
                        long opsOuter = @out.Shape.Dimensions[0].Length;
                        long opsInner = @out.Shape.Dimensions[1].Length;

                        long ix1 = in1.Shape.Offset;
                        long ix2 = @out.Shape.Offset;

                        long outerStride1 = in1.Shape.Dimensions[0].Stride;
                        long outerStride2 = @out.Shape.Dimensions[0].Stride;

                        long innerStride1 = in1.Shape.Dimensions[1].Stride;
                        long innerStride2 = @out.Shape.Dimensions[1].Stride;

                        outerStride1 -= innerStride1 * in1.Shape.Dimensions[1].Length;
                        outerStride2 -= innerStride2 * @out.Shape.Dimensions[1].Length;

                        for (long i = 0; i < opsOuter; i++)
                        {
                            for (long j = 0; j < opsInner; j++)
                            {
                                d2[ix2] = (System.Int64)(Math.Exp(d1[ix1]));
                                ix1 += innerStride1;
                                ix2 += innerStride2;
                            }

                            ix1 += outerStride1;
                            ix2 += outerStride2;
                        }
                    }
                    else
                    {
                        long n = in1.Shape.Dimensions.LongLength - 3;
                        long[] limits = in1.Shape.Dimensions.Where(x => n-- > 0).Select(x => x.Length).ToArray();
                        long[] counters = new long[limits.LongLength];

                        long totalOps = limits.LongLength == 0 ? 1 : limits.Aggregate<long>((a, b) => a * b);

                        //This chunck of variables are used to prevent repeated calculations of offsets
                        long dimIndex0 = 0 + limits.LongLength;
                        long dimIndex1 = 1 + limits.LongLength;
                        long dimIndex2 = 2 + limits.LongLength;

                        long opsOuter = @out.Shape.Dimensions[0 + limits.LongLength].Length;
                        long opsInner = @out.Shape.Dimensions[1 + limits.LongLength].Length;
                        long opsInnerInner = @out.Shape.Dimensions[2 + limits.LongLength].Length;

                        long outerStride1 = in1.Shape.Dimensions[dimIndex0].Stride;
                        long outerStride3 = @out.Shape.Dimensions[dimIndex0].Stride;

                        long innerStride1 = in1.Shape.Dimensions[dimIndex1].Stride;
                        long innerStride3 = @out.Shape.Dimensions[dimIndex1].Stride;

                        long innerInnerStride1 = in1.Shape.Dimensions[dimIndex2].Stride;
                        long innerInnerStride3 = @out.Shape.Dimensions[dimIndex2].Stride;

                        outerStride1 -= innerStride1 * in1.Shape.Dimensions[dimIndex1].Length;
                        outerStride3 -= innerStride3 * @out.Shape.Dimensions[dimIndex1].Length;

                        innerStride1 -= innerInnerStride1 * in1.Shape.Dimensions[dimIndex2].Length;
                        innerStride3 -= innerInnerStride3 * @out.Shape.Dimensions[dimIndex2].Length;

                        for (long outer = 0; outer < totalOps; outer++)
                        {
                            //Get the array offset for the first element in the outer dimension
                            long ix1 = in1.Shape[counters];
                            long ix3 = @out.Shape[counters];


                            for (long i = 0; i < opsOuter; i++)
                            {
                                for (long j = 0; j < opsInner; j++)
                                {
                                    for (long k = 0; k < opsInnerInner; k++)
                                    {
                                        d2[ix3] = (System.Int64)(Math.Exp(d1[ix1]));
                                        ix1 += innerInnerStride1;
                                        ix3 += innerInnerStride3;
                                    }

                                    ix1 += innerStride1;
                                    ix3 += innerStride3;
                                }

                                ix1 += outerStride1;
                                ix3 += outerStride3;
                            }

                            if (counters.LongLength > 0)
                            {
                                //Basically a ripple carry adder
                                long p = counters.LongLength - 1;
                                while (++counters[p] == limits[p] && p > 0)
                                {
                                    counters[p] = 0;
                                    p--;
                                }
                            }
                        }
                    }
                }
            }
        }

        /// <summary>
        /// Unsafe implementation of applying a unary operation
        /// </summary>
        /// <typeparam name="C">The type of operation to perform</typeparam>
        /// <param name="op">The operation instance</param>
        /// <param name="scalar">The input scalar argument</param>
        /// <param name="out">The output target</param>
        internal static void UFunc_Op_Inner_Unary_Scalar_Flush_Int64_TypedImpl<C>(NumCIL.Int64.Exp op, System.Int64 scalar, NdArray<System.Int64> @out)
            where C : IUnaryOp<System.Int64>
        {
            unsafe
            {
                using (var f2 = new Pinner(@out.DataAccessor))
                {
                    var d2 = (System.Int64*)f2.ptr;

                    if (@out.Shape.Dimensions.Length == 1)
                    {
                        long totalOps = @out.Shape.Dimensions[0].Length;
                        long ix2 = @out.Shape.Offset;
                        long stride2 = @out.Shape.Dimensions[0].Stride;

                        for (long i = 0; i < totalOps; i++)
                        {
                            d2[ix2] = (System.Int64)(Math.Exp(scalar));
                            ix2 += stride2;
                        }
                    }
                    else if (@out.Shape.Dimensions.Length == 2)
                    {
                        long opsOuter = @out.Shape.Dimensions[0].Length;
                        long opsInner = @out.Shape.Dimensions[1].Length;

                        long ix2 = @out.Shape.Offset;
                        long outerStride2 = @out.Shape.Dimensions[0].Stride;
                        long innerStride2 = @out.Shape.Dimensions[1].Stride;
                        outerStride2 -= innerStride2 * @out.Shape.Dimensions[1].Length;

                        for (long i = 0; i < opsOuter; i++)
                        {
                            for (long j = 0; j < opsInner; j++)
                            {
                                d2[ix2] = (System.Int64)(Math.Exp(scalar));
                                ix2 += innerStride2;
                            }

                            ix2 += outerStride2;
                        }
                    }
                    else
                    {
                        long n = @out.Shape.Dimensions.LongLength - 3;
                        long[] limits = @out.Shape.Dimensions.Where(x => n-- > 0).Select(x => x.Length).ToArray();
                        long[] counters = new long[limits.LongLength];

                        long totalOps = limits.LongLength == 0 ? 1 : limits.Aggregate<long>((a, b) => a * b);

                        //This chunck of variables are used to prevent repeated calculations of offsets
                        long dimIndex0 = 0 + limits.LongLength;
                        long dimIndex1 = 1 + limits.LongLength;
                        long dimIndex2 = 2 + limits.LongLength;

                        long opsOuter = @out.Shape.Dimensions[0 + limits.LongLength].Length;
                        long opsInner = @out.Shape.Dimensions[1 + limits.LongLength].Length;
                        long opsInnerInner = @out.Shape.Dimensions[2 + limits.LongLength].Length;

                        long outerStride3 = @out.Shape.Dimensions[dimIndex0].Stride;
                        long innerStride3 = @out.Shape.Dimensions[dimIndex1].Stride;
                        long innerInnerStride3 = @out.Shape.Dimensions[dimIndex2].Stride;
                        outerStride3 -= innerStride3 * @out.Shape.Dimensions[dimIndex1].Length;
                        innerStride3 -= innerInnerStride3 * @out.Shape.Dimensions[dimIndex2].Length;

                        for (long outer = 0; outer < totalOps; outer++)
                        {
                            //Get the array offset for the first element in the outer dimension
                            long ix3 = @out.Shape[counters];

                            for (long i = 0; i < opsOuter; i++)
                            {
                                for (long j = 0; j < opsInner; j++)
                                {
                                    for (long k = 0; k < opsInnerInner; k++)
                                    {
                                        d2[ix3] = (System.Int64)(Math.Exp(scalar));
                                        ix3 += innerInnerStride3;
                                    }

                                    ix3 += innerStride3;
                                }

                                ix3 += outerStride3;
                            }

                            if (counters.LongLength > 0)
                            {
                                //Basically a ripple carry adder
                                long p = counters.LongLength - 1;
                                while (++counters[p] == limits[p] && p > 0)
                                {
                                    counters[p] = 0;
                                    p--;
                                }
                            }
                        }
                    }
                }
            }
        }
        /// <summary>
        /// Unsafe implementation of applying a unary operation
        /// </summary>
        /// <typeparam name="C">The type of operation to perform</typeparam>
        /// <param name="op">The operation instance</param>
        /// <param name="in1">The input argument</param>
        /// <param name="out">The output target</param>
        internal static void UFunc_Op_Inner_Unary_Flush_UInt64_TypedImpl<C>(NumCIL.UInt64.Exp op, NdArray<System.UInt64> in1, NdArray<System.UInt64> @out)
            where C : IUnaryOp<System.UInt64>
        {
            unsafe
            {
                using (var f1 = new Pinner(in1.DataAccessor))
                using (var f2 = new Pinner(@out.DataAccessor))
                {
                    var d1 = (System.UInt64*)f1.ptr;
                    var d2 = (System.UInt64*)f2.ptr;

                    if (@out.Shape.Dimensions.Length == 1)
                    {
                        long totalOps = @out.Shape.Dimensions[0].Length;

                        long ix1 = in1.Shape.Offset;
                        long ix2 = @out.Shape.Offset;

                        long stride1 = in1.Shape.Dimensions[0].Stride;
                        long stride2 = @out.Shape.Dimensions[0].Stride;


                        if (stride1 == stride2 && ix1 == ix2)
                        {
                            //Best case, all are equal, just keep a single counter
                            for (long i = 0; i < totalOps; i++)
                            {
                                d2[ix1] = (System.UInt64)(Math.Exp(d1[ix1]));
                                ix1 += stride1;
                            }
                        }
                        else
                        {
                            for (long i = 0; i < totalOps; i++)
                            {
                                d2[ix2] = (System.UInt64)(Math.Exp(d1[ix1]));
                                ix1 += stride1;
                                ix2 += stride2;
                            }
                        }
                    }
                    else if (@out.Shape.Dimensions.Length == 2)
                    {
                        long opsOuter = @out.Shape.Dimensions[0].Length;
                        long opsInner = @out.Shape.Dimensions[1].Length;

                        long ix1 = in1.Shape.Offset;
                        long ix2 = @out.Shape.Offset;

                        long outerStride1 = in1.Shape.Dimensions[0].Stride;
                        long outerStride2 = @out.Shape.Dimensions[0].Stride;

                        long innerStride1 = in1.Shape.Dimensions[1].Stride;
                        long innerStride2 = @out.Shape.Dimensions[1].Stride;

                        outerStride1 -= innerStride1 * in1.Shape.Dimensions[1].Length;
                        outerStride2 -= innerStride2 * @out.Shape.Dimensions[1].Length;

                        for (long i = 0; i < opsOuter; i++)
                        {
                            for (long j = 0; j < opsInner; j++)
                            {
                                d2[ix2] = (System.UInt64)(Math.Exp(d1[ix1]));
                                ix1 += innerStride1;
                                ix2 += innerStride2;
                            }

                            ix1 += outerStride1;
                            ix2 += outerStride2;
                        }
                    }
                    else
                    {
                        long n = in1.Shape.Dimensions.LongLength - 3;
                        long[] limits = in1.Shape.Dimensions.Where(x => n-- > 0).Select(x => x.Length).ToArray();
                        long[] counters = new long[limits.LongLength];

                        long totalOps = limits.LongLength == 0 ? 1 : limits.Aggregate<long>((a, b) => a * b);

                        //This chunck of variables are used to prevent repeated calculations of offsets
                        long dimIndex0 = 0 + limits.LongLength;
                        long dimIndex1 = 1 + limits.LongLength;
                        long dimIndex2 = 2 + limits.LongLength;

                        long opsOuter = @out.Shape.Dimensions[0 + limits.LongLength].Length;
                        long opsInner = @out.Shape.Dimensions[1 + limits.LongLength].Length;
                        long opsInnerInner = @out.Shape.Dimensions[2 + limits.LongLength].Length;

                        long outerStride1 = in1.Shape.Dimensions[dimIndex0].Stride;
                        long outerStride3 = @out.Shape.Dimensions[dimIndex0].Stride;

                        long innerStride1 = in1.Shape.Dimensions[dimIndex1].Stride;
                        long innerStride3 = @out.Shape.Dimensions[dimIndex1].Stride;

                        long innerInnerStride1 = in1.Shape.Dimensions[dimIndex2].Stride;
                        long innerInnerStride3 = @out.Shape.Dimensions[dimIndex2].Stride;

                        outerStride1 -= innerStride1 * in1.Shape.Dimensions[dimIndex1].Length;
                        outerStride3 -= innerStride3 * @out.Shape.Dimensions[dimIndex1].Length;

                        innerStride1 -= innerInnerStride1 * in1.Shape.Dimensions[dimIndex2].Length;
                        innerStride3 -= innerInnerStride3 * @out.Shape.Dimensions[dimIndex2].Length;

                        for (long outer = 0; outer < totalOps; outer++)
                        {
                            //Get the array offset for the first element in the outer dimension
                            long ix1 = in1.Shape[counters];
                            long ix3 = @out.Shape[counters];


                            for (long i = 0; i < opsOuter; i++)
                            {
                                for (long j = 0; j < opsInner; j++)
                                {
                                    for (long k = 0; k < opsInnerInner; k++)
                                    {
                                        d2[ix3] = (System.UInt64)(Math.Exp(d1[ix1]));
                                        ix1 += innerInnerStride1;
                                        ix3 += innerInnerStride3;
                                    }

                                    ix1 += innerStride1;
                                    ix3 += innerStride3;
                                }

                                ix1 += outerStride1;
                                ix3 += outerStride3;
                            }

                            if (counters.LongLength > 0)
                            {
                                //Basically a ripple carry adder
                                long p = counters.LongLength - 1;
                                while (++counters[p] == limits[p] && p > 0)
                                {
                                    counters[p] = 0;
                                    p--;
                                }
                            }
                        }
                    }
                }
            }
        }

        /// <summary>
        /// Unsafe implementation of applying a unary operation
        /// </summary>
        /// <typeparam name="C">The type of operation to perform</typeparam>
        /// <param name="op">The operation instance</param>
        /// <param name="scalar">The input scalar argument</param>
        /// <param name="out">The output target</param>
        internal static void UFunc_Op_Inner_Unary_Scalar_Flush_UInt64_TypedImpl<C>(NumCIL.UInt64.Exp op, System.UInt64 scalar, NdArray<System.UInt64> @out)
            where C : IUnaryOp<System.UInt64>
        {
            unsafe
            {
                using (var f2 = new Pinner(@out.DataAccessor))
                {
                    var d2 = (System.UInt64*)f2.ptr;

                    if (@out.Shape.Dimensions.Length == 1)
                    {
                        long totalOps = @out.Shape.Dimensions[0].Length;
                        long ix2 = @out.Shape.Offset;
                        long stride2 = @out.Shape.Dimensions[0].Stride;

                        for (long i = 0; i < totalOps; i++)
                        {
                            d2[ix2] = (System.UInt64)(Math.Exp(scalar));
                            ix2 += stride2;
                        }
                    }
                    else if (@out.Shape.Dimensions.Length == 2)
                    {
                        long opsOuter = @out.Shape.Dimensions[0].Length;
                        long opsInner = @out.Shape.Dimensions[1].Length;

                        long ix2 = @out.Shape.Offset;
                        long outerStride2 = @out.Shape.Dimensions[0].Stride;
                        long innerStride2 = @out.Shape.Dimensions[1].Stride;
                        outerStride2 -= innerStride2 * @out.Shape.Dimensions[1].Length;

                        for (long i = 0; i < opsOuter; i++)
                        {
                            for (long j = 0; j < opsInner; j++)
                            {
                                d2[ix2] = (System.UInt64)(Math.Exp(scalar));
                                ix2 += innerStride2;
                            }

                            ix2 += outerStride2;
                        }
                    }
                    else
                    {
                        long n = @out.Shape.Dimensions.LongLength - 3;
                        long[] limits = @out.Shape.Dimensions.Where(x => n-- > 0).Select(x => x.Length).ToArray();
                        long[] counters = new long[limits.LongLength];

                        long totalOps = limits.LongLength == 0 ? 1 : limits.Aggregate<long>((a, b) => a * b);

                        //This chunck of variables are used to prevent repeated calculations of offsets
                        long dimIndex0 = 0 + limits.LongLength;
                        long dimIndex1 = 1 + limits.LongLength;
                        long dimIndex2 = 2 + limits.LongLength;

                        long opsOuter = @out.Shape.Dimensions[0 + limits.LongLength].Length;
                        long opsInner = @out.Shape.Dimensions[1 + limits.LongLength].Length;
                        long opsInnerInner = @out.Shape.Dimensions[2 + limits.LongLength].Length;

                        long outerStride3 = @out.Shape.Dimensions[dimIndex0].Stride;
                        long innerStride3 = @out.Shape.Dimensions[dimIndex1].Stride;
                        long innerInnerStride3 = @out.Shape.Dimensions[dimIndex2].Stride;
                        outerStride3 -= innerStride3 * @out.Shape.Dimensions[dimIndex1].Length;
                        innerStride3 -= innerInnerStride3 * @out.Shape.Dimensions[dimIndex2].Length;

                        for (long outer = 0; outer < totalOps; outer++)
                        {
                            //Get the array offset for the first element in the outer dimension
                            long ix3 = @out.Shape[counters];

                            for (long i = 0; i < opsOuter; i++)
                            {
                                for (long j = 0; j < opsInner; j++)
                                {
                                    for (long k = 0; k < opsInnerInner; k++)
                                    {
                                        d2[ix3] = (System.UInt64)(Math.Exp(scalar));
                                        ix3 += innerInnerStride3;
                                    }

                                    ix3 += innerStride3;
                                }

                                ix3 += outerStride3;
                            }

                            if (counters.LongLength > 0)
                            {
                                //Basically a ripple carry adder
                                long p = counters.LongLength - 1;
                                while (++counters[p] == limits[p] && p > 0)
                                {
                                    counters[p] = 0;
                                    p--;
                                }
                            }
                        }
                    }
                }
            }
        }
        /// <summary>
        /// Unsafe implementation of applying a unary operation
        /// </summary>
        /// <typeparam name="C">The type of operation to perform</typeparam>
        /// <param name="op">The operation instance</param>
        /// <param name="in1">The input argument</param>
        /// <param name="out">The output target</param>
        internal static void UFunc_Op_Inner_Unary_Flush_Single_TypedImpl<C>(NumCIL.Float.Exp op, NdArray<System.Single> in1, NdArray<System.Single> @out)
            where C : IUnaryOp<System.Single>
        {
            unsafe
            {
                using (var f1 = new Pinner(in1.DataAccessor))
                using (var f2 = new Pinner(@out.DataAccessor))
                {
                    var d1 = (System.Single*)f1.ptr;
                    var d2 = (System.Single*)f2.ptr;

                    if (@out.Shape.Dimensions.Length == 1)
                    {
                        long totalOps = @out.Shape.Dimensions[0].Length;

                        long ix1 = in1.Shape.Offset;
                        long ix2 = @out.Shape.Offset;

                        long stride1 = in1.Shape.Dimensions[0].Stride;
                        long stride2 = @out.Shape.Dimensions[0].Stride;


                        if (stride1 == stride2 && ix1 == ix2)
                        {
                            //Best case, all are equal, just keep a single counter
                            for (long i = 0; i < totalOps; i++)
                            {
                                d2[ix1] = (System.Single)(Math.Exp(d1[ix1]));
                                ix1 += stride1;
                            }
                        }
                        else
                        {
                            for (long i = 0; i < totalOps; i++)
                            {
                                d2[ix2] = (System.Single)(Math.Exp(d1[ix1]));
                                ix1 += stride1;
                                ix2 += stride2;
                            }
                        }
                    }
                    else if (@out.Shape.Dimensions.Length == 2)
                    {
                        long opsOuter = @out.Shape.Dimensions[0].Length;
                        long opsInner = @out.Shape.Dimensions[1].Length;

                        long ix1 = in1.Shape.Offset;
                        long ix2 = @out.Shape.Offset;

                        long outerStride1 = in1.Shape.Dimensions[0].Stride;
                        long outerStride2 = @out.Shape.Dimensions[0].Stride;

                        long innerStride1 = in1.Shape.Dimensions[1].Stride;
                        long innerStride2 = @out.Shape.Dimensions[1].Stride;

                        outerStride1 -= innerStride1 * in1.Shape.Dimensions[1].Length;
                        outerStride2 -= innerStride2 * @out.Shape.Dimensions[1].Length;

                        for (long i = 0; i < opsOuter; i++)
                        {
                            for (long j = 0; j < opsInner; j++)
                            {
                                d2[ix2] = (System.Single)(Math.Exp(d1[ix1]));
                                ix1 += innerStride1;
                                ix2 += innerStride2;
                            }

                            ix1 += outerStride1;
                            ix2 += outerStride2;
                        }
                    }
                    else
                    {
                        long n = in1.Shape.Dimensions.LongLength - 3;
                        long[] limits = in1.Shape.Dimensions.Where(x => n-- > 0).Select(x => x.Length).ToArray();
                        long[] counters = new long[limits.LongLength];

                        long totalOps = limits.LongLength == 0 ? 1 : limits.Aggregate<long>((a, b) => a * b);

                        //This chunck of variables are used to prevent repeated calculations of offsets
                        long dimIndex0 = 0 + limits.LongLength;
                        long dimIndex1 = 1 + limits.LongLength;
                        long dimIndex2 = 2 + limits.LongLength;

                        long opsOuter = @out.Shape.Dimensions[0 + limits.LongLength].Length;
                        long opsInner = @out.Shape.Dimensions[1 + limits.LongLength].Length;
                        long opsInnerInner = @out.Shape.Dimensions[2 + limits.LongLength].Length;

                        long outerStride1 = in1.Shape.Dimensions[dimIndex0].Stride;
                        long outerStride3 = @out.Shape.Dimensions[dimIndex0].Stride;

                        long innerStride1 = in1.Shape.Dimensions[dimIndex1].Stride;
                        long innerStride3 = @out.Shape.Dimensions[dimIndex1].Stride;

                        long innerInnerStride1 = in1.Shape.Dimensions[dimIndex2].Stride;
                        long innerInnerStride3 = @out.Shape.Dimensions[dimIndex2].Stride;

                        outerStride1 -= innerStride1 * in1.Shape.Dimensions[dimIndex1].Length;
                        outerStride3 -= innerStride3 * @out.Shape.Dimensions[dimIndex1].Length;

                        innerStride1 -= innerInnerStride1 * in1.Shape.Dimensions[dimIndex2].Length;
                        innerStride3 -= innerInnerStride3 * @out.Shape.Dimensions[dimIndex2].Length;

                        for (long outer = 0; outer < totalOps; outer++)
                        {
                            //Get the array offset for the first element in the outer dimension
                            long ix1 = in1.Shape[counters];
                            long ix3 = @out.Shape[counters];


                            for (long i = 0; i < opsOuter; i++)
                            {
                                for (long j = 0; j < opsInner; j++)
                                {
                                    for (long k = 0; k < opsInnerInner; k++)
                                    {
                                        d2[ix3] = (System.Single)(Math.Exp(d1[ix1]));
                                        ix1 += innerInnerStride1;
                                        ix3 += innerInnerStride3;
                                    }

                                    ix1 += innerStride1;
                                    ix3 += innerStride3;
                                }

                                ix1 += outerStride1;
                                ix3 += outerStride3;
                            }

                            if (counters.LongLength > 0)
                            {
                                //Basically a ripple carry adder
                                long p = counters.LongLength - 1;
                                while (++counters[p] == limits[p] && p > 0)
                                {
                                    counters[p] = 0;
                                    p--;
                                }
                            }
                        }
                    }
                }
            }
        }

        /// <summary>
        /// Unsafe implementation of applying a unary operation
        /// </summary>
        /// <typeparam name="C">The type of operation to perform</typeparam>
        /// <param name="op">The operation instance</param>
        /// <param name="scalar">The input scalar argument</param>
        /// <param name="out">The output target</param>
        internal static void UFunc_Op_Inner_Unary_Scalar_Flush_Single_TypedImpl<C>(NumCIL.Float.Exp op, System.Single scalar, NdArray<System.Single> @out)
            where C : IUnaryOp<System.Single>
        {
            unsafe
            {
                using (var f2 = new Pinner(@out.DataAccessor))
                {
                    var d2 = (System.Single*)f2.ptr;

                    if (@out.Shape.Dimensions.Length == 1)
                    {
                        long totalOps = @out.Shape.Dimensions[0].Length;
                        long ix2 = @out.Shape.Offset;
                        long stride2 = @out.Shape.Dimensions[0].Stride;

                        for (long i = 0; i < totalOps; i++)
                        {
                            d2[ix2] = (System.Single)(Math.Exp(scalar));
                            ix2 += stride2;
                        }
                    }
                    else if (@out.Shape.Dimensions.Length == 2)
                    {
                        long opsOuter = @out.Shape.Dimensions[0].Length;
                        long opsInner = @out.Shape.Dimensions[1].Length;

                        long ix2 = @out.Shape.Offset;
                        long outerStride2 = @out.Shape.Dimensions[0].Stride;
                        long innerStride2 = @out.Shape.Dimensions[1].Stride;
                        outerStride2 -= innerStride2 * @out.Shape.Dimensions[1].Length;

                        for (long i = 0; i < opsOuter; i++)
                        {
                            for (long j = 0; j < opsInner; j++)
                            {
                                d2[ix2] = (System.Single)(Math.Exp(scalar));
                                ix2 += innerStride2;
                            }

                            ix2 += outerStride2;
                        }
                    }
                    else
                    {
                        long n = @out.Shape.Dimensions.LongLength - 3;
                        long[] limits = @out.Shape.Dimensions.Where(x => n-- > 0).Select(x => x.Length).ToArray();
                        long[] counters = new long[limits.LongLength];

                        long totalOps = limits.LongLength == 0 ? 1 : limits.Aggregate<long>((a, b) => a * b);

                        //This chunck of variables are used to prevent repeated calculations of offsets
                        long dimIndex0 = 0 + limits.LongLength;
                        long dimIndex1 = 1 + limits.LongLength;
                        long dimIndex2 = 2 + limits.LongLength;

                        long opsOuter = @out.Shape.Dimensions[0 + limits.LongLength].Length;
                        long opsInner = @out.Shape.Dimensions[1 + limits.LongLength].Length;
                        long opsInnerInner = @out.Shape.Dimensions[2 + limits.LongLength].Length;

                        long outerStride3 = @out.Shape.Dimensions[dimIndex0].Stride;
                        long innerStride3 = @out.Shape.Dimensions[dimIndex1].Stride;
                        long innerInnerStride3 = @out.Shape.Dimensions[dimIndex2].Stride;
                        outerStride3 -= innerStride3 * @out.Shape.Dimensions[dimIndex1].Length;
                        innerStride3 -= innerInnerStride3 * @out.Shape.Dimensions[dimIndex2].Length;

                        for (long outer = 0; outer < totalOps; outer++)
                        {
                            //Get the array offset for the first element in the outer dimension
                            long ix3 = @out.Shape[counters];

                            for (long i = 0; i < opsOuter; i++)
                            {
                                for (long j = 0; j < opsInner; j++)
                                {
                                    for (long k = 0; k < opsInnerInner; k++)
                                    {
                                        d2[ix3] = (System.Single)(Math.Exp(scalar));
                                        ix3 += innerInnerStride3;
                                    }

                                    ix3 += innerStride3;
                                }

                                ix3 += outerStride3;
                            }

                            if (counters.LongLength > 0)
                            {
                                //Basically a ripple carry adder
                                long p = counters.LongLength - 1;
                                while (++counters[p] == limits[p] && p > 0)
                                {
                                    counters[p] = 0;
                                    p--;
                                }
                            }
                        }
                    }
                }
            }
        }
        /// <summary>
        /// Unsafe implementation of applying a unary operation
        /// </summary>
        /// <typeparam name="C">The type of operation to perform</typeparam>
        /// <param name="op">The operation instance</param>
        /// <param name="in1">The input argument</param>
        /// <param name="out">The output target</param>
        internal static void UFunc_Op_Inner_Unary_Flush_Double_TypedImpl<C>(NumCIL.Double.Exp op, NdArray<System.Double> in1, NdArray<System.Double> @out)
            where C : IUnaryOp<System.Double>
        {
            unsafe
            {
                using (var f1 = new Pinner(in1.DataAccessor))
                using (var f2 = new Pinner(@out.DataAccessor))
                {
                    var d1 = (System.Double*)f1.ptr;
                    var d2 = (System.Double*)f2.ptr;

                    if (@out.Shape.Dimensions.Length == 1)
                    {
                        long totalOps = @out.Shape.Dimensions[0].Length;

                        long ix1 = in1.Shape.Offset;
                        long ix2 = @out.Shape.Offset;

                        long stride1 = in1.Shape.Dimensions[0].Stride;
                        long stride2 = @out.Shape.Dimensions[0].Stride;


                        if (stride1 == stride2 && ix1 == ix2)
                        {
                            //Best case, all are equal, just keep a single counter
                            for (long i = 0; i < totalOps; i++)
                            {
                                d2[ix1] = (System.Double)(Math.Exp(d1[ix1]));
                                ix1 += stride1;
                            }
                        }
                        else
                        {
                            for (long i = 0; i < totalOps; i++)
                            {
                                d2[ix2] = (System.Double)(Math.Exp(d1[ix1]));
                                ix1 += stride1;
                                ix2 += stride2;
                            }
                        }
                    }
                    else if (@out.Shape.Dimensions.Length == 2)
                    {
                        long opsOuter = @out.Shape.Dimensions[0].Length;
                        long opsInner = @out.Shape.Dimensions[1].Length;

                        long ix1 = in1.Shape.Offset;
                        long ix2 = @out.Shape.Offset;

                        long outerStride1 = in1.Shape.Dimensions[0].Stride;
                        long outerStride2 = @out.Shape.Dimensions[0].Stride;

                        long innerStride1 = in1.Shape.Dimensions[1].Stride;
                        long innerStride2 = @out.Shape.Dimensions[1].Stride;

                        outerStride1 -= innerStride1 * in1.Shape.Dimensions[1].Length;
                        outerStride2 -= innerStride2 * @out.Shape.Dimensions[1].Length;

                        for (long i = 0; i < opsOuter; i++)
                        {
                            for (long j = 0; j < opsInner; j++)
                            {
                                d2[ix2] = (System.Double)(Math.Exp(d1[ix1]));
                                ix1 += innerStride1;
                                ix2 += innerStride2;
                            }

                            ix1 += outerStride1;
                            ix2 += outerStride2;
                        }
                    }
                    else
                    {
                        long n = in1.Shape.Dimensions.LongLength - 3;
                        long[] limits = in1.Shape.Dimensions.Where(x => n-- > 0).Select(x => x.Length).ToArray();
                        long[] counters = new long[limits.LongLength];

                        long totalOps = limits.LongLength == 0 ? 1 : limits.Aggregate<long>((a, b) => a * b);

                        //This chunck of variables are used to prevent repeated calculations of offsets
                        long dimIndex0 = 0 + limits.LongLength;
                        long dimIndex1 = 1 + limits.LongLength;
                        long dimIndex2 = 2 + limits.LongLength;

                        long opsOuter = @out.Shape.Dimensions[0 + limits.LongLength].Length;
                        long opsInner = @out.Shape.Dimensions[1 + limits.LongLength].Length;
                        long opsInnerInner = @out.Shape.Dimensions[2 + limits.LongLength].Length;

                        long outerStride1 = in1.Shape.Dimensions[dimIndex0].Stride;
                        long outerStride3 = @out.Shape.Dimensions[dimIndex0].Stride;

                        long innerStride1 = in1.Shape.Dimensions[dimIndex1].Stride;
                        long innerStride3 = @out.Shape.Dimensions[dimIndex1].Stride;

                        long innerInnerStride1 = in1.Shape.Dimensions[dimIndex2].Stride;
                        long innerInnerStride3 = @out.Shape.Dimensions[dimIndex2].Stride;

                        outerStride1 -= innerStride1 * in1.Shape.Dimensions[dimIndex1].Length;
                        outerStride3 -= innerStride3 * @out.Shape.Dimensions[dimIndex1].Length;

                        innerStride1 -= innerInnerStride1 * in1.Shape.Dimensions[dimIndex2].Length;
                        innerStride3 -= innerInnerStride3 * @out.Shape.Dimensions[dimIndex2].Length;

                        for (long outer = 0; outer < totalOps; outer++)
                        {
                            //Get the array offset for the first element in the outer dimension
                            long ix1 = in1.Shape[counters];
                            long ix3 = @out.Shape[counters];


                            for (long i = 0; i < opsOuter; i++)
                            {
                                for (long j = 0; j < opsInner; j++)
                                {
                                    for (long k = 0; k < opsInnerInner; k++)
                                    {
                                        d2[ix3] = (System.Double)(Math.Exp(d1[ix1]));
                                        ix1 += innerInnerStride1;
                                        ix3 += innerInnerStride3;
                                    }

                                    ix1 += innerStride1;
                                    ix3 += innerStride3;
                                }

                                ix1 += outerStride1;
                                ix3 += outerStride3;
                            }

                            if (counters.LongLength > 0)
                            {
                                //Basically a ripple carry adder
                                long p = counters.LongLength - 1;
                                while (++counters[p] == limits[p] && p > 0)
                                {
                                    counters[p] = 0;
                                    p--;
                                }
                            }
                        }
                    }
                }
            }
        }

        /// <summary>
        /// Unsafe implementation of applying a unary operation
        /// </summary>
        /// <typeparam name="C">The type of operation to perform</typeparam>
        /// <param name="op">The operation instance</param>
        /// <param name="scalar">The input scalar argument</param>
        /// <param name="out">The output target</param>
        internal static void UFunc_Op_Inner_Unary_Scalar_Flush_Double_TypedImpl<C>(NumCIL.Double.Exp op, System.Double scalar, NdArray<System.Double> @out)
            where C : IUnaryOp<System.Double>
        {
            unsafe
            {
                using (var f2 = new Pinner(@out.DataAccessor))
                {
                    var d2 = (System.Double*)f2.ptr;

                    if (@out.Shape.Dimensions.Length == 1)
                    {
                        long totalOps = @out.Shape.Dimensions[0].Length;
                        long ix2 = @out.Shape.Offset;
                        long stride2 = @out.Shape.Dimensions[0].Stride;

                        for (long i = 0; i < totalOps; i++)
                        {
                            d2[ix2] = (System.Double)(Math.Exp(scalar));
                            ix2 += stride2;
                        }
                    }
                    else if (@out.Shape.Dimensions.Length == 2)
                    {
                        long opsOuter = @out.Shape.Dimensions[0].Length;
                        long opsInner = @out.Shape.Dimensions[1].Length;

                        long ix2 = @out.Shape.Offset;
                        long outerStride2 = @out.Shape.Dimensions[0].Stride;
                        long innerStride2 = @out.Shape.Dimensions[1].Stride;
                        outerStride2 -= innerStride2 * @out.Shape.Dimensions[1].Length;

                        for (long i = 0; i < opsOuter; i++)
                        {
                            for (long j = 0; j < opsInner; j++)
                            {
                                d2[ix2] = (System.Double)(Math.Exp(scalar));
                                ix2 += innerStride2;
                            }

                            ix2 += outerStride2;
                        }
                    }
                    else
                    {
                        long n = @out.Shape.Dimensions.LongLength - 3;
                        long[] limits = @out.Shape.Dimensions.Where(x => n-- > 0).Select(x => x.Length).ToArray();
                        long[] counters = new long[limits.LongLength];

                        long totalOps = limits.LongLength == 0 ? 1 : limits.Aggregate<long>((a, b) => a * b);

                        //This chunck of variables are used to prevent repeated calculations of offsets
                        long dimIndex0 = 0 + limits.LongLength;
                        long dimIndex1 = 1 + limits.LongLength;
                        long dimIndex2 = 2 + limits.LongLength;

                        long opsOuter = @out.Shape.Dimensions[0 + limits.LongLength].Length;
                        long opsInner = @out.Shape.Dimensions[1 + limits.LongLength].Length;
                        long opsInnerInner = @out.Shape.Dimensions[2 + limits.LongLength].Length;

                        long outerStride3 = @out.Shape.Dimensions[dimIndex0].Stride;
                        long innerStride3 = @out.Shape.Dimensions[dimIndex1].Stride;
                        long innerInnerStride3 = @out.Shape.Dimensions[dimIndex2].Stride;
                        outerStride3 -= innerStride3 * @out.Shape.Dimensions[dimIndex1].Length;
                        innerStride3 -= innerInnerStride3 * @out.Shape.Dimensions[dimIndex2].Length;

                        for (long outer = 0; outer < totalOps; outer++)
                        {
                            //Get the array offset for the first element in the outer dimension
                            long ix3 = @out.Shape[counters];

                            for (long i = 0; i < opsOuter; i++)
                            {
                                for (long j = 0; j < opsInner; j++)
                                {
                                    for (long k = 0; k < opsInnerInner; k++)
                                    {
                                        d2[ix3] = (System.Double)(Math.Exp(scalar));
                                        ix3 += innerInnerStride3;
                                    }

                                    ix3 += innerStride3;
                                }

                                ix3 += outerStride3;
                            }

                            if (counters.LongLength > 0)
                            {
                                //Basically a ripple carry adder
                                long p = counters.LongLength - 1;
                                while (++counters[p] == limits[p] && p > 0)
                                {
                                    counters[p] = 0;
                                    p--;
                                }
                            }
                        }
                    }
                }
            }
        }
        /// <summary>
        /// Unsafe implementation of applying a unary operation
        /// </summary>
        /// <typeparam name="C">The type of operation to perform</typeparam>
        /// <param name="op">The operation instance</param>
        /// <param name="in1">The input argument</param>
        /// <param name="out">The output target</param>
        internal static void UFunc_Op_Inner_Unary_Flush_SByte_TypedImpl<C>(NumCIL.Int8.Abs op, NdArray<System.SByte> in1, NdArray<System.SByte> @out)
            where C : IUnaryOp<System.SByte>
        {
            unsafe
            {
                using (var f1 = new Pinner(in1.DataAccessor))
                using (var f2 = new Pinner(@out.DataAccessor))
                {
                    var d1 = (System.SByte*)f1.ptr;
                    var d2 = (System.SByte*)f2.ptr;

                    if (@out.Shape.Dimensions.Length == 1)
                    {
                        long totalOps = @out.Shape.Dimensions[0].Length;

                        long ix1 = in1.Shape.Offset;
                        long ix2 = @out.Shape.Offset;

                        long stride1 = in1.Shape.Dimensions[0].Stride;
                        long stride2 = @out.Shape.Dimensions[0].Stride;


                        if (stride1 == stride2 && ix1 == ix2)
                        {
                            //Best case, all are equal, just keep a single counter
                            for (long i = 0; i < totalOps; i++)
                            {
                                d2[ix1] = (System.SByte)(Math.Abs(d1[ix1]));
                                ix1 += stride1;
                            }
                        }
                        else
                        {
                            for (long i = 0; i < totalOps; i++)
                            {
                                d2[ix2] = (System.SByte)(Math.Abs(d1[ix1]));
                                ix1 += stride1;
                                ix2 += stride2;
                            }
                        }
                    }
                    else if (@out.Shape.Dimensions.Length == 2)
                    {
                        long opsOuter = @out.Shape.Dimensions[0].Length;
                        long opsInner = @out.Shape.Dimensions[1].Length;

                        long ix1 = in1.Shape.Offset;
                        long ix2 = @out.Shape.Offset;

                        long outerStride1 = in1.Shape.Dimensions[0].Stride;
                        long outerStride2 = @out.Shape.Dimensions[0].Stride;

                        long innerStride1 = in1.Shape.Dimensions[1].Stride;
                        long innerStride2 = @out.Shape.Dimensions[1].Stride;

                        outerStride1 -= innerStride1 * in1.Shape.Dimensions[1].Length;
                        outerStride2 -= innerStride2 * @out.Shape.Dimensions[1].Length;

                        for (long i = 0; i < opsOuter; i++)
                        {
                            for (long j = 0; j < opsInner; j++)
                            {
                                d2[ix2] = (System.SByte)(Math.Abs(d1[ix1]));
                                ix1 += innerStride1;
                                ix2 += innerStride2;
                            }

                            ix1 += outerStride1;
                            ix2 += outerStride2;
                        }
                    }
                    else
                    {
                        long n = in1.Shape.Dimensions.LongLength - 3;
                        long[] limits = in1.Shape.Dimensions.Where(x => n-- > 0).Select(x => x.Length).ToArray();
                        long[] counters = new long[limits.LongLength];

                        long totalOps = limits.LongLength == 0 ? 1 : limits.Aggregate<long>((a, b) => a * b);

                        //This chunck of variables are used to prevent repeated calculations of offsets
                        long dimIndex0 = 0 + limits.LongLength;
                        long dimIndex1 = 1 + limits.LongLength;
                        long dimIndex2 = 2 + limits.LongLength;

                        long opsOuter = @out.Shape.Dimensions[0 + limits.LongLength].Length;
                        long opsInner = @out.Shape.Dimensions[1 + limits.LongLength].Length;
                        long opsInnerInner = @out.Shape.Dimensions[2 + limits.LongLength].Length;

                        long outerStride1 = in1.Shape.Dimensions[dimIndex0].Stride;
                        long outerStride3 = @out.Shape.Dimensions[dimIndex0].Stride;

                        long innerStride1 = in1.Shape.Dimensions[dimIndex1].Stride;
                        long innerStride3 = @out.Shape.Dimensions[dimIndex1].Stride;

                        long innerInnerStride1 = in1.Shape.Dimensions[dimIndex2].Stride;
                        long innerInnerStride3 = @out.Shape.Dimensions[dimIndex2].Stride;

                        outerStride1 -= innerStride1 * in1.Shape.Dimensions[dimIndex1].Length;
                        outerStride3 -= innerStride3 * @out.Shape.Dimensions[dimIndex1].Length;

                        innerStride1 -= innerInnerStride1 * in1.Shape.Dimensions[dimIndex2].Length;
                        innerStride3 -= innerInnerStride3 * @out.Shape.Dimensions[dimIndex2].Length;

                        for (long outer = 0; outer < totalOps; outer++)
                        {
                            //Get the array offset for the first element in the outer dimension
                            long ix1 = in1.Shape[counters];
                            long ix3 = @out.Shape[counters];


                            for (long i = 0; i < opsOuter; i++)
                            {
                                for (long j = 0; j < opsInner; j++)
                                {
                                    for (long k = 0; k < opsInnerInner; k++)
                                    {
                                        d2[ix3] = (System.SByte)(Math.Abs(d1[ix1]));
                                        ix1 += innerInnerStride1;
                                        ix3 += innerInnerStride3;
                                    }

                                    ix1 += innerStride1;
                                    ix3 += innerStride3;
                                }

                                ix1 += outerStride1;
                                ix3 += outerStride3;
                            }

                            if (counters.LongLength > 0)
                            {
                                //Basically a ripple carry adder
                                long p = counters.LongLength - 1;
                                while (++counters[p] == limits[p] && p > 0)
                                {
                                    counters[p] = 0;
                                    p--;
                                }
                            }
                        }
                    }
                }
            }
        }

        /// <summary>
        /// Unsafe implementation of applying a unary operation
        /// </summary>
        /// <typeparam name="C">The type of operation to perform</typeparam>
        /// <param name="op">The operation instance</param>
        /// <param name="scalar">The input scalar argument</param>
        /// <param name="out">The output target</param>
        internal static void UFunc_Op_Inner_Unary_Scalar_Flush_SByte_TypedImpl<C>(NumCIL.Int8.Abs op, System.SByte scalar, NdArray<System.SByte> @out)
            where C : IUnaryOp<System.SByte>
        {
            unsafe
            {
                using (var f2 = new Pinner(@out.DataAccessor))
                {
                    var d2 = (System.SByte*)f2.ptr;

                    if (@out.Shape.Dimensions.Length == 1)
                    {
                        long totalOps = @out.Shape.Dimensions[0].Length;
                        long ix2 = @out.Shape.Offset;
                        long stride2 = @out.Shape.Dimensions[0].Stride;

                        for (long i = 0; i < totalOps; i++)
                        {
                            d2[ix2] = (System.SByte)(Math.Abs(scalar));
                            ix2 += stride2;
                        }
                    }
                    else if (@out.Shape.Dimensions.Length == 2)
                    {
                        long opsOuter = @out.Shape.Dimensions[0].Length;
                        long opsInner = @out.Shape.Dimensions[1].Length;

                        long ix2 = @out.Shape.Offset;
                        long outerStride2 = @out.Shape.Dimensions[0].Stride;
                        long innerStride2 = @out.Shape.Dimensions[1].Stride;
                        outerStride2 -= innerStride2 * @out.Shape.Dimensions[1].Length;

                        for (long i = 0; i < opsOuter; i++)
                        {
                            for (long j = 0; j < opsInner; j++)
                            {
                                d2[ix2] = (System.SByte)(Math.Abs(scalar));
                                ix2 += innerStride2;
                            }

                            ix2 += outerStride2;
                        }
                    }
                    else
                    {
                        long n = @out.Shape.Dimensions.LongLength - 3;
                        long[] limits = @out.Shape.Dimensions.Where(x => n-- > 0).Select(x => x.Length).ToArray();
                        long[] counters = new long[limits.LongLength];

                        long totalOps = limits.LongLength == 0 ? 1 : limits.Aggregate<long>((a, b) => a * b);

                        //This chunck of variables are used to prevent repeated calculations of offsets
                        long dimIndex0 = 0 + limits.LongLength;
                        long dimIndex1 = 1 + limits.LongLength;
                        long dimIndex2 = 2 + limits.LongLength;

                        long opsOuter = @out.Shape.Dimensions[0 + limits.LongLength].Length;
                        long opsInner = @out.Shape.Dimensions[1 + limits.LongLength].Length;
                        long opsInnerInner = @out.Shape.Dimensions[2 + limits.LongLength].Length;

                        long outerStride3 = @out.Shape.Dimensions[dimIndex0].Stride;
                        long innerStride3 = @out.Shape.Dimensions[dimIndex1].Stride;
                        long innerInnerStride3 = @out.Shape.Dimensions[dimIndex2].Stride;
                        outerStride3 -= innerStride3 * @out.Shape.Dimensions[dimIndex1].Length;
                        innerStride3 -= innerInnerStride3 * @out.Shape.Dimensions[dimIndex2].Length;

                        for (long outer = 0; outer < totalOps; outer++)
                        {
                            //Get the array offset for the first element in the outer dimension
                            long ix3 = @out.Shape[counters];

                            for (long i = 0; i < opsOuter; i++)
                            {
                                for (long j = 0; j < opsInner; j++)
                                {
                                    for (long k = 0; k < opsInnerInner; k++)
                                    {
                                        d2[ix3] = (System.SByte)(Math.Abs(scalar));
                                        ix3 += innerInnerStride3;
                                    }

                                    ix3 += innerStride3;
                                }

                                ix3 += outerStride3;
                            }

                            if (counters.LongLength > 0)
                            {
                                //Basically a ripple carry adder
                                long p = counters.LongLength - 1;
                                while (++counters[p] == limits[p] && p > 0)
                                {
                                    counters[p] = 0;
                                    p--;
                                }
                            }
                        }
                    }
                }
            }
        }
        /// <summary>
        /// Unsafe implementation of applying a unary operation
        /// </summary>
        /// <typeparam name="C">The type of operation to perform</typeparam>
        /// <param name="op">The operation instance</param>
        /// <param name="in1">The input argument</param>
        /// <param name="out">The output target</param>
        internal static void UFunc_Op_Inner_Unary_Flush_Int16_TypedImpl<C>(NumCIL.Int16.Abs op, NdArray<System.Int16> in1, NdArray<System.Int16> @out)
            where C : IUnaryOp<System.Int16>
        {
            unsafe
            {
                using (var f1 = new Pinner(in1.DataAccessor))
                using (var f2 = new Pinner(@out.DataAccessor))
                {
                    var d1 = (System.Int16*)f1.ptr;
                    var d2 = (System.Int16*)f2.ptr;

                    if (@out.Shape.Dimensions.Length == 1)
                    {
                        long totalOps = @out.Shape.Dimensions[0].Length;

                        long ix1 = in1.Shape.Offset;
                        long ix2 = @out.Shape.Offset;

                        long stride1 = in1.Shape.Dimensions[0].Stride;
                        long stride2 = @out.Shape.Dimensions[0].Stride;


                        if (stride1 == stride2 && ix1 == ix2)
                        {
                            //Best case, all are equal, just keep a single counter
                            for (long i = 0; i < totalOps; i++)
                            {
                                d2[ix1] = (System.Int16)(Math.Abs(d1[ix1]));
                                ix1 += stride1;
                            }
                        }
                        else
                        {
                            for (long i = 0; i < totalOps; i++)
                            {
                                d2[ix2] = (System.Int16)(Math.Abs(d1[ix1]));
                                ix1 += stride1;
                                ix2 += stride2;
                            }
                        }
                    }
                    else if (@out.Shape.Dimensions.Length == 2)
                    {
                        long opsOuter = @out.Shape.Dimensions[0].Length;
                        long opsInner = @out.Shape.Dimensions[1].Length;

                        long ix1 = in1.Shape.Offset;
                        long ix2 = @out.Shape.Offset;

                        long outerStride1 = in1.Shape.Dimensions[0].Stride;
                        long outerStride2 = @out.Shape.Dimensions[0].Stride;

                        long innerStride1 = in1.Shape.Dimensions[1].Stride;
                        long innerStride2 = @out.Shape.Dimensions[1].Stride;

                        outerStride1 -= innerStride1 * in1.Shape.Dimensions[1].Length;
                        outerStride2 -= innerStride2 * @out.Shape.Dimensions[1].Length;

                        for (long i = 0; i < opsOuter; i++)
                        {
                            for (long j = 0; j < opsInner; j++)
                            {
                                d2[ix2] = (System.Int16)(Math.Abs(d1[ix1]));
                                ix1 += innerStride1;
                                ix2 += innerStride2;
                            }

                            ix1 += outerStride1;
                            ix2 += outerStride2;
                        }
                    }
                    else
                    {
                        long n = in1.Shape.Dimensions.LongLength - 3;
                        long[] limits = in1.Shape.Dimensions.Where(x => n-- > 0).Select(x => x.Length).ToArray();
                        long[] counters = new long[limits.LongLength];

                        long totalOps = limits.LongLength == 0 ? 1 : limits.Aggregate<long>((a, b) => a * b);

                        //This chunck of variables are used to prevent repeated calculations of offsets
                        long dimIndex0 = 0 + limits.LongLength;
                        long dimIndex1 = 1 + limits.LongLength;
                        long dimIndex2 = 2 + limits.LongLength;

                        long opsOuter = @out.Shape.Dimensions[0 + limits.LongLength].Length;
                        long opsInner = @out.Shape.Dimensions[1 + limits.LongLength].Length;
                        long opsInnerInner = @out.Shape.Dimensions[2 + limits.LongLength].Length;

                        long outerStride1 = in1.Shape.Dimensions[dimIndex0].Stride;
                        long outerStride3 = @out.Shape.Dimensions[dimIndex0].Stride;

                        long innerStride1 = in1.Shape.Dimensions[dimIndex1].Stride;
                        long innerStride3 = @out.Shape.Dimensions[dimIndex1].Stride;

                        long innerInnerStride1 = in1.Shape.Dimensions[dimIndex2].Stride;
                        long innerInnerStride3 = @out.Shape.Dimensions[dimIndex2].Stride;

                        outerStride1 -= innerStride1 * in1.Shape.Dimensions[dimIndex1].Length;
                        outerStride3 -= innerStride3 * @out.Shape.Dimensions[dimIndex1].Length;

                        innerStride1 -= innerInnerStride1 * in1.Shape.Dimensions[dimIndex2].Length;
                        innerStride3 -= innerInnerStride3 * @out.Shape.Dimensions[dimIndex2].Length;

                        for (long outer = 0; outer < totalOps; outer++)
                        {
                            //Get the array offset for the first element in the outer dimension
                            long ix1 = in1.Shape[counters];
                            long ix3 = @out.Shape[counters];


                            for (long i = 0; i < opsOuter; i++)
                            {
                                for (long j = 0; j < opsInner; j++)
                                {
                                    for (long k = 0; k < opsInnerInner; k++)
                                    {
                                        d2[ix3] = (System.Int16)(Math.Abs(d1[ix1]));
                                        ix1 += innerInnerStride1;
                                        ix3 += innerInnerStride3;
                                    }

                                    ix1 += innerStride1;
                                    ix3 += innerStride3;
                                }

                                ix1 += outerStride1;
                                ix3 += outerStride3;
                            }

                            if (counters.LongLength > 0)
                            {
                                //Basically a ripple carry adder
                                long p = counters.LongLength - 1;
                                while (++counters[p] == limits[p] && p > 0)
                                {
                                    counters[p] = 0;
                                    p--;
                                }
                            }
                        }
                    }
                }
            }
        }

        /// <summary>
        /// Unsafe implementation of applying a unary operation
        /// </summary>
        /// <typeparam name="C">The type of operation to perform</typeparam>
        /// <param name="op">The operation instance</param>
        /// <param name="scalar">The input scalar argument</param>
        /// <param name="out">The output target</param>
        internal static void UFunc_Op_Inner_Unary_Scalar_Flush_Int16_TypedImpl<C>(NumCIL.Int16.Abs op, System.Int16 scalar, NdArray<System.Int16> @out)
            where C : IUnaryOp<System.Int16>
        {
            unsafe
            {
                using (var f2 = new Pinner(@out.DataAccessor))
                {
                    var d2 = (System.Int16*)f2.ptr;

                    if (@out.Shape.Dimensions.Length == 1)
                    {
                        long totalOps = @out.Shape.Dimensions[0].Length;
                        long ix2 = @out.Shape.Offset;
                        long stride2 = @out.Shape.Dimensions[0].Stride;

                        for (long i = 0; i < totalOps; i++)
                        {
                            d2[ix2] = (System.Int16)(Math.Abs(scalar));
                            ix2 += stride2;
                        }
                    }
                    else if (@out.Shape.Dimensions.Length == 2)
                    {
                        long opsOuter = @out.Shape.Dimensions[0].Length;
                        long opsInner = @out.Shape.Dimensions[1].Length;

                        long ix2 = @out.Shape.Offset;
                        long outerStride2 = @out.Shape.Dimensions[0].Stride;
                        long innerStride2 = @out.Shape.Dimensions[1].Stride;
                        outerStride2 -= innerStride2 * @out.Shape.Dimensions[1].Length;

                        for (long i = 0; i < opsOuter; i++)
                        {
                            for (long j = 0; j < opsInner; j++)
                            {
                                d2[ix2] = (System.Int16)(Math.Abs(scalar));
                                ix2 += innerStride2;
                            }

                            ix2 += outerStride2;
                        }
                    }
                    else
                    {
                        long n = @out.Shape.Dimensions.LongLength - 3;
                        long[] limits = @out.Shape.Dimensions.Where(x => n-- > 0).Select(x => x.Length).ToArray();
                        long[] counters = new long[limits.LongLength];

                        long totalOps = limits.LongLength == 0 ? 1 : limits.Aggregate<long>((a, b) => a * b);

                        //This chunck of variables are used to prevent repeated calculations of offsets
                        long dimIndex0 = 0 + limits.LongLength;
                        long dimIndex1 = 1 + limits.LongLength;
                        long dimIndex2 = 2 + limits.LongLength;

                        long opsOuter = @out.Shape.Dimensions[0 + limits.LongLength].Length;
                        long opsInner = @out.Shape.Dimensions[1 + limits.LongLength].Length;
                        long opsInnerInner = @out.Shape.Dimensions[2 + limits.LongLength].Length;

                        long outerStride3 = @out.Shape.Dimensions[dimIndex0].Stride;
                        long innerStride3 = @out.Shape.Dimensions[dimIndex1].Stride;
                        long innerInnerStride3 = @out.Shape.Dimensions[dimIndex2].Stride;
                        outerStride3 -= innerStride3 * @out.Shape.Dimensions[dimIndex1].Length;
                        innerStride3 -= innerInnerStride3 * @out.Shape.Dimensions[dimIndex2].Length;

                        for (long outer = 0; outer < totalOps; outer++)
                        {
                            //Get the array offset for the first element in the outer dimension
                            long ix3 = @out.Shape[counters];

                            for (long i = 0; i < opsOuter; i++)
                            {
                                for (long j = 0; j < opsInner; j++)
                                {
                                    for (long k = 0; k < opsInnerInner; k++)
                                    {
                                        d2[ix3] = (System.Int16)(Math.Abs(scalar));
                                        ix3 += innerInnerStride3;
                                    }

                                    ix3 += innerStride3;
                                }

                                ix3 += outerStride3;
                            }

                            if (counters.LongLength > 0)
                            {
                                //Basically a ripple carry adder
                                long p = counters.LongLength - 1;
                                while (++counters[p] == limits[p] && p > 0)
                                {
                                    counters[p] = 0;
                                    p--;
                                }
                            }
                        }
                    }
                }
            }
        }
        /// <summary>
        /// Unsafe implementation of applying a unary operation
        /// </summary>
        /// <typeparam name="C">The type of operation to perform</typeparam>
        /// <param name="op">The operation instance</param>
        /// <param name="in1">The input argument</param>
        /// <param name="out">The output target</param>
        internal static void UFunc_Op_Inner_Unary_Flush_Int32_TypedImpl<C>(NumCIL.Int32.Abs op, NdArray<System.Int32> in1, NdArray<System.Int32> @out)
            where C : IUnaryOp<System.Int32>
        {
            unsafe
            {
                using (var f1 = new Pinner(in1.DataAccessor))
                using (var f2 = new Pinner(@out.DataAccessor))
                {
                    var d1 = (System.Int32*)f1.ptr;
                    var d2 = (System.Int32*)f2.ptr;

                    if (@out.Shape.Dimensions.Length == 1)
                    {
                        long totalOps = @out.Shape.Dimensions[0].Length;

                        long ix1 = in1.Shape.Offset;
                        long ix2 = @out.Shape.Offset;

                        long stride1 = in1.Shape.Dimensions[0].Stride;
                        long stride2 = @out.Shape.Dimensions[0].Stride;


                        if (stride1 == stride2 && ix1 == ix2)
                        {
                            //Best case, all are equal, just keep a single counter
                            for (long i = 0; i < totalOps; i++)
                            {
                                d2[ix1] = (System.Int32)(Math.Abs(d1[ix1]));
                                ix1 += stride1;
                            }
                        }
                        else
                        {
                            for (long i = 0; i < totalOps; i++)
                            {
                                d2[ix2] = (System.Int32)(Math.Abs(d1[ix1]));
                                ix1 += stride1;
                                ix2 += stride2;
                            }
                        }
                    }
                    else if (@out.Shape.Dimensions.Length == 2)
                    {
                        long opsOuter = @out.Shape.Dimensions[0].Length;
                        long opsInner = @out.Shape.Dimensions[1].Length;

                        long ix1 = in1.Shape.Offset;
                        long ix2 = @out.Shape.Offset;

                        long outerStride1 = in1.Shape.Dimensions[0].Stride;
                        long outerStride2 = @out.Shape.Dimensions[0].Stride;

                        long innerStride1 = in1.Shape.Dimensions[1].Stride;
                        long innerStride2 = @out.Shape.Dimensions[1].Stride;

                        outerStride1 -= innerStride1 * in1.Shape.Dimensions[1].Length;
                        outerStride2 -= innerStride2 * @out.Shape.Dimensions[1].Length;

                        for (long i = 0; i < opsOuter; i++)
                        {
                            for (long j = 0; j < opsInner; j++)
                            {
                                d2[ix2] = (System.Int32)(Math.Abs(d1[ix1]));
                                ix1 += innerStride1;
                                ix2 += innerStride2;
                            }

                            ix1 += outerStride1;
                            ix2 += outerStride2;
                        }
                    }
                    else
                    {
                        long n = in1.Shape.Dimensions.LongLength - 3;
                        long[] limits = in1.Shape.Dimensions.Where(x => n-- > 0).Select(x => x.Length).ToArray();
                        long[] counters = new long[limits.LongLength];

                        long totalOps = limits.LongLength == 0 ? 1 : limits.Aggregate<long>((a, b) => a * b);

                        //This chunck of variables are used to prevent repeated calculations of offsets
                        long dimIndex0 = 0 + limits.LongLength;
                        long dimIndex1 = 1 + limits.LongLength;
                        long dimIndex2 = 2 + limits.LongLength;

                        long opsOuter = @out.Shape.Dimensions[0 + limits.LongLength].Length;
                        long opsInner = @out.Shape.Dimensions[1 + limits.LongLength].Length;
                        long opsInnerInner = @out.Shape.Dimensions[2 + limits.LongLength].Length;

                        long outerStride1 = in1.Shape.Dimensions[dimIndex0].Stride;
                        long outerStride3 = @out.Shape.Dimensions[dimIndex0].Stride;

                        long innerStride1 = in1.Shape.Dimensions[dimIndex1].Stride;
                        long innerStride3 = @out.Shape.Dimensions[dimIndex1].Stride;

                        long innerInnerStride1 = in1.Shape.Dimensions[dimIndex2].Stride;
                        long innerInnerStride3 = @out.Shape.Dimensions[dimIndex2].Stride;

                        outerStride1 -= innerStride1 * in1.Shape.Dimensions[dimIndex1].Length;
                        outerStride3 -= innerStride3 * @out.Shape.Dimensions[dimIndex1].Length;

                        innerStride1 -= innerInnerStride1 * in1.Shape.Dimensions[dimIndex2].Length;
                        innerStride3 -= innerInnerStride3 * @out.Shape.Dimensions[dimIndex2].Length;

                        for (long outer = 0; outer < totalOps; outer++)
                        {
                            //Get the array offset for the first element in the outer dimension
                            long ix1 = in1.Shape[counters];
                            long ix3 = @out.Shape[counters];


                            for (long i = 0; i < opsOuter; i++)
                            {
                                for (long j = 0; j < opsInner; j++)
                                {
                                    for (long k = 0; k < opsInnerInner; k++)
                                    {
                                        d2[ix3] = (System.Int32)(Math.Abs(d1[ix1]));
                                        ix1 += innerInnerStride1;
                                        ix3 += innerInnerStride3;
                                    }

                                    ix1 += innerStride1;
                                    ix3 += innerStride3;
                                }

                                ix1 += outerStride1;
                                ix3 += outerStride3;
                            }

                            if (counters.LongLength > 0)
                            {
                                //Basically a ripple carry adder
                                long p = counters.LongLength - 1;
                                while (++counters[p] == limits[p] && p > 0)
                                {
                                    counters[p] = 0;
                                    p--;
                                }
                            }
                        }
                    }
                }
            }
        }

        /// <summary>
        /// Unsafe implementation of applying a unary operation
        /// </summary>
        /// <typeparam name="C">The type of operation to perform</typeparam>
        /// <param name="op">The operation instance</param>
        /// <param name="scalar">The input scalar argument</param>
        /// <param name="out">The output target</param>
        internal static void UFunc_Op_Inner_Unary_Scalar_Flush_Int32_TypedImpl<C>(NumCIL.Int32.Abs op, System.Int32 scalar, NdArray<System.Int32> @out)
            where C : IUnaryOp<System.Int32>
        {
            unsafe
            {
                using (var f2 = new Pinner(@out.DataAccessor))
                {
                    var d2 = (System.Int32*)f2.ptr;

                    if (@out.Shape.Dimensions.Length == 1)
                    {
                        long totalOps = @out.Shape.Dimensions[0].Length;
                        long ix2 = @out.Shape.Offset;
                        long stride2 = @out.Shape.Dimensions[0].Stride;

                        for (long i = 0; i < totalOps; i++)
                        {
                            d2[ix2] = (System.Int32)(Math.Abs(scalar));
                            ix2 += stride2;
                        }
                    }
                    else if (@out.Shape.Dimensions.Length == 2)
                    {
                        long opsOuter = @out.Shape.Dimensions[0].Length;
                        long opsInner = @out.Shape.Dimensions[1].Length;

                        long ix2 = @out.Shape.Offset;
                        long outerStride2 = @out.Shape.Dimensions[0].Stride;
                        long innerStride2 = @out.Shape.Dimensions[1].Stride;
                        outerStride2 -= innerStride2 * @out.Shape.Dimensions[1].Length;

                        for (long i = 0; i < opsOuter; i++)
                        {
                            for (long j = 0; j < opsInner; j++)
                            {
                                d2[ix2] = (System.Int32)(Math.Abs(scalar));
                                ix2 += innerStride2;
                            }

                            ix2 += outerStride2;
                        }
                    }
                    else
                    {
                        long n = @out.Shape.Dimensions.LongLength - 3;
                        long[] limits = @out.Shape.Dimensions.Where(x => n-- > 0).Select(x => x.Length).ToArray();
                        long[] counters = new long[limits.LongLength];

                        long totalOps = limits.LongLength == 0 ? 1 : limits.Aggregate<long>((a, b) => a * b);

                        //This chunck of variables are used to prevent repeated calculations of offsets
                        long dimIndex0 = 0 + limits.LongLength;
                        long dimIndex1 = 1 + limits.LongLength;
                        long dimIndex2 = 2 + limits.LongLength;

                        long opsOuter = @out.Shape.Dimensions[0 + limits.LongLength].Length;
                        long opsInner = @out.Shape.Dimensions[1 + limits.LongLength].Length;
                        long opsInnerInner = @out.Shape.Dimensions[2 + limits.LongLength].Length;

                        long outerStride3 = @out.Shape.Dimensions[dimIndex0].Stride;
                        long innerStride3 = @out.Shape.Dimensions[dimIndex1].Stride;
                        long innerInnerStride3 = @out.Shape.Dimensions[dimIndex2].Stride;
                        outerStride3 -= innerStride3 * @out.Shape.Dimensions[dimIndex1].Length;
                        innerStride3 -= innerInnerStride3 * @out.Shape.Dimensions[dimIndex2].Length;

                        for (long outer = 0; outer < totalOps; outer++)
                        {
                            //Get the array offset for the first element in the outer dimension
                            long ix3 = @out.Shape[counters];

                            for (long i = 0; i < opsOuter; i++)
                            {
                                for (long j = 0; j < opsInner; j++)
                                {
                                    for (long k = 0; k < opsInnerInner; k++)
                                    {
                                        d2[ix3] = (System.Int32)(Math.Abs(scalar));
                                        ix3 += innerInnerStride3;
                                    }

                                    ix3 += innerStride3;
                                }

                                ix3 += outerStride3;
                            }

                            if (counters.LongLength > 0)
                            {
                                //Basically a ripple carry adder
                                long p = counters.LongLength - 1;
                                while (++counters[p] == limits[p] && p > 0)
                                {
                                    counters[p] = 0;
                                    p--;
                                }
                            }
                        }
                    }
                }
            }
        }
        /// <summary>
        /// Unsafe implementation of applying a unary operation
        /// </summary>
        /// <typeparam name="C">The type of operation to perform</typeparam>
        /// <param name="op">The operation instance</param>
        /// <param name="in1">The input argument</param>
        /// <param name="out">The output target</param>
        internal static void UFunc_Op_Inner_Unary_Flush_Int64_TypedImpl<C>(NumCIL.Int64.Abs op, NdArray<System.Int64> in1, NdArray<System.Int64> @out)
            where C : IUnaryOp<System.Int64>
        {
            unsafe
            {
                using (var f1 = new Pinner(in1.DataAccessor))
                using (var f2 = new Pinner(@out.DataAccessor))
                {
                    var d1 = (System.Int64*)f1.ptr;
                    var d2 = (System.Int64*)f2.ptr;

                    if (@out.Shape.Dimensions.Length == 1)
                    {
                        long totalOps = @out.Shape.Dimensions[0].Length;

                        long ix1 = in1.Shape.Offset;
                        long ix2 = @out.Shape.Offset;

                        long stride1 = in1.Shape.Dimensions[0].Stride;
                        long stride2 = @out.Shape.Dimensions[0].Stride;


                        if (stride1 == stride2 && ix1 == ix2)
                        {
                            //Best case, all are equal, just keep a single counter
                            for (long i = 0; i < totalOps; i++)
                            {
                                d2[ix1] = (System.Int64)(Math.Abs(d1[ix1]));
                                ix1 += stride1;
                            }
                        }
                        else
                        {
                            for (long i = 0; i < totalOps; i++)
                            {
                                d2[ix2] = (System.Int64)(Math.Abs(d1[ix1]));
                                ix1 += stride1;
                                ix2 += stride2;
                            }
                        }
                    }
                    else if (@out.Shape.Dimensions.Length == 2)
                    {
                        long opsOuter = @out.Shape.Dimensions[0].Length;
                        long opsInner = @out.Shape.Dimensions[1].Length;

                        long ix1 = in1.Shape.Offset;
                        long ix2 = @out.Shape.Offset;

                        long outerStride1 = in1.Shape.Dimensions[0].Stride;
                        long outerStride2 = @out.Shape.Dimensions[0].Stride;

                        long innerStride1 = in1.Shape.Dimensions[1].Stride;
                        long innerStride2 = @out.Shape.Dimensions[1].Stride;

                        outerStride1 -= innerStride1 * in1.Shape.Dimensions[1].Length;
                        outerStride2 -= innerStride2 * @out.Shape.Dimensions[1].Length;

                        for (long i = 0; i < opsOuter; i++)
                        {
                            for (long j = 0; j < opsInner; j++)
                            {
                                d2[ix2] = (System.Int64)(Math.Abs(d1[ix1]));
                                ix1 += innerStride1;
                                ix2 += innerStride2;
                            }

                            ix1 += outerStride1;
                            ix2 += outerStride2;
                        }
                    }
                    else
                    {
                        long n = in1.Shape.Dimensions.LongLength - 3;
                        long[] limits = in1.Shape.Dimensions.Where(x => n-- > 0).Select(x => x.Length).ToArray();
                        long[] counters = new long[limits.LongLength];

                        long totalOps = limits.LongLength == 0 ? 1 : limits.Aggregate<long>((a, b) => a * b);

                        //This chunck of variables are used to prevent repeated calculations of offsets
                        long dimIndex0 = 0 + limits.LongLength;
                        long dimIndex1 = 1 + limits.LongLength;
                        long dimIndex2 = 2 + limits.LongLength;

                        long opsOuter = @out.Shape.Dimensions[0 + limits.LongLength].Length;
                        long opsInner = @out.Shape.Dimensions[1 + limits.LongLength].Length;
                        long opsInnerInner = @out.Shape.Dimensions[2 + limits.LongLength].Length;

                        long outerStride1 = in1.Shape.Dimensions[dimIndex0].Stride;
                        long outerStride3 = @out.Shape.Dimensions[dimIndex0].Stride;

                        long innerStride1 = in1.Shape.Dimensions[dimIndex1].Stride;
                        long innerStride3 = @out.Shape.Dimensions[dimIndex1].Stride;

                        long innerInnerStride1 = in1.Shape.Dimensions[dimIndex2].Stride;
                        long innerInnerStride3 = @out.Shape.Dimensions[dimIndex2].Stride;

                        outerStride1 -= innerStride1 * in1.Shape.Dimensions[dimIndex1].Length;
                        outerStride3 -= innerStride3 * @out.Shape.Dimensions[dimIndex1].Length;

                        innerStride1 -= innerInnerStride1 * in1.Shape.Dimensions[dimIndex2].Length;
                        innerStride3 -= innerInnerStride3 * @out.Shape.Dimensions[dimIndex2].Length;

                        for (long outer = 0; outer < totalOps; outer++)
                        {
                            //Get the array offset for the first element in the outer dimension
                            long ix1 = in1.Shape[counters];
                            long ix3 = @out.Shape[counters];


                            for (long i = 0; i < opsOuter; i++)
                            {
                                for (long j = 0; j < opsInner; j++)
                                {
                                    for (long k = 0; k < opsInnerInner; k++)
                                    {
                                        d2[ix3] = (System.Int64)(Math.Abs(d1[ix1]));
                                        ix1 += innerInnerStride1;
                                        ix3 += innerInnerStride3;
                                    }

                                    ix1 += innerStride1;
                                    ix3 += innerStride3;
                                }

                                ix1 += outerStride1;
                                ix3 += outerStride3;
                            }

                            if (counters.LongLength > 0)
                            {
                                //Basically a ripple carry adder
                                long p = counters.LongLength - 1;
                                while (++counters[p] == limits[p] && p > 0)
                                {
                                    counters[p] = 0;
                                    p--;
                                }
                            }
                        }
                    }
                }
            }
        }

        /// <summary>
        /// Unsafe implementation of applying a unary operation
        /// </summary>
        /// <typeparam name="C">The type of operation to perform</typeparam>
        /// <param name="op">The operation instance</param>
        /// <param name="scalar">The input scalar argument</param>
        /// <param name="out">The output target</param>
        internal static void UFunc_Op_Inner_Unary_Scalar_Flush_Int64_TypedImpl<C>(NumCIL.Int64.Abs op, System.Int64 scalar, NdArray<System.Int64> @out)
            where C : IUnaryOp<System.Int64>
        {
            unsafe
            {
                using (var f2 = new Pinner(@out.DataAccessor))
                {
                    var d2 = (System.Int64*)f2.ptr;

                    if (@out.Shape.Dimensions.Length == 1)
                    {
                        long totalOps = @out.Shape.Dimensions[0].Length;
                        long ix2 = @out.Shape.Offset;
                        long stride2 = @out.Shape.Dimensions[0].Stride;

                        for (long i = 0; i < totalOps; i++)
                        {
                            d2[ix2] = (System.Int64)(Math.Abs(scalar));
                            ix2 += stride2;
                        }
                    }
                    else if (@out.Shape.Dimensions.Length == 2)
                    {
                        long opsOuter = @out.Shape.Dimensions[0].Length;
                        long opsInner = @out.Shape.Dimensions[1].Length;

                        long ix2 = @out.Shape.Offset;
                        long outerStride2 = @out.Shape.Dimensions[0].Stride;
                        long innerStride2 = @out.Shape.Dimensions[1].Stride;
                        outerStride2 -= innerStride2 * @out.Shape.Dimensions[1].Length;

                        for (long i = 0; i < opsOuter; i++)
                        {
                            for (long j = 0; j < opsInner; j++)
                            {
                                d2[ix2] = (System.Int64)(Math.Abs(scalar));
                                ix2 += innerStride2;
                            }

                            ix2 += outerStride2;
                        }
                    }
                    else
                    {
                        long n = @out.Shape.Dimensions.LongLength - 3;
                        long[] limits = @out.Shape.Dimensions.Where(x => n-- > 0).Select(x => x.Length).ToArray();
                        long[] counters = new long[limits.LongLength];

                        long totalOps = limits.LongLength == 0 ? 1 : limits.Aggregate<long>((a, b) => a * b);

                        //This chunck of variables are used to prevent repeated calculations of offsets
                        long dimIndex0 = 0 + limits.LongLength;
                        long dimIndex1 = 1 + limits.LongLength;
                        long dimIndex2 = 2 + limits.LongLength;

                        long opsOuter = @out.Shape.Dimensions[0 + limits.LongLength].Length;
                        long opsInner = @out.Shape.Dimensions[1 + limits.LongLength].Length;
                        long opsInnerInner = @out.Shape.Dimensions[2 + limits.LongLength].Length;

                        long outerStride3 = @out.Shape.Dimensions[dimIndex0].Stride;
                        long innerStride3 = @out.Shape.Dimensions[dimIndex1].Stride;
                        long innerInnerStride3 = @out.Shape.Dimensions[dimIndex2].Stride;
                        outerStride3 -= innerStride3 * @out.Shape.Dimensions[dimIndex1].Length;
                        innerStride3 -= innerInnerStride3 * @out.Shape.Dimensions[dimIndex2].Length;

                        for (long outer = 0; outer < totalOps; outer++)
                        {
                            //Get the array offset for the first element in the outer dimension
                            long ix3 = @out.Shape[counters];

                            for (long i = 0; i < opsOuter; i++)
                            {
                                for (long j = 0; j < opsInner; j++)
                                {
                                    for (long k = 0; k < opsInnerInner; k++)
                                    {
                                        d2[ix3] = (System.Int64)(Math.Abs(scalar));
                                        ix3 += innerInnerStride3;
                                    }

                                    ix3 += innerStride3;
                                }

                                ix3 += outerStride3;
                            }

                            if (counters.LongLength > 0)
                            {
                                //Basically a ripple carry adder
                                long p = counters.LongLength - 1;
                                while (++counters[p] == limits[p] && p > 0)
                                {
                                    counters[p] = 0;
                                    p--;
                                }
                            }
                        }
                    }
                }
            }
        }
        /// <summary>
        /// Unsafe implementation of applying a unary operation
        /// </summary>
        /// <typeparam name="C">The type of operation to perform</typeparam>
        /// <param name="op">The operation instance</param>
        /// <param name="in1">The input argument</param>
        /// <param name="out">The output target</param>
        internal static void UFunc_Op_Inner_Unary_Flush_Single_TypedImpl<C>(NumCIL.Float.Abs op, NdArray<System.Single> in1, NdArray<System.Single> @out)
            where C : IUnaryOp<System.Single>
        {
            unsafe
            {
                using (var f1 = new Pinner(in1.DataAccessor))
                using (var f2 = new Pinner(@out.DataAccessor))
                {
                    var d1 = (System.Single*)f1.ptr;
                    var d2 = (System.Single*)f2.ptr;

                    if (@out.Shape.Dimensions.Length == 1)
                    {
                        long totalOps = @out.Shape.Dimensions[0].Length;

                        long ix1 = in1.Shape.Offset;
                        long ix2 = @out.Shape.Offset;

                        long stride1 = in1.Shape.Dimensions[0].Stride;
                        long stride2 = @out.Shape.Dimensions[0].Stride;


                        if (stride1 == stride2 && ix1 == ix2)
                        {
                            //Best case, all are equal, just keep a single counter
                            for (long i = 0; i < totalOps; i++)
                            {
                                d2[ix1] = (System.Single)(Math.Abs(d1[ix1]));
                                ix1 += stride1;
                            }
                        }
                        else
                        {
                            for (long i = 0; i < totalOps; i++)
                            {
                                d2[ix2] = (System.Single)(Math.Abs(d1[ix1]));
                                ix1 += stride1;
                                ix2 += stride2;
                            }
                        }
                    }
                    else if (@out.Shape.Dimensions.Length == 2)
                    {
                        long opsOuter = @out.Shape.Dimensions[0].Length;
                        long opsInner = @out.Shape.Dimensions[1].Length;

                        long ix1 = in1.Shape.Offset;
                        long ix2 = @out.Shape.Offset;

                        long outerStride1 = in1.Shape.Dimensions[0].Stride;
                        long outerStride2 = @out.Shape.Dimensions[0].Stride;

                        long innerStride1 = in1.Shape.Dimensions[1].Stride;
                        long innerStride2 = @out.Shape.Dimensions[1].Stride;

                        outerStride1 -= innerStride1 * in1.Shape.Dimensions[1].Length;
                        outerStride2 -= innerStride2 * @out.Shape.Dimensions[1].Length;

                        for (long i = 0; i < opsOuter; i++)
                        {
                            for (long j = 0; j < opsInner; j++)
                            {
                                d2[ix2] = (System.Single)(Math.Abs(d1[ix1]));
                                ix1 += innerStride1;
                                ix2 += innerStride2;
                            }

                            ix1 += outerStride1;
                            ix2 += outerStride2;
                        }
                    }
                    else
                    {
                        long n = in1.Shape.Dimensions.LongLength - 3;
                        long[] limits = in1.Shape.Dimensions.Where(x => n-- > 0).Select(x => x.Length).ToArray();
                        long[] counters = new long[limits.LongLength];

                        long totalOps = limits.LongLength == 0 ? 1 : limits.Aggregate<long>((a, b) => a * b);

                        //This chunck of variables are used to prevent repeated calculations of offsets
                        long dimIndex0 = 0 + limits.LongLength;
                        long dimIndex1 = 1 + limits.LongLength;
                        long dimIndex2 = 2 + limits.LongLength;

                        long opsOuter = @out.Shape.Dimensions[0 + limits.LongLength].Length;
                        long opsInner = @out.Shape.Dimensions[1 + limits.LongLength].Length;
                        long opsInnerInner = @out.Shape.Dimensions[2 + limits.LongLength].Length;

                        long outerStride1 = in1.Shape.Dimensions[dimIndex0].Stride;
                        long outerStride3 = @out.Shape.Dimensions[dimIndex0].Stride;

                        long innerStride1 = in1.Shape.Dimensions[dimIndex1].Stride;
                        long innerStride3 = @out.Shape.Dimensions[dimIndex1].Stride;

                        long innerInnerStride1 = in1.Shape.Dimensions[dimIndex2].Stride;
                        long innerInnerStride3 = @out.Shape.Dimensions[dimIndex2].Stride;

                        outerStride1 -= innerStride1 * in1.Shape.Dimensions[dimIndex1].Length;
                        outerStride3 -= innerStride3 * @out.Shape.Dimensions[dimIndex1].Length;

                        innerStride1 -= innerInnerStride1 * in1.Shape.Dimensions[dimIndex2].Length;
                        innerStride3 -= innerInnerStride3 * @out.Shape.Dimensions[dimIndex2].Length;

                        for (long outer = 0; outer < totalOps; outer++)
                        {
                            //Get the array offset for the first element in the outer dimension
                            long ix1 = in1.Shape[counters];
                            long ix3 = @out.Shape[counters];


                            for (long i = 0; i < opsOuter; i++)
                            {
                                for (long j = 0; j < opsInner; j++)
                                {
                                    for (long k = 0; k < opsInnerInner; k++)
                                    {
                                        d2[ix3] = (System.Single)(Math.Abs(d1[ix1]));
                                        ix1 += innerInnerStride1;
                                        ix3 += innerInnerStride3;
                                    }

                                    ix1 += innerStride1;
                                    ix3 += innerStride3;
                                }

                                ix1 += outerStride1;
                                ix3 += outerStride3;
                            }

                            if (counters.LongLength > 0)
                            {
                                //Basically a ripple carry adder
                                long p = counters.LongLength - 1;
                                while (++counters[p] == limits[p] && p > 0)
                                {
                                    counters[p] = 0;
                                    p--;
                                }
                            }
                        }
                    }
                }
            }
        }

        /// <summary>
        /// Unsafe implementation of applying a unary operation
        /// </summary>
        /// <typeparam name="C">The type of operation to perform</typeparam>
        /// <param name="op">The operation instance</param>
        /// <param name="scalar">The input scalar argument</param>
        /// <param name="out">The output target</param>
        internal static void UFunc_Op_Inner_Unary_Scalar_Flush_Single_TypedImpl<C>(NumCIL.Float.Abs op, System.Single scalar, NdArray<System.Single> @out)
            where C : IUnaryOp<System.Single>
        {
            unsafe
            {
                using (var f2 = new Pinner(@out.DataAccessor))
                {
                    var d2 = (System.Single*)f2.ptr;

                    if (@out.Shape.Dimensions.Length == 1)
                    {
                        long totalOps = @out.Shape.Dimensions[0].Length;
                        long ix2 = @out.Shape.Offset;
                        long stride2 = @out.Shape.Dimensions[0].Stride;

                        for (long i = 0; i < totalOps; i++)
                        {
                            d2[ix2] = (System.Single)(Math.Abs(scalar));
                            ix2 += stride2;
                        }
                    }
                    else if (@out.Shape.Dimensions.Length == 2)
                    {
                        long opsOuter = @out.Shape.Dimensions[0].Length;
                        long opsInner = @out.Shape.Dimensions[1].Length;

                        long ix2 = @out.Shape.Offset;
                        long outerStride2 = @out.Shape.Dimensions[0].Stride;
                        long innerStride2 = @out.Shape.Dimensions[1].Stride;
                        outerStride2 -= innerStride2 * @out.Shape.Dimensions[1].Length;

                        for (long i = 0; i < opsOuter; i++)
                        {
                            for (long j = 0; j < opsInner; j++)
                            {
                                d2[ix2] = (System.Single)(Math.Abs(scalar));
                                ix2 += innerStride2;
                            }

                            ix2 += outerStride2;
                        }
                    }
                    else
                    {
                        long n = @out.Shape.Dimensions.LongLength - 3;
                        long[] limits = @out.Shape.Dimensions.Where(x => n-- > 0).Select(x => x.Length).ToArray();
                        long[] counters = new long[limits.LongLength];

                        long totalOps = limits.LongLength == 0 ? 1 : limits.Aggregate<long>((a, b) => a * b);

                        //This chunck of variables are used to prevent repeated calculations of offsets
                        long dimIndex0 = 0 + limits.LongLength;
                        long dimIndex1 = 1 + limits.LongLength;
                        long dimIndex2 = 2 + limits.LongLength;

                        long opsOuter = @out.Shape.Dimensions[0 + limits.LongLength].Length;
                        long opsInner = @out.Shape.Dimensions[1 + limits.LongLength].Length;
                        long opsInnerInner = @out.Shape.Dimensions[2 + limits.LongLength].Length;

                        long outerStride3 = @out.Shape.Dimensions[dimIndex0].Stride;
                        long innerStride3 = @out.Shape.Dimensions[dimIndex1].Stride;
                        long innerInnerStride3 = @out.Shape.Dimensions[dimIndex2].Stride;
                        outerStride3 -= innerStride3 * @out.Shape.Dimensions[dimIndex1].Length;
                        innerStride3 -= innerInnerStride3 * @out.Shape.Dimensions[dimIndex2].Length;

                        for (long outer = 0; outer < totalOps; outer++)
                        {
                            //Get the array offset for the first element in the outer dimension
                            long ix3 = @out.Shape[counters];

                            for (long i = 0; i < opsOuter; i++)
                            {
                                for (long j = 0; j < opsInner; j++)
                                {
                                    for (long k = 0; k < opsInnerInner; k++)
                                    {
                                        d2[ix3] = (System.Single)(Math.Abs(scalar));
                                        ix3 += innerInnerStride3;
                                    }

                                    ix3 += innerStride3;
                                }

                                ix3 += outerStride3;
                            }

                            if (counters.LongLength > 0)
                            {
                                //Basically a ripple carry adder
                                long p = counters.LongLength - 1;
                                while (++counters[p] == limits[p] && p > 0)
                                {
                                    counters[p] = 0;
                                    p--;
                                }
                            }
                        }
                    }
                }
            }
        }
        /// <summary>
        /// Unsafe implementation of applying a unary operation
        /// </summary>
        /// <typeparam name="C">The type of operation to perform</typeparam>
        /// <param name="op">The operation instance</param>
        /// <param name="in1">The input argument</param>
        /// <param name="out">The output target</param>
        internal static void UFunc_Op_Inner_Unary_Flush_Double_TypedImpl<C>(NumCIL.Double.Abs op, NdArray<System.Double> in1, NdArray<System.Double> @out)
            where C : IUnaryOp<System.Double>
        {
            unsafe
            {
                using (var f1 = new Pinner(in1.DataAccessor))
                using (var f2 = new Pinner(@out.DataAccessor))
                {
                    var d1 = (System.Double*)f1.ptr;
                    var d2 = (System.Double*)f2.ptr;

                    if (@out.Shape.Dimensions.Length == 1)
                    {
                        long totalOps = @out.Shape.Dimensions[0].Length;

                        long ix1 = in1.Shape.Offset;
                        long ix2 = @out.Shape.Offset;

                        long stride1 = in1.Shape.Dimensions[0].Stride;
                        long stride2 = @out.Shape.Dimensions[0].Stride;


                        if (stride1 == stride2 && ix1 == ix2)
                        {
                            //Best case, all are equal, just keep a single counter
                            for (long i = 0; i < totalOps; i++)
                            {
                                d2[ix1] = (System.Double)(Math.Abs(d1[ix1]));
                                ix1 += stride1;
                            }
                        }
                        else
                        {
                            for (long i = 0; i < totalOps; i++)
                            {
                                d2[ix2] = (System.Double)(Math.Abs(d1[ix1]));
                                ix1 += stride1;
                                ix2 += stride2;
                            }
                        }
                    }
                    else if (@out.Shape.Dimensions.Length == 2)
                    {
                        long opsOuter = @out.Shape.Dimensions[0].Length;
                        long opsInner = @out.Shape.Dimensions[1].Length;

                        long ix1 = in1.Shape.Offset;
                        long ix2 = @out.Shape.Offset;

                        long outerStride1 = in1.Shape.Dimensions[0].Stride;
                        long outerStride2 = @out.Shape.Dimensions[0].Stride;

                        long innerStride1 = in1.Shape.Dimensions[1].Stride;
                        long innerStride2 = @out.Shape.Dimensions[1].Stride;

                        outerStride1 -= innerStride1 * in1.Shape.Dimensions[1].Length;
                        outerStride2 -= innerStride2 * @out.Shape.Dimensions[1].Length;

                        for (long i = 0; i < opsOuter; i++)
                        {
                            for (long j = 0; j < opsInner; j++)
                            {
                                d2[ix2] = (System.Double)(Math.Abs(d1[ix1]));
                                ix1 += innerStride1;
                                ix2 += innerStride2;
                            }

                            ix1 += outerStride1;
                            ix2 += outerStride2;
                        }
                    }
                    else
                    {
                        long n = in1.Shape.Dimensions.LongLength - 3;
                        long[] limits = in1.Shape.Dimensions.Where(x => n-- > 0).Select(x => x.Length).ToArray();
                        long[] counters = new long[limits.LongLength];

                        long totalOps = limits.LongLength == 0 ? 1 : limits.Aggregate<long>((a, b) => a * b);

                        //This chunck of variables are used to prevent repeated calculations of offsets
                        long dimIndex0 = 0 + limits.LongLength;
                        long dimIndex1 = 1 + limits.LongLength;
                        long dimIndex2 = 2 + limits.LongLength;

                        long opsOuter = @out.Shape.Dimensions[0 + limits.LongLength].Length;
                        long opsInner = @out.Shape.Dimensions[1 + limits.LongLength].Length;
                        long opsInnerInner = @out.Shape.Dimensions[2 + limits.LongLength].Length;

                        long outerStride1 = in1.Shape.Dimensions[dimIndex0].Stride;
                        long outerStride3 = @out.Shape.Dimensions[dimIndex0].Stride;

                        long innerStride1 = in1.Shape.Dimensions[dimIndex1].Stride;
                        long innerStride3 = @out.Shape.Dimensions[dimIndex1].Stride;

                        long innerInnerStride1 = in1.Shape.Dimensions[dimIndex2].Stride;
                        long innerInnerStride3 = @out.Shape.Dimensions[dimIndex2].Stride;

                        outerStride1 -= innerStride1 * in1.Shape.Dimensions[dimIndex1].Length;
                        outerStride3 -= innerStride3 * @out.Shape.Dimensions[dimIndex1].Length;

                        innerStride1 -= innerInnerStride1 * in1.Shape.Dimensions[dimIndex2].Length;
                        innerStride3 -= innerInnerStride3 * @out.Shape.Dimensions[dimIndex2].Length;

                        for (long outer = 0; outer < totalOps; outer++)
                        {
                            //Get the array offset for the first element in the outer dimension
                            long ix1 = in1.Shape[counters];
                            long ix3 = @out.Shape[counters];


                            for (long i = 0; i < opsOuter; i++)
                            {
                                for (long j = 0; j < opsInner; j++)
                                {
                                    for (long k = 0; k < opsInnerInner; k++)
                                    {
                                        d2[ix3] = (System.Double)(Math.Abs(d1[ix1]));
                                        ix1 += innerInnerStride1;
                                        ix3 += innerInnerStride3;
                                    }

                                    ix1 += innerStride1;
                                    ix3 += innerStride3;
                                }

                                ix1 += outerStride1;
                                ix3 += outerStride3;
                            }

                            if (counters.LongLength > 0)
                            {
                                //Basically a ripple carry adder
                                long p = counters.LongLength - 1;
                                while (++counters[p] == limits[p] && p > 0)
                                {
                                    counters[p] = 0;
                                    p--;
                                }
                            }
                        }
                    }
                }
            }
        }

        /// <summary>
        /// Unsafe implementation of applying a unary operation
        /// </summary>
        /// <typeparam name="C">The type of operation to perform</typeparam>
        /// <param name="op">The operation instance</param>
        /// <param name="scalar">The input scalar argument</param>
        /// <param name="out">The output target</param>
        internal static void UFunc_Op_Inner_Unary_Scalar_Flush_Double_TypedImpl<C>(NumCIL.Double.Abs op, System.Double scalar, NdArray<System.Double> @out)
            where C : IUnaryOp<System.Double>
        {
            unsafe
            {
                using (var f2 = new Pinner(@out.DataAccessor))
                {
                    var d2 = (System.Double*)f2.ptr;

                    if (@out.Shape.Dimensions.Length == 1)
                    {
                        long totalOps = @out.Shape.Dimensions[0].Length;
                        long ix2 = @out.Shape.Offset;
                        long stride2 = @out.Shape.Dimensions[0].Stride;

                        for (long i = 0; i < totalOps; i++)
                        {
                            d2[ix2] = (System.Double)(Math.Abs(scalar));
                            ix2 += stride2;
                        }
                    }
                    else if (@out.Shape.Dimensions.Length == 2)
                    {
                        long opsOuter = @out.Shape.Dimensions[0].Length;
                        long opsInner = @out.Shape.Dimensions[1].Length;

                        long ix2 = @out.Shape.Offset;
                        long outerStride2 = @out.Shape.Dimensions[0].Stride;
                        long innerStride2 = @out.Shape.Dimensions[1].Stride;
                        outerStride2 -= innerStride2 * @out.Shape.Dimensions[1].Length;

                        for (long i = 0; i < opsOuter; i++)
                        {
                            for (long j = 0; j < opsInner; j++)
                            {
                                d2[ix2] = (System.Double)(Math.Abs(scalar));
                                ix2 += innerStride2;
                            }

                            ix2 += outerStride2;
                        }
                    }
                    else
                    {
                        long n = @out.Shape.Dimensions.LongLength - 3;
                        long[] limits = @out.Shape.Dimensions.Where(x => n-- > 0).Select(x => x.Length).ToArray();
                        long[] counters = new long[limits.LongLength];

                        long totalOps = limits.LongLength == 0 ? 1 : limits.Aggregate<long>((a, b) => a * b);

                        //This chunck of variables are used to prevent repeated calculations of offsets
                        long dimIndex0 = 0 + limits.LongLength;
                        long dimIndex1 = 1 + limits.LongLength;
                        long dimIndex2 = 2 + limits.LongLength;

                        long opsOuter = @out.Shape.Dimensions[0 + limits.LongLength].Length;
                        long opsInner = @out.Shape.Dimensions[1 + limits.LongLength].Length;
                        long opsInnerInner = @out.Shape.Dimensions[2 + limits.LongLength].Length;

                        long outerStride3 = @out.Shape.Dimensions[dimIndex0].Stride;
                        long innerStride3 = @out.Shape.Dimensions[dimIndex1].Stride;
                        long innerInnerStride3 = @out.Shape.Dimensions[dimIndex2].Stride;
                        outerStride3 -= innerStride3 * @out.Shape.Dimensions[dimIndex1].Length;
                        innerStride3 -= innerInnerStride3 * @out.Shape.Dimensions[dimIndex2].Length;

                        for (long outer = 0; outer < totalOps; outer++)
                        {
                            //Get the array offset for the first element in the outer dimension
                            long ix3 = @out.Shape[counters];

                            for (long i = 0; i < opsOuter; i++)
                            {
                                for (long j = 0; j < opsInner; j++)
                                {
                                    for (long k = 0; k < opsInnerInner; k++)
                                    {
                                        d2[ix3] = (System.Double)(Math.Abs(scalar));
                                        ix3 += innerInnerStride3;
                                    }

                                    ix3 += innerStride3;
                                }

                                ix3 += outerStride3;
                            }

                            if (counters.LongLength > 0)
                            {
                                //Basically a ripple carry adder
                                long p = counters.LongLength - 1;
                                while (++counters[p] == limits[p] && p > 0)
                                {
                                    counters[p] = 0;
                                    p--;
                                }
                            }
                        }
                    }
                }
            }
        }
        /// <summary>
        /// Unsafe implementation of applying a unary operation
        /// </summary>
        /// <typeparam name="C">The type of operation to perform</typeparam>
        /// <param name="op">The operation instance</param>
        /// <param name="in1">The input argument</param>
        /// <param name="out">The output target</param>
        internal static void UFunc_Op_Inner_Unary_Flush_SByte_TypedImpl<C>(NumCIL.Int8.Sin op, NdArray<System.SByte> in1, NdArray<System.SByte> @out)
            where C : IUnaryOp<System.SByte>
        {
            unsafe
            {
                using (var f1 = new Pinner(in1.DataAccessor))
                using (var f2 = new Pinner(@out.DataAccessor))
                {
                    var d1 = (System.SByte*)f1.ptr;
                    var d2 = (System.SByte*)f2.ptr;

                    if (@out.Shape.Dimensions.Length == 1)
                    {
                        long totalOps = @out.Shape.Dimensions[0].Length;

                        long ix1 = in1.Shape.Offset;
                        long ix2 = @out.Shape.Offset;

                        long stride1 = in1.Shape.Dimensions[0].Stride;
                        long stride2 = @out.Shape.Dimensions[0].Stride;


                        if (stride1 == stride2 && ix1 == ix2)
                        {
                            //Best case, all are equal, just keep a single counter
                            for (long i = 0; i < totalOps; i++)
                            {
                                d2[ix1] = (System.SByte)(Math.Sin(d1[ix1]));
                                ix1 += stride1;
                            }
                        }
                        else
                        {
                            for (long i = 0; i < totalOps; i++)
                            {
                                d2[ix2] = (System.SByte)(Math.Sin(d1[ix1]));
                                ix1 += stride1;
                                ix2 += stride2;
                            }
                        }
                    }
                    else if (@out.Shape.Dimensions.Length == 2)
                    {
                        long opsOuter = @out.Shape.Dimensions[0].Length;
                        long opsInner = @out.Shape.Dimensions[1].Length;

                        long ix1 = in1.Shape.Offset;
                        long ix2 = @out.Shape.Offset;

                        long outerStride1 = in1.Shape.Dimensions[0].Stride;
                        long outerStride2 = @out.Shape.Dimensions[0].Stride;

                        long innerStride1 = in1.Shape.Dimensions[1].Stride;
                        long innerStride2 = @out.Shape.Dimensions[1].Stride;

                        outerStride1 -= innerStride1 * in1.Shape.Dimensions[1].Length;
                        outerStride2 -= innerStride2 * @out.Shape.Dimensions[1].Length;

                        for (long i = 0; i < opsOuter; i++)
                        {
                            for (long j = 0; j < opsInner; j++)
                            {
                                d2[ix2] = (System.SByte)(Math.Sin(d1[ix1]));
                                ix1 += innerStride1;
                                ix2 += innerStride2;
                            }

                            ix1 += outerStride1;
                            ix2 += outerStride2;
                        }
                    }
                    else
                    {
                        long n = in1.Shape.Dimensions.LongLength - 3;
                        long[] limits = in1.Shape.Dimensions.Where(x => n-- > 0).Select(x => x.Length).ToArray();
                        long[] counters = new long[limits.LongLength];

                        long totalOps = limits.LongLength == 0 ? 1 : limits.Aggregate<long>((a, b) => a * b);

                        //This chunck of variables are used to prevent repeated calculations of offsets
                        long dimIndex0 = 0 + limits.LongLength;
                        long dimIndex1 = 1 + limits.LongLength;
                        long dimIndex2 = 2 + limits.LongLength;

                        long opsOuter = @out.Shape.Dimensions[0 + limits.LongLength].Length;
                        long opsInner = @out.Shape.Dimensions[1 + limits.LongLength].Length;
                        long opsInnerInner = @out.Shape.Dimensions[2 + limits.LongLength].Length;

                        long outerStride1 = in1.Shape.Dimensions[dimIndex0].Stride;
                        long outerStride3 = @out.Shape.Dimensions[dimIndex0].Stride;

                        long innerStride1 = in1.Shape.Dimensions[dimIndex1].Stride;
                        long innerStride3 = @out.Shape.Dimensions[dimIndex1].Stride;

                        long innerInnerStride1 = in1.Shape.Dimensions[dimIndex2].Stride;
                        long innerInnerStride3 = @out.Shape.Dimensions[dimIndex2].Stride;

                        outerStride1 -= innerStride1 * in1.Shape.Dimensions[dimIndex1].Length;
                        outerStride3 -= innerStride3 * @out.Shape.Dimensions[dimIndex1].Length;

                        innerStride1 -= innerInnerStride1 * in1.Shape.Dimensions[dimIndex2].Length;
                        innerStride3 -= innerInnerStride3 * @out.Shape.Dimensions[dimIndex2].Length;

                        for (long outer = 0; outer < totalOps; outer++)
                        {
                            //Get the array offset for the first element in the outer dimension
                            long ix1 = in1.Shape[counters];
                            long ix3 = @out.Shape[counters];


                            for (long i = 0; i < opsOuter; i++)
                            {
                                for (long j = 0; j < opsInner; j++)
                                {
                                    for (long k = 0; k < opsInnerInner; k++)
                                    {
                                        d2[ix3] = (System.SByte)(Math.Sin(d1[ix1]));
                                        ix1 += innerInnerStride1;
                                        ix3 += innerInnerStride3;
                                    }

                                    ix1 += innerStride1;
                                    ix3 += innerStride3;
                                }

                                ix1 += outerStride1;
                                ix3 += outerStride3;
                            }

                            if (counters.LongLength > 0)
                            {
                                //Basically a ripple carry adder
                                long p = counters.LongLength - 1;
                                while (++counters[p] == limits[p] && p > 0)
                                {
                                    counters[p] = 0;
                                    p--;
                                }
                            }
                        }
                    }
                }
            }
        }

        /// <summary>
        /// Unsafe implementation of applying a unary operation
        /// </summary>
        /// <typeparam name="C">The type of operation to perform</typeparam>
        /// <param name="op">The operation instance</param>
        /// <param name="scalar">The input scalar argument</param>
        /// <param name="out">The output target</param>
        internal static void UFunc_Op_Inner_Unary_Scalar_Flush_SByte_TypedImpl<C>(NumCIL.Int8.Sin op, System.SByte scalar, NdArray<System.SByte> @out)
            where C : IUnaryOp<System.SByte>
        {
            unsafe
            {
                using (var f2 = new Pinner(@out.DataAccessor))
                {
                    var d2 = (System.SByte*)f2.ptr;

                    if (@out.Shape.Dimensions.Length == 1)
                    {
                        long totalOps = @out.Shape.Dimensions[0].Length;
                        long ix2 = @out.Shape.Offset;
                        long stride2 = @out.Shape.Dimensions[0].Stride;

                        for (long i = 0; i < totalOps; i++)
                        {
                            d2[ix2] = (System.SByte)(Math.Sin(scalar));
                            ix2 += stride2;
                        }
                    }
                    else if (@out.Shape.Dimensions.Length == 2)
                    {
                        long opsOuter = @out.Shape.Dimensions[0].Length;
                        long opsInner = @out.Shape.Dimensions[1].Length;

                        long ix2 = @out.Shape.Offset;
                        long outerStride2 = @out.Shape.Dimensions[0].Stride;
                        long innerStride2 = @out.Shape.Dimensions[1].Stride;
                        outerStride2 -= innerStride2 * @out.Shape.Dimensions[1].Length;

                        for (long i = 0; i < opsOuter; i++)
                        {
                            for (long j = 0; j < opsInner; j++)
                            {
                                d2[ix2] = (System.SByte)(Math.Sin(scalar));
                                ix2 += innerStride2;
                            }

                            ix2 += outerStride2;
                        }
                    }
                    else
                    {
                        long n = @out.Shape.Dimensions.LongLength - 3;
                        long[] limits = @out.Shape.Dimensions.Where(x => n-- > 0).Select(x => x.Length).ToArray();
                        long[] counters = new long[limits.LongLength];

                        long totalOps = limits.LongLength == 0 ? 1 : limits.Aggregate<long>((a, b) => a * b);

                        //This chunck of variables are used to prevent repeated calculations of offsets
                        long dimIndex0 = 0 + limits.LongLength;
                        long dimIndex1 = 1 + limits.LongLength;
                        long dimIndex2 = 2 + limits.LongLength;

                        long opsOuter = @out.Shape.Dimensions[0 + limits.LongLength].Length;
                        long opsInner = @out.Shape.Dimensions[1 + limits.LongLength].Length;
                        long opsInnerInner = @out.Shape.Dimensions[2 + limits.LongLength].Length;

                        long outerStride3 = @out.Shape.Dimensions[dimIndex0].Stride;
                        long innerStride3 = @out.Shape.Dimensions[dimIndex1].Stride;
                        long innerInnerStride3 = @out.Shape.Dimensions[dimIndex2].Stride;
                        outerStride3 -= innerStride3 * @out.Shape.Dimensions[dimIndex1].Length;
                        innerStride3 -= innerInnerStride3 * @out.Shape.Dimensions[dimIndex2].Length;

                        for (long outer = 0; outer < totalOps; outer++)
                        {
                            //Get the array offset for the first element in the outer dimension
                            long ix3 = @out.Shape[counters];

                            for (long i = 0; i < opsOuter; i++)
                            {
                                for (long j = 0; j < opsInner; j++)
                                {
                                    for (long k = 0; k < opsInnerInner; k++)
                                    {
                                        d2[ix3] = (System.SByte)(Math.Sin(scalar));
                                        ix3 += innerInnerStride3;
                                    }

                                    ix3 += innerStride3;
                                }

                                ix3 += outerStride3;
                            }

                            if (counters.LongLength > 0)
                            {
                                //Basically a ripple carry adder
                                long p = counters.LongLength - 1;
                                while (++counters[p] == limits[p] && p > 0)
                                {
                                    counters[p] = 0;
                                    p--;
                                }
                            }
                        }
                    }
                }
            }
        }
        /// <summary>
        /// Unsafe implementation of applying a unary operation
        /// </summary>
        /// <typeparam name="C">The type of operation to perform</typeparam>
        /// <param name="op">The operation instance</param>
        /// <param name="in1">The input argument</param>
        /// <param name="out">The output target</param>
        internal static void UFunc_Op_Inner_Unary_Flush_Byte_TypedImpl<C>(NumCIL.UInt8.Sin op, NdArray<System.Byte> in1, NdArray<System.Byte> @out)
            where C : IUnaryOp<System.Byte>
        {
            unsafe
            {
                using (var f1 = new Pinner(in1.DataAccessor))
                using (var f2 = new Pinner(@out.DataAccessor))
                {
                    var d1 = (System.Byte*)f1.ptr;
                    var d2 = (System.Byte*)f2.ptr;

                    if (@out.Shape.Dimensions.Length == 1)
                    {
                        long totalOps = @out.Shape.Dimensions[0].Length;

                        long ix1 = in1.Shape.Offset;
                        long ix2 = @out.Shape.Offset;

                        long stride1 = in1.Shape.Dimensions[0].Stride;
                        long stride2 = @out.Shape.Dimensions[0].Stride;


                        if (stride1 == stride2 && ix1 == ix2)
                        {
                            //Best case, all are equal, just keep a single counter
                            for (long i = 0; i < totalOps; i++)
                            {
                                d2[ix1] = (System.Byte)(Math.Sin(d1[ix1]));
                                ix1 += stride1;
                            }
                        }
                        else
                        {
                            for (long i = 0; i < totalOps; i++)
                            {
                                d2[ix2] = (System.Byte)(Math.Sin(d1[ix1]));
                                ix1 += stride1;
                                ix2 += stride2;
                            }
                        }
                    }
                    else if (@out.Shape.Dimensions.Length == 2)
                    {
                        long opsOuter = @out.Shape.Dimensions[0].Length;
                        long opsInner = @out.Shape.Dimensions[1].Length;

                        long ix1 = in1.Shape.Offset;
                        long ix2 = @out.Shape.Offset;

                        long outerStride1 = in1.Shape.Dimensions[0].Stride;
                        long outerStride2 = @out.Shape.Dimensions[0].Stride;

                        long innerStride1 = in1.Shape.Dimensions[1].Stride;
                        long innerStride2 = @out.Shape.Dimensions[1].Stride;

                        outerStride1 -= innerStride1 * in1.Shape.Dimensions[1].Length;
                        outerStride2 -= innerStride2 * @out.Shape.Dimensions[1].Length;

                        for (long i = 0; i < opsOuter; i++)
                        {
                            for (long j = 0; j < opsInner; j++)
                            {
                                d2[ix2] = (System.Byte)(Math.Sin(d1[ix1]));
                                ix1 += innerStride1;
                                ix2 += innerStride2;
                            }

                            ix1 += outerStride1;
                            ix2 += outerStride2;
                        }
                    }
                    else
                    {
                        long n = in1.Shape.Dimensions.LongLength - 3;
                        long[] limits = in1.Shape.Dimensions.Where(x => n-- > 0).Select(x => x.Length).ToArray();
                        long[] counters = new long[limits.LongLength];

                        long totalOps = limits.LongLength == 0 ? 1 : limits.Aggregate<long>((a, b) => a * b);

                        //This chunck of variables are used to prevent repeated calculations of offsets
                        long dimIndex0 = 0 + limits.LongLength;
                        long dimIndex1 = 1 + limits.LongLength;
                        long dimIndex2 = 2 + limits.LongLength;

                        long opsOuter = @out.Shape.Dimensions[0 + limits.LongLength].Length;
                        long opsInner = @out.Shape.Dimensions[1 + limits.LongLength].Length;
                        long opsInnerInner = @out.Shape.Dimensions[2 + limits.LongLength].Length;

                        long outerStride1 = in1.Shape.Dimensions[dimIndex0].Stride;
                        long outerStride3 = @out.Shape.Dimensions[dimIndex0].Stride;

                        long innerStride1 = in1.Shape.Dimensions[dimIndex1].Stride;
                        long innerStride3 = @out.Shape.Dimensions[dimIndex1].Stride;

                        long innerInnerStride1 = in1.Shape.Dimensions[dimIndex2].Stride;
                        long innerInnerStride3 = @out.Shape.Dimensions[dimIndex2].Stride;

                        outerStride1 -= innerStride1 * in1.Shape.Dimensions[dimIndex1].Length;
                        outerStride3 -= innerStride3 * @out.Shape.Dimensions[dimIndex1].Length;

                        innerStride1 -= innerInnerStride1 * in1.Shape.Dimensions[dimIndex2].Length;
                        innerStride3 -= innerInnerStride3 * @out.Shape.Dimensions[dimIndex2].Length;

                        for (long outer = 0; outer < totalOps; outer++)
                        {
                            //Get the array offset for the first element in the outer dimension
                            long ix1 = in1.Shape[counters];
                            long ix3 = @out.Shape[counters];


                            for (long i = 0; i < opsOuter; i++)
                            {
                                for (long j = 0; j < opsInner; j++)
                                {
                                    for (long k = 0; k < opsInnerInner; k++)
                                    {
                                        d2[ix3] = (System.Byte)(Math.Sin(d1[ix1]));
                                        ix1 += innerInnerStride1;
                                        ix3 += innerInnerStride3;
                                    }

                                    ix1 += innerStride1;
                                    ix3 += innerStride3;
                                }

                                ix1 += outerStride1;
                                ix3 += outerStride3;
                            }

                            if (counters.LongLength > 0)
                            {
                                //Basically a ripple carry adder
                                long p = counters.LongLength - 1;
                                while (++counters[p] == limits[p] && p > 0)
                                {
                                    counters[p] = 0;
                                    p--;
                                }
                            }
                        }
                    }
                }
            }
        }

        /// <summary>
        /// Unsafe implementation of applying a unary operation
        /// </summary>
        /// <typeparam name="C">The type of operation to perform</typeparam>
        /// <param name="op">The operation instance</param>
        /// <param name="scalar">The input scalar argument</param>
        /// <param name="out">The output target</param>
        internal static void UFunc_Op_Inner_Unary_Scalar_Flush_Byte_TypedImpl<C>(NumCIL.UInt8.Sin op, System.Byte scalar, NdArray<System.Byte> @out)
            where C : IUnaryOp<System.Byte>
        {
            unsafe
            {
                using (var f2 = new Pinner(@out.DataAccessor))
                {
                    var d2 = (System.Byte*)f2.ptr;

                    if (@out.Shape.Dimensions.Length == 1)
                    {
                        long totalOps = @out.Shape.Dimensions[0].Length;
                        long ix2 = @out.Shape.Offset;
                        long stride2 = @out.Shape.Dimensions[0].Stride;

                        for (long i = 0; i < totalOps; i++)
                        {
                            d2[ix2] = (System.Byte)(Math.Sin(scalar));
                            ix2 += stride2;
                        }
                    }
                    else if (@out.Shape.Dimensions.Length == 2)
                    {
                        long opsOuter = @out.Shape.Dimensions[0].Length;
                        long opsInner = @out.Shape.Dimensions[1].Length;

                        long ix2 = @out.Shape.Offset;
                        long outerStride2 = @out.Shape.Dimensions[0].Stride;
                        long innerStride2 = @out.Shape.Dimensions[1].Stride;
                        outerStride2 -= innerStride2 * @out.Shape.Dimensions[1].Length;

                        for (long i = 0; i < opsOuter; i++)
                        {
                            for (long j = 0; j < opsInner; j++)
                            {
                                d2[ix2] = (System.Byte)(Math.Sin(scalar));
                                ix2 += innerStride2;
                            }

                            ix2 += outerStride2;
                        }
                    }
                    else
                    {
                        long n = @out.Shape.Dimensions.LongLength - 3;
                        long[] limits = @out.Shape.Dimensions.Where(x => n-- > 0).Select(x => x.Length).ToArray();
                        long[] counters = new long[limits.LongLength];

                        long totalOps = limits.LongLength == 0 ? 1 : limits.Aggregate<long>((a, b) => a * b);

                        //This chunck of variables are used to prevent repeated calculations of offsets
                        long dimIndex0 = 0 + limits.LongLength;
                        long dimIndex1 = 1 + limits.LongLength;
                        long dimIndex2 = 2 + limits.LongLength;

                        long opsOuter = @out.Shape.Dimensions[0 + limits.LongLength].Length;
                        long opsInner = @out.Shape.Dimensions[1 + limits.LongLength].Length;
                        long opsInnerInner = @out.Shape.Dimensions[2 + limits.LongLength].Length;

                        long outerStride3 = @out.Shape.Dimensions[dimIndex0].Stride;
                        long innerStride3 = @out.Shape.Dimensions[dimIndex1].Stride;
                        long innerInnerStride3 = @out.Shape.Dimensions[dimIndex2].Stride;
                        outerStride3 -= innerStride3 * @out.Shape.Dimensions[dimIndex1].Length;
                        innerStride3 -= innerInnerStride3 * @out.Shape.Dimensions[dimIndex2].Length;

                        for (long outer = 0; outer < totalOps; outer++)
                        {
                            //Get the array offset for the first element in the outer dimension
                            long ix3 = @out.Shape[counters];

                            for (long i = 0; i < opsOuter; i++)
                            {
                                for (long j = 0; j < opsInner; j++)
                                {
                                    for (long k = 0; k < opsInnerInner; k++)
                                    {
                                        d2[ix3] = (System.Byte)(Math.Sin(scalar));
                                        ix3 += innerInnerStride3;
                                    }

                                    ix3 += innerStride3;
                                }

                                ix3 += outerStride3;
                            }

                            if (counters.LongLength > 0)
                            {
                                //Basically a ripple carry adder
                                long p = counters.LongLength - 1;
                                while (++counters[p] == limits[p] && p > 0)
                                {
                                    counters[p] = 0;
                                    p--;
                                }
                            }
                        }
                    }
                }
            }
        }
        /// <summary>
        /// Unsafe implementation of applying a unary operation
        /// </summary>
        /// <typeparam name="C">The type of operation to perform</typeparam>
        /// <param name="op">The operation instance</param>
        /// <param name="in1">The input argument</param>
        /// <param name="out">The output target</param>
        internal static void UFunc_Op_Inner_Unary_Flush_Int16_TypedImpl<C>(NumCIL.Int16.Sin op, NdArray<System.Int16> in1, NdArray<System.Int16> @out)
            where C : IUnaryOp<System.Int16>
        {
            unsafe
            {
                using (var f1 = new Pinner(in1.DataAccessor))
                using (var f2 = new Pinner(@out.DataAccessor))
                {
                    var d1 = (System.Int16*)f1.ptr;
                    var d2 = (System.Int16*)f2.ptr;

                    if (@out.Shape.Dimensions.Length == 1)
                    {
                        long totalOps = @out.Shape.Dimensions[0].Length;

                        long ix1 = in1.Shape.Offset;
                        long ix2 = @out.Shape.Offset;

                        long stride1 = in1.Shape.Dimensions[0].Stride;
                        long stride2 = @out.Shape.Dimensions[0].Stride;


                        if (stride1 == stride2 && ix1 == ix2)
                        {
                            //Best case, all are equal, just keep a single counter
                            for (long i = 0; i < totalOps; i++)
                            {
                                d2[ix1] = (System.Int16)(Math.Sin(d1[ix1]));
                                ix1 += stride1;
                            }
                        }
                        else
                        {
                            for (long i = 0; i < totalOps; i++)
                            {
                                d2[ix2] = (System.Int16)(Math.Sin(d1[ix1]));
                                ix1 += stride1;
                                ix2 += stride2;
                            }
                        }
                    }
                    else if (@out.Shape.Dimensions.Length == 2)
                    {
                        long opsOuter = @out.Shape.Dimensions[0].Length;
                        long opsInner = @out.Shape.Dimensions[1].Length;

                        long ix1 = in1.Shape.Offset;
                        long ix2 = @out.Shape.Offset;

                        long outerStride1 = in1.Shape.Dimensions[0].Stride;
                        long outerStride2 = @out.Shape.Dimensions[0].Stride;

                        long innerStride1 = in1.Shape.Dimensions[1].Stride;
                        long innerStride2 = @out.Shape.Dimensions[1].Stride;

                        outerStride1 -= innerStride1 * in1.Shape.Dimensions[1].Length;
                        outerStride2 -= innerStride2 * @out.Shape.Dimensions[1].Length;

                        for (long i = 0; i < opsOuter; i++)
                        {
                            for (long j = 0; j < opsInner; j++)
                            {
                                d2[ix2] = (System.Int16)(Math.Sin(d1[ix1]));
                                ix1 += innerStride1;
                                ix2 += innerStride2;
                            }

                            ix1 += outerStride1;
                            ix2 += outerStride2;
                        }
                    }
                    else
                    {
                        long n = in1.Shape.Dimensions.LongLength - 3;
                        long[] limits = in1.Shape.Dimensions.Where(x => n-- > 0).Select(x => x.Length).ToArray();
                        long[] counters = new long[limits.LongLength];

                        long totalOps = limits.LongLength == 0 ? 1 : limits.Aggregate<long>((a, b) => a * b);

                        //This chunck of variables are used to prevent repeated calculations of offsets
                        long dimIndex0 = 0 + limits.LongLength;
                        long dimIndex1 = 1 + limits.LongLength;
                        long dimIndex2 = 2 + limits.LongLength;

                        long opsOuter = @out.Shape.Dimensions[0 + limits.LongLength].Length;
                        long opsInner = @out.Shape.Dimensions[1 + limits.LongLength].Length;
                        long opsInnerInner = @out.Shape.Dimensions[2 + limits.LongLength].Length;

                        long outerStride1 = in1.Shape.Dimensions[dimIndex0].Stride;
                        long outerStride3 = @out.Shape.Dimensions[dimIndex0].Stride;

                        long innerStride1 = in1.Shape.Dimensions[dimIndex1].Stride;
                        long innerStride3 = @out.Shape.Dimensions[dimIndex1].Stride;

                        long innerInnerStride1 = in1.Shape.Dimensions[dimIndex2].Stride;
                        long innerInnerStride3 = @out.Shape.Dimensions[dimIndex2].Stride;

                        outerStride1 -= innerStride1 * in1.Shape.Dimensions[dimIndex1].Length;
                        outerStride3 -= innerStride3 * @out.Shape.Dimensions[dimIndex1].Length;

                        innerStride1 -= innerInnerStride1 * in1.Shape.Dimensions[dimIndex2].Length;
                        innerStride3 -= innerInnerStride3 * @out.Shape.Dimensions[dimIndex2].Length;

                        for (long outer = 0; outer < totalOps; outer++)
                        {
                            //Get the array offset for the first element in the outer dimension
                            long ix1 = in1.Shape[counters];
                            long ix3 = @out.Shape[counters];


                            for (long i = 0; i < opsOuter; i++)
                            {
                                for (long j = 0; j < opsInner; j++)
                                {
                                    for (long k = 0; k < opsInnerInner; k++)
                                    {
                                        d2[ix3] = (System.Int16)(Math.Sin(d1[ix1]));
                                        ix1 += innerInnerStride1;
                                        ix3 += innerInnerStride3;
                                    }

                                    ix1 += innerStride1;
                                    ix3 += innerStride3;
                                }

                                ix1 += outerStride1;
                                ix3 += outerStride3;
                            }

                            if (counters.LongLength > 0)
                            {
                                //Basically a ripple carry adder
                                long p = counters.LongLength - 1;
                                while (++counters[p] == limits[p] && p > 0)
                                {
                                    counters[p] = 0;
                                    p--;
                                }
                            }
                        }
                    }
                }
            }
        }

        /// <summary>
        /// Unsafe implementation of applying a unary operation
        /// </summary>
        /// <typeparam name="C">The type of operation to perform</typeparam>
        /// <param name="op">The operation instance</param>
        /// <param name="scalar">The input scalar argument</param>
        /// <param name="out">The output target</param>
        internal static void UFunc_Op_Inner_Unary_Scalar_Flush_Int16_TypedImpl<C>(NumCIL.Int16.Sin op, System.Int16 scalar, NdArray<System.Int16> @out)
            where C : IUnaryOp<System.Int16>
        {
            unsafe
            {
                using (var f2 = new Pinner(@out.DataAccessor))
                {
                    var d2 = (System.Int16*)f2.ptr;

                    if (@out.Shape.Dimensions.Length == 1)
                    {
                        long totalOps = @out.Shape.Dimensions[0].Length;
                        long ix2 = @out.Shape.Offset;
                        long stride2 = @out.Shape.Dimensions[0].Stride;

                        for (long i = 0; i < totalOps; i++)
                        {
                            d2[ix2] = (System.Int16)(Math.Sin(scalar));
                            ix2 += stride2;
                        }
                    }
                    else if (@out.Shape.Dimensions.Length == 2)
                    {
                        long opsOuter = @out.Shape.Dimensions[0].Length;
                        long opsInner = @out.Shape.Dimensions[1].Length;

                        long ix2 = @out.Shape.Offset;
                        long outerStride2 = @out.Shape.Dimensions[0].Stride;
                        long innerStride2 = @out.Shape.Dimensions[1].Stride;
                        outerStride2 -= innerStride2 * @out.Shape.Dimensions[1].Length;

                        for (long i = 0; i < opsOuter; i++)
                        {
                            for (long j = 0; j < opsInner; j++)
                            {
                                d2[ix2] = (System.Int16)(Math.Sin(scalar));
                                ix2 += innerStride2;
                            }

                            ix2 += outerStride2;
                        }
                    }
                    else
                    {
                        long n = @out.Shape.Dimensions.LongLength - 3;
                        long[] limits = @out.Shape.Dimensions.Where(x => n-- > 0).Select(x => x.Length).ToArray();
                        long[] counters = new long[limits.LongLength];

                        long totalOps = limits.LongLength == 0 ? 1 : limits.Aggregate<long>((a, b) => a * b);

                        //This chunck of variables are used to prevent repeated calculations of offsets
                        long dimIndex0 = 0 + limits.LongLength;
                        long dimIndex1 = 1 + limits.LongLength;
                        long dimIndex2 = 2 + limits.LongLength;

                        long opsOuter = @out.Shape.Dimensions[0 + limits.LongLength].Length;
                        long opsInner = @out.Shape.Dimensions[1 + limits.LongLength].Length;
                        long opsInnerInner = @out.Shape.Dimensions[2 + limits.LongLength].Length;

                        long outerStride3 = @out.Shape.Dimensions[dimIndex0].Stride;
                        long innerStride3 = @out.Shape.Dimensions[dimIndex1].Stride;
                        long innerInnerStride3 = @out.Shape.Dimensions[dimIndex2].Stride;
                        outerStride3 -= innerStride3 * @out.Shape.Dimensions[dimIndex1].Length;
                        innerStride3 -= innerInnerStride3 * @out.Shape.Dimensions[dimIndex2].Length;

                        for (long outer = 0; outer < totalOps; outer++)
                        {
                            //Get the array offset for the first element in the outer dimension
                            long ix3 = @out.Shape[counters];

                            for (long i = 0; i < opsOuter; i++)
                            {
                                for (long j = 0; j < opsInner; j++)
                                {
                                    for (long k = 0; k < opsInnerInner; k++)
                                    {
                                        d2[ix3] = (System.Int16)(Math.Sin(scalar));
                                        ix3 += innerInnerStride3;
                                    }

                                    ix3 += innerStride3;
                                }

                                ix3 += outerStride3;
                            }

                            if (counters.LongLength > 0)
                            {
                                //Basically a ripple carry adder
                                long p = counters.LongLength - 1;
                                while (++counters[p] == limits[p] && p > 0)
                                {
                                    counters[p] = 0;
                                    p--;
                                }
                            }
                        }
                    }
                }
            }
        }
        /// <summary>
        /// Unsafe implementation of applying a unary operation
        /// </summary>
        /// <typeparam name="C">The type of operation to perform</typeparam>
        /// <param name="op">The operation instance</param>
        /// <param name="in1">The input argument</param>
        /// <param name="out">The output target</param>
        internal static void UFunc_Op_Inner_Unary_Flush_UInt16_TypedImpl<C>(NumCIL.UInt16.Sin op, NdArray<System.UInt16> in1, NdArray<System.UInt16> @out)
            where C : IUnaryOp<System.UInt16>
        {
            unsafe
            {
                using (var f1 = new Pinner(in1.DataAccessor))
                using (var f2 = new Pinner(@out.DataAccessor))
                {
                    var d1 = (System.UInt16*)f1.ptr;
                    var d2 = (System.UInt16*)f2.ptr;

                    if (@out.Shape.Dimensions.Length == 1)
                    {
                        long totalOps = @out.Shape.Dimensions[0].Length;

                        long ix1 = in1.Shape.Offset;
                        long ix2 = @out.Shape.Offset;

                        long stride1 = in1.Shape.Dimensions[0].Stride;
                        long stride2 = @out.Shape.Dimensions[0].Stride;


                        if (stride1 == stride2 && ix1 == ix2)
                        {
                            //Best case, all are equal, just keep a single counter
                            for (long i = 0; i < totalOps; i++)
                            {
                                d2[ix1] = (System.UInt16)(Math.Sin(d1[ix1]));
                                ix1 += stride1;
                            }
                        }
                        else
                        {
                            for (long i = 0; i < totalOps; i++)
                            {
                                d2[ix2] = (System.UInt16)(Math.Sin(d1[ix1]));
                                ix1 += stride1;
                                ix2 += stride2;
                            }
                        }
                    }
                    else if (@out.Shape.Dimensions.Length == 2)
                    {
                        long opsOuter = @out.Shape.Dimensions[0].Length;
                        long opsInner = @out.Shape.Dimensions[1].Length;

                        long ix1 = in1.Shape.Offset;
                        long ix2 = @out.Shape.Offset;

                        long outerStride1 = in1.Shape.Dimensions[0].Stride;
                        long outerStride2 = @out.Shape.Dimensions[0].Stride;

                        long innerStride1 = in1.Shape.Dimensions[1].Stride;
                        long innerStride2 = @out.Shape.Dimensions[1].Stride;

                        outerStride1 -= innerStride1 * in1.Shape.Dimensions[1].Length;
                        outerStride2 -= innerStride2 * @out.Shape.Dimensions[1].Length;

                        for (long i = 0; i < opsOuter; i++)
                        {
                            for (long j = 0; j < opsInner; j++)
                            {
                                d2[ix2] = (System.UInt16)(Math.Sin(d1[ix1]));
                                ix1 += innerStride1;
                                ix2 += innerStride2;
                            }

                            ix1 += outerStride1;
                            ix2 += outerStride2;
                        }
                    }
                    else
                    {
                        long n = in1.Shape.Dimensions.LongLength - 3;
                        long[] limits = in1.Shape.Dimensions.Where(x => n-- > 0).Select(x => x.Length).ToArray();
                        long[] counters = new long[limits.LongLength];

                        long totalOps = limits.LongLength == 0 ? 1 : limits.Aggregate<long>((a, b) => a * b);

                        //This chunck of variables are used to prevent repeated calculations of offsets
                        long dimIndex0 = 0 + limits.LongLength;
                        long dimIndex1 = 1 + limits.LongLength;
                        long dimIndex2 = 2 + limits.LongLength;

                        long opsOuter = @out.Shape.Dimensions[0 + limits.LongLength].Length;
                        long opsInner = @out.Shape.Dimensions[1 + limits.LongLength].Length;
                        long opsInnerInner = @out.Shape.Dimensions[2 + limits.LongLength].Length;

                        long outerStride1 = in1.Shape.Dimensions[dimIndex0].Stride;
                        long outerStride3 = @out.Shape.Dimensions[dimIndex0].Stride;

                        long innerStride1 = in1.Shape.Dimensions[dimIndex1].Stride;
                        long innerStride3 = @out.Shape.Dimensions[dimIndex1].Stride;

                        long innerInnerStride1 = in1.Shape.Dimensions[dimIndex2].Stride;
                        long innerInnerStride3 = @out.Shape.Dimensions[dimIndex2].Stride;

                        outerStride1 -= innerStride1 * in1.Shape.Dimensions[dimIndex1].Length;
                        outerStride3 -= innerStride3 * @out.Shape.Dimensions[dimIndex1].Length;

                        innerStride1 -= innerInnerStride1 * in1.Shape.Dimensions[dimIndex2].Length;
                        innerStride3 -= innerInnerStride3 * @out.Shape.Dimensions[dimIndex2].Length;

                        for (long outer = 0; outer < totalOps; outer++)
                        {
                            //Get the array offset for the first element in the outer dimension
                            long ix1 = in1.Shape[counters];
                            long ix3 = @out.Shape[counters];


                            for (long i = 0; i < opsOuter; i++)
                            {
                                for (long j = 0; j < opsInner; j++)
                                {
                                    for (long k = 0; k < opsInnerInner; k++)
                                    {
                                        d2[ix3] = (System.UInt16)(Math.Sin(d1[ix1]));
                                        ix1 += innerInnerStride1;
                                        ix3 += innerInnerStride3;
                                    }

                                    ix1 += innerStride1;
                                    ix3 += innerStride3;
                                }

                                ix1 += outerStride1;
                                ix3 += outerStride3;
                            }

                            if (counters.LongLength > 0)
                            {
                                //Basically a ripple carry adder
                                long p = counters.LongLength - 1;
                                while (++counters[p] == limits[p] && p > 0)
                                {
                                    counters[p] = 0;
                                    p--;
                                }
                            }
                        }
                    }
                }
            }
        }

        /// <summary>
        /// Unsafe implementation of applying a unary operation
        /// </summary>
        /// <typeparam name="C">The type of operation to perform</typeparam>
        /// <param name="op">The operation instance</param>
        /// <param name="scalar">The input scalar argument</param>
        /// <param name="out">The output target</param>
        internal static void UFunc_Op_Inner_Unary_Scalar_Flush_UInt16_TypedImpl<C>(NumCIL.UInt16.Sin op, System.UInt16 scalar, NdArray<System.UInt16> @out)
            where C : IUnaryOp<System.UInt16>
        {
            unsafe
            {
                using (var f2 = new Pinner(@out.DataAccessor))
                {
                    var d2 = (System.UInt16*)f2.ptr;

                    if (@out.Shape.Dimensions.Length == 1)
                    {
                        long totalOps = @out.Shape.Dimensions[0].Length;
                        long ix2 = @out.Shape.Offset;
                        long stride2 = @out.Shape.Dimensions[0].Stride;

                        for (long i = 0; i < totalOps; i++)
                        {
                            d2[ix2] = (System.UInt16)(Math.Sin(scalar));
                            ix2 += stride2;
                        }
                    }
                    else if (@out.Shape.Dimensions.Length == 2)
                    {
                        long opsOuter = @out.Shape.Dimensions[0].Length;
                        long opsInner = @out.Shape.Dimensions[1].Length;

                        long ix2 = @out.Shape.Offset;
                        long outerStride2 = @out.Shape.Dimensions[0].Stride;
                        long innerStride2 = @out.Shape.Dimensions[1].Stride;
                        outerStride2 -= innerStride2 * @out.Shape.Dimensions[1].Length;

                        for (long i = 0; i < opsOuter; i++)
                        {
                            for (long j = 0; j < opsInner; j++)
                            {
                                d2[ix2] = (System.UInt16)(Math.Sin(scalar));
                                ix2 += innerStride2;
                            }

                            ix2 += outerStride2;
                        }
                    }
                    else
                    {
                        long n = @out.Shape.Dimensions.LongLength - 3;
                        long[] limits = @out.Shape.Dimensions.Where(x => n-- > 0).Select(x => x.Length).ToArray();
                        long[] counters = new long[limits.LongLength];

                        long totalOps = limits.LongLength == 0 ? 1 : limits.Aggregate<long>((a, b) => a * b);

                        //This chunck of variables are used to prevent repeated calculations of offsets
                        long dimIndex0 = 0 + limits.LongLength;
                        long dimIndex1 = 1 + limits.LongLength;
                        long dimIndex2 = 2 + limits.LongLength;

                        long opsOuter = @out.Shape.Dimensions[0 + limits.LongLength].Length;
                        long opsInner = @out.Shape.Dimensions[1 + limits.LongLength].Length;
                        long opsInnerInner = @out.Shape.Dimensions[2 + limits.LongLength].Length;

                        long outerStride3 = @out.Shape.Dimensions[dimIndex0].Stride;
                        long innerStride3 = @out.Shape.Dimensions[dimIndex1].Stride;
                        long innerInnerStride3 = @out.Shape.Dimensions[dimIndex2].Stride;
                        outerStride3 -= innerStride3 * @out.Shape.Dimensions[dimIndex1].Length;
                        innerStride3 -= innerInnerStride3 * @out.Shape.Dimensions[dimIndex2].Length;

                        for (long outer = 0; outer < totalOps; outer++)
                        {
                            //Get the array offset for the first element in the outer dimension
                            long ix3 = @out.Shape[counters];

                            for (long i = 0; i < opsOuter; i++)
                            {
                                for (long j = 0; j < opsInner; j++)
                                {
                                    for (long k = 0; k < opsInnerInner; k++)
                                    {
                                        d2[ix3] = (System.UInt16)(Math.Sin(scalar));
                                        ix3 += innerInnerStride3;
                                    }

                                    ix3 += innerStride3;
                                }

                                ix3 += outerStride3;
                            }

                            if (counters.LongLength > 0)
                            {
                                //Basically a ripple carry adder
                                long p = counters.LongLength - 1;
                                while (++counters[p] == limits[p] && p > 0)
                                {
                                    counters[p] = 0;
                                    p--;
                                }
                            }
                        }
                    }
                }
            }
        }
        /// <summary>
        /// Unsafe implementation of applying a unary operation
        /// </summary>
        /// <typeparam name="C">The type of operation to perform</typeparam>
        /// <param name="op">The operation instance</param>
        /// <param name="in1">The input argument</param>
        /// <param name="out">The output target</param>
        internal static void UFunc_Op_Inner_Unary_Flush_Int32_TypedImpl<C>(NumCIL.Int32.Sin op, NdArray<System.Int32> in1, NdArray<System.Int32> @out)
            where C : IUnaryOp<System.Int32>
        {
            unsafe
            {
                using (var f1 = new Pinner(in1.DataAccessor))
                using (var f2 = new Pinner(@out.DataAccessor))
                {
                    var d1 = (System.Int32*)f1.ptr;
                    var d2 = (System.Int32*)f2.ptr;

                    if (@out.Shape.Dimensions.Length == 1)
                    {
                        long totalOps = @out.Shape.Dimensions[0].Length;

                        long ix1 = in1.Shape.Offset;
                        long ix2 = @out.Shape.Offset;

                        long stride1 = in1.Shape.Dimensions[0].Stride;
                        long stride2 = @out.Shape.Dimensions[0].Stride;


                        if (stride1 == stride2 && ix1 == ix2)
                        {
                            //Best case, all are equal, just keep a single counter
                            for (long i = 0; i < totalOps; i++)
                            {
                                d2[ix1] = (System.Int32)(Math.Sin(d1[ix1]));
                                ix1 += stride1;
                            }
                        }
                        else
                        {
                            for (long i = 0; i < totalOps; i++)
                            {
                                d2[ix2] = (System.Int32)(Math.Sin(d1[ix1]));
                                ix1 += stride1;
                                ix2 += stride2;
                            }
                        }
                    }
                    else if (@out.Shape.Dimensions.Length == 2)
                    {
                        long opsOuter = @out.Shape.Dimensions[0].Length;
                        long opsInner = @out.Shape.Dimensions[1].Length;

                        long ix1 = in1.Shape.Offset;
                        long ix2 = @out.Shape.Offset;

                        long outerStride1 = in1.Shape.Dimensions[0].Stride;
                        long outerStride2 = @out.Shape.Dimensions[0].Stride;

                        long innerStride1 = in1.Shape.Dimensions[1].Stride;
                        long innerStride2 = @out.Shape.Dimensions[1].Stride;

                        outerStride1 -= innerStride1 * in1.Shape.Dimensions[1].Length;
                        outerStride2 -= innerStride2 * @out.Shape.Dimensions[1].Length;

                        for (long i = 0; i < opsOuter; i++)
                        {
                            for (long j = 0; j < opsInner; j++)
                            {
                                d2[ix2] = (System.Int32)(Math.Sin(d1[ix1]));
                                ix1 += innerStride1;
                                ix2 += innerStride2;
                            }

                            ix1 += outerStride1;
                            ix2 += outerStride2;
                        }
                    }
                    else
                    {
                        long n = in1.Shape.Dimensions.LongLength - 3;
                        long[] limits = in1.Shape.Dimensions.Where(x => n-- > 0).Select(x => x.Length).ToArray();
                        long[] counters = new long[limits.LongLength];

                        long totalOps = limits.LongLength == 0 ? 1 : limits.Aggregate<long>((a, b) => a * b);

                        //This chunck of variables are used to prevent repeated calculations of offsets
                        long dimIndex0 = 0 + limits.LongLength;
                        long dimIndex1 = 1 + limits.LongLength;
                        long dimIndex2 = 2 + limits.LongLength;

                        long opsOuter = @out.Shape.Dimensions[0 + limits.LongLength].Length;
                        long opsInner = @out.Shape.Dimensions[1 + limits.LongLength].Length;
                        long opsInnerInner = @out.Shape.Dimensions[2 + limits.LongLength].Length;

                        long outerStride1 = in1.Shape.Dimensions[dimIndex0].Stride;
                        long outerStride3 = @out.Shape.Dimensions[dimIndex0].Stride;

                        long innerStride1 = in1.Shape.Dimensions[dimIndex1].Stride;
                        long innerStride3 = @out.Shape.Dimensions[dimIndex1].Stride;

                        long innerInnerStride1 = in1.Shape.Dimensions[dimIndex2].Stride;
                        long innerInnerStride3 = @out.Shape.Dimensions[dimIndex2].Stride;

                        outerStride1 -= innerStride1 * in1.Shape.Dimensions[dimIndex1].Length;
                        outerStride3 -= innerStride3 * @out.Shape.Dimensions[dimIndex1].Length;

                        innerStride1 -= innerInnerStride1 * in1.Shape.Dimensions[dimIndex2].Length;
                        innerStride3 -= innerInnerStride3 * @out.Shape.Dimensions[dimIndex2].Length;

                        for (long outer = 0; outer < totalOps; outer++)
                        {
                            //Get the array offset for the first element in the outer dimension
                            long ix1 = in1.Shape[counters];
                            long ix3 = @out.Shape[counters];


                            for (long i = 0; i < opsOuter; i++)
                            {
                                for (long j = 0; j < opsInner; j++)
                                {
                                    for (long k = 0; k < opsInnerInner; k++)
                                    {
                                        d2[ix3] = (System.Int32)(Math.Sin(d1[ix1]));
                                        ix1 += innerInnerStride1;
                                        ix3 += innerInnerStride3;
                                    }

                                    ix1 += innerStride1;
                                    ix3 += innerStride3;
                                }

                                ix1 += outerStride1;
                                ix3 += outerStride3;
                            }

                            if (counters.LongLength > 0)
                            {
                                //Basically a ripple carry adder
                                long p = counters.LongLength - 1;
                                while (++counters[p] == limits[p] && p > 0)
                                {
                                    counters[p] = 0;
                                    p--;
                                }
                            }
                        }
                    }
                }
            }
        }

        /// <summary>
        /// Unsafe implementation of applying a unary operation
        /// </summary>
        /// <typeparam name="C">The type of operation to perform</typeparam>
        /// <param name="op">The operation instance</param>
        /// <param name="scalar">The input scalar argument</param>
        /// <param name="out">The output target</param>
        internal static void UFunc_Op_Inner_Unary_Scalar_Flush_Int32_TypedImpl<C>(NumCIL.Int32.Sin op, System.Int32 scalar, NdArray<System.Int32> @out)
            where C : IUnaryOp<System.Int32>
        {
            unsafe
            {
                using (var f2 = new Pinner(@out.DataAccessor))
                {
                    var d2 = (System.Int32*)f2.ptr;

                    if (@out.Shape.Dimensions.Length == 1)
                    {
                        long totalOps = @out.Shape.Dimensions[0].Length;
                        long ix2 = @out.Shape.Offset;
                        long stride2 = @out.Shape.Dimensions[0].Stride;

                        for (long i = 0; i < totalOps; i++)
                        {
                            d2[ix2] = (System.Int32)(Math.Sin(scalar));
                            ix2 += stride2;
                        }
                    }
                    else if (@out.Shape.Dimensions.Length == 2)
                    {
                        long opsOuter = @out.Shape.Dimensions[0].Length;
                        long opsInner = @out.Shape.Dimensions[1].Length;

                        long ix2 = @out.Shape.Offset;
                        long outerStride2 = @out.Shape.Dimensions[0].Stride;
                        long innerStride2 = @out.Shape.Dimensions[1].Stride;
                        outerStride2 -= innerStride2 * @out.Shape.Dimensions[1].Length;

                        for (long i = 0; i < opsOuter; i++)
                        {
                            for (long j = 0; j < opsInner; j++)
                            {
                                d2[ix2] = (System.Int32)(Math.Sin(scalar));
                                ix2 += innerStride2;
                            }

                            ix2 += outerStride2;
                        }
                    }
                    else
                    {
                        long n = @out.Shape.Dimensions.LongLength - 3;
                        long[] limits = @out.Shape.Dimensions.Where(x => n-- > 0).Select(x => x.Length).ToArray();
                        long[] counters = new long[limits.LongLength];

                        long totalOps = limits.LongLength == 0 ? 1 : limits.Aggregate<long>((a, b) => a * b);

                        //This chunck of variables are used to prevent repeated calculations of offsets
                        long dimIndex0 = 0 + limits.LongLength;
                        long dimIndex1 = 1 + limits.LongLength;
                        long dimIndex2 = 2 + limits.LongLength;

                        long opsOuter = @out.Shape.Dimensions[0 + limits.LongLength].Length;
                        long opsInner = @out.Shape.Dimensions[1 + limits.LongLength].Length;
                        long opsInnerInner = @out.Shape.Dimensions[2 + limits.LongLength].Length;

                        long outerStride3 = @out.Shape.Dimensions[dimIndex0].Stride;
                        long innerStride3 = @out.Shape.Dimensions[dimIndex1].Stride;
                        long innerInnerStride3 = @out.Shape.Dimensions[dimIndex2].Stride;
                        outerStride3 -= innerStride3 * @out.Shape.Dimensions[dimIndex1].Length;
                        innerStride3 -= innerInnerStride3 * @out.Shape.Dimensions[dimIndex2].Length;

                        for (long outer = 0; outer < totalOps; outer++)
                        {
                            //Get the array offset for the first element in the outer dimension
                            long ix3 = @out.Shape[counters];

                            for (long i = 0; i < opsOuter; i++)
                            {
                                for (long j = 0; j < opsInner; j++)
                                {
                                    for (long k = 0; k < opsInnerInner; k++)
                                    {
                                        d2[ix3] = (System.Int32)(Math.Sin(scalar));
                                        ix3 += innerInnerStride3;
                                    }

                                    ix3 += innerStride3;
                                }

                                ix3 += outerStride3;
                            }

                            if (counters.LongLength > 0)
                            {
                                //Basically a ripple carry adder
                                long p = counters.LongLength - 1;
                                while (++counters[p] == limits[p] && p > 0)
                                {
                                    counters[p] = 0;
                                    p--;
                                }
                            }
                        }
                    }
                }
            }
        }
        /// <summary>
        /// Unsafe implementation of applying a unary operation
        /// </summary>
        /// <typeparam name="C">The type of operation to perform</typeparam>
        /// <param name="op">The operation instance</param>
        /// <param name="in1">The input argument</param>
        /// <param name="out">The output target</param>
        internal static void UFunc_Op_Inner_Unary_Flush_UInt32_TypedImpl<C>(NumCIL.UInt32.Sin op, NdArray<System.UInt32> in1, NdArray<System.UInt32> @out)
            where C : IUnaryOp<System.UInt32>
        {
            unsafe
            {
                using (var f1 = new Pinner(in1.DataAccessor))
                using (var f2 = new Pinner(@out.DataAccessor))
                {
                    var d1 = (System.UInt32*)f1.ptr;
                    var d2 = (System.UInt32*)f2.ptr;

                    if (@out.Shape.Dimensions.Length == 1)
                    {
                        long totalOps = @out.Shape.Dimensions[0].Length;

                        long ix1 = in1.Shape.Offset;
                        long ix2 = @out.Shape.Offset;

                        long stride1 = in1.Shape.Dimensions[0].Stride;
                        long stride2 = @out.Shape.Dimensions[0].Stride;


                        if (stride1 == stride2 && ix1 == ix2)
                        {
                            //Best case, all are equal, just keep a single counter
                            for (long i = 0; i < totalOps; i++)
                            {
                                d2[ix1] = (System.UInt32)(Math.Sin(d1[ix1]));
                                ix1 += stride1;
                            }
                        }
                        else
                        {
                            for (long i = 0; i < totalOps; i++)
                            {
                                d2[ix2] = (System.UInt32)(Math.Sin(d1[ix1]));
                                ix1 += stride1;
                                ix2 += stride2;
                            }
                        }
                    }
                    else if (@out.Shape.Dimensions.Length == 2)
                    {
                        long opsOuter = @out.Shape.Dimensions[0].Length;
                        long opsInner = @out.Shape.Dimensions[1].Length;

                        long ix1 = in1.Shape.Offset;
                        long ix2 = @out.Shape.Offset;

                        long outerStride1 = in1.Shape.Dimensions[0].Stride;
                        long outerStride2 = @out.Shape.Dimensions[0].Stride;

                        long innerStride1 = in1.Shape.Dimensions[1].Stride;
                        long innerStride2 = @out.Shape.Dimensions[1].Stride;

                        outerStride1 -= innerStride1 * in1.Shape.Dimensions[1].Length;
                        outerStride2 -= innerStride2 * @out.Shape.Dimensions[1].Length;

                        for (long i = 0; i < opsOuter; i++)
                        {
                            for (long j = 0; j < opsInner; j++)
                            {
                                d2[ix2] = (System.UInt32)(Math.Sin(d1[ix1]));
                                ix1 += innerStride1;
                                ix2 += innerStride2;
                            }

                            ix1 += outerStride1;
                            ix2 += outerStride2;
                        }
                    }
                    else
                    {
                        long n = in1.Shape.Dimensions.LongLength - 3;
                        long[] limits = in1.Shape.Dimensions.Where(x => n-- > 0).Select(x => x.Length).ToArray();
                        long[] counters = new long[limits.LongLength];

                        long totalOps = limits.LongLength == 0 ? 1 : limits.Aggregate<long>((a, b) => a * b);

                        //This chunck of variables are used to prevent repeated calculations of offsets
                        long dimIndex0 = 0 + limits.LongLength;
                        long dimIndex1 = 1 + limits.LongLength;
                        long dimIndex2 = 2 + limits.LongLength;

                        long opsOuter = @out.Shape.Dimensions[0 + limits.LongLength].Length;
                        long opsInner = @out.Shape.Dimensions[1 + limits.LongLength].Length;
                        long opsInnerInner = @out.Shape.Dimensions[2 + limits.LongLength].Length;

                        long outerStride1 = in1.Shape.Dimensions[dimIndex0].Stride;
                        long outerStride3 = @out.Shape.Dimensions[dimIndex0].Stride;

                        long innerStride1 = in1.Shape.Dimensions[dimIndex1].Stride;
                        long innerStride3 = @out.Shape.Dimensions[dimIndex1].Stride;

                        long innerInnerStride1 = in1.Shape.Dimensions[dimIndex2].Stride;
                        long innerInnerStride3 = @out.Shape.Dimensions[dimIndex2].Stride;

                        outerStride1 -= innerStride1 * in1.Shape.Dimensions[dimIndex1].Length;
                        outerStride3 -= innerStride3 * @out.Shape.Dimensions[dimIndex1].Length;

                        innerStride1 -= innerInnerStride1 * in1.Shape.Dimensions[dimIndex2].Length;
                        innerStride3 -= innerInnerStride3 * @out.Shape.Dimensions[dimIndex2].Length;

                        for (long outer = 0; outer < totalOps; outer++)
                        {
                            //Get the array offset for the first element in the outer dimension
                            long ix1 = in1.Shape[counters];
                            long ix3 = @out.Shape[counters];


                            for (long i = 0; i < opsOuter; i++)
                            {
                                for (long j = 0; j < opsInner; j++)
                                {
                                    for (long k = 0; k < opsInnerInner; k++)
                                    {
                                        d2[ix3] = (System.UInt32)(Math.Sin(d1[ix1]));
                                        ix1 += innerInnerStride1;
                                        ix3 += innerInnerStride3;
                                    }

                                    ix1 += innerStride1;
                                    ix3 += innerStride3;
                                }

                                ix1 += outerStride1;
                                ix3 += outerStride3;
                            }

                            if (counters.LongLength > 0)
                            {
                                //Basically a ripple carry adder
                                long p = counters.LongLength - 1;
                                while (++counters[p] == limits[p] && p > 0)
                                {
                                    counters[p] = 0;
                                    p--;
                                }
                            }
                        }
                    }
                }
            }
        }

        /// <summary>
        /// Unsafe implementation of applying a unary operation
        /// </summary>
        /// <typeparam name="C">The type of operation to perform</typeparam>
        /// <param name="op">The operation instance</param>
        /// <param name="scalar">The input scalar argument</param>
        /// <param name="out">The output target</param>
        internal static void UFunc_Op_Inner_Unary_Scalar_Flush_UInt32_TypedImpl<C>(NumCIL.UInt32.Sin op, System.UInt32 scalar, NdArray<System.UInt32> @out)
            where C : IUnaryOp<System.UInt32>
        {
            unsafe
            {
                using (var f2 = new Pinner(@out.DataAccessor))
                {
                    var d2 = (System.UInt32*)f2.ptr;

                    if (@out.Shape.Dimensions.Length == 1)
                    {
                        long totalOps = @out.Shape.Dimensions[0].Length;
                        long ix2 = @out.Shape.Offset;
                        long stride2 = @out.Shape.Dimensions[0].Stride;

                        for (long i = 0; i < totalOps; i++)
                        {
                            d2[ix2] = (System.UInt32)(Math.Sin(scalar));
                            ix2 += stride2;
                        }
                    }
                    else if (@out.Shape.Dimensions.Length == 2)
                    {
                        long opsOuter = @out.Shape.Dimensions[0].Length;
                        long opsInner = @out.Shape.Dimensions[1].Length;

                        long ix2 = @out.Shape.Offset;
                        long outerStride2 = @out.Shape.Dimensions[0].Stride;
                        long innerStride2 = @out.Shape.Dimensions[1].Stride;
                        outerStride2 -= innerStride2 * @out.Shape.Dimensions[1].Length;

                        for (long i = 0; i < opsOuter; i++)
                        {
                            for (long j = 0; j < opsInner; j++)
                            {
                                d2[ix2] = (System.UInt32)(Math.Sin(scalar));
                                ix2 += innerStride2;
                            }

                            ix2 += outerStride2;
                        }
                    }
                    else
                    {
                        long n = @out.Shape.Dimensions.LongLength - 3;
                        long[] limits = @out.Shape.Dimensions.Where(x => n-- > 0).Select(x => x.Length).ToArray();
                        long[] counters = new long[limits.LongLength];

                        long totalOps = limits.LongLength == 0 ? 1 : limits.Aggregate<long>((a, b) => a * b);

                        //This chunck of variables are used to prevent repeated calculations of offsets
                        long dimIndex0 = 0 + limits.LongLength;
                        long dimIndex1 = 1 + limits.LongLength;
                        long dimIndex2 = 2 + limits.LongLength;

                        long opsOuter = @out.Shape.Dimensions[0 + limits.LongLength].Length;
                        long opsInner = @out.Shape.Dimensions[1 + limits.LongLength].Length;
                        long opsInnerInner = @out.Shape.Dimensions[2 + limits.LongLength].Length;

                        long outerStride3 = @out.Shape.Dimensions[dimIndex0].Stride;
                        long innerStride3 = @out.Shape.Dimensions[dimIndex1].Stride;
                        long innerInnerStride3 = @out.Shape.Dimensions[dimIndex2].Stride;
                        outerStride3 -= innerStride3 * @out.Shape.Dimensions[dimIndex1].Length;
                        innerStride3 -= innerInnerStride3 * @out.Shape.Dimensions[dimIndex2].Length;

                        for (long outer = 0; outer < totalOps; outer++)
                        {
                            //Get the array offset for the first element in the outer dimension
                            long ix3 = @out.Shape[counters];

                            for (long i = 0; i < opsOuter; i++)
                            {
                                for (long j = 0; j < opsInner; j++)
                                {
                                    for (long k = 0; k < opsInnerInner; k++)
                                    {
                                        d2[ix3] = (System.UInt32)(Math.Sin(scalar));
                                        ix3 += innerInnerStride3;
                                    }

                                    ix3 += innerStride3;
                                }

                                ix3 += outerStride3;
                            }

                            if (counters.LongLength > 0)
                            {
                                //Basically a ripple carry adder
                                long p = counters.LongLength - 1;
                                while (++counters[p] == limits[p] && p > 0)
                                {
                                    counters[p] = 0;
                                    p--;
                                }
                            }
                        }
                    }
                }
            }
        }
        /// <summary>
        /// Unsafe implementation of applying a unary operation
        /// </summary>
        /// <typeparam name="C">The type of operation to perform</typeparam>
        /// <param name="op">The operation instance</param>
        /// <param name="in1">The input argument</param>
        /// <param name="out">The output target</param>
        internal static void UFunc_Op_Inner_Unary_Flush_Int64_TypedImpl<C>(NumCIL.Int64.Sin op, NdArray<System.Int64> in1, NdArray<System.Int64> @out)
            where C : IUnaryOp<System.Int64>
        {
            unsafe
            {
                using (var f1 = new Pinner(in1.DataAccessor))
                using (var f2 = new Pinner(@out.DataAccessor))
                {
                    var d1 = (System.Int64*)f1.ptr;
                    var d2 = (System.Int64*)f2.ptr;

                    if (@out.Shape.Dimensions.Length == 1)
                    {
                        long totalOps = @out.Shape.Dimensions[0].Length;

                        long ix1 = in1.Shape.Offset;
                        long ix2 = @out.Shape.Offset;

                        long stride1 = in1.Shape.Dimensions[0].Stride;
                        long stride2 = @out.Shape.Dimensions[0].Stride;


                        if (stride1 == stride2 && ix1 == ix2)
                        {
                            //Best case, all are equal, just keep a single counter
                            for (long i = 0; i < totalOps; i++)
                            {
                                d2[ix1] = (System.Int64)(Math.Sin(d1[ix1]));
                                ix1 += stride1;
                            }
                        }
                        else
                        {
                            for (long i = 0; i < totalOps; i++)
                            {
                                d2[ix2] = (System.Int64)(Math.Sin(d1[ix1]));
                                ix1 += stride1;
                                ix2 += stride2;
                            }
                        }
                    }
                    else if (@out.Shape.Dimensions.Length == 2)
                    {
                        long opsOuter = @out.Shape.Dimensions[0].Length;
                        long opsInner = @out.Shape.Dimensions[1].Length;

                        long ix1 = in1.Shape.Offset;
                        long ix2 = @out.Shape.Offset;

                        long outerStride1 = in1.Shape.Dimensions[0].Stride;
                        long outerStride2 = @out.Shape.Dimensions[0].Stride;

                        long innerStride1 = in1.Shape.Dimensions[1].Stride;
                        long innerStride2 = @out.Shape.Dimensions[1].Stride;

                        outerStride1 -= innerStride1 * in1.Shape.Dimensions[1].Length;
                        outerStride2 -= innerStride2 * @out.Shape.Dimensions[1].Length;

                        for (long i = 0; i < opsOuter; i++)
                        {
                            for (long j = 0; j < opsInner; j++)
                            {
                                d2[ix2] = (System.Int64)(Math.Sin(d1[ix1]));
                                ix1 += innerStride1;
                                ix2 += innerStride2;
                            }

                            ix1 += outerStride1;
                            ix2 += outerStride2;
                        }
                    }
                    else
                    {
                        long n = in1.Shape.Dimensions.LongLength - 3;
                        long[] limits = in1.Shape.Dimensions.Where(x => n-- > 0).Select(x => x.Length).ToArray();
                        long[] counters = new long[limits.LongLength];

                        long totalOps = limits.LongLength == 0 ? 1 : limits.Aggregate<long>((a, b) => a * b);

                        //This chunck of variables are used to prevent repeated calculations of offsets
                        long dimIndex0 = 0 + limits.LongLength;
                        long dimIndex1 = 1 + limits.LongLength;
                        long dimIndex2 = 2 + limits.LongLength;

                        long opsOuter = @out.Shape.Dimensions[0 + limits.LongLength].Length;
                        long opsInner = @out.Shape.Dimensions[1 + limits.LongLength].Length;
                        long opsInnerInner = @out.Shape.Dimensions[2 + limits.LongLength].Length;

                        long outerStride1 = in1.Shape.Dimensions[dimIndex0].Stride;
                        long outerStride3 = @out.Shape.Dimensions[dimIndex0].Stride;

                        long innerStride1 = in1.Shape.Dimensions[dimIndex1].Stride;
                        long innerStride3 = @out.Shape.Dimensions[dimIndex1].Stride;

                        long innerInnerStride1 = in1.Shape.Dimensions[dimIndex2].Stride;
                        long innerInnerStride3 = @out.Shape.Dimensions[dimIndex2].Stride;

                        outerStride1 -= innerStride1 * in1.Shape.Dimensions[dimIndex1].Length;
                        outerStride3 -= innerStride3 * @out.Shape.Dimensions[dimIndex1].Length;

                        innerStride1 -= innerInnerStride1 * in1.Shape.Dimensions[dimIndex2].Length;
                        innerStride3 -= innerInnerStride3 * @out.Shape.Dimensions[dimIndex2].Length;

                        for (long outer = 0; outer < totalOps; outer++)
                        {
                            //Get the array offset for the first element in the outer dimension
                            long ix1 = in1.Shape[counters];
                            long ix3 = @out.Shape[counters];


                            for (long i = 0; i < opsOuter; i++)
                            {
                                for (long j = 0; j < opsInner; j++)
                                {
                                    for (long k = 0; k < opsInnerInner; k++)
                                    {
                                        d2[ix3] = (System.Int64)(Math.Sin(d1[ix1]));
                                        ix1 += innerInnerStride1;
                                        ix3 += innerInnerStride3;
                                    }

                                    ix1 += innerStride1;
                                    ix3 += innerStride3;
                                }

                                ix1 += outerStride1;
                                ix3 += outerStride3;
                            }

                            if (counters.LongLength > 0)
                            {
                                //Basically a ripple carry adder
                                long p = counters.LongLength - 1;
                                while (++counters[p] == limits[p] && p > 0)
                                {
                                    counters[p] = 0;
                                    p--;
                                }
                            }
                        }
                    }
                }
            }
        }

        /// <summary>
        /// Unsafe implementation of applying a unary operation
        /// </summary>
        /// <typeparam name="C">The type of operation to perform</typeparam>
        /// <param name="op">The operation instance</param>
        /// <param name="scalar">The input scalar argument</param>
        /// <param name="out">The output target</param>
        internal static void UFunc_Op_Inner_Unary_Scalar_Flush_Int64_TypedImpl<C>(NumCIL.Int64.Sin op, System.Int64 scalar, NdArray<System.Int64> @out)
            where C : IUnaryOp<System.Int64>
        {
            unsafe
            {
                using (var f2 = new Pinner(@out.DataAccessor))
                {
                    var d2 = (System.Int64*)f2.ptr;

                    if (@out.Shape.Dimensions.Length == 1)
                    {
                        long totalOps = @out.Shape.Dimensions[0].Length;
                        long ix2 = @out.Shape.Offset;
                        long stride2 = @out.Shape.Dimensions[0].Stride;

                        for (long i = 0; i < totalOps; i++)
                        {
                            d2[ix2] = (System.Int64)(Math.Sin(scalar));
                            ix2 += stride2;
                        }
                    }
                    else if (@out.Shape.Dimensions.Length == 2)
                    {
                        long opsOuter = @out.Shape.Dimensions[0].Length;
                        long opsInner = @out.Shape.Dimensions[1].Length;

                        long ix2 = @out.Shape.Offset;
                        long outerStride2 = @out.Shape.Dimensions[0].Stride;
                        long innerStride2 = @out.Shape.Dimensions[1].Stride;
                        outerStride2 -= innerStride2 * @out.Shape.Dimensions[1].Length;

                        for (long i = 0; i < opsOuter; i++)
                        {
                            for (long j = 0; j < opsInner; j++)
                            {
                                d2[ix2] = (System.Int64)(Math.Sin(scalar));
                                ix2 += innerStride2;
                            }

                            ix2 += outerStride2;
                        }
                    }
                    else
                    {
                        long n = @out.Shape.Dimensions.LongLength - 3;
                        long[] limits = @out.Shape.Dimensions.Where(x => n-- > 0).Select(x => x.Length).ToArray();
                        long[] counters = new long[limits.LongLength];

                        long totalOps = limits.LongLength == 0 ? 1 : limits.Aggregate<long>((a, b) => a * b);

                        //This chunck of variables are used to prevent repeated calculations of offsets
                        long dimIndex0 = 0 + limits.LongLength;
                        long dimIndex1 = 1 + limits.LongLength;
                        long dimIndex2 = 2 + limits.LongLength;

                        long opsOuter = @out.Shape.Dimensions[0 + limits.LongLength].Length;
                        long opsInner = @out.Shape.Dimensions[1 + limits.LongLength].Length;
                        long opsInnerInner = @out.Shape.Dimensions[2 + limits.LongLength].Length;

                        long outerStride3 = @out.Shape.Dimensions[dimIndex0].Stride;
                        long innerStride3 = @out.Shape.Dimensions[dimIndex1].Stride;
                        long innerInnerStride3 = @out.Shape.Dimensions[dimIndex2].Stride;
                        outerStride3 -= innerStride3 * @out.Shape.Dimensions[dimIndex1].Length;
                        innerStride3 -= innerInnerStride3 * @out.Shape.Dimensions[dimIndex2].Length;

                        for (long outer = 0; outer < totalOps; outer++)
                        {
                            //Get the array offset for the first element in the outer dimension
                            long ix3 = @out.Shape[counters];

                            for (long i = 0; i < opsOuter; i++)
                            {
                                for (long j = 0; j < opsInner; j++)
                                {
                                    for (long k = 0; k < opsInnerInner; k++)
                                    {
                                        d2[ix3] = (System.Int64)(Math.Sin(scalar));
                                        ix3 += innerInnerStride3;
                                    }

                                    ix3 += innerStride3;
                                }

                                ix3 += outerStride3;
                            }

                            if (counters.LongLength > 0)
                            {
                                //Basically a ripple carry adder
                                long p = counters.LongLength - 1;
                                while (++counters[p] == limits[p] && p > 0)
                                {
                                    counters[p] = 0;
                                    p--;
                                }
                            }
                        }
                    }
                }
            }
        }
        /// <summary>
        /// Unsafe implementation of applying a unary operation
        /// </summary>
        /// <typeparam name="C">The type of operation to perform</typeparam>
        /// <param name="op">The operation instance</param>
        /// <param name="in1">The input argument</param>
        /// <param name="out">The output target</param>
        internal static void UFunc_Op_Inner_Unary_Flush_UInt64_TypedImpl<C>(NumCIL.UInt64.Sin op, NdArray<System.UInt64> in1, NdArray<System.UInt64> @out)
            where C : IUnaryOp<System.UInt64>
        {
            unsafe
            {
                using (var f1 = new Pinner(in1.DataAccessor))
                using (var f2 = new Pinner(@out.DataAccessor))
                {
                    var d1 = (System.UInt64*)f1.ptr;
                    var d2 = (System.UInt64*)f2.ptr;

                    if (@out.Shape.Dimensions.Length == 1)
                    {
                        long totalOps = @out.Shape.Dimensions[0].Length;

                        long ix1 = in1.Shape.Offset;
                        long ix2 = @out.Shape.Offset;

                        long stride1 = in1.Shape.Dimensions[0].Stride;
                        long stride2 = @out.Shape.Dimensions[0].Stride;


                        if (stride1 == stride2 && ix1 == ix2)
                        {
                            //Best case, all are equal, just keep a single counter
                            for (long i = 0; i < totalOps; i++)
                            {
                                d2[ix1] = (System.UInt64)(Math.Sin(d1[ix1]));
                                ix1 += stride1;
                            }
                        }
                        else
                        {
                            for (long i = 0; i < totalOps; i++)
                            {
                                d2[ix2] = (System.UInt64)(Math.Sin(d1[ix1]));
                                ix1 += stride1;
                                ix2 += stride2;
                            }
                        }
                    }
                    else if (@out.Shape.Dimensions.Length == 2)
                    {
                        long opsOuter = @out.Shape.Dimensions[0].Length;
                        long opsInner = @out.Shape.Dimensions[1].Length;

                        long ix1 = in1.Shape.Offset;
                        long ix2 = @out.Shape.Offset;

                        long outerStride1 = in1.Shape.Dimensions[0].Stride;
                        long outerStride2 = @out.Shape.Dimensions[0].Stride;

                        long innerStride1 = in1.Shape.Dimensions[1].Stride;
                        long innerStride2 = @out.Shape.Dimensions[1].Stride;

                        outerStride1 -= innerStride1 * in1.Shape.Dimensions[1].Length;
                        outerStride2 -= innerStride2 * @out.Shape.Dimensions[1].Length;

                        for (long i = 0; i < opsOuter; i++)
                        {
                            for (long j = 0; j < opsInner; j++)
                            {
                                d2[ix2] = (System.UInt64)(Math.Sin(d1[ix1]));
                                ix1 += innerStride1;
                                ix2 += innerStride2;
                            }

                            ix1 += outerStride1;
                            ix2 += outerStride2;
                        }
                    }
                    else
                    {
                        long n = in1.Shape.Dimensions.LongLength - 3;
                        long[] limits = in1.Shape.Dimensions.Where(x => n-- > 0).Select(x => x.Length).ToArray();
                        long[] counters = new long[limits.LongLength];

                        long totalOps = limits.LongLength == 0 ? 1 : limits.Aggregate<long>((a, b) => a * b);

                        //This chunck of variables are used to prevent repeated calculations of offsets
                        long dimIndex0 = 0 + limits.LongLength;
                        long dimIndex1 = 1 + limits.LongLength;
                        long dimIndex2 = 2 + limits.LongLength;

                        long opsOuter = @out.Shape.Dimensions[0 + limits.LongLength].Length;
                        long opsInner = @out.Shape.Dimensions[1 + limits.LongLength].Length;
                        long opsInnerInner = @out.Shape.Dimensions[2 + limits.LongLength].Length;

                        long outerStride1 = in1.Shape.Dimensions[dimIndex0].Stride;
                        long outerStride3 = @out.Shape.Dimensions[dimIndex0].Stride;

                        long innerStride1 = in1.Shape.Dimensions[dimIndex1].Stride;
                        long innerStride3 = @out.Shape.Dimensions[dimIndex1].Stride;

                        long innerInnerStride1 = in1.Shape.Dimensions[dimIndex2].Stride;
                        long innerInnerStride3 = @out.Shape.Dimensions[dimIndex2].Stride;

                        outerStride1 -= innerStride1 * in1.Shape.Dimensions[dimIndex1].Length;
                        outerStride3 -= innerStride3 * @out.Shape.Dimensions[dimIndex1].Length;

                        innerStride1 -= innerInnerStride1 * in1.Shape.Dimensions[dimIndex2].Length;
                        innerStride3 -= innerInnerStride3 * @out.Shape.Dimensions[dimIndex2].Length;

                        for (long outer = 0; outer < totalOps; outer++)
                        {
                            //Get the array offset for the first element in the outer dimension
                            long ix1 = in1.Shape[counters];
                            long ix3 = @out.Shape[counters];


                            for (long i = 0; i < opsOuter; i++)
                            {
                                for (long j = 0; j < opsInner; j++)
                                {
                                    for (long k = 0; k < opsInnerInner; k++)
                                    {
                                        d2[ix3] = (System.UInt64)(Math.Sin(d1[ix1]));
                                        ix1 += innerInnerStride1;
                                        ix3 += innerInnerStride3;
                                    }

                                    ix1 += innerStride1;
                                    ix3 += innerStride3;
                                }

                                ix1 += outerStride1;
                                ix3 += outerStride3;
                            }

                            if (counters.LongLength > 0)
                            {
                                //Basically a ripple carry adder
                                long p = counters.LongLength - 1;
                                while (++counters[p] == limits[p] && p > 0)
                                {
                                    counters[p] = 0;
                                    p--;
                                }
                            }
                        }
                    }
                }
            }
        }

        /// <summary>
        /// Unsafe implementation of applying a unary operation
        /// </summary>
        /// <typeparam name="C">The type of operation to perform</typeparam>
        /// <param name="op">The operation instance</param>
        /// <param name="scalar">The input scalar argument</param>
        /// <param name="out">The output target</param>
        internal static void UFunc_Op_Inner_Unary_Scalar_Flush_UInt64_TypedImpl<C>(NumCIL.UInt64.Sin op, System.UInt64 scalar, NdArray<System.UInt64> @out)
            where C : IUnaryOp<System.UInt64>
        {
            unsafe
            {
                using (var f2 = new Pinner(@out.DataAccessor))
                {
                    var d2 = (System.UInt64*)f2.ptr;

                    if (@out.Shape.Dimensions.Length == 1)
                    {
                        long totalOps = @out.Shape.Dimensions[0].Length;
                        long ix2 = @out.Shape.Offset;
                        long stride2 = @out.Shape.Dimensions[0].Stride;

                        for (long i = 0; i < totalOps; i++)
                        {
                            d2[ix2] = (System.UInt64)(Math.Sin(scalar));
                            ix2 += stride2;
                        }
                    }
                    else if (@out.Shape.Dimensions.Length == 2)
                    {
                        long opsOuter = @out.Shape.Dimensions[0].Length;
                        long opsInner = @out.Shape.Dimensions[1].Length;

                        long ix2 = @out.Shape.Offset;
                        long outerStride2 = @out.Shape.Dimensions[0].Stride;
                        long innerStride2 = @out.Shape.Dimensions[1].Stride;
                        outerStride2 -= innerStride2 * @out.Shape.Dimensions[1].Length;

                        for (long i = 0; i < opsOuter; i++)
                        {
                            for (long j = 0; j < opsInner; j++)
                            {
                                d2[ix2] = (System.UInt64)(Math.Sin(scalar));
                                ix2 += innerStride2;
                            }

                            ix2 += outerStride2;
                        }
                    }
                    else
                    {
                        long n = @out.Shape.Dimensions.LongLength - 3;
                        long[] limits = @out.Shape.Dimensions.Where(x => n-- > 0).Select(x => x.Length).ToArray();
                        long[] counters = new long[limits.LongLength];

                        long totalOps = limits.LongLength == 0 ? 1 : limits.Aggregate<long>((a, b) => a * b);

                        //This chunck of variables are used to prevent repeated calculations of offsets
                        long dimIndex0 = 0 + limits.LongLength;
                        long dimIndex1 = 1 + limits.LongLength;
                        long dimIndex2 = 2 + limits.LongLength;

                        long opsOuter = @out.Shape.Dimensions[0 + limits.LongLength].Length;
                        long opsInner = @out.Shape.Dimensions[1 + limits.LongLength].Length;
                        long opsInnerInner = @out.Shape.Dimensions[2 + limits.LongLength].Length;

                        long outerStride3 = @out.Shape.Dimensions[dimIndex0].Stride;
                        long innerStride3 = @out.Shape.Dimensions[dimIndex1].Stride;
                        long innerInnerStride3 = @out.Shape.Dimensions[dimIndex2].Stride;
                        outerStride3 -= innerStride3 * @out.Shape.Dimensions[dimIndex1].Length;
                        innerStride3 -= innerInnerStride3 * @out.Shape.Dimensions[dimIndex2].Length;

                        for (long outer = 0; outer < totalOps; outer++)
                        {
                            //Get the array offset for the first element in the outer dimension
                            long ix3 = @out.Shape[counters];

                            for (long i = 0; i < opsOuter; i++)
                            {
                                for (long j = 0; j < opsInner; j++)
                                {
                                    for (long k = 0; k < opsInnerInner; k++)
                                    {
                                        d2[ix3] = (System.UInt64)(Math.Sin(scalar));
                                        ix3 += innerInnerStride3;
                                    }

                                    ix3 += innerStride3;
                                }

                                ix3 += outerStride3;
                            }

                            if (counters.LongLength > 0)
                            {
                                //Basically a ripple carry adder
                                long p = counters.LongLength - 1;
                                while (++counters[p] == limits[p] && p > 0)
                                {
                                    counters[p] = 0;
                                    p--;
                                }
                            }
                        }
                    }
                }
            }
        }
        /// <summary>
        /// Unsafe implementation of applying a unary operation
        /// </summary>
        /// <typeparam name="C">The type of operation to perform</typeparam>
        /// <param name="op">The operation instance</param>
        /// <param name="in1">The input argument</param>
        /// <param name="out">The output target</param>
        internal static void UFunc_Op_Inner_Unary_Flush_Single_TypedImpl<C>(NumCIL.Float.Sin op, NdArray<System.Single> in1, NdArray<System.Single> @out)
            where C : IUnaryOp<System.Single>
        {
            unsafe
            {
                using (var f1 = new Pinner(in1.DataAccessor))
                using (var f2 = new Pinner(@out.DataAccessor))
                {
                    var d1 = (System.Single*)f1.ptr;
                    var d2 = (System.Single*)f2.ptr;

                    if (@out.Shape.Dimensions.Length == 1)
                    {
                        long totalOps = @out.Shape.Dimensions[0].Length;

                        long ix1 = in1.Shape.Offset;
                        long ix2 = @out.Shape.Offset;

                        long stride1 = in1.Shape.Dimensions[0].Stride;
                        long stride2 = @out.Shape.Dimensions[0].Stride;


                        if (stride1 == stride2 && ix1 == ix2)
                        {
                            //Best case, all are equal, just keep a single counter
                            for (long i = 0; i < totalOps; i++)
                            {
                                d2[ix1] = (System.Single)(Math.Sin(d1[ix1]));
                                ix1 += stride1;
                            }
                        }
                        else
                        {
                            for (long i = 0; i < totalOps; i++)
                            {
                                d2[ix2] = (System.Single)(Math.Sin(d1[ix1]));
                                ix1 += stride1;
                                ix2 += stride2;
                            }
                        }
                    }
                    else if (@out.Shape.Dimensions.Length == 2)
                    {
                        long opsOuter = @out.Shape.Dimensions[0].Length;
                        long opsInner = @out.Shape.Dimensions[1].Length;

                        long ix1 = in1.Shape.Offset;
                        long ix2 = @out.Shape.Offset;

                        long outerStride1 = in1.Shape.Dimensions[0].Stride;
                        long outerStride2 = @out.Shape.Dimensions[0].Stride;

                        long innerStride1 = in1.Shape.Dimensions[1].Stride;
                        long innerStride2 = @out.Shape.Dimensions[1].Stride;

                        outerStride1 -= innerStride1 * in1.Shape.Dimensions[1].Length;
                        outerStride2 -= innerStride2 * @out.Shape.Dimensions[1].Length;

                        for (long i = 0; i < opsOuter; i++)
                        {
                            for (long j = 0; j < opsInner; j++)
                            {
                                d2[ix2] = (System.Single)(Math.Sin(d1[ix1]));
                                ix1 += innerStride1;
                                ix2 += innerStride2;
                            }

                            ix1 += outerStride1;
                            ix2 += outerStride2;
                        }
                    }
                    else
                    {
                        long n = in1.Shape.Dimensions.LongLength - 3;
                        long[] limits = in1.Shape.Dimensions.Where(x => n-- > 0).Select(x => x.Length).ToArray();
                        long[] counters = new long[limits.LongLength];

                        long totalOps = limits.LongLength == 0 ? 1 : limits.Aggregate<long>((a, b) => a * b);

                        //This chunck of variables are used to prevent repeated calculations of offsets
                        long dimIndex0 = 0 + limits.LongLength;
                        long dimIndex1 = 1 + limits.LongLength;
                        long dimIndex2 = 2 + limits.LongLength;

                        long opsOuter = @out.Shape.Dimensions[0 + limits.LongLength].Length;
                        long opsInner = @out.Shape.Dimensions[1 + limits.LongLength].Length;
                        long opsInnerInner = @out.Shape.Dimensions[2 + limits.LongLength].Length;

                        long outerStride1 = in1.Shape.Dimensions[dimIndex0].Stride;
                        long outerStride3 = @out.Shape.Dimensions[dimIndex0].Stride;

                        long innerStride1 = in1.Shape.Dimensions[dimIndex1].Stride;
                        long innerStride3 = @out.Shape.Dimensions[dimIndex1].Stride;

                        long innerInnerStride1 = in1.Shape.Dimensions[dimIndex2].Stride;
                        long innerInnerStride3 = @out.Shape.Dimensions[dimIndex2].Stride;

                        outerStride1 -= innerStride1 * in1.Shape.Dimensions[dimIndex1].Length;
                        outerStride3 -= innerStride3 * @out.Shape.Dimensions[dimIndex1].Length;

                        innerStride1 -= innerInnerStride1 * in1.Shape.Dimensions[dimIndex2].Length;
                        innerStride3 -= innerInnerStride3 * @out.Shape.Dimensions[dimIndex2].Length;

                        for (long outer = 0; outer < totalOps; outer++)
                        {
                            //Get the array offset for the first element in the outer dimension
                            long ix1 = in1.Shape[counters];
                            long ix3 = @out.Shape[counters];


                            for (long i = 0; i < opsOuter; i++)
                            {
                                for (long j = 0; j < opsInner; j++)
                                {
                                    for (long k = 0; k < opsInnerInner; k++)
                                    {
                                        d2[ix3] = (System.Single)(Math.Sin(d1[ix1]));
                                        ix1 += innerInnerStride1;
                                        ix3 += innerInnerStride3;
                                    }

                                    ix1 += innerStride1;
                                    ix3 += innerStride3;
                                }

                                ix1 += outerStride1;
                                ix3 += outerStride3;
                            }

                            if (counters.LongLength > 0)
                            {
                                //Basically a ripple carry adder
                                long p = counters.LongLength - 1;
                                while (++counters[p] == limits[p] && p > 0)
                                {
                                    counters[p] = 0;
                                    p--;
                                }
                            }
                        }
                    }
                }
            }
        }

        /// <summary>
        /// Unsafe implementation of applying a unary operation
        /// </summary>
        /// <typeparam name="C">The type of operation to perform</typeparam>
        /// <param name="op">The operation instance</param>
        /// <param name="scalar">The input scalar argument</param>
        /// <param name="out">The output target</param>
        internal static void UFunc_Op_Inner_Unary_Scalar_Flush_Single_TypedImpl<C>(NumCIL.Float.Sin op, System.Single scalar, NdArray<System.Single> @out)
            where C : IUnaryOp<System.Single>
        {
            unsafe
            {
                using (var f2 = new Pinner(@out.DataAccessor))
                {
                    var d2 = (System.Single*)f2.ptr;

                    if (@out.Shape.Dimensions.Length == 1)
                    {
                        long totalOps = @out.Shape.Dimensions[0].Length;
                        long ix2 = @out.Shape.Offset;
                        long stride2 = @out.Shape.Dimensions[0].Stride;

                        for (long i = 0; i < totalOps; i++)
                        {
                            d2[ix2] = (System.Single)(Math.Sin(scalar));
                            ix2 += stride2;
                        }
                    }
                    else if (@out.Shape.Dimensions.Length == 2)
                    {
                        long opsOuter = @out.Shape.Dimensions[0].Length;
                        long opsInner = @out.Shape.Dimensions[1].Length;

                        long ix2 = @out.Shape.Offset;
                        long outerStride2 = @out.Shape.Dimensions[0].Stride;
                        long innerStride2 = @out.Shape.Dimensions[1].Stride;
                        outerStride2 -= innerStride2 * @out.Shape.Dimensions[1].Length;

                        for (long i = 0; i < opsOuter; i++)
                        {
                            for (long j = 0; j < opsInner; j++)
                            {
                                d2[ix2] = (System.Single)(Math.Sin(scalar));
                                ix2 += innerStride2;
                            }

                            ix2 += outerStride2;
                        }
                    }
                    else
                    {
                        long n = @out.Shape.Dimensions.LongLength - 3;
                        long[] limits = @out.Shape.Dimensions.Where(x => n-- > 0).Select(x => x.Length).ToArray();
                        long[] counters = new long[limits.LongLength];

                        long totalOps = limits.LongLength == 0 ? 1 : limits.Aggregate<long>((a, b) => a * b);

                        //This chunck of variables are used to prevent repeated calculations of offsets
                        long dimIndex0 = 0 + limits.LongLength;
                        long dimIndex1 = 1 + limits.LongLength;
                        long dimIndex2 = 2 + limits.LongLength;

                        long opsOuter = @out.Shape.Dimensions[0 + limits.LongLength].Length;
                        long opsInner = @out.Shape.Dimensions[1 + limits.LongLength].Length;
                        long opsInnerInner = @out.Shape.Dimensions[2 + limits.LongLength].Length;

                        long outerStride3 = @out.Shape.Dimensions[dimIndex0].Stride;
                        long innerStride3 = @out.Shape.Dimensions[dimIndex1].Stride;
                        long innerInnerStride3 = @out.Shape.Dimensions[dimIndex2].Stride;
                        outerStride3 -= innerStride3 * @out.Shape.Dimensions[dimIndex1].Length;
                        innerStride3 -= innerInnerStride3 * @out.Shape.Dimensions[dimIndex2].Length;

                        for (long outer = 0; outer < totalOps; outer++)
                        {
                            //Get the array offset for the first element in the outer dimension
                            long ix3 = @out.Shape[counters];

                            for (long i = 0; i < opsOuter; i++)
                            {
                                for (long j = 0; j < opsInner; j++)
                                {
                                    for (long k = 0; k < opsInnerInner; k++)
                                    {
                                        d2[ix3] = (System.Single)(Math.Sin(scalar));
                                        ix3 += innerInnerStride3;
                                    }

                                    ix3 += innerStride3;
                                }

                                ix3 += outerStride3;
                            }

                            if (counters.LongLength > 0)
                            {
                                //Basically a ripple carry adder
                                long p = counters.LongLength - 1;
                                while (++counters[p] == limits[p] && p > 0)
                                {
                                    counters[p] = 0;
                                    p--;
                                }
                            }
                        }
                    }
                }
            }
        }
        /// <summary>
        /// Unsafe implementation of applying a unary operation
        /// </summary>
        /// <typeparam name="C">The type of operation to perform</typeparam>
        /// <param name="op">The operation instance</param>
        /// <param name="in1">The input argument</param>
        /// <param name="out">The output target</param>
        internal static void UFunc_Op_Inner_Unary_Flush_Double_TypedImpl<C>(NumCIL.Double.Sin op, NdArray<System.Double> in1, NdArray<System.Double> @out)
            where C : IUnaryOp<System.Double>
        {
            unsafe
            {
                using (var f1 = new Pinner(in1.DataAccessor))
                using (var f2 = new Pinner(@out.DataAccessor))
                {
                    var d1 = (System.Double*)f1.ptr;
                    var d2 = (System.Double*)f2.ptr;

                    if (@out.Shape.Dimensions.Length == 1)
                    {
                        long totalOps = @out.Shape.Dimensions[0].Length;

                        long ix1 = in1.Shape.Offset;
                        long ix2 = @out.Shape.Offset;

                        long stride1 = in1.Shape.Dimensions[0].Stride;
                        long stride2 = @out.Shape.Dimensions[0].Stride;


                        if (stride1 == stride2 && ix1 == ix2)
                        {
                            //Best case, all are equal, just keep a single counter
                            for (long i = 0; i < totalOps; i++)
                            {
                                d2[ix1] = (System.Double)(Math.Sin(d1[ix1]));
                                ix1 += stride1;
                            }
                        }
                        else
                        {
                            for (long i = 0; i < totalOps; i++)
                            {
                                d2[ix2] = (System.Double)(Math.Sin(d1[ix1]));
                                ix1 += stride1;
                                ix2 += stride2;
                            }
                        }
                    }
                    else if (@out.Shape.Dimensions.Length == 2)
                    {
                        long opsOuter = @out.Shape.Dimensions[0].Length;
                        long opsInner = @out.Shape.Dimensions[1].Length;

                        long ix1 = in1.Shape.Offset;
                        long ix2 = @out.Shape.Offset;

                        long outerStride1 = in1.Shape.Dimensions[0].Stride;
                        long outerStride2 = @out.Shape.Dimensions[0].Stride;

                        long innerStride1 = in1.Shape.Dimensions[1].Stride;
                        long innerStride2 = @out.Shape.Dimensions[1].Stride;

                        outerStride1 -= innerStride1 * in1.Shape.Dimensions[1].Length;
                        outerStride2 -= innerStride2 * @out.Shape.Dimensions[1].Length;

                        for (long i = 0; i < opsOuter; i++)
                        {
                            for (long j = 0; j < opsInner; j++)
                            {
                                d2[ix2] = (System.Double)(Math.Sin(d1[ix1]));
                                ix1 += innerStride1;
                                ix2 += innerStride2;
                            }

                            ix1 += outerStride1;
                            ix2 += outerStride2;
                        }
                    }
                    else
                    {
                        long n = in1.Shape.Dimensions.LongLength - 3;
                        long[] limits = in1.Shape.Dimensions.Where(x => n-- > 0).Select(x => x.Length).ToArray();
                        long[] counters = new long[limits.LongLength];

                        long totalOps = limits.LongLength == 0 ? 1 : limits.Aggregate<long>((a, b) => a * b);

                        //This chunck of variables are used to prevent repeated calculations of offsets
                        long dimIndex0 = 0 + limits.LongLength;
                        long dimIndex1 = 1 + limits.LongLength;
                        long dimIndex2 = 2 + limits.LongLength;

                        long opsOuter = @out.Shape.Dimensions[0 + limits.LongLength].Length;
                        long opsInner = @out.Shape.Dimensions[1 + limits.LongLength].Length;
                        long opsInnerInner = @out.Shape.Dimensions[2 + limits.LongLength].Length;

                        long outerStride1 = in1.Shape.Dimensions[dimIndex0].Stride;
                        long outerStride3 = @out.Shape.Dimensions[dimIndex0].Stride;

                        long innerStride1 = in1.Shape.Dimensions[dimIndex1].Stride;
                        long innerStride3 = @out.Shape.Dimensions[dimIndex1].Stride;

                        long innerInnerStride1 = in1.Shape.Dimensions[dimIndex2].Stride;
                        long innerInnerStride3 = @out.Shape.Dimensions[dimIndex2].Stride;

                        outerStride1 -= innerStride1 * in1.Shape.Dimensions[dimIndex1].Length;
                        outerStride3 -= innerStride3 * @out.Shape.Dimensions[dimIndex1].Length;

                        innerStride1 -= innerInnerStride1 * in1.Shape.Dimensions[dimIndex2].Length;
                        innerStride3 -= innerInnerStride3 * @out.Shape.Dimensions[dimIndex2].Length;

                        for (long outer = 0; outer < totalOps; outer++)
                        {
                            //Get the array offset for the first element in the outer dimension
                            long ix1 = in1.Shape[counters];
                            long ix3 = @out.Shape[counters];


                            for (long i = 0; i < opsOuter; i++)
                            {
                                for (long j = 0; j < opsInner; j++)
                                {
                                    for (long k = 0; k < opsInnerInner; k++)
                                    {
                                        d2[ix3] = (System.Double)(Math.Sin(d1[ix1]));
                                        ix1 += innerInnerStride1;
                                        ix3 += innerInnerStride3;
                                    }

                                    ix1 += innerStride1;
                                    ix3 += innerStride3;
                                }

                                ix1 += outerStride1;
                                ix3 += outerStride3;
                            }

                            if (counters.LongLength > 0)
                            {
                                //Basically a ripple carry adder
                                long p = counters.LongLength - 1;
                                while (++counters[p] == limits[p] && p > 0)
                                {
                                    counters[p] = 0;
                                    p--;
                                }
                            }
                        }
                    }
                }
            }
        }

        /// <summary>
        /// Unsafe implementation of applying a unary operation
        /// </summary>
        /// <typeparam name="C">The type of operation to perform</typeparam>
        /// <param name="op">The operation instance</param>
        /// <param name="scalar">The input scalar argument</param>
        /// <param name="out">The output target</param>
        internal static void UFunc_Op_Inner_Unary_Scalar_Flush_Double_TypedImpl<C>(NumCIL.Double.Sin op, System.Double scalar, NdArray<System.Double> @out)
            where C : IUnaryOp<System.Double>
        {
            unsafe
            {
                using (var f2 = new Pinner(@out.DataAccessor))
                {
                    var d2 = (System.Double*)f2.ptr;

                    if (@out.Shape.Dimensions.Length == 1)
                    {
                        long totalOps = @out.Shape.Dimensions[0].Length;
                        long ix2 = @out.Shape.Offset;
                        long stride2 = @out.Shape.Dimensions[0].Stride;

                        for (long i = 0; i < totalOps; i++)
                        {
                            d2[ix2] = (System.Double)(Math.Sin(scalar));
                            ix2 += stride2;
                        }
                    }
                    else if (@out.Shape.Dimensions.Length == 2)
                    {
                        long opsOuter = @out.Shape.Dimensions[0].Length;
                        long opsInner = @out.Shape.Dimensions[1].Length;

                        long ix2 = @out.Shape.Offset;
                        long outerStride2 = @out.Shape.Dimensions[0].Stride;
                        long innerStride2 = @out.Shape.Dimensions[1].Stride;
                        outerStride2 -= innerStride2 * @out.Shape.Dimensions[1].Length;

                        for (long i = 0; i < opsOuter; i++)
                        {
                            for (long j = 0; j < opsInner; j++)
                            {
                                d2[ix2] = (System.Double)(Math.Sin(scalar));
                                ix2 += innerStride2;
                            }

                            ix2 += outerStride2;
                        }
                    }
                    else
                    {
                        long n = @out.Shape.Dimensions.LongLength - 3;
                        long[] limits = @out.Shape.Dimensions.Where(x => n-- > 0).Select(x => x.Length).ToArray();
                        long[] counters = new long[limits.LongLength];

                        long totalOps = limits.LongLength == 0 ? 1 : limits.Aggregate<long>((a, b) => a * b);

                        //This chunck of variables are used to prevent repeated calculations of offsets
                        long dimIndex0 = 0 + limits.LongLength;
                        long dimIndex1 = 1 + limits.LongLength;
                        long dimIndex2 = 2 + limits.LongLength;

                        long opsOuter = @out.Shape.Dimensions[0 + limits.LongLength].Length;
                        long opsInner = @out.Shape.Dimensions[1 + limits.LongLength].Length;
                        long opsInnerInner = @out.Shape.Dimensions[2 + limits.LongLength].Length;

                        long outerStride3 = @out.Shape.Dimensions[dimIndex0].Stride;
                        long innerStride3 = @out.Shape.Dimensions[dimIndex1].Stride;
                        long innerInnerStride3 = @out.Shape.Dimensions[dimIndex2].Stride;
                        outerStride3 -= innerStride3 * @out.Shape.Dimensions[dimIndex1].Length;
                        innerStride3 -= innerInnerStride3 * @out.Shape.Dimensions[dimIndex2].Length;

                        for (long outer = 0; outer < totalOps; outer++)
                        {
                            //Get the array offset for the first element in the outer dimension
                            long ix3 = @out.Shape[counters];

                            for (long i = 0; i < opsOuter; i++)
                            {
                                for (long j = 0; j < opsInner; j++)
                                {
                                    for (long k = 0; k < opsInnerInner; k++)
                                    {
                                        d2[ix3] = (System.Double)(Math.Sin(scalar));
                                        ix3 += innerInnerStride3;
                                    }

                                    ix3 += innerStride3;
                                }

                                ix3 += outerStride3;
                            }

                            if (counters.LongLength > 0)
                            {
                                //Basically a ripple carry adder
                                long p = counters.LongLength - 1;
                                while (++counters[p] == limits[p] && p > 0)
                                {
                                    counters[p] = 0;
                                    p--;
                                }
                            }
                        }
                    }
                }
            }
        }
        /// <summary>
        /// Unsafe implementation of applying a unary operation
        /// </summary>
        /// <typeparam name="C">The type of operation to perform</typeparam>
        /// <param name="op">The operation instance</param>
        /// <param name="in1">The input argument</param>
        /// <param name="out">The output target</param>
        internal static void UFunc_Op_Inner_Unary_Flush_SByte_TypedImpl<C>(NumCIL.Int8.Cos op, NdArray<System.SByte> in1, NdArray<System.SByte> @out)
            where C : IUnaryOp<System.SByte>
        {
            unsafe
            {
                using (var f1 = new Pinner(in1.DataAccessor))
                using (var f2 = new Pinner(@out.DataAccessor))
                {
                    var d1 = (System.SByte*)f1.ptr;
                    var d2 = (System.SByte*)f2.ptr;

                    if (@out.Shape.Dimensions.Length == 1)
                    {
                        long totalOps = @out.Shape.Dimensions[0].Length;

                        long ix1 = in1.Shape.Offset;
                        long ix2 = @out.Shape.Offset;

                        long stride1 = in1.Shape.Dimensions[0].Stride;
                        long stride2 = @out.Shape.Dimensions[0].Stride;


                        if (stride1 == stride2 && ix1 == ix2)
                        {
                            //Best case, all are equal, just keep a single counter
                            for (long i = 0; i < totalOps; i++)
                            {
                                d2[ix1] = (System.SByte)(Math.Cos(d1[ix1]));
                                ix1 += stride1;
                            }
                        }
                        else
                        {
                            for (long i = 0; i < totalOps; i++)
                            {
                                d2[ix2] = (System.SByte)(Math.Cos(d1[ix1]));
                                ix1 += stride1;
                                ix2 += stride2;
                            }
                        }
                    }
                    else if (@out.Shape.Dimensions.Length == 2)
                    {
                        long opsOuter = @out.Shape.Dimensions[0].Length;
                        long opsInner = @out.Shape.Dimensions[1].Length;

                        long ix1 = in1.Shape.Offset;
                        long ix2 = @out.Shape.Offset;

                        long outerStride1 = in1.Shape.Dimensions[0].Stride;
                        long outerStride2 = @out.Shape.Dimensions[0].Stride;

                        long innerStride1 = in1.Shape.Dimensions[1].Stride;
                        long innerStride2 = @out.Shape.Dimensions[1].Stride;

                        outerStride1 -= innerStride1 * in1.Shape.Dimensions[1].Length;
                        outerStride2 -= innerStride2 * @out.Shape.Dimensions[1].Length;

                        for (long i = 0; i < opsOuter; i++)
                        {
                            for (long j = 0; j < opsInner; j++)
                            {
                                d2[ix2] = (System.SByte)(Math.Cos(d1[ix1]));
                                ix1 += innerStride1;
                                ix2 += innerStride2;
                            }

                            ix1 += outerStride1;
                            ix2 += outerStride2;
                        }
                    }
                    else
                    {
                        long n = in1.Shape.Dimensions.LongLength - 3;
                        long[] limits = in1.Shape.Dimensions.Where(x => n-- > 0).Select(x => x.Length).ToArray();
                        long[] counters = new long[limits.LongLength];

                        long totalOps = limits.LongLength == 0 ? 1 : limits.Aggregate<long>((a, b) => a * b);

                        //This chunck of variables are used to prevent repeated calculations of offsets
                        long dimIndex0 = 0 + limits.LongLength;
                        long dimIndex1 = 1 + limits.LongLength;
                        long dimIndex2 = 2 + limits.LongLength;

                        long opsOuter = @out.Shape.Dimensions[0 + limits.LongLength].Length;
                        long opsInner = @out.Shape.Dimensions[1 + limits.LongLength].Length;
                        long opsInnerInner = @out.Shape.Dimensions[2 + limits.LongLength].Length;

                        long outerStride1 = in1.Shape.Dimensions[dimIndex0].Stride;
                        long outerStride3 = @out.Shape.Dimensions[dimIndex0].Stride;

                        long innerStride1 = in1.Shape.Dimensions[dimIndex1].Stride;
                        long innerStride3 = @out.Shape.Dimensions[dimIndex1].Stride;

                        long innerInnerStride1 = in1.Shape.Dimensions[dimIndex2].Stride;
                        long innerInnerStride3 = @out.Shape.Dimensions[dimIndex2].Stride;

                        outerStride1 -= innerStride1 * in1.Shape.Dimensions[dimIndex1].Length;
                        outerStride3 -= innerStride3 * @out.Shape.Dimensions[dimIndex1].Length;

                        innerStride1 -= innerInnerStride1 * in1.Shape.Dimensions[dimIndex2].Length;
                        innerStride3 -= innerInnerStride3 * @out.Shape.Dimensions[dimIndex2].Length;

                        for (long outer = 0; outer < totalOps; outer++)
                        {
                            //Get the array offset for the first element in the outer dimension
                            long ix1 = in1.Shape[counters];
                            long ix3 = @out.Shape[counters];


                            for (long i = 0; i < opsOuter; i++)
                            {
                                for (long j = 0; j < opsInner; j++)
                                {
                                    for (long k = 0; k < opsInnerInner; k++)
                                    {
                                        d2[ix3] = (System.SByte)(Math.Cos(d1[ix1]));
                                        ix1 += innerInnerStride1;
                                        ix3 += innerInnerStride3;
                                    }

                                    ix1 += innerStride1;
                                    ix3 += innerStride3;
                                }

                                ix1 += outerStride1;
                                ix3 += outerStride3;
                            }

                            if (counters.LongLength > 0)
                            {
                                //Basically a ripple carry adder
                                long p = counters.LongLength - 1;
                                while (++counters[p] == limits[p] && p > 0)
                                {
                                    counters[p] = 0;
                                    p--;
                                }
                            }
                        }
                    }
                }
            }
        }

        /// <summary>
        /// Unsafe implementation of applying a unary operation
        /// </summary>
        /// <typeparam name="C">The type of operation to perform</typeparam>
        /// <param name="op">The operation instance</param>
        /// <param name="scalar">The input scalar argument</param>
        /// <param name="out">The output target</param>
        internal static void UFunc_Op_Inner_Unary_Scalar_Flush_SByte_TypedImpl<C>(NumCIL.Int8.Cos op, System.SByte scalar, NdArray<System.SByte> @out)
            where C : IUnaryOp<System.SByte>
        {
            unsafe
            {
                using (var f2 = new Pinner(@out.DataAccessor))
                {
                    var d2 = (System.SByte*)f2.ptr;

                    if (@out.Shape.Dimensions.Length == 1)
                    {
                        long totalOps = @out.Shape.Dimensions[0].Length;
                        long ix2 = @out.Shape.Offset;
                        long stride2 = @out.Shape.Dimensions[0].Stride;

                        for (long i = 0; i < totalOps; i++)
                        {
                            d2[ix2] = (System.SByte)(Math.Cos(scalar));
                            ix2 += stride2;
                        }
                    }
                    else if (@out.Shape.Dimensions.Length == 2)
                    {
                        long opsOuter = @out.Shape.Dimensions[0].Length;
                        long opsInner = @out.Shape.Dimensions[1].Length;

                        long ix2 = @out.Shape.Offset;
                        long outerStride2 = @out.Shape.Dimensions[0].Stride;
                        long innerStride2 = @out.Shape.Dimensions[1].Stride;
                        outerStride2 -= innerStride2 * @out.Shape.Dimensions[1].Length;

                        for (long i = 0; i < opsOuter; i++)
                        {
                            for (long j = 0; j < opsInner; j++)
                            {
                                d2[ix2] = (System.SByte)(Math.Cos(scalar));
                                ix2 += innerStride2;
                            }

                            ix2 += outerStride2;
                        }
                    }
                    else
                    {
                        long n = @out.Shape.Dimensions.LongLength - 3;
                        long[] limits = @out.Shape.Dimensions.Where(x => n-- > 0).Select(x => x.Length).ToArray();
                        long[] counters = new long[limits.LongLength];

                        long totalOps = limits.LongLength == 0 ? 1 : limits.Aggregate<long>((a, b) => a * b);

                        //This chunck of variables are used to prevent repeated calculations of offsets
                        long dimIndex0 = 0 + limits.LongLength;
                        long dimIndex1 = 1 + limits.LongLength;
                        long dimIndex2 = 2 + limits.LongLength;

                        long opsOuter = @out.Shape.Dimensions[0 + limits.LongLength].Length;
                        long opsInner = @out.Shape.Dimensions[1 + limits.LongLength].Length;
                        long opsInnerInner = @out.Shape.Dimensions[2 + limits.LongLength].Length;

                        long outerStride3 = @out.Shape.Dimensions[dimIndex0].Stride;
                        long innerStride3 = @out.Shape.Dimensions[dimIndex1].Stride;
                        long innerInnerStride3 = @out.Shape.Dimensions[dimIndex2].Stride;
                        outerStride3 -= innerStride3 * @out.Shape.Dimensions[dimIndex1].Length;
                        innerStride3 -= innerInnerStride3 * @out.Shape.Dimensions[dimIndex2].Length;

                        for (long outer = 0; outer < totalOps; outer++)
                        {
                            //Get the array offset for the first element in the outer dimension
                            long ix3 = @out.Shape[counters];

                            for (long i = 0; i < opsOuter; i++)
                            {
                                for (long j = 0; j < opsInner; j++)
                                {
                                    for (long k = 0; k < opsInnerInner; k++)
                                    {
                                        d2[ix3] = (System.SByte)(Math.Cos(scalar));
                                        ix3 += innerInnerStride3;
                                    }

                                    ix3 += innerStride3;
                                }

                                ix3 += outerStride3;
                            }

                            if (counters.LongLength > 0)
                            {
                                //Basically a ripple carry adder
                                long p = counters.LongLength - 1;
                                while (++counters[p] == limits[p] && p > 0)
                                {
                                    counters[p] = 0;
                                    p--;
                                }
                            }
                        }
                    }
                }
            }
        }
        /// <summary>
        /// Unsafe implementation of applying a unary operation
        /// </summary>
        /// <typeparam name="C">The type of operation to perform</typeparam>
        /// <param name="op">The operation instance</param>
        /// <param name="in1">The input argument</param>
        /// <param name="out">The output target</param>
        internal static void UFunc_Op_Inner_Unary_Flush_Byte_TypedImpl<C>(NumCIL.UInt8.Cos op, NdArray<System.Byte> in1, NdArray<System.Byte> @out)
            where C : IUnaryOp<System.Byte>
        {
            unsafe
            {
                using (var f1 = new Pinner(in1.DataAccessor))
                using (var f2 = new Pinner(@out.DataAccessor))
                {
                    var d1 = (System.Byte*)f1.ptr;
                    var d2 = (System.Byte*)f2.ptr;

                    if (@out.Shape.Dimensions.Length == 1)
                    {
                        long totalOps = @out.Shape.Dimensions[0].Length;

                        long ix1 = in1.Shape.Offset;
                        long ix2 = @out.Shape.Offset;

                        long stride1 = in1.Shape.Dimensions[0].Stride;
                        long stride2 = @out.Shape.Dimensions[0].Stride;


                        if (stride1 == stride2 && ix1 == ix2)
                        {
                            //Best case, all are equal, just keep a single counter
                            for (long i = 0; i < totalOps; i++)
                            {
                                d2[ix1] = (System.Byte)(Math.Cos(d1[ix1]));
                                ix1 += stride1;
                            }
                        }
                        else
                        {
                            for (long i = 0; i < totalOps; i++)
                            {
                                d2[ix2] = (System.Byte)(Math.Cos(d1[ix1]));
                                ix1 += stride1;
                                ix2 += stride2;
                            }
                        }
                    }
                    else if (@out.Shape.Dimensions.Length == 2)
                    {
                        long opsOuter = @out.Shape.Dimensions[0].Length;
                        long opsInner = @out.Shape.Dimensions[1].Length;

                        long ix1 = in1.Shape.Offset;
                        long ix2 = @out.Shape.Offset;

                        long outerStride1 = in1.Shape.Dimensions[0].Stride;
                        long outerStride2 = @out.Shape.Dimensions[0].Stride;

                        long innerStride1 = in1.Shape.Dimensions[1].Stride;
                        long innerStride2 = @out.Shape.Dimensions[1].Stride;

                        outerStride1 -= innerStride1 * in1.Shape.Dimensions[1].Length;
                        outerStride2 -= innerStride2 * @out.Shape.Dimensions[1].Length;

                        for (long i = 0; i < opsOuter; i++)
                        {
                            for (long j = 0; j < opsInner; j++)
                            {
                                d2[ix2] = (System.Byte)(Math.Cos(d1[ix1]));
                                ix1 += innerStride1;
                                ix2 += innerStride2;
                            }

                            ix1 += outerStride1;
                            ix2 += outerStride2;
                        }
                    }
                    else
                    {
                        long n = in1.Shape.Dimensions.LongLength - 3;
                        long[] limits = in1.Shape.Dimensions.Where(x => n-- > 0).Select(x => x.Length).ToArray();
                        long[] counters = new long[limits.LongLength];

                        long totalOps = limits.LongLength == 0 ? 1 : limits.Aggregate<long>((a, b) => a * b);

                        //This chunck of variables are used to prevent repeated calculations of offsets
                        long dimIndex0 = 0 + limits.LongLength;
                        long dimIndex1 = 1 + limits.LongLength;
                        long dimIndex2 = 2 + limits.LongLength;

                        long opsOuter = @out.Shape.Dimensions[0 + limits.LongLength].Length;
                        long opsInner = @out.Shape.Dimensions[1 + limits.LongLength].Length;
                        long opsInnerInner = @out.Shape.Dimensions[2 + limits.LongLength].Length;

                        long outerStride1 = in1.Shape.Dimensions[dimIndex0].Stride;
                        long outerStride3 = @out.Shape.Dimensions[dimIndex0].Stride;

                        long innerStride1 = in1.Shape.Dimensions[dimIndex1].Stride;
                        long innerStride3 = @out.Shape.Dimensions[dimIndex1].Stride;

                        long innerInnerStride1 = in1.Shape.Dimensions[dimIndex2].Stride;
                        long innerInnerStride3 = @out.Shape.Dimensions[dimIndex2].Stride;

                        outerStride1 -= innerStride1 * in1.Shape.Dimensions[dimIndex1].Length;
                        outerStride3 -= innerStride3 * @out.Shape.Dimensions[dimIndex1].Length;

                        innerStride1 -= innerInnerStride1 * in1.Shape.Dimensions[dimIndex2].Length;
                        innerStride3 -= innerInnerStride3 * @out.Shape.Dimensions[dimIndex2].Length;

                        for (long outer = 0; outer < totalOps; outer++)
                        {
                            //Get the array offset for the first element in the outer dimension
                            long ix1 = in1.Shape[counters];
                            long ix3 = @out.Shape[counters];


                            for (long i = 0; i < opsOuter; i++)
                            {
                                for (long j = 0; j < opsInner; j++)
                                {
                                    for (long k = 0; k < opsInnerInner; k++)
                                    {
                                        d2[ix3] = (System.Byte)(Math.Cos(d1[ix1]));
                                        ix1 += innerInnerStride1;
                                        ix3 += innerInnerStride3;
                                    }

                                    ix1 += innerStride1;
                                    ix3 += innerStride3;
                                }

                                ix1 += outerStride1;
                                ix3 += outerStride3;
                            }

                            if (counters.LongLength > 0)
                            {
                                //Basically a ripple carry adder
                                long p = counters.LongLength - 1;
                                while (++counters[p] == limits[p] && p > 0)
                                {
                                    counters[p] = 0;
                                    p--;
                                }
                            }
                        }
                    }
                }
            }
        }

        /// <summary>
        /// Unsafe implementation of applying a unary operation
        /// </summary>
        /// <typeparam name="C">The type of operation to perform</typeparam>
        /// <param name="op">The operation instance</param>
        /// <param name="scalar">The input scalar argument</param>
        /// <param name="out">The output target</param>
        internal static void UFunc_Op_Inner_Unary_Scalar_Flush_Byte_TypedImpl<C>(NumCIL.UInt8.Cos op, System.Byte scalar, NdArray<System.Byte> @out)
            where C : IUnaryOp<System.Byte>
        {
            unsafe
            {
                using (var f2 = new Pinner(@out.DataAccessor))
                {
                    var d2 = (System.Byte*)f2.ptr;

                    if (@out.Shape.Dimensions.Length == 1)
                    {
                        long totalOps = @out.Shape.Dimensions[0].Length;
                        long ix2 = @out.Shape.Offset;
                        long stride2 = @out.Shape.Dimensions[0].Stride;

                        for (long i = 0; i < totalOps; i++)
                        {
                            d2[ix2] = (System.Byte)(Math.Cos(scalar));
                            ix2 += stride2;
                        }
                    }
                    else if (@out.Shape.Dimensions.Length == 2)
                    {
                        long opsOuter = @out.Shape.Dimensions[0].Length;
                        long opsInner = @out.Shape.Dimensions[1].Length;

                        long ix2 = @out.Shape.Offset;
                        long outerStride2 = @out.Shape.Dimensions[0].Stride;
                        long innerStride2 = @out.Shape.Dimensions[1].Stride;
                        outerStride2 -= innerStride2 * @out.Shape.Dimensions[1].Length;

                        for (long i = 0; i < opsOuter; i++)
                        {
                            for (long j = 0; j < opsInner; j++)
                            {
                                d2[ix2] = (System.Byte)(Math.Cos(scalar));
                                ix2 += innerStride2;
                            }

                            ix2 += outerStride2;
                        }
                    }
                    else
                    {
                        long n = @out.Shape.Dimensions.LongLength - 3;
                        long[] limits = @out.Shape.Dimensions.Where(x => n-- > 0).Select(x => x.Length).ToArray();
                        long[] counters = new long[limits.LongLength];

                        long totalOps = limits.LongLength == 0 ? 1 : limits.Aggregate<long>((a, b) => a * b);

                        //This chunck of variables are used to prevent repeated calculations of offsets
                        long dimIndex0 = 0 + limits.LongLength;
                        long dimIndex1 = 1 + limits.LongLength;
                        long dimIndex2 = 2 + limits.LongLength;

                        long opsOuter = @out.Shape.Dimensions[0 + limits.LongLength].Length;
                        long opsInner = @out.Shape.Dimensions[1 + limits.LongLength].Length;
                        long opsInnerInner = @out.Shape.Dimensions[2 + limits.LongLength].Length;

                        long outerStride3 = @out.Shape.Dimensions[dimIndex0].Stride;
                        long innerStride3 = @out.Shape.Dimensions[dimIndex1].Stride;
                        long innerInnerStride3 = @out.Shape.Dimensions[dimIndex2].Stride;
                        outerStride3 -= innerStride3 * @out.Shape.Dimensions[dimIndex1].Length;
                        innerStride3 -= innerInnerStride3 * @out.Shape.Dimensions[dimIndex2].Length;

                        for (long outer = 0; outer < totalOps; outer++)
                        {
                            //Get the array offset for the first element in the outer dimension
                            long ix3 = @out.Shape[counters];

                            for (long i = 0; i < opsOuter; i++)
                            {
                                for (long j = 0; j < opsInner; j++)
                                {
                                    for (long k = 0; k < opsInnerInner; k++)
                                    {
                                        d2[ix3] = (System.Byte)(Math.Cos(scalar));
                                        ix3 += innerInnerStride3;
                                    }

                                    ix3 += innerStride3;
                                }

                                ix3 += outerStride3;
                            }

                            if (counters.LongLength > 0)
                            {
                                //Basically a ripple carry adder
                                long p = counters.LongLength - 1;
                                while (++counters[p] == limits[p] && p > 0)
                                {
                                    counters[p] = 0;
                                    p--;
                                }
                            }
                        }
                    }
                }
            }
        }
        /// <summary>
        /// Unsafe implementation of applying a unary operation
        /// </summary>
        /// <typeparam name="C">The type of operation to perform</typeparam>
        /// <param name="op">The operation instance</param>
        /// <param name="in1">The input argument</param>
        /// <param name="out">The output target</param>
        internal static void UFunc_Op_Inner_Unary_Flush_Int16_TypedImpl<C>(NumCIL.Int16.Cos op, NdArray<System.Int16> in1, NdArray<System.Int16> @out)
            where C : IUnaryOp<System.Int16>
        {
            unsafe
            {
                using (var f1 = new Pinner(in1.DataAccessor))
                using (var f2 = new Pinner(@out.DataAccessor))
                {
                    var d1 = (System.Int16*)f1.ptr;
                    var d2 = (System.Int16*)f2.ptr;

                    if (@out.Shape.Dimensions.Length == 1)
                    {
                        long totalOps = @out.Shape.Dimensions[0].Length;

                        long ix1 = in1.Shape.Offset;
                        long ix2 = @out.Shape.Offset;

                        long stride1 = in1.Shape.Dimensions[0].Stride;
                        long stride2 = @out.Shape.Dimensions[0].Stride;


                        if (stride1 == stride2 && ix1 == ix2)
                        {
                            //Best case, all are equal, just keep a single counter
                            for (long i = 0; i < totalOps; i++)
                            {
                                d2[ix1] = (System.Int16)(Math.Cos(d1[ix1]));
                                ix1 += stride1;
                            }
                        }
                        else
                        {
                            for (long i = 0; i < totalOps; i++)
                            {
                                d2[ix2] = (System.Int16)(Math.Cos(d1[ix1]));
                                ix1 += stride1;
                                ix2 += stride2;
                            }
                        }
                    }
                    else if (@out.Shape.Dimensions.Length == 2)
                    {
                        long opsOuter = @out.Shape.Dimensions[0].Length;
                        long opsInner = @out.Shape.Dimensions[1].Length;

                        long ix1 = in1.Shape.Offset;
                        long ix2 = @out.Shape.Offset;

                        long outerStride1 = in1.Shape.Dimensions[0].Stride;
                        long outerStride2 = @out.Shape.Dimensions[0].Stride;

                        long innerStride1 = in1.Shape.Dimensions[1].Stride;
                        long innerStride2 = @out.Shape.Dimensions[1].Stride;

                        outerStride1 -= innerStride1 * in1.Shape.Dimensions[1].Length;
                        outerStride2 -= innerStride2 * @out.Shape.Dimensions[1].Length;

                        for (long i = 0; i < opsOuter; i++)
                        {
                            for (long j = 0; j < opsInner; j++)
                            {
                                d2[ix2] = (System.Int16)(Math.Cos(d1[ix1]));
                                ix1 += innerStride1;
                                ix2 += innerStride2;
                            }

                            ix1 += outerStride1;
                            ix2 += outerStride2;
                        }
                    }
                    else
                    {
                        long n = in1.Shape.Dimensions.LongLength - 3;
                        long[] limits = in1.Shape.Dimensions.Where(x => n-- > 0).Select(x => x.Length).ToArray();
                        long[] counters = new long[limits.LongLength];

                        long totalOps = limits.LongLength == 0 ? 1 : limits.Aggregate<long>((a, b) => a * b);

                        //This chunck of variables are used to prevent repeated calculations of offsets
                        long dimIndex0 = 0 + limits.LongLength;
                        long dimIndex1 = 1 + limits.LongLength;
                        long dimIndex2 = 2 + limits.LongLength;

                        long opsOuter = @out.Shape.Dimensions[0 + limits.LongLength].Length;
                        long opsInner = @out.Shape.Dimensions[1 + limits.LongLength].Length;
                        long opsInnerInner = @out.Shape.Dimensions[2 + limits.LongLength].Length;

                        long outerStride1 = in1.Shape.Dimensions[dimIndex0].Stride;
                        long outerStride3 = @out.Shape.Dimensions[dimIndex0].Stride;

                        long innerStride1 = in1.Shape.Dimensions[dimIndex1].Stride;
                        long innerStride3 = @out.Shape.Dimensions[dimIndex1].Stride;

                        long innerInnerStride1 = in1.Shape.Dimensions[dimIndex2].Stride;
                        long innerInnerStride3 = @out.Shape.Dimensions[dimIndex2].Stride;

                        outerStride1 -= innerStride1 * in1.Shape.Dimensions[dimIndex1].Length;
                        outerStride3 -= innerStride3 * @out.Shape.Dimensions[dimIndex1].Length;

                        innerStride1 -= innerInnerStride1 * in1.Shape.Dimensions[dimIndex2].Length;
                        innerStride3 -= innerInnerStride3 * @out.Shape.Dimensions[dimIndex2].Length;

                        for (long outer = 0; outer < totalOps; outer++)
                        {
                            //Get the array offset for the first element in the outer dimension
                            long ix1 = in1.Shape[counters];
                            long ix3 = @out.Shape[counters];


                            for (long i = 0; i < opsOuter; i++)
                            {
                                for (long j = 0; j < opsInner; j++)
                                {
                                    for (long k = 0; k < opsInnerInner; k++)
                                    {
                                        d2[ix3] = (System.Int16)(Math.Cos(d1[ix1]));
                                        ix1 += innerInnerStride1;
                                        ix3 += innerInnerStride3;
                                    }

                                    ix1 += innerStride1;
                                    ix3 += innerStride3;
                                }

                                ix1 += outerStride1;
                                ix3 += outerStride3;
                            }

                            if (counters.LongLength > 0)
                            {
                                //Basically a ripple carry adder
                                long p = counters.LongLength - 1;
                                while (++counters[p] == limits[p] && p > 0)
                                {
                                    counters[p] = 0;
                                    p--;
                                }
                            }
                        }
                    }
                }
            }
        }

        /// <summary>
        /// Unsafe implementation of applying a unary operation
        /// </summary>
        /// <typeparam name="C">The type of operation to perform</typeparam>
        /// <param name="op">The operation instance</param>
        /// <param name="scalar">The input scalar argument</param>
        /// <param name="out">The output target</param>
        internal static void UFunc_Op_Inner_Unary_Scalar_Flush_Int16_TypedImpl<C>(NumCIL.Int16.Cos op, System.Int16 scalar, NdArray<System.Int16> @out)
            where C : IUnaryOp<System.Int16>
        {
            unsafe
            {
                using (var f2 = new Pinner(@out.DataAccessor))
                {
                    var d2 = (System.Int16*)f2.ptr;

                    if (@out.Shape.Dimensions.Length == 1)
                    {
                        long totalOps = @out.Shape.Dimensions[0].Length;
                        long ix2 = @out.Shape.Offset;
                        long stride2 = @out.Shape.Dimensions[0].Stride;

                        for (long i = 0; i < totalOps; i++)
                        {
                            d2[ix2] = (System.Int16)(Math.Cos(scalar));
                            ix2 += stride2;
                        }
                    }
                    else if (@out.Shape.Dimensions.Length == 2)
                    {
                        long opsOuter = @out.Shape.Dimensions[0].Length;
                        long opsInner = @out.Shape.Dimensions[1].Length;

                        long ix2 = @out.Shape.Offset;
                        long outerStride2 = @out.Shape.Dimensions[0].Stride;
                        long innerStride2 = @out.Shape.Dimensions[1].Stride;
                        outerStride2 -= innerStride2 * @out.Shape.Dimensions[1].Length;

                        for (long i = 0; i < opsOuter; i++)
                        {
                            for (long j = 0; j < opsInner; j++)
                            {
                                d2[ix2] = (System.Int16)(Math.Cos(scalar));
                                ix2 += innerStride2;
                            }

                            ix2 += outerStride2;
                        }
                    }
                    else
                    {
                        long n = @out.Shape.Dimensions.LongLength - 3;
                        long[] limits = @out.Shape.Dimensions.Where(x => n-- > 0).Select(x => x.Length).ToArray();
                        long[] counters = new long[limits.LongLength];

                        long totalOps = limits.LongLength == 0 ? 1 : limits.Aggregate<long>((a, b) => a * b);

                        //This chunck of variables are used to prevent repeated calculations of offsets
                        long dimIndex0 = 0 + limits.LongLength;
                        long dimIndex1 = 1 + limits.LongLength;
                        long dimIndex2 = 2 + limits.LongLength;

                        long opsOuter = @out.Shape.Dimensions[0 + limits.LongLength].Length;
                        long opsInner = @out.Shape.Dimensions[1 + limits.LongLength].Length;
                        long opsInnerInner = @out.Shape.Dimensions[2 + limits.LongLength].Length;

                        long outerStride3 = @out.Shape.Dimensions[dimIndex0].Stride;
                        long innerStride3 = @out.Shape.Dimensions[dimIndex1].Stride;
                        long innerInnerStride3 = @out.Shape.Dimensions[dimIndex2].Stride;
                        outerStride3 -= innerStride3 * @out.Shape.Dimensions[dimIndex1].Length;
                        innerStride3 -= innerInnerStride3 * @out.Shape.Dimensions[dimIndex2].Length;

                        for (long outer = 0; outer < totalOps; outer++)
                        {
                            //Get the array offset for the first element in the outer dimension
                            long ix3 = @out.Shape[counters];

                            for (long i = 0; i < opsOuter; i++)
                            {
                                for (long j = 0; j < opsInner; j++)
                                {
                                    for (long k = 0; k < opsInnerInner; k++)
                                    {
                                        d2[ix3] = (System.Int16)(Math.Cos(scalar));
                                        ix3 += innerInnerStride3;
                                    }

                                    ix3 += innerStride3;
                                }

                                ix3 += outerStride3;
                            }

                            if (counters.LongLength > 0)
                            {
                                //Basically a ripple carry adder
                                long p = counters.LongLength - 1;
                                while (++counters[p] == limits[p] && p > 0)
                                {
                                    counters[p] = 0;
                                    p--;
                                }
                            }
                        }
                    }
                }
            }
        }
        /// <summary>
        /// Unsafe implementation of applying a unary operation
        /// </summary>
        /// <typeparam name="C">The type of operation to perform</typeparam>
        /// <param name="op">The operation instance</param>
        /// <param name="in1">The input argument</param>
        /// <param name="out">The output target</param>
        internal static void UFunc_Op_Inner_Unary_Flush_UInt16_TypedImpl<C>(NumCIL.UInt16.Cos op, NdArray<System.UInt16> in1, NdArray<System.UInt16> @out)
            where C : IUnaryOp<System.UInt16>
        {
            unsafe
            {
                using (var f1 = new Pinner(in1.DataAccessor))
                using (var f2 = new Pinner(@out.DataAccessor))
                {
                    var d1 = (System.UInt16*)f1.ptr;
                    var d2 = (System.UInt16*)f2.ptr;

                    if (@out.Shape.Dimensions.Length == 1)
                    {
                        long totalOps = @out.Shape.Dimensions[0].Length;

                        long ix1 = in1.Shape.Offset;
                        long ix2 = @out.Shape.Offset;

                        long stride1 = in1.Shape.Dimensions[0].Stride;
                        long stride2 = @out.Shape.Dimensions[0].Stride;


                        if (stride1 == stride2 && ix1 == ix2)
                        {
                            //Best case, all are equal, just keep a single counter
                            for (long i = 0; i < totalOps; i++)
                            {
                                d2[ix1] = (System.UInt16)(Math.Cos(d1[ix1]));
                                ix1 += stride1;
                            }
                        }
                        else
                        {
                            for (long i = 0; i < totalOps; i++)
                            {
                                d2[ix2] = (System.UInt16)(Math.Cos(d1[ix1]));
                                ix1 += stride1;
                                ix2 += stride2;
                            }
                        }
                    }
                    else if (@out.Shape.Dimensions.Length == 2)
                    {
                        long opsOuter = @out.Shape.Dimensions[0].Length;
                        long opsInner = @out.Shape.Dimensions[1].Length;

                        long ix1 = in1.Shape.Offset;
                        long ix2 = @out.Shape.Offset;

                        long outerStride1 = in1.Shape.Dimensions[0].Stride;
                        long outerStride2 = @out.Shape.Dimensions[0].Stride;

                        long innerStride1 = in1.Shape.Dimensions[1].Stride;
                        long innerStride2 = @out.Shape.Dimensions[1].Stride;

                        outerStride1 -= innerStride1 * in1.Shape.Dimensions[1].Length;
                        outerStride2 -= innerStride2 * @out.Shape.Dimensions[1].Length;

                        for (long i = 0; i < opsOuter; i++)
                        {
                            for (long j = 0; j < opsInner; j++)
                            {
                                d2[ix2] = (System.UInt16)(Math.Cos(d1[ix1]));
                                ix1 += innerStride1;
                                ix2 += innerStride2;
                            }

                            ix1 += outerStride1;
                            ix2 += outerStride2;
                        }
                    }
                    else
                    {
                        long n = in1.Shape.Dimensions.LongLength - 3;
                        long[] limits = in1.Shape.Dimensions.Where(x => n-- > 0).Select(x => x.Length).ToArray();
                        long[] counters = new long[limits.LongLength];

                        long totalOps = limits.LongLength == 0 ? 1 : limits.Aggregate<long>((a, b) => a * b);

                        //This chunck of variables are used to prevent repeated calculations of offsets
                        long dimIndex0 = 0 + limits.LongLength;
                        long dimIndex1 = 1 + limits.LongLength;
                        long dimIndex2 = 2 + limits.LongLength;

                        long opsOuter = @out.Shape.Dimensions[0 + limits.LongLength].Length;
                        long opsInner = @out.Shape.Dimensions[1 + limits.LongLength].Length;
                        long opsInnerInner = @out.Shape.Dimensions[2 + limits.LongLength].Length;

                        long outerStride1 = in1.Shape.Dimensions[dimIndex0].Stride;
                        long outerStride3 = @out.Shape.Dimensions[dimIndex0].Stride;

                        long innerStride1 = in1.Shape.Dimensions[dimIndex1].Stride;
                        long innerStride3 = @out.Shape.Dimensions[dimIndex1].Stride;

                        long innerInnerStride1 = in1.Shape.Dimensions[dimIndex2].Stride;
                        long innerInnerStride3 = @out.Shape.Dimensions[dimIndex2].Stride;

                        outerStride1 -= innerStride1 * in1.Shape.Dimensions[dimIndex1].Length;
                        outerStride3 -= innerStride3 * @out.Shape.Dimensions[dimIndex1].Length;

                        innerStride1 -= innerInnerStride1 * in1.Shape.Dimensions[dimIndex2].Length;
                        innerStride3 -= innerInnerStride3 * @out.Shape.Dimensions[dimIndex2].Length;

                        for (long outer = 0; outer < totalOps; outer++)
                        {
                            //Get the array offset for the first element in the outer dimension
                            long ix1 = in1.Shape[counters];
                            long ix3 = @out.Shape[counters];


                            for (long i = 0; i < opsOuter; i++)
                            {
                                for (long j = 0; j < opsInner; j++)
                                {
                                    for (long k = 0; k < opsInnerInner; k++)
                                    {
                                        d2[ix3] = (System.UInt16)(Math.Cos(d1[ix1]));
                                        ix1 += innerInnerStride1;
                                        ix3 += innerInnerStride3;
                                    }

                                    ix1 += innerStride1;
                                    ix3 += innerStride3;
                                }

                                ix1 += outerStride1;
                                ix3 += outerStride3;
                            }

                            if (counters.LongLength > 0)
                            {
                                //Basically a ripple carry adder
                                long p = counters.LongLength - 1;
                                while (++counters[p] == limits[p] && p > 0)
                                {
                                    counters[p] = 0;
                                    p--;
                                }
                            }
                        }
                    }
                }
            }
        }

        /// <summary>
        /// Unsafe implementation of applying a unary operation
        /// </summary>
        /// <typeparam name="C">The type of operation to perform</typeparam>
        /// <param name="op">The operation instance</param>
        /// <param name="scalar">The input scalar argument</param>
        /// <param name="out">The output target</param>
        internal static void UFunc_Op_Inner_Unary_Scalar_Flush_UInt16_TypedImpl<C>(NumCIL.UInt16.Cos op, System.UInt16 scalar, NdArray<System.UInt16> @out)
            where C : IUnaryOp<System.UInt16>
        {
            unsafe
            {
                using (var f2 = new Pinner(@out.DataAccessor))
                {
                    var d2 = (System.UInt16*)f2.ptr;

                    if (@out.Shape.Dimensions.Length == 1)
                    {
                        long totalOps = @out.Shape.Dimensions[0].Length;
                        long ix2 = @out.Shape.Offset;
                        long stride2 = @out.Shape.Dimensions[0].Stride;

                        for (long i = 0; i < totalOps; i++)
                        {
                            d2[ix2] = (System.UInt16)(Math.Cos(scalar));
                            ix2 += stride2;
                        }
                    }
                    else if (@out.Shape.Dimensions.Length == 2)
                    {
                        long opsOuter = @out.Shape.Dimensions[0].Length;
                        long opsInner = @out.Shape.Dimensions[1].Length;

                        long ix2 = @out.Shape.Offset;
                        long outerStride2 = @out.Shape.Dimensions[0].Stride;
                        long innerStride2 = @out.Shape.Dimensions[1].Stride;
                        outerStride2 -= innerStride2 * @out.Shape.Dimensions[1].Length;

                        for (long i = 0; i < opsOuter; i++)
                        {
                            for (long j = 0; j < opsInner; j++)
                            {
                                d2[ix2] = (System.UInt16)(Math.Cos(scalar));
                                ix2 += innerStride2;
                            }

                            ix2 += outerStride2;
                        }
                    }
                    else
                    {
                        long n = @out.Shape.Dimensions.LongLength - 3;
                        long[] limits = @out.Shape.Dimensions.Where(x => n-- > 0).Select(x => x.Length).ToArray();
                        long[] counters = new long[limits.LongLength];

                        long totalOps = limits.LongLength == 0 ? 1 : limits.Aggregate<long>((a, b) => a * b);

                        //This chunck of variables are used to prevent repeated calculations of offsets
                        long dimIndex0 = 0 + limits.LongLength;
                        long dimIndex1 = 1 + limits.LongLength;
                        long dimIndex2 = 2 + limits.LongLength;

                        long opsOuter = @out.Shape.Dimensions[0 + limits.LongLength].Length;
                        long opsInner = @out.Shape.Dimensions[1 + limits.LongLength].Length;
                        long opsInnerInner = @out.Shape.Dimensions[2 + limits.LongLength].Length;

                        long outerStride3 = @out.Shape.Dimensions[dimIndex0].Stride;
                        long innerStride3 = @out.Shape.Dimensions[dimIndex1].Stride;
                        long innerInnerStride3 = @out.Shape.Dimensions[dimIndex2].Stride;
                        outerStride3 -= innerStride3 * @out.Shape.Dimensions[dimIndex1].Length;
                        innerStride3 -= innerInnerStride3 * @out.Shape.Dimensions[dimIndex2].Length;

                        for (long outer = 0; outer < totalOps; outer++)
                        {
                            //Get the array offset for the first element in the outer dimension
                            long ix3 = @out.Shape[counters];

                            for (long i = 0; i < opsOuter; i++)
                            {
                                for (long j = 0; j < opsInner; j++)
                                {
                                    for (long k = 0; k < opsInnerInner; k++)
                                    {
                                        d2[ix3] = (System.UInt16)(Math.Cos(scalar));
                                        ix3 += innerInnerStride3;
                                    }

                                    ix3 += innerStride3;
                                }

                                ix3 += outerStride3;
                            }

                            if (counters.LongLength > 0)
                            {
                                //Basically a ripple carry adder
                                long p = counters.LongLength - 1;
                                while (++counters[p] == limits[p] && p > 0)
                                {
                                    counters[p] = 0;
                                    p--;
                                }
                            }
                        }
                    }
                }
            }
        }
        /// <summary>
        /// Unsafe implementation of applying a unary operation
        /// </summary>
        /// <typeparam name="C">The type of operation to perform</typeparam>
        /// <param name="op">The operation instance</param>
        /// <param name="in1">The input argument</param>
        /// <param name="out">The output target</param>
        internal static void UFunc_Op_Inner_Unary_Flush_Int32_TypedImpl<C>(NumCIL.Int32.Cos op, NdArray<System.Int32> in1, NdArray<System.Int32> @out)
            where C : IUnaryOp<System.Int32>
        {
            unsafe
            {
                using (var f1 = new Pinner(in1.DataAccessor))
                using (var f2 = new Pinner(@out.DataAccessor))
                {
                    var d1 = (System.Int32*)f1.ptr;
                    var d2 = (System.Int32*)f2.ptr;

                    if (@out.Shape.Dimensions.Length == 1)
                    {
                        long totalOps = @out.Shape.Dimensions[0].Length;

                        long ix1 = in1.Shape.Offset;
                        long ix2 = @out.Shape.Offset;

                        long stride1 = in1.Shape.Dimensions[0].Stride;
                        long stride2 = @out.Shape.Dimensions[0].Stride;


                        if (stride1 == stride2 && ix1 == ix2)
                        {
                            //Best case, all are equal, just keep a single counter
                            for (long i = 0; i < totalOps; i++)
                            {
                                d2[ix1] = (System.Int32)(Math.Cos(d1[ix1]));
                                ix1 += stride1;
                            }
                        }
                        else
                        {
                            for (long i = 0; i < totalOps; i++)
                            {
                                d2[ix2] = (System.Int32)(Math.Cos(d1[ix1]));
                                ix1 += stride1;
                                ix2 += stride2;
                            }
                        }
                    }
                    else if (@out.Shape.Dimensions.Length == 2)
                    {
                        long opsOuter = @out.Shape.Dimensions[0].Length;
                        long opsInner = @out.Shape.Dimensions[1].Length;

                        long ix1 = in1.Shape.Offset;
                        long ix2 = @out.Shape.Offset;

                        long outerStride1 = in1.Shape.Dimensions[0].Stride;
                        long outerStride2 = @out.Shape.Dimensions[0].Stride;

                        long innerStride1 = in1.Shape.Dimensions[1].Stride;
                        long innerStride2 = @out.Shape.Dimensions[1].Stride;

                        outerStride1 -= innerStride1 * in1.Shape.Dimensions[1].Length;
                        outerStride2 -= innerStride2 * @out.Shape.Dimensions[1].Length;

                        for (long i = 0; i < opsOuter; i++)
                        {
                            for (long j = 0; j < opsInner; j++)
                            {
                                d2[ix2] = (System.Int32)(Math.Cos(d1[ix1]));
                                ix1 += innerStride1;
                                ix2 += innerStride2;
                            }

                            ix1 += outerStride1;
                            ix2 += outerStride2;
                        }
                    }
                    else
                    {
                        long n = in1.Shape.Dimensions.LongLength - 3;
                        long[] limits = in1.Shape.Dimensions.Where(x => n-- > 0).Select(x => x.Length).ToArray();
                        long[] counters = new long[limits.LongLength];

                        long totalOps = limits.LongLength == 0 ? 1 : limits.Aggregate<long>((a, b) => a * b);

                        //This chunck of variables are used to prevent repeated calculations of offsets
                        long dimIndex0 = 0 + limits.LongLength;
                        long dimIndex1 = 1 + limits.LongLength;
                        long dimIndex2 = 2 + limits.LongLength;

                        long opsOuter = @out.Shape.Dimensions[0 + limits.LongLength].Length;
                        long opsInner = @out.Shape.Dimensions[1 + limits.LongLength].Length;
                        long opsInnerInner = @out.Shape.Dimensions[2 + limits.LongLength].Length;

                        long outerStride1 = in1.Shape.Dimensions[dimIndex0].Stride;
                        long outerStride3 = @out.Shape.Dimensions[dimIndex0].Stride;

                        long innerStride1 = in1.Shape.Dimensions[dimIndex1].Stride;
                        long innerStride3 = @out.Shape.Dimensions[dimIndex1].Stride;

                        long innerInnerStride1 = in1.Shape.Dimensions[dimIndex2].Stride;
                        long innerInnerStride3 = @out.Shape.Dimensions[dimIndex2].Stride;

                        outerStride1 -= innerStride1 * in1.Shape.Dimensions[dimIndex1].Length;
                        outerStride3 -= innerStride3 * @out.Shape.Dimensions[dimIndex1].Length;

                        innerStride1 -= innerInnerStride1 * in1.Shape.Dimensions[dimIndex2].Length;
                        innerStride3 -= innerInnerStride3 * @out.Shape.Dimensions[dimIndex2].Length;

                        for (long outer = 0; outer < totalOps; outer++)
                        {
                            //Get the array offset for the first element in the outer dimension
                            long ix1 = in1.Shape[counters];
                            long ix3 = @out.Shape[counters];


                            for (long i = 0; i < opsOuter; i++)
                            {
                                for (long j = 0; j < opsInner; j++)
                                {
                                    for (long k = 0; k < opsInnerInner; k++)
                                    {
                                        d2[ix3] = (System.Int32)(Math.Cos(d1[ix1]));
                                        ix1 += innerInnerStride1;
                                        ix3 += innerInnerStride3;
                                    }

                                    ix1 += innerStride1;
                                    ix3 += innerStride3;
                                }

                                ix1 += outerStride1;
                                ix3 += outerStride3;
                            }

                            if (counters.LongLength > 0)
                            {
                                //Basically a ripple carry adder
                                long p = counters.LongLength - 1;
                                while (++counters[p] == limits[p] && p > 0)
                                {
                                    counters[p] = 0;
                                    p--;
                                }
                            }
                        }
                    }
                }
            }
        }

        /// <summary>
        /// Unsafe implementation of applying a unary operation
        /// </summary>
        /// <typeparam name="C">The type of operation to perform</typeparam>
        /// <param name="op">The operation instance</param>
        /// <param name="scalar">The input scalar argument</param>
        /// <param name="out">The output target</param>
        internal static void UFunc_Op_Inner_Unary_Scalar_Flush_Int32_TypedImpl<C>(NumCIL.Int32.Cos op, System.Int32 scalar, NdArray<System.Int32> @out)
            where C : IUnaryOp<System.Int32>
        {
            unsafe
            {
                using (var f2 = new Pinner(@out.DataAccessor))
                {
                    var d2 = (System.Int32*)f2.ptr;

                    if (@out.Shape.Dimensions.Length == 1)
                    {
                        long totalOps = @out.Shape.Dimensions[0].Length;
                        long ix2 = @out.Shape.Offset;
                        long stride2 = @out.Shape.Dimensions[0].Stride;

                        for (long i = 0; i < totalOps; i++)
                        {
                            d2[ix2] = (System.Int32)(Math.Cos(scalar));
                            ix2 += stride2;
                        }
                    }
                    else if (@out.Shape.Dimensions.Length == 2)
                    {
                        long opsOuter = @out.Shape.Dimensions[0].Length;
                        long opsInner = @out.Shape.Dimensions[1].Length;

                        long ix2 = @out.Shape.Offset;
                        long outerStride2 = @out.Shape.Dimensions[0].Stride;
                        long innerStride2 = @out.Shape.Dimensions[1].Stride;
                        outerStride2 -= innerStride2 * @out.Shape.Dimensions[1].Length;

                        for (long i = 0; i < opsOuter; i++)
                        {
                            for (long j = 0; j < opsInner; j++)
                            {
                                d2[ix2] = (System.Int32)(Math.Cos(scalar));
                                ix2 += innerStride2;
                            }

                            ix2 += outerStride2;
                        }
                    }
                    else
                    {
                        long n = @out.Shape.Dimensions.LongLength - 3;
                        long[] limits = @out.Shape.Dimensions.Where(x => n-- > 0).Select(x => x.Length).ToArray();
                        long[] counters = new long[limits.LongLength];

                        long totalOps = limits.LongLength == 0 ? 1 : limits.Aggregate<long>((a, b) => a * b);

                        //This chunck of variables are used to prevent repeated calculations of offsets
                        long dimIndex0 = 0 + limits.LongLength;
                        long dimIndex1 = 1 + limits.LongLength;
                        long dimIndex2 = 2 + limits.LongLength;

                        long opsOuter = @out.Shape.Dimensions[0 + limits.LongLength].Length;
                        long opsInner = @out.Shape.Dimensions[1 + limits.LongLength].Length;
                        long opsInnerInner = @out.Shape.Dimensions[2 + limits.LongLength].Length;

                        long outerStride3 = @out.Shape.Dimensions[dimIndex0].Stride;
                        long innerStride3 = @out.Shape.Dimensions[dimIndex1].Stride;
                        long innerInnerStride3 = @out.Shape.Dimensions[dimIndex2].Stride;
                        outerStride3 -= innerStride3 * @out.Shape.Dimensions[dimIndex1].Length;
                        innerStride3 -= innerInnerStride3 * @out.Shape.Dimensions[dimIndex2].Length;

                        for (long outer = 0; outer < totalOps; outer++)
                        {
                            //Get the array offset for the first element in the outer dimension
                            long ix3 = @out.Shape[counters];

                            for (long i = 0; i < opsOuter; i++)
                            {
                                for (long j = 0; j < opsInner; j++)
                                {
                                    for (long k = 0; k < opsInnerInner; k++)
                                    {
                                        d2[ix3] = (System.Int32)(Math.Cos(scalar));
                                        ix3 += innerInnerStride3;
                                    }

                                    ix3 += innerStride3;
                                }

                                ix3 += outerStride3;
                            }

                            if (counters.LongLength > 0)
                            {
                                //Basically a ripple carry adder
                                long p = counters.LongLength - 1;
                                while (++counters[p] == limits[p] && p > 0)
                                {
                                    counters[p] = 0;
                                    p--;
                                }
                            }
                        }
                    }
                }
            }
        }
        /// <summary>
        /// Unsafe implementation of applying a unary operation
        /// </summary>
        /// <typeparam name="C">The type of operation to perform</typeparam>
        /// <param name="op">The operation instance</param>
        /// <param name="in1">The input argument</param>
        /// <param name="out">The output target</param>
        internal static void UFunc_Op_Inner_Unary_Flush_UInt32_TypedImpl<C>(NumCIL.UInt32.Cos op, NdArray<System.UInt32> in1, NdArray<System.UInt32> @out)
            where C : IUnaryOp<System.UInt32>
        {
            unsafe
            {
                using (var f1 = new Pinner(in1.DataAccessor))
                using (var f2 = new Pinner(@out.DataAccessor))
                {
                    var d1 = (System.UInt32*)f1.ptr;
                    var d2 = (System.UInt32*)f2.ptr;

                    if (@out.Shape.Dimensions.Length == 1)
                    {
                        long totalOps = @out.Shape.Dimensions[0].Length;

                        long ix1 = in1.Shape.Offset;
                        long ix2 = @out.Shape.Offset;

                        long stride1 = in1.Shape.Dimensions[0].Stride;
                        long stride2 = @out.Shape.Dimensions[0].Stride;


                        if (stride1 == stride2 && ix1 == ix2)
                        {
                            //Best case, all are equal, just keep a single counter
                            for (long i = 0; i < totalOps; i++)
                            {
                                d2[ix1] = (System.UInt32)(Math.Cos(d1[ix1]));
                                ix1 += stride1;
                            }
                        }
                        else
                        {
                            for (long i = 0; i < totalOps; i++)
                            {
                                d2[ix2] = (System.UInt32)(Math.Cos(d1[ix1]));
                                ix1 += stride1;
                                ix2 += stride2;
                            }
                        }
                    }
                    else if (@out.Shape.Dimensions.Length == 2)
                    {
                        long opsOuter = @out.Shape.Dimensions[0].Length;
                        long opsInner = @out.Shape.Dimensions[1].Length;

                        long ix1 = in1.Shape.Offset;
                        long ix2 = @out.Shape.Offset;

                        long outerStride1 = in1.Shape.Dimensions[0].Stride;
                        long outerStride2 = @out.Shape.Dimensions[0].Stride;

                        long innerStride1 = in1.Shape.Dimensions[1].Stride;
                        long innerStride2 = @out.Shape.Dimensions[1].Stride;

                        outerStride1 -= innerStride1 * in1.Shape.Dimensions[1].Length;
                        outerStride2 -= innerStride2 * @out.Shape.Dimensions[1].Length;

                        for (long i = 0; i < opsOuter; i++)
                        {
                            for (long j = 0; j < opsInner; j++)
                            {
                                d2[ix2] = (System.UInt32)(Math.Cos(d1[ix1]));
                                ix1 += innerStride1;
                                ix2 += innerStride2;
                            }

                            ix1 += outerStride1;
                            ix2 += outerStride2;
                        }
                    }
                    else
                    {
                        long n = in1.Shape.Dimensions.LongLength - 3;
                        long[] limits = in1.Shape.Dimensions.Where(x => n-- > 0).Select(x => x.Length).ToArray();
                        long[] counters = new long[limits.LongLength];

                        long totalOps = limits.LongLength == 0 ? 1 : limits.Aggregate<long>((a, b) => a * b);

                        //This chunck of variables are used to prevent repeated calculations of offsets
                        long dimIndex0 = 0 + limits.LongLength;
                        long dimIndex1 = 1 + limits.LongLength;
                        long dimIndex2 = 2 + limits.LongLength;

                        long opsOuter = @out.Shape.Dimensions[0 + limits.LongLength].Length;
                        long opsInner = @out.Shape.Dimensions[1 + limits.LongLength].Length;
                        long opsInnerInner = @out.Shape.Dimensions[2 + limits.LongLength].Length;

                        long outerStride1 = in1.Shape.Dimensions[dimIndex0].Stride;
                        long outerStride3 = @out.Shape.Dimensions[dimIndex0].Stride;

                        long innerStride1 = in1.Shape.Dimensions[dimIndex1].Stride;
                        long innerStride3 = @out.Shape.Dimensions[dimIndex1].Stride;

                        long innerInnerStride1 = in1.Shape.Dimensions[dimIndex2].Stride;
                        long innerInnerStride3 = @out.Shape.Dimensions[dimIndex2].Stride;

                        outerStride1 -= innerStride1 * in1.Shape.Dimensions[dimIndex1].Length;
                        outerStride3 -= innerStride3 * @out.Shape.Dimensions[dimIndex1].Length;

                        innerStride1 -= innerInnerStride1 * in1.Shape.Dimensions[dimIndex2].Length;
                        innerStride3 -= innerInnerStride3 * @out.Shape.Dimensions[dimIndex2].Length;

                        for (long outer = 0; outer < totalOps; outer++)
                        {
                            //Get the array offset for the first element in the outer dimension
                            long ix1 = in1.Shape[counters];
                            long ix3 = @out.Shape[counters];


                            for (long i = 0; i < opsOuter; i++)
                            {
                                for (long j = 0; j < opsInner; j++)
                                {
                                    for (long k = 0; k < opsInnerInner; k++)
                                    {
                                        d2[ix3] = (System.UInt32)(Math.Cos(d1[ix1]));
                                        ix1 += innerInnerStride1;
                                        ix3 += innerInnerStride3;
                                    }

                                    ix1 += innerStride1;
                                    ix3 += innerStride3;
                                }

                                ix1 += outerStride1;
                                ix3 += outerStride3;
                            }

                            if (counters.LongLength > 0)
                            {
                                //Basically a ripple carry adder
                                long p = counters.LongLength - 1;
                                while (++counters[p] == limits[p] && p > 0)
                                {
                                    counters[p] = 0;
                                    p--;
                                }
                            }
                        }
                    }
                }
            }
        }

        /// <summary>
        /// Unsafe implementation of applying a unary operation
        /// </summary>
        /// <typeparam name="C">The type of operation to perform</typeparam>
        /// <param name="op">The operation instance</param>
        /// <param name="scalar">The input scalar argument</param>
        /// <param name="out">The output target</param>
        internal static void UFunc_Op_Inner_Unary_Scalar_Flush_UInt32_TypedImpl<C>(NumCIL.UInt32.Cos op, System.UInt32 scalar, NdArray<System.UInt32> @out)
            where C : IUnaryOp<System.UInt32>
        {
            unsafe
            {
                using (var f2 = new Pinner(@out.DataAccessor))
                {
                    var d2 = (System.UInt32*)f2.ptr;

                    if (@out.Shape.Dimensions.Length == 1)
                    {
                        long totalOps = @out.Shape.Dimensions[0].Length;
                        long ix2 = @out.Shape.Offset;
                        long stride2 = @out.Shape.Dimensions[0].Stride;

                        for (long i = 0; i < totalOps; i++)
                        {
                            d2[ix2] = (System.UInt32)(Math.Cos(scalar));
                            ix2 += stride2;
                        }
                    }
                    else if (@out.Shape.Dimensions.Length == 2)
                    {
                        long opsOuter = @out.Shape.Dimensions[0].Length;
                        long opsInner = @out.Shape.Dimensions[1].Length;

                        long ix2 = @out.Shape.Offset;
                        long outerStride2 = @out.Shape.Dimensions[0].Stride;
                        long innerStride2 = @out.Shape.Dimensions[1].Stride;
                        outerStride2 -= innerStride2 * @out.Shape.Dimensions[1].Length;

                        for (long i = 0; i < opsOuter; i++)
                        {
                            for (long j = 0; j < opsInner; j++)
                            {
                                d2[ix2] = (System.UInt32)(Math.Cos(scalar));
                                ix2 += innerStride2;
                            }

                            ix2 += outerStride2;
                        }
                    }
                    else
                    {
                        long n = @out.Shape.Dimensions.LongLength - 3;
                        long[] limits = @out.Shape.Dimensions.Where(x => n-- > 0).Select(x => x.Length).ToArray();
                        long[] counters = new long[limits.LongLength];

                        long totalOps = limits.LongLength == 0 ? 1 : limits.Aggregate<long>((a, b) => a * b);

                        //This chunck of variables are used to prevent repeated calculations of offsets
                        long dimIndex0 = 0 + limits.LongLength;
                        long dimIndex1 = 1 + limits.LongLength;
                        long dimIndex2 = 2 + limits.LongLength;

                        long opsOuter = @out.Shape.Dimensions[0 + limits.LongLength].Length;
                        long opsInner = @out.Shape.Dimensions[1 + limits.LongLength].Length;
                        long opsInnerInner = @out.Shape.Dimensions[2 + limits.LongLength].Length;

                        long outerStride3 = @out.Shape.Dimensions[dimIndex0].Stride;
                        long innerStride3 = @out.Shape.Dimensions[dimIndex1].Stride;
                        long innerInnerStride3 = @out.Shape.Dimensions[dimIndex2].Stride;
                        outerStride3 -= innerStride3 * @out.Shape.Dimensions[dimIndex1].Length;
                        innerStride3 -= innerInnerStride3 * @out.Shape.Dimensions[dimIndex2].Length;

                        for (long outer = 0; outer < totalOps; outer++)
                        {
                            //Get the array offset for the first element in the outer dimension
                            long ix3 = @out.Shape[counters];

                            for (long i = 0; i < opsOuter; i++)
                            {
                                for (long j = 0; j < opsInner; j++)
                                {
                                    for (long k = 0; k < opsInnerInner; k++)
                                    {
                                        d2[ix3] = (System.UInt32)(Math.Cos(scalar));
                                        ix3 += innerInnerStride3;
                                    }

                                    ix3 += innerStride3;
                                }

                                ix3 += outerStride3;
                            }

                            if (counters.LongLength > 0)
                            {
                                //Basically a ripple carry adder
                                long p = counters.LongLength - 1;
                                while (++counters[p] == limits[p] && p > 0)
                                {
                                    counters[p] = 0;
                                    p--;
                                }
                            }
                        }
                    }
                }
            }
        }
        /// <summary>
        /// Unsafe implementation of applying a unary operation
        /// </summary>
        /// <typeparam name="C">The type of operation to perform</typeparam>
        /// <param name="op">The operation instance</param>
        /// <param name="in1">The input argument</param>
        /// <param name="out">The output target</param>
        internal static void UFunc_Op_Inner_Unary_Flush_Int64_TypedImpl<C>(NumCIL.Int64.Cos op, NdArray<System.Int64> in1, NdArray<System.Int64> @out)
            where C : IUnaryOp<System.Int64>
        {
            unsafe
            {
                using (var f1 = new Pinner(in1.DataAccessor))
                using (var f2 = new Pinner(@out.DataAccessor))
                {
                    var d1 = (System.Int64*)f1.ptr;
                    var d2 = (System.Int64*)f2.ptr;

                    if (@out.Shape.Dimensions.Length == 1)
                    {
                        long totalOps = @out.Shape.Dimensions[0].Length;

                        long ix1 = in1.Shape.Offset;
                        long ix2 = @out.Shape.Offset;

                        long stride1 = in1.Shape.Dimensions[0].Stride;
                        long stride2 = @out.Shape.Dimensions[0].Stride;


                        if (stride1 == stride2 && ix1 == ix2)
                        {
                            //Best case, all are equal, just keep a single counter
                            for (long i = 0; i < totalOps; i++)
                            {
                                d2[ix1] = (System.Int64)(Math.Cos(d1[ix1]));
                                ix1 += stride1;
                            }
                        }
                        else
                        {
                            for (long i = 0; i < totalOps; i++)
                            {
                                d2[ix2] = (System.Int64)(Math.Cos(d1[ix1]));
                                ix1 += stride1;
                                ix2 += stride2;
                            }
                        }
                    }
                    else if (@out.Shape.Dimensions.Length == 2)
                    {
                        long opsOuter = @out.Shape.Dimensions[0].Length;
                        long opsInner = @out.Shape.Dimensions[1].Length;

                        long ix1 = in1.Shape.Offset;
                        long ix2 = @out.Shape.Offset;

                        long outerStride1 = in1.Shape.Dimensions[0].Stride;
                        long outerStride2 = @out.Shape.Dimensions[0].Stride;

                        long innerStride1 = in1.Shape.Dimensions[1].Stride;
                        long innerStride2 = @out.Shape.Dimensions[1].Stride;

                        outerStride1 -= innerStride1 * in1.Shape.Dimensions[1].Length;
                        outerStride2 -= innerStride2 * @out.Shape.Dimensions[1].Length;

                        for (long i = 0; i < opsOuter; i++)
                        {
                            for (long j = 0; j < opsInner; j++)
                            {
                                d2[ix2] = (System.Int64)(Math.Cos(d1[ix1]));
                                ix1 += innerStride1;
                                ix2 += innerStride2;
                            }

                            ix1 += outerStride1;
                            ix2 += outerStride2;
                        }
                    }
                    else
                    {
                        long n = in1.Shape.Dimensions.LongLength - 3;
                        long[] limits = in1.Shape.Dimensions.Where(x => n-- > 0).Select(x => x.Length).ToArray();
                        long[] counters = new long[limits.LongLength];

                        long totalOps = limits.LongLength == 0 ? 1 : limits.Aggregate<long>((a, b) => a * b);

                        //This chunck of variables are used to prevent repeated calculations of offsets
                        long dimIndex0 = 0 + limits.LongLength;
                        long dimIndex1 = 1 + limits.LongLength;
                        long dimIndex2 = 2 + limits.LongLength;

                        long opsOuter = @out.Shape.Dimensions[0 + limits.LongLength].Length;
                        long opsInner = @out.Shape.Dimensions[1 + limits.LongLength].Length;
                        long opsInnerInner = @out.Shape.Dimensions[2 + limits.LongLength].Length;

                        long outerStride1 = in1.Shape.Dimensions[dimIndex0].Stride;
                        long outerStride3 = @out.Shape.Dimensions[dimIndex0].Stride;

                        long innerStride1 = in1.Shape.Dimensions[dimIndex1].Stride;
                        long innerStride3 = @out.Shape.Dimensions[dimIndex1].Stride;

                        long innerInnerStride1 = in1.Shape.Dimensions[dimIndex2].Stride;
                        long innerInnerStride3 = @out.Shape.Dimensions[dimIndex2].Stride;

                        outerStride1 -= innerStride1 * in1.Shape.Dimensions[dimIndex1].Length;
                        outerStride3 -= innerStride3 * @out.Shape.Dimensions[dimIndex1].Length;

                        innerStride1 -= innerInnerStride1 * in1.Shape.Dimensions[dimIndex2].Length;
                        innerStride3 -= innerInnerStride3 * @out.Shape.Dimensions[dimIndex2].Length;

                        for (long outer = 0; outer < totalOps; outer++)
                        {
                            //Get the array offset for the first element in the outer dimension
                            long ix1 = in1.Shape[counters];
                            long ix3 = @out.Shape[counters];


                            for (long i = 0; i < opsOuter; i++)
                            {
                                for (long j = 0; j < opsInner; j++)
                                {
                                    for (long k = 0; k < opsInnerInner; k++)
                                    {
                                        d2[ix3] = (System.Int64)(Math.Cos(d1[ix1]));
                                        ix1 += innerInnerStride1;
                                        ix3 += innerInnerStride3;
                                    }

                                    ix1 += innerStride1;
                                    ix3 += innerStride3;
                                }

                                ix1 += outerStride1;
                                ix3 += outerStride3;
                            }

                            if (counters.LongLength > 0)
                            {
                                //Basically a ripple carry adder
                                long p = counters.LongLength - 1;
                                while (++counters[p] == limits[p] && p > 0)
                                {
                                    counters[p] = 0;
                                    p--;
                                }
                            }
                        }
                    }
                }
            }
        }

        /// <summary>
        /// Unsafe implementation of applying a unary operation
        /// </summary>
        /// <typeparam name="C">The type of operation to perform</typeparam>
        /// <param name="op">The operation instance</param>
        /// <param name="scalar">The input scalar argument</param>
        /// <param name="out">The output target</param>
        internal static void UFunc_Op_Inner_Unary_Scalar_Flush_Int64_TypedImpl<C>(NumCIL.Int64.Cos op, System.Int64 scalar, NdArray<System.Int64> @out)
            where C : IUnaryOp<System.Int64>
        {
            unsafe
            {
                using (var f2 = new Pinner(@out.DataAccessor))
                {
                    var d2 = (System.Int64*)f2.ptr;

                    if (@out.Shape.Dimensions.Length == 1)
                    {
                        long totalOps = @out.Shape.Dimensions[0].Length;
                        long ix2 = @out.Shape.Offset;
                        long stride2 = @out.Shape.Dimensions[0].Stride;

                        for (long i = 0; i < totalOps; i++)
                        {
                            d2[ix2] = (System.Int64)(Math.Cos(scalar));
                            ix2 += stride2;
                        }
                    }
                    else if (@out.Shape.Dimensions.Length == 2)
                    {
                        long opsOuter = @out.Shape.Dimensions[0].Length;
                        long opsInner = @out.Shape.Dimensions[1].Length;

                        long ix2 = @out.Shape.Offset;
                        long outerStride2 = @out.Shape.Dimensions[0].Stride;
                        long innerStride2 = @out.Shape.Dimensions[1].Stride;
                        outerStride2 -= innerStride2 * @out.Shape.Dimensions[1].Length;

                        for (long i = 0; i < opsOuter; i++)
                        {
                            for (long j = 0; j < opsInner; j++)
                            {
                                d2[ix2] = (System.Int64)(Math.Cos(scalar));
                                ix2 += innerStride2;
                            }

                            ix2 += outerStride2;
                        }
                    }
                    else
                    {
                        long n = @out.Shape.Dimensions.LongLength - 3;
                        long[] limits = @out.Shape.Dimensions.Where(x => n-- > 0).Select(x => x.Length).ToArray();
                        long[] counters = new long[limits.LongLength];

                        long totalOps = limits.LongLength == 0 ? 1 : limits.Aggregate<long>((a, b) => a * b);

                        //This chunck of variables are used to prevent repeated calculations of offsets
                        long dimIndex0 = 0 + limits.LongLength;
                        long dimIndex1 = 1 + limits.LongLength;
                        long dimIndex2 = 2 + limits.LongLength;

                        long opsOuter = @out.Shape.Dimensions[0 + limits.LongLength].Length;
                        long opsInner = @out.Shape.Dimensions[1 + limits.LongLength].Length;
                        long opsInnerInner = @out.Shape.Dimensions[2 + limits.LongLength].Length;

                        long outerStride3 = @out.Shape.Dimensions[dimIndex0].Stride;
                        long innerStride3 = @out.Shape.Dimensions[dimIndex1].Stride;
                        long innerInnerStride3 = @out.Shape.Dimensions[dimIndex2].Stride;
                        outerStride3 -= innerStride3 * @out.Shape.Dimensions[dimIndex1].Length;
                        innerStride3 -= innerInnerStride3 * @out.Shape.Dimensions[dimIndex2].Length;

                        for (long outer = 0; outer < totalOps; outer++)
                        {
                            //Get the array offset for the first element in the outer dimension
                            long ix3 = @out.Shape[counters];

                            for (long i = 0; i < opsOuter; i++)
                            {
                                for (long j = 0; j < opsInner; j++)
                                {
                                    for (long k = 0; k < opsInnerInner; k++)
                                    {
                                        d2[ix3] = (System.Int64)(Math.Cos(scalar));
                                        ix3 += innerInnerStride3;
                                    }

                                    ix3 += innerStride3;
                                }

                                ix3 += outerStride3;
                            }

                            if (counters.LongLength > 0)
                            {
                                //Basically a ripple carry adder
                                long p = counters.LongLength - 1;
                                while (++counters[p] == limits[p] && p > 0)
                                {
                                    counters[p] = 0;
                                    p--;
                                }
                            }
                        }
                    }
                }
            }
        }
        /// <summary>
        /// Unsafe implementation of applying a unary operation
        /// </summary>
        /// <typeparam name="C">The type of operation to perform</typeparam>
        /// <param name="op">The operation instance</param>
        /// <param name="in1">The input argument</param>
        /// <param name="out">The output target</param>
        internal static void UFunc_Op_Inner_Unary_Flush_UInt64_TypedImpl<C>(NumCIL.UInt64.Cos op, NdArray<System.UInt64> in1, NdArray<System.UInt64> @out)
            where C : IUnaryOp<System.UInt64>
        {
            unsafe
            {
                using (var f1 = new Pinner(in1.DataAccessor))
                using (var f2 = new Pinner(@out.DataAccessor))
                {
                    var d1 = (System.UInt64*)f1.ptr;
                    var d2 = (System.UInt64*)f2.ptr;

                    if (@out.Shape.Dimensions.Length == 1)
                    {
                        long totalOps = @out.Shape.Dimensions[0].Length;

                        long ix1 = in1.Shape.Offset;
                        long ix2 = @out.Shape.Offset;

                        long stride1 = in1.Shape.Dimensions[0].Stride;
                        long stride2 = @out.Shape.Dimensions[0].Stride;


                        if (stride1 == stride2 && ix1 == ix2)
                        {
                            //Best case, all are equal, just keep a single counter
                            for (long i = 0; i < totalOps; i++)
                            {
                                d2[ix1] = (System.UInt64)(Math.Cos(d1[ix1]));
                                ix1 += stride1;
                            }
                        }
                        else
                        {
                            for (long i = 0; i < totalOps; i++)
                            {
                                d2[ix2] = (System.UInt64)(Math.Cos(d1[ix1]));
                                ix1 += stride1;
                                ix2 += stride2;
                            }
                        }
                    }
                    else if (@out.Shape.Dimensions.Length == 2)
                    {
                        long opsOuter = @out.Shape.Dimensions[0].Length;
                        long opsInner = @out.Shape.Dimensions[1].Length;

                        long ix1 = in1.Shape.Offset;
                        long ix2 = @out.Shape.Offset;

                        long outerStride1 = in1.Shape.Dimensions[0].Stride;
                        long outerStride2 = @out.Shape.Dimensions[0].Stride;

                        long innerStride1 = in1.Shape.Dimensions[1].Stride;
                        long innerStride2 = @out.Shape.Dimensions[1].Stride;

                        outerStride1 -= innerStride1 * in1.Shape.Dimensions[1].Length;
                        outerStride2 -= innerStride2 * @out.Shape.Dimensions[1].Length;

                        for (long i = 0; i < opsOuter; i++)
                        {
                            for (long j = 0; j < opsInner; j++)
                            {
                                d2[ix2] = (System.UInt64)(Math.Cos(d1[ix1]));
                                ix1 += innerStride1;
                                ix2 += innerStride2;
                            }

                            ix1 += outerStride1;
                            ix2 += outerStride2;
                        }
                    }
                    else
                    {
                        long n = in1.Shape.Dimensions.LongLength - 3;
                        long[] limits = in1.Shape.Dimensions.Where(x => n-- > 0).Select(x => x.Length).ToArray();
                        long[] counters = new long[limits.LongLength];

                        long totalOps = limits.LongLength == 0 ? 1 : limits.Aggregate<long>((a, b) => a * b);

                        //This chunck of variables are used to prevent repeated calculations of offsets
                        long dimIndex0 = 0 + limits.LongLength;
                        long dimIndex1 = 1 + limits.LongLength;
                        long dimIndex2 = 2 + limits.LongLength;

                        long opsOuter = @out.Shape.Dimensions[0 + limits.LongLength].Length;
                        long opsInner = @out.Shape.Dimensions[1 + limits.LongLength].Length;
                        long opsInnerInner = @out.Shape.Dimensions[2 + limits.LongLength].Length;

                        long outerStride1 = in1.Shape.Dimensions[dimIndex0].Stride;
                        long outerStride3 = @out.Shape.Dimensions[dimIndex0].Stride;

                        long innerStride1 = in1.Shape.Dimensions[dimIndex1].Stride;
                        long innerStride3 = @out.Shape.Dimensions[dimIndex1].Stride;

                        long innerInnerStride1 = in1.Shape.Dimensions[dimIndex2].Stride;
                        long innerInnerStride3 = @out.Shape.Dimensions[dimIndex2].Stride;

                        outerStride1 -= innerStride1 * in1.Shape.Dimensions[dimIndex1].Length;
                        outerStride3 -= innerStride3 * @out.Shape.Dimensions[dimIndex1].Length;

                        innerStride1 -= innerInnerStride1 * in1.Shape.Dimensions[dimIndex2].Length;
                        innerStride3 -= innerInnerStride3 * @out.Shape.Dimensions[dimIndex2].Length;

                        for (long outer = 0; outer < totalOps; outer++)
                        {
                            //Get the array offset for the first element in the outer dimension
                            long ix1 = in1.Shape[counters];
                            long ix3 = @out.Shape[counters];


                            for (long i = 0; i < opsOuter; i++)
                            {
                                for (long j = 0; j < opsInner; j++)
                                {
                                    for (long k = 0; k < opsInnerInner; k++)
                                    {
                                        d2[ix3] = (System.UInt64)(Math.Cos(d1[ix1]));
                                        ix1 += innerInnerStride1;
                                        ix3 += innerInnerStride3;
                                    }

                                    ix1 += innerStride1;
                                    ix3 += innerStride3;
                                }

                                ix1 += outerStride1;
                                ix3 += outerStride3;
                            }

                            if (counters.LongLength > 0)
                            {
                                //Basically a ripple carry adder
                                long p = counters.LongLength - 1;
                                while (++counters[p] == limits[p] && p > 0)
                                {
                                    counters[p] = 0;
                                    p--;
                                }
                            }
                        }
                    }
                }
            }
        }

        /// <summary>
        /// Unsafe implementation of applying a unary operation
        /// </summary>
        /// <typeparam name="C">The type of operation to perform</typeparam>
        /// <param name="op">The operation instance</param>
        /// <param name="scalar">The input scalar argument</param>
        /// <param name="out">The output target</param>
        internal static void UFunc_Op_Inner_Unary_Scalar_Flush_UInt64_TypedImpl<C>(NumCIL.UInt64.Cos op, System.UInt64 scalar, NdArray<System.UInt64> @out)
            where C : IUnaryOp<System.UInt64>
        {
            unsafe
            {
                using (var f2 = new Pinner(@out.DataAccessor))
                {
                    var d2 = (System.UInt64*)f2.ptr;

                    if (@out.Shape.Dimensions.Length == 1)
                    {
                        long totalOps = @out.Shape.Dimensions[0].Length;
                        long ix2 = @out.Shape.Offset;
                        long stride2 = @out.Shape.Dimensions[0].Stride;

                        for (long i = 0; i < totalOps; i++)
                        {
                            d2[ix2] = (System.UInt64)(Math.Cos(scalar));
                            ix2 += stride2;
                        }
                    }
                    else if (@out.Shape.Dimensions.Length == 2)
                    {
                        long opsOuter = @out.Shape.Dimensions[0].Length;
                        long opsInner = @out.Shape.Dimensions[1].Length;

                        long ix2 = @out.Shape.Offset;
                        long outerStride2 = @out.Shape.Dimensions[0].Stride;
                        long innerStride2 = @out.Shape.Dimensions[1].Stride;
                        outerStride2 -= innerStride2 * @out.Shape.Dimensions[1].Length;

                        for (long i = 0; i < opsOuter; i++)
                        {
                            for (long j = 0; j < opsInner; j++)
                            {
                                d2[ix2] = (System.UInt64)(Math.Cos(scalar));
                                ix2 += innerStride2;
                            }

                            ix2 += outerStride2;
                        }
                    }
                    else
                    {
                        long n = @out.Shape.Dimensions.LongLength - 3;
                        long[] limits = @out.Shape.Dimensions.Where(x => n-- > 0).Select(x => x.Length).ToArray();
                        long[] counters = new long[limits.LongLength];

                        long totalOps = limits.LongLength == 0 ? 1 : limits.Aggregate<long>((a, b) => a * b);

                        //This chunck of variables are used to prevent repeated calculations of offsets
                        long dimIndex0 = 0 + limits.LongLength;
                        long dimIndex1 = 1 + limits.LongLength;
                        long dimIndex2 = 2 + limits.LongLength;

                        long opsOuter = @out.Shape.Dimensions[0 + limits.LongLength].Length;
                        long opsInner = @out.Shape.Dimensions[1 + limits.LongLength].Length;
                        long opsInnerInner = @out.Shape.Dimensions[2 + limits.LongLength].Length;

                        long outerStride3 = @out.Shape.Dimensions[dimIndex0].Stride;
                        long innerStride3 = @out.Shape.Dimensions[dimIndex1].Stride;
                        long innerInnerStride3 = @out.Shape.Dimensions[dimIndex2].Stride;
                        outerStride3 -= innerStride3 * @out.Shape.Dimensions[dimIndex1].Length;
                        innerStride3 -= innerInnerStride3 * @out.Shape.Dimensions[dimIndex2].Length;

                        for (long outer = 0; outer < totalOps; outer++)
                        {
                            //Get the array offset for the first element in the outer dimension
                            long ix3 = @out.Shape[counters];

                            for (long i = 0; i < opsOuter; i++)
                            {
                                for (long j = 0; j < opsInner; j++)
                                {
                                    for (long k = 0; k < opsInnerInner; k++)
                                    {
                                        d2[ix3] = (System.UInt64)(Math.Cos(scalar));
                                        ix3 += innerInnerStride3;
                                    }

                                    ix3 += innerStride3;
                                }

                                ix3 += outerStride3;
                            }

                            if (counters.LongLength > 0)
                            {
                                //Basically a ripple carry adder
                                long p = counters.LongLength - 1;
                                while (++counters[p] == limits[p] && p > 0)
                                {
                                    counters[p] = 0;
                                    p--;
                                }
                            }
                        }
                    }
                }
            }
        }
        /// <summary>
        /// Unsafe implementation of applying a unary operation
        /// </summary>
        /// <typeparam name="C">The type of operation to perform</typeparam>
        /// <param name="op">The operation instance</param>
        /// <param name="in1">The input argument</param>
        /// <param name="out">The output target</param>
        internal static void UFunc_Op_Inner_Unary_Flush_Single_TypedImpl<C>(NumCIL.Float.Cos op, NdArray<System.Single> in1, NdArray<System.Single> @out)
            where C : IUnaryOp<System.Single>
        {
            unsafe
            {
                using (var f1 = new Pinner(in1.DataAccessor))
                using (var f2 = new Pinner(@out.DataAccessor))
                {
                    var d1 = (System.Single*)f1.ptr;
                    var d2 = (System.Single*)f2.ptr;

                    if (@out.Shape.Dimensions.Length == 1)
                    {
                        long totalOps = @out.Shape.Dimensions[0].Length;

                        long ix1 = in1.Shape.Offset;
                        long ix2 = @out.Shape.Offset;

                        long stride1 = in1.Shape.Dimensions[0].Stride;
                        long stride2 = @out.Shape.Dimensions[0].Stride;


                        if (stride1 == stride2 && ix1 == ix2)
                        {
                            //Best case, all are equal, just keep a single counter
                            for (long i = 0; i < totalOps; i++)
                            {
                                d2[ix1] = (System.Single)(Math.Cos(d1[ix1]));
                                ix1 += stride1;
                            }
                        }
                        else
                        {
                            for (long i = 0; i < totalOps; i++)
                            {
                                d2[ix2] = (System.Single)(Math.Cos(d1[ix1]));
                                ix1 += stride1;
                                ix2 += stride2;
                            }
                        }
                    }
                    else if (@out.Shape.Dimensions.Length == 2)
                    {
                        long opsOuter = @out.Shape.Dimensions[0].Length;
                        long opsInner = @out.Shape.Dimensions[1].Length;

                        long ix1 = in1.Shape.Offset;
                        long ix2 = @out.Shape.Offset;

                        long outerStride1 = in1.Shape.Dimensions[0].Stride;
                        long outerStride2 = @out.Shape.Dimensions[0].Stride;

                        long innerStride1 = in1.Shape.Dimensions[1].Stride;
                        long innerStride2 = @out.Shape.Dimensions[1].Stride;

                        outerStride1 -= innerStride1 * in1.Shape.Dimensions[1].Length;
                        outerStride2 -= innerStride2 * @out.Shape.Dimensions[1].Length;

                        for (long i = 0; i < opsOuter; i++)
                        {
                            for (long j = 0; j < opsInner; j++)
                            {
                                d2[ix2] = (System.Single)(Math.Cos(d1[ix1]));
                                ix1 += innerStride1;
                                ix2 += innerStride2;
                            }

                            ix1 += outerStride1;
                            ix2 += outerStride2;
                        }
                    }
                    else
                    {
                        long n = in1.Shape.Dimensions.LongLength - 3;
                        long[] limits = in1.Shape.Dimensions.Where(x => n-- > 0).Select(x => x.Length).ToArray();
                        long[] counters = new long[limits.LongLength];

                        long totalOps = limits.LongLength == 0 ? 1 : limits.Aggregate<long>((a, b) => a * b);

                        //This chunck of variables are used to prevent repeated calculations of offsets
                        long dimIndex0 = 0 + limits.LongLength;
                        long dimIndex1 = 1 + limits.LongLength;
                        long dimIndex2 = 2 + limits.LongLength;

                        long opsOuter = @out.Shape.Dimensions[0 + limits.LongLength].Length;
                        long opsInner = @out.Shape.Dimensions[1 + limits.LongLength].Length;
                        long opsInnerInner = @out.Shape.Dimensions[2 + limits.LongLength].Length;

                        long outerStride1 = in1.Shape.Dimensions[dimIndex0].Stride;
                        long outerStride3 = @out.Shape.Dimensions[dimIndex0].Stride;

                        long innerStride1 = in1.Shape.Dimensions[dimIndex1].Stride;
                        long innerStride3 = @out.Shape.Dimensions[dimIndex1].Stride;

                        long innerInnerStride1 = in1.Shape.Dimensions[dimIndex2].Stride;
                        long innerInnerStride3 = @out.Shape.Dimensions[dimIndex2].Stride;

                        outerStride1 -= innerStride1 * in1.Shape.Dimensions[dimIndex1].Length;
                        outerStride3 -= innerStride3 * @out.Shape.Dimensions[dimIndex1].Length;

                        innerStride1 -= innerInnerStride1 * in1.Shape.Dimensions[dimIndex2].Length;
                        innerStride3 -= innerInnerStride3 * @out.Shape.Dimensions[dimIndex2].Length;

                        for (long outer = 0; outer < totalOps; outer++)
                        {
                            //Get the array offset for the first element in the outer dimension
                            long ix1 = in1.Shape[counters];
                            long ix3 = @out.Shape[counters];


                            for (long i = 0; i < opsOuter; i++)
                            {
                                for (long j = 0; j < opsInner; j++)
                                {
                                    for (long k = 0; k < opsInnerInner; k++)
                                    {
                                        d2[ix3] = (System.Single)(Math.Cos(d1[ix1]));
                                        ix1 += innerInnerStride1;
                                        ix3 += innerInnerStride3;
                                    }

                                    ix1 += innerStride1;
                                    ix3 += innerStride3;
                                }

                                ix1 += outerStride1;
                                ix3 += outerStride3;
                            }

                            if (counters.LongLength > 0)
                            {
                                //Basically a ripple carry adder
                                long p = counters.LongLength - 1;
                                while (++counters[p] == limits[p] && p > 0)
                                {
                                    counters[p] = 0;
                                    p--;
                                }
                            }
                        }
                    }
                }
            }
        }

        /// <summary>
        /// Unsafe implementation of applying a unary operation
        /// </summary>
        /// <typeparam name="C">The type of operation to perform</typeparam>
        /// <param name="op">The operation instance</param>
        /// <param name="scalar">The input scalar argument</param>
        /// <param name="out">The output target</param>
        internal static void UFunc_Op_Inner_Unary_Scalar_Flush_Single_TypedImpl<C>(NumCIL.Float.Cos op, System.Single scalar, NdArray<System.Single> @out)
            where C : IUnaryOp<System.Single>
        {
            unsafe
            {
                using (var f2 = new Pinner(@out.DataAccessor))
                {
                    var d2 = (System.Single*)f2.ptr;

                    if (@out.Shape.Dimensions.Length == 1)
                    {
                        long totalOps = @out.Shape.Dimensions[0].Length;
                        long ix2 = @out.Shape.Offset;
                        long stride2 = @out.Shape.Dimensions[0].Stride;

                        for (long i = 0; i < totalOps; i++)
                        {
                            d2[ix2] = (System.Single)(Math.Cos(scalar));
                            ix2 += stride2;
                        }
                    }
                    else if (@out.Shape.Dimensions.Length == 2)
                    {
                        long opsOuter = @out.Shape.Dimensions[0].Length;
                        long opsInner = @out.Shape.Dimensions[1].Length;

                        long ix2 = @out.Shape.Offset;
                        long outerStride2 = @out.Shape.Dimensions[0].Stride;
                        long innerStride2 = @out.Shape.Dimensions[1].Stride;
                        outerStride2 -= innerStride2 * @out.Shape.Dimensions[1].Length;

                        for (long i = 0; i < opsOuter; i++)
                        {
                            for (long j = 0; j < opsInner; j++)
                            {
                                d2[ix2] = (System.Single)(Math.Cos(scalar));
                                ix2 += innerStride2;
                            }

                            ix2 += outerStride2;
                        }
                    }
                    else
                    {
                        long n = @out.Shape.Dimensions.LongLength - 3;
                        long[] limits = @out.Shape.Dimensions.Where(x => n-- > 0).Select(x => x.Length).ToArray();
                        long[] counters = new long[limits.LongLength];

                        long totalOps = limits.LongLength == 0 ? 1 : limits.Aggregate<long>((a, b) => a * b);

                        //This chunck of variables are used to prevent repeated calculations of offsets
                        long dimIndex0 = 0 + limits.LongLength;
                        long dimIndex1 = 1 + limits.LongLength;
                        long dimIndex2 = 2 + limits.LongLength;

                        long opsOuter = @out.Shape.Dimensions[0 + limits.LongLength].Length;
                        long opsInner = @out.Shape.Dimensions[1 + limits.LongLength].Length;
                        long opsInnerInner = @out.Shape.Dimensions[2 + limits.LongLength].Length;

                        long outerStride3 = @out.Shape.Dimensions[dimIndex0].Stride;
                        long innerStride3 = @out.Shape.Dimensions[dimIndex1].Stride;
                        long innerInnerStride3 = @out.Shape.Dimensions[dimIndex2].Stride;
                        outerStride3 -= innerStride3 * @out.Shape.Dimensions[dimIndex1].Length;
                        innerStride3 -= innerInnerStride3 * @out.Shape.Dimensions[dimIndex2].Length;

                        for (long outer = 0; outer < totalOps; outer++)
                        {
                            //Get the array offset for the first element in the outer dimension
                            long ix3 = @out.Shape[counters];

                            for (long i = 0; i < opsOuter; i++)
                            {
                                for (long j = 0; j < opsInner; j++)
                                {
                                    for (long k = 0; k < opsInnerInner; k++)
                                    {
                                        d2[ix3] = (System.Single)(Math.Cos(scalar));
                                        ix3 += innerInnerStride3;
                                    }

                                    ix3 += innerStride3;
                                }

                                ix3 += outerStride3;
                            }

                            if (counters.LongLength > 0)
                            {
                                //Basically a ripple carry adder
                                long p = counters.LongLength - 1;
                                while (++counters[p] == limits[p] && p > 0)
                                {
                                    counters[p] = 0;
                                    p--;
                                }
                            }
                        }
                    }
                }
            }
        }
        /// <summary>
        /// Unsafe implementation of applying a unary operation
        /// </summary>
        /// <typeparam name="C">The type of operation to perform</typeparam>
        /// <param name="op">The operation instance</param>
        /// <param name="in1">The input argument</param>
        /// <param name="out">The output target</param>
        internal static void UFunc_Op_Inner_Unary_Flush_Double_TypedImpl<C>(NumCIL.Double.Cos op, NdArray<System.Double> in1, NdArray<System.Double> @out)
            where C : IUnaryOp<System.Double>
        {
            unsafe
            {
                using (var f1 = new Pinner(in1.DataAccessor))
                using (var f2 = new Pinner(@out.DataAccessor))
                {
                    var d1 = (System.Double*)f1.ptr;
                    var d2 = (System.Double*)f2.ptr;

                    if (@out.Shape.Dimensions.Length == 1)
                    {
                        long totalOps = @out.Shape.Dimensions[0].Length;

                        long ix1 = in1.Shape.Offset;
                        long ix2 = @out.Shape.Offset;

                        long stride1 = in1.Shape.Dimensions[0].Stride;
                        long stride2 = @out.Shape.Dimensions[0].Stride;


                        if (stride1 == stride2 && ix1 == ix2)
                        {
                            //Best case, all are equal, just keep a single counter
                            for (long i = 0; i < totalOps; i++)
                            {
                                d2[ix1] = (System.Double)(Math.Cos(d1[ix1]));
                                ix1 += stride1;
                            }
                        }
                        else
                        {
                            for (long i = 0; i < totalOps; i++)
                            {
                                d2[ix2] = (System.Double)(Math.Cos(d1[ix1]));
                                ix1 += stride1;
                                ix2 += stride2;
                            }
                        }
                    }
                    else if (@out.Shape.Dimensions.Length == 2)
                    {
                        long opsOuter = @out.Shape.Dimensions[0].Length;
                        long opsInner = @out.Shape.Dimensions[1].Length;

                        long ix1 = in1.Shape.Offset;
                        long ix2 = @out.Shape.Offset;

                        long outerStride1 = in1.Shape.Dimensions[0].Stride;
                        long outerStride2 = @out.Shape.Dimensions[0].Stride;

                        long innerStride1 = in1.Shape.Dimensions[1].Stride;
                        long innerStride2 = @out.Shape.Dimensions[1].Stride;

                        outerStride1 -= innerStride1 * in1.Shape.Dimensions[1].Length;
                        outerStride2 -= innerStride2 * @out.Shape.Dimensions[1].Length;

                        for (long i = 0; i < opsOuter; i++)
                        {
                            for (long j = 0; j < opsInner; j++)
                            {
                                d2[ix2] = (System.Double)(Math.Cos(d1[ix1]));
                                ix1 += innerStride1;
                                ix2 += innerStride2;
                            }

                            ix1 += outerStride1;
                            ix2 += outerStride2;
                        }
                    }
                    else
                    {
                        long n = in1.Shape.Dimensions.LongLength - 3;
                        long[] limits = in1.Shape.Dimensions.Where(x => n-- > 0).Select(x => x.Length).ToArray();
                        long[] counters = new long[limits.LongLength];

                        long totalOps = limits.LongLength == 0 ? 1 : limits.Aggregate<long>((a, b) => a * b);

                        //This chunck of variables are used to prevent repeated calculations of offsets
                        long dimIndex0 = 0 + limits.LongLength;
                        long dimIndex1 = 1 + limits.LongLength;
                        long dimIndex2 = 2 + limits.LongLength;

                        long opsOuter = @out.Shape.Dimensions[0 + limits.LongLength].Length;
                        long opsInner = @out.Shape.Dimensions[1 + limits.LongLength].Length;
                        long opsInnerInner = @out.Shape.Dimensions[2 + limits.LongLength].Length;

                        long outerStride1 = in1.Shape.Dimensions[dimIndex0].Stride;
                        long outerStride3 = @out.Shape.Dimensions[dimIndex0].Stride;

                        long innerStride1 = in1.Shape.Dimensions[dimIndex1].Stride;
                        long innerStride3 = @out.Shape.Dimensions[dimIndex1].Stride;

                        long innerInnerStride1 = in1.Shape.Dimensions[dimIndex2].Stride;
                        long innerInnerStride3 = @out.Shape.Dimensions[dimIndex2].Stride;

                        outerStride1 -= innerStride1 * in1.Shape.Dimensions[dimIndex1].Length;
                        outerStride3 -= innerStride3 * @out.Shape.Dimensions[dimIndex1].Length;

                        innerStride1 -= innerInnerStride1 * in1.Shape.Dimensions[dimIndex2].Length;
                        innerStride3 -= innerInnerStride3 * @out.Shape.Dimensions[dimIndex2].Length;

                        for (long outer = 0; outer < totalOps; outer++)
                        {
                            //Get the array offset for the first element in the outer dimension
                            long ix1 = in1.Shape[counters];
                            long ix3 = @out.Shape[counters];


                            for (long i = 0; i < opsOuter; i++)
                            {
                                for (long j = 0; j < opsInner; j++)
                                {
                                    for (long k = 0; k < opsInnerInner; k++)
                                    {
                                        d2[ix3] = (System.Double)(Math.Cos(d1[ix1]));
                                        ix1 += innerInnerStride1;
                                        ix3 += innerInnerStride3;
                                    }

                                    ix1 += innerStride1;
                                    ix3 += innerStride3;
                                }

                                ix1 += outerStride1;
                                ix3 += outerStride3;
                            }

                            if (counters.LongLength > 0)
                            {
                                //Basically a ripple carry adder
                                long p = counters.LongLength - 1;
                                while (++counters[p] == limits[p] && p > 0)
                                {
                                    counters[p] = 0;
                                    p--;
                                }
                            }
                        }
                    }
                }
            }
        }

        /// <summary>
        /// Unsafe implementation of applying a unary operation
        /// </summary>
        /// <typeparam name="C">The type of operation to perform</typeparam>
        /// <param name="op">The operation instance</param>
        /// <param name="scalar">The input scalar argument</param>
        /// <param name="out">The output target</param>
        internal static void UFunc_Op_Inner_Unary_Scalar_Flush_Double_TypedImpl<C>(NumCIL.Double.Cos op, System.Double scalar, NdArray<System.Double> @out)
            where C : IUnaryOp<System.Double>
        {
            unsafe
            {
                using (var f2 = new Pinner(@out.DataAccessor))
                {
                    var d2 = (System.Double*)f2.ptr;

                    if (@out.Shape.Dimensions.Length == 1)
                    {
                        long totalOps = @out.Shape.Dimensions[0].Length;
                        long ix2 = @out.Shape.Offset;
                        long stride2 = @out.Shape.Dimensions[0].Stride;

                        for (long i = 0; i < totalOps; i++)
                        {
                            d2[ix2] = (System.Double)(Math.Cos(scalar));
                            ix2 += stride2;
                        }
                    }
                    else if (@out.Shape.Dimensions.Length == 2)
                    {
                        long opsOuter = @out.Shape.Dimensions[0].Length;
                        long opsInner = @out.Shape.Dimensions[1].Length;

                        long ix2 = @out.Shape.Offset;
                        long outerStride2 = @out.Shape.Dimensions[0].Stride;
                        long innerStride2 = @out.Shape.Dimensions[1].Stride;
                        outerStride2 -= innerStride2 * @out.Shape.Dimensions[1].Length;

                        for (long i = 0; i < opsOuter; i++)
                        {
                            for (long j = 0; j < opsInner; j++)
                            {
                                d2[ix2] = (System.Double)(Math.Cos(scalar));
                                ix2 += innerStride2;
                            }

                            ix2 += outerStride2;
                        }
                    }
                    else
                    {
                        long n = @out.Shape.Dimensions.LongLength - 3;
                        long[] limits = @out.Shape.Dimensions.Where(x => n-- > 0).Select(x => x.Length).ToArray();
                        long[] counters = new long[limits.LongLength];

                        long totalOps = limits.LongLength == 0 ? 1 : limits.Aggregate<long>((a, b) => a * b);

                        //This chunck of variables are used to prevent repeated calculations of offsets
                        long dimIndex0 = 0 + limits.LongLength;
                        long dimIndex1 = 1 + limits.LongLength;
                        long dimIndex2 = 2 + limits.LongLength;

                        long opsOuter = @out.Shape.Dimensions[0 + limits.LongLength].Length;
                        long opsInner = @out.Shape.Dimensions[1 + limits.LongLength].Length;
                        long opsInnerInner = @out.Shape.Dimensions[2 + limits.LongLength].Length;

                        long outerStride3 = @out.Shape.Dimensions[dimIndex0].Stride;
                        long innerStride3 = @out.Shape.Dimensions[dimIndex1].Stride;
                        long innerInnerStride3 = @out.Shape.Dimensions[dimIndex2].Stride;
                        outerStride3 -= innerStride3 * @out.Shape.Dimensions[dimIndex1].Length;
                        innerStride3 -= innerInnerStride3 * @out.Shape.Dimensions[dimIndex2].Length;

                        for (long outer = 0; outer < totalOps; outer++)
                        {
                            //Get the array offset for the first element in the outer dimension
                            long ix3 = @out.Shape[counters];

                            for (long i = 0; i < opsOuter; i++)
                            {
                                for (long j = 0; j < opsInner; j++)
                                {
                                    for (long k = 0; k < opsInnerInner; k++)
                                    {
                                        d2[ix3] = (System.Double)(Math.Cos(scalar));
                                        ix3 += innerInnerStride3;
                                    }

                                    ix3 += innerStride3;
                                }

                                ix3 += outerStride3;
                            }

                            if (counters.LongLength > 0)
                            {
                                //Basically a ripple carry adder
                                long p = counters.LongLength - 1;
                                while (++counters[p] == limits[p] && p > 0)
                                {
                                    counters[p] = 0;
                                    p--;
                                }
                            }
                        }
                    }
                }
            }
        }
        /// <summary>
        /// Unsafe implementation of applying a unary operation
        /// </summary>
        /// <typeparam name="C">The type of operation to perform</typeparam>
        /// <param name="op">The operation instance</param>
        /// <param name="in1">The input argument</param>
        /// <param name="out">The output target</param>
        internal static void UFunc_Op_Inner_Unary_Flush_SByte_TypedImpl<C>(NumCIL.Int8.Tan op, NdArray<System.SByte> in1, NdArray<System.SByte> @out)
            where C : IUnaryOp<System.SByte>
        {
            unsafe
            {
                using (var f1 = new Pinner(in1.DataAccessor))
                using (var f2 = new Pinner(@out.DataAccessor))
                {
                    var d1 = (System.SByte*)f1.ptr;
                    var d2 = (System.SByte*)f2.ptr;

                    if (@out.Shape.Dimensions.Length == 1)
                    {
                        long totalOps = @out.Shape.Dimensions[0].Length;

                        long ix1 = in1.Shape.Offset;
                        long ix2 = @out.Shape.Offset;

                        long stride1 = in1.Shape.Dimensions[0].Stride;
                        long stride2 = @out.Shape.Dimensions[0].Stride;


                        if (stride1 == stride2 && ix1 == ix2)
                        {
                            //Best case, all are equal, just keep a single counter
                            for (long i = 0; i < totalOps; i++)
                            {
                                d2[ix1] = (System.SByte)(Math.Tan(d1[ix1]));
                                ix1 += stride1;
                            }
                        }
                        else
                        {
                            for (long i = 0; i < totalOps; i++)
                            {
                                d2[ix2] = (System.SByte)(Math.Tan(d1[ix1]));
                                ix1 += stride1;
                                ix2 += stride2;
                            }
                        }
                    }
                    else if (@out.Shape.Dimensions.Length == 2)
                    {
                        long opsOuter = @out.Shape.Dimensions[0].Length;
                        long opsInner = @out.Shape.Dimensions[1].Length;

                        long ix1 = in1.Shape.Offset;
                        long ix2 = @out.Shape.Offset;

                        long outerStride1 = in1.Shape.Dimensions[0].Stride;
                        long outerStride2 = @out.Shape.Dimensions[0].Stride;

                        long innerStride1 = in1.Shape.Dimensions[1].Stride;
                        long innerStride2 = @out.Shape.Dimensions[1].Stride;

                        outerStride1 -= innerStride1 * in1.Shape.Dimensions[1].Length;
                        outerStride2 -= innerStride2 * @out.Shape.Dimensions[1].Length;

                        for (long i = 0; i < opsOuter; i++)
                        {
                            for (long j = 0; j < opsInner; j++)
                            {
                                d2[ix2] = (System.SByte)(Math.Tan(d1[ix1]));
                                ix1 += innerStride1;
                                ix2 += innerStride2;
                            }

                            ix1 += outerStride1;
                            ix2 += outerStride2;
                        }
                    }
                    else
                    {
                        long n = in1.Shape.Dimensions.LongLength - 3;
                        long[] limits = in1.Shape.Dimensions.Where(x => n-- > 0).Select(x => x.Length).ToArray();
                        long[] counters = new long[limits.LongLength];

                        long totalOps = limits.LongLength == 0 ? 1 : limits.Aggregate<long>((a, b) => a * b);

                        //This chunck of variables are used to prevent repeated calculations of offsets
                        long dimIndex0 = 0 + limits.LongLength;
                        long dimIndex1 = 1 + limits.LongLength;
                        long dimIndex2 = 2 + limits.LongLength;

                        long opsOuter = @out.Shape.Dimensions[0 + limits.LongLength].Length;
                        long opsInner = @out.Shape.Dimensions[1 + limits.LongLength].Length;
                        long opsInnerInner = @out.Shape.Dimensions[2 + limits.LongLength].Length;

                        long outerStride1 = in1.Shape.Dimensions[dimIndex0].Stride;
                        long outerStride3 = @out.Shape.Dimensions[dimIndex0].Stride;

                        long innerStride1 = in1.Shape.Dimensions[dimIndex1].Stride;
                        long innerStride3 = @out.Shape.Dimensions[dimIndex1].Stride;

                        long innerInnerStride1 = in1.Shape.Dimensions[dimIndex2].Stride;
                        long innerInnerStride3 = @out.Shape.Dimensions[dimIndex2].Stride;

                        outerStride1 -= innerStride1 * in1.Shape.Dimensions[dimIndex1].Length;
                        outerStride3 -= innerStride3 * @out.Shape.Dimensions[dimIndex1].Length;

                        innerStride1 -= innerInnerStride1 * in1.Shape.Dimensions[dimIndex2].Length;
                        innerStride3 -= innerInnerStride3 * @out.Shape.Dimensions[dimIndex2].Length;

                        for (long outer = 0; outer < totalOps; outer++)
                        {
                            //Get the array offset for the first element in the outer dimension
                            long ix1 = in1.Shape[counters];
                            long ix3 = @out.Shape[counters];


                            for (long i = 0; i < opsOuter; i++)
                            {
                                for (long j = 0; j < opsInner; j++)
                                {
                                    for (long k = 0; k < opsInnerInner; k++)
                                    {
                                        d2[ix3] = (System.SByte)(Math.Tan(d1[ix1]));
                                        ix1 += innerInnerStride1;
                                        ix3 += innerInnerStride3;
                                    }

                                    ix1 += innerStride1;
                                    ix3 += innerStride3;
                                }

                                ix1 += outerStride1;
                                ix3 += outerStride3;
                            }

                            if (counters.LongLength > 0)
                            {
                                //Basically a ripple carry adder
                                long p = counters.LongLength - 1;
                                while (++counters[p] == limits[p] && p > 0)
                                {
                                    counters[p] = 0;
                                    p--;
                                }
                            }
                        }
                    }
                }
            }
        }

        /// <summary>
        /// Unsafe implementation of applying a unary operation
        /// </summary>
        /// <typeparam name="C">The type of operation to perform</typeparam>
        /// <param name="op">The operation instance</param>
        /// <param name="scalar">The input scalar argument</param>
        /// <param name="out">The output target</param>
        internal static void UFunc_Op_Inner_Unary_Scalar_Flush_SByte_TypedImpl<C>(NumCIL.Int8.Tan op, System.SByte scalar, NdArray<System.SByte> @out)
            where C : IUnaryOp<System.SByte>
        {
            unsafe
            {
                using (var f2 = new Pinner(@out.DataAccessor))
                {
                    var d2 = (System.SByte*)f2.ptr;

                    if (@out.Shape.Dimensions.Length == 1)
                    {
                        long totalOps = @out.Shape.Dimensions[0].Length;
                        long ix2 = @out.Shape.Offset;
                        long stride2 = @out.Shape.Dimensions[0].Stride;

                        for (long i = 0; i < totalOps; i++)
                        {
                            d2[ix2] = (System.SByte)(Math.Tan(scalar));
                            ix2 += stride2;
                        }
                    }
                    else if (@out.Shape.Dimensions.Length == 2)
                    {
                        long opsOuter = @out.Shape.Dimensions[0].Length;
                        long opsInner = @out.Shape.Dimensions[1].Length;

                        long ix2 = @out.Shape.Offset;
                        long outerStride2 = @out.Shape.Dimensions[0].Stride;
                        long innerStride2 = @out.Shape.Dimensions[1].Stride;
                        outerStride2 -= innerStride2 * @out.Shape.Dimensions[1].Length;

                        for (long i = 0; i < opsOuter; i++)
                        {
                            for (long j = 0; j < opsInner; j++)
                            {
                                d2[ix2] = (System.SByte)(Math.Tan(scalar));
                                ix2 += innerStride2;
                            }

                            ix2 += outerStride2;
                        }
                    }
                    else
                    {
                        long n = @out.Shape.Dimensions.LongLength - 3;
                        long[] limits = @out.Shape.Dimensions.Where(x => n-- > 0).Select(x => x.Length).ToArray();
                        long[] counters = new long[limits.LongLength];

                        long totalOps = limits.LongLength == 0 ? 1 : limits.Aggregate<long>((a, b) => a * b);

                        //This chunck of variables are used to prevent repeated calculations of offsets
                        long dimIndex0 = 0 + limits.LongLength;
                        long dimIndex1 = 1 + limits.LongLength;
                        long dimIndex2 = 2 + limits.LongLength;

                        long opsOuter = @out.Shape.Dimensions[0 + limits.LongLength].Length;
                        long opsInner = @out.Shape.Dimensions[1 + limits.LongLength].Length;
                        long opsInnerInner = @out.Shape.Dimensions[2 + limits.LongLength].Length;

                        long outerStride3 = @out.Shape.Dimensions[dimIndex0].Stride;
                        long innerStride3 = @out.Shape.Dimensions[dimIndex1].Stride;
                        long innerInnerStride3 = @out.Shape.Dimensions[dimIndex2].Stride;
                        outerStride3 -= innerStride3 * @out.Shape.Dimensions[dimIndex1].Length;
                        innerStride3 -= innerInnerStride3 * @out.Shape.Dimensions[dimIndex2].Length;

                        for (long outer = 0; outer < totalOps; outer++)
                        {
                            //Get the array offset for the first element in the outer dimension
                            long ix3 = @out.Shape[counters];

                            for (long i = 0; i < opsOuter; i++)
                            {
                                for (long j = 0; j < opsInner; j++)
                                {
                                    for (long k = 0; k < opsInnerInner; k++)
                                    {
                                        d2[ix3] = (System.SByte)(Math.Tan(scalar));
                                        ix3 += innerInnerStride3;
                                    }

                                    ix3 += innerStride3;
                                }

                                ix3 += outerStride3;
                            }

                            if (counters.LongLength > 0)
                            {
                                //Basically a ripple carry adder
                                long p = counters.LongLength - 1;
                                while (++counters[p] == limits[p] && p > 0)
                                {
                                    counters[p] = 0;
                                    p--;
                                }
                            }
                        }
                    }
                }
            }
        }
        /// <summary>
        /// Unsafe implementation of applying a unary operation
        /// </summary>
        /// <typeparam name="C">The type of operation to perform</typeparam>
        /// <param name="op">The operation instance</param>
        /// <param name="in1">The input argument</param>
        /// <param name="out">The output target</param>
        internal static void UFunc_Op_Inner_Unary_Flush_Byte_TypedImpl<C>(NumCIL.UInt8.Tan op, NdArray<System.Byte> in1, NdArray<System.Byte> @out)
            where C : IUnaryOp<System.Byte>
        {
            unsafe
            {
                using (var f1 = new Pinner(in1.DataAccessor))
                using (var f2 = new Pinner(@out.DataAccessor))
                {
                    var d1 = (System.Byte*)f1.ptr;
                    var d2 = (System.Byte*)f2.ptr;

                    if (@out.Shape.Dimensions.Length == 1)
                    {
                        long totalOps = @out.Shape.Dimensions[0].Length;

                        long ix1 = in1.Shape.Offset;
                        long ix2 = @out.Shape.Offset;

                        long stride1 = in1.Shape.Dimensions[0].Stride;
                        long stride2 = @out.Shape.Dimensions[0].Stride;


                        if (stride1 == stride2 && ix1 == ix2)
                        {
                            //Best case, all are equal, just keep a single counter
                            for (long i = 0; i < totalOps; i++)
                            {
                                d2[ix1] = (System.Byte)(Math.Tan(d1[ix1]));
                                ix1 += stride1;
                            }
                        }
                        else
                        {
                            for (long i = 0; i < totalOps; i++)
                            {
                                d2[ix2] = (System.Byte)(Math.Tan(d1[ix1]));
                                ix1 += stride1;
                                ix2 += stride2;
                            }
                        }
                    }
                    else if (@out.Shape.Dimensions.Length == 2)
                    {
                        long opsOuter = @out.Shape.Dimensions[0].Length;
                        long opsInner = @out.Shape.Dimensions[1].Length;

                        long ix1 = in1.Shape.Offset;
                        long ix2 = @out.Shape.Offset;

                        long outerStride1 = in1.Shape.Dimensions[0].Stride;
                        long outerStride2 = @out.Shape.Dimensions[0].Stride;

                        long innerStride1 = in1.Shape.Dimensions[1].Stride;
                        long innerStride2 = @out.Shape.Dimensions[1].Stride;

                        outerStride1 -= innerStride1 * in1.Shape.Dimensions[1].Length;
                        outerStride2 -= innerStride2 * @out.Shape.Dimensions[1].Length;

                        for (long i = 0; i < opsOuter; i++)
                        {
                            for (long j = 0; j < opsInner; j++)
                            {
                                d2[ix2] = (System.Byte)(Math.Tan(d1[ix1]));
                                ix1 += innerStride1;
                                ix2 += innerStride2;
                            }

                            ix1 += outerStride1;
                            ix2 += outerStride2;
                        }
                    }
                    else
                    {
                        long n = in1.Shape.Dimensions.LongLength - 3;
                        long[] limits = in1.Shape.Dimensions.Where(x => n-- > 0).Select(x => x.Length).ToArray();
                        long[] counters = new long[limits.LongLength];

                        long totalOps = limits.LongLength == 0 ? 1 : limits.Aggregate<long>((a, b) => a * b);

                        //This chunck of variables are used to prevent repeated calculations of offsets
                        long dimIndex0 = 0 + limits.LongLength;
                        long dimIndex1 = 1 + limits.LongLength;
                        long dimIndex2 = 2 + limits.LongLength;

                        long opsOuter = @out.Shape.Dimensions[0 + limits.LongLength].Length;
                        long opsInner = @out.Shape.Dimensions[1 + limits.LongLength].Length;
                        long opsInnerInner = @out.Shape.Dimensions[2 + limits.LongLength].Length;

                        long outerStride1 = in1.Shape.Dimensions[dimIndex0].Stride;
                        long outerStride3 = @out.Shape.Dimensions[dimIndex0].Stride;

                        long innerStride1 = in1.Shape.Dimensions[dimIndex1].Stride;
                        long innerStride3 = @out.Shape.Dimensions[dimIndex1].Stride;

                        long innerInnerStride1 = in1.Shape.Dimensions[dimIndex2].Stride;
                        long innerInnerStride3 = @out.Shape.Dimensions[dimIndex2].Stride;

                        outerStride1 -= innerStride1 * in1.Shape.Dimensions[dimIndex1].Length;
                        outerStride3 -= innerStride3 * @out.Shape.Dimensions[dimIndex1].Length;

                        innerStride1 -= innerInnerStride1 * in1.Shape.Dimensions[dimIndex2].Length;
                        innerStride3 -= innerInnerStride3 * @out.Shape.Dimensions[dimIndex2].Length;

                        for (long outer = 0; outer < totalOps; outer++)
                        {
                            //Get the array offset for the first element in the outer dimension
                            long ix1 = in1.Shape[counters];
                            long ix3 = @out.Shape[counters];


                            for (long i = 0; i < opsOuter; i++)
                            {
                                for (long j = 0; j < opsInner; j++)
                                {
                                    for (long k = 0; k < opsInnerInner; k++)
                                    {
                                        d2[ix3] = (System.Byte)(Math.Tan(d1[ix1]));
                                        ix1 += innerInnerStride1;
                                        ix3 += innerInnerStride3;
                                    }

                                    ix1 += innerStride1;
                                    ix3 += innerStride3;
                                }

                                ix1 += outerStride1;
                                ix3 += outerStride3;
                            }

                            if (counters.LongLength > 0)
                            {
                                //Basically a ripple carry adder
                                long p = counters.LongLength - 1;
                                while (++counters[p] == limits[p] && p > 0)
                                {
                                    counters[p] = 0;
                                    p--;
                                }
                            }
                        }
                    }
                }
            }
        }

        /// <summary>
        /// Unsafe implementation of applying a unary operation
        /// </summary>
        /// <typeparam name="C">The type of operation to perform</typeparam>
        /// <param name="op">The operation instance</param>
        /// <param name="scalar">The input scalar argument</param>
        /// <param name="out">The output target</param>
        internal static void UFunc_Op_Inner_Unary_Scalar_Flush_Byte_TypedImpl<C>(NumCIL.UInt8.Tan op, System.Byte scalar, NdArray<System.Byte> @out)
            where C : IUnaryOp<System.Byte>
        {
            unsafe
            {
                using (var f2 = new Pinner(@out.DataAccessor))
                {
                    var d2 = (System.Byte*)f2.ptr;

                    if (@out.Shape.Dimensions.Length == 1)
                    {
                        long totalOps = @out.Shape.Dimensions[0].Length;
                        long ix2 = @out.Shape.Offset;
                        long stride2 = @out.Shape.Dimensions[0].Stride;

                        for (long i = 0; i < totalOps; i++)
                        {
                            d2[ix2] = (System.Byte)(Math.Tan(scalar));
                            ix2 += stride2;
                        }
                    }
                    else if (@out.Shape.Dimensions.Length == 2)
                    {
                        long opsOuter = @out.Shape.Dimensions[0].Length;
                        long opsInner = @out.Shape.Dimensions[1].Length;

                        long ix2 = @out.Shape.Offset;
                        long outerStride2 = @out.Shape.Dimensions[0].Stride;
                        long innerStride2 = @out.Shape.Dimensions[1].Stride;
                        outerStride2 -= innerStride2 * @out.Shape.Dimensions[1].Length;

                        for (long i = 0; i < opsOuter; i++)
                        {
                            for (long j = 0; j < opsInner; j++)
                            {
                                d2[ix2] = (System.Byte)(Math.Tan(scalar));
                                ix2 += innerStride2;
                            }

                            ix2 += outerStride2;
                        }
                    }
                    else
                    {
                        long n = @out.Shape.Dimensions.LongLength - 3;
                        long[] limits = @out.Shape.Dimensions.Where(x => n-- > 0).Select(x => x.Length).ToArray();
                        long[] counters = new long[limits.LongLength];

                        long totalOps = limits.LongLength == 0 ? 1 : limits.Aggregate<long>((a, b) => a * b);

                        //This chunck of variables are used to prevent repeated calculations of offsets
                        long dimIndex0 = 0 + limits.LongLength;
                        long dimIndex1 = 1 + limits.LongLength;
                        long dimIndex2 = 2 + limits.LongLength;

                        long opsOuter = @out.Shape.Dimensions[0 + limits.LongLength].Length;
                        long opsInner = @out.Shape.Dimensions[1 + limits.LongLength].Length;
                        long opsInnerInner = @out.Shape.Dimensions[2 + limits.LongLength].Length;

                        long outerStride3 = @out.Shape.Dimensions[dimIndex0].Stride;
                        long innerStride3 = @out.Shape.Dimensions[dimIndex1].Stride;
                        long innerInnerStride3 = @out.Shape.Dimensions[dimIndex2].Stride;
                        outerStride3 -= innerStride3 * @out.Shape.Dimensions[dimIndex1].Length;
                        innerStride3 -= innerInnerStride3 * @out.Shape.Dimensions[dimIndex2].Length;

                        for (long outer = 0; outer < totalOps; outer++)
                        {
                            //Get the array offset for the first element in the outer dimension
                            long ix3 = @out.Shape[counters];

                            for (long i = 0; i < opsOuter; i++)
                            {
                                for (long j = 0; j < opsInner; j++)
                                {
                                    for (long k = 0; k < opsInnerInner; k++)
                                    {
                                        d2[ix3] = (System.Byte)(Math.Tan(scalar));
                                        ix3 += innerInnerStride3;
                                    }

                                    ix3 += innerStride3;
                                }

                                ix3 += outerStride3;
                            }

                            if (counters.LongLength > 0)
                            {
                                //Basically a ripple carry adder
                                long p = counters.LongLength - 1;
                                while (++counters[p] == limits[p] && p > 0)
                                {
                                    counters[p] = 0;
                                    p--;
                                }
                            }
                        }
                    }
                }
            }
        }
        /// <summary>
        /// Unsafe implementation of applying a unary operation
        /// </summary>
        /// <typeparam name="C">The type of operation to perform</typeparam>
        /// <param name="op">The operation instance</param>
        /// <param name="in1">The input argument</param>
        /// <param name="out">The output target</param>
        internal static void UFunc_Op_Inner_Unary_Flush_Int16_TypedImpl<C>(NumCIL.Int16.Tan op, NdArray<System.Int16> in1, NdArray<System.Int16> @out)
            where C : IUnaryOp<System.Int16>
        {
            unsafe
            {
                using (var f1 = new Pinner(in1.DataAccessor))
                using (var f2 = new Pinner(@out.DataAccessor))
                {
                    var d1 = (System.Int16*)f1.ptr;
                    var d2 = (System.Int16*)f2.ptr;

                    if (@out.Shape.Dimensions.Length == 1)
                    {
                        long totalOps = @out.Shape.Dimensions[0].Length;

                        long ix1 = in1.Shape.Offset;
                        long ix2 = @out.Shape.Offset;

                        long stride1 = in1.Shape.Dimensions[0].Stride;
                        long stride2 = @out.Shape.Dimensions[0].Stride;


                        if (stride1 == stride2 && ix1 == ix2)
                        {
                            //Best case, all are equal, just keep a single counter
                            for (long i = 0; i < totalOps; i++)
                            {
                                d2[ix1] = (System.Int16)(Math.Tan(d1[ix1]));
                                ix1 += stride1;
                            }
                        }
                        else
                        {
                            for (long i = 0; i < totalOps; i++)
                            {
                                d2[ix2] = (System.Int16)(Math.Tan(d1[ix1]));
                                ix1 += stride1;
                                ix2 += stride2;
                            }
                        }
                    }
                    else if (@out.Shape.Dimensions.Length == 2)
                    {
                        long opsOuter = @out.Shape.Dimensions[0].Length;
                        long opsInner = @out.Shape.Dimensions[1].Length;

                        long ix1 = in1.Shape.Offset;
                        long ix2 = @out.Shape.Offset;

                        long outerStride1 = in1.Shape.Dimensions[0].Stride;
                        long outerStride2 = @out.Shape.Dimensions[0].Stride;

                        long innerStride1 = in1.Shape.Dimensions[1].Stride;
                        long innerStride2 = @out.Shape.Dimensions[1].Stride;

                        outerStride1 -= innerStride1 * in1.Shape.Dimensions[1].Length;
                        outerStride2 -= innerStride2 * @out.Shape.Dimensions[1].Length;

                        for (long i = 0; i < opsOuter; i++)
                        {
                            for (long j = 0; j < opsInner; j++)
                            {
                                d2[ix2] = (System.Int16)(Math.Tan(d1[ix1]));
                                ix1 += innerStride1;
                                ix2 += innerStride2;
                            }

                            ix1 += outerStride1;
                            ix2 += outerStride2;
                        }
                    }
                    else
                    {
                        long n = in1.Shape.Dimensions.LongLength - 3;
                        long[] limits = in1.Shape.Dimensions.Where(x => n-- > 0).Select(x => x.Length).ToArray();
                        long[] counters = new long[limits.LongLength];

                        long totalOps = limits.LongLength == 0 ? 1 : limits.Aggregate<long>((a, b) => a * b);

                        //This chunck of variables are used to prevent repeated calculations of offsets
                        long dimIndex0 = 0 + limits.LongLength;
                        long dimIndex1 = 1 + limits.LongLength;
                        long dimIndex2 = 2 + limits.LongLength;

                        long opsOuter = @out.Shape.Dimensions[0 + limits.LongLength].Length;
                        long opsInner = @out.Shape.Dimensions[1 + limits.LongLength].Length;
                        long opsInnerInner = @out.Shape.Dimensions[2 + limits.LongLength].Length;

                        long outerStride1 = in1.Shape.Dimensions[dimIndex0].Stride;
                        long outerStride3 = @out.Shape.Dimensions[dimIndex0].Stride;

                        long innerStride1 = in1.Shape.Dimensions[dimIndex1].Stride;
                        long innerStride3 = @out.Shape.Dimensions[dimIndex1].Stride;

                        long innerInnerStride1 = in1.Shape.Dimensions[dimIndex2].Stride;
                        long innerInnerStride3 = @out.Shape.Dimensions[dimIndex2].Stride;

                        outerStride1 -= innerStride1 * in1.Shape.Dimensions[dimIndex1].Length;
                        outerStride3 -= innerStride3 * @out.Shape.Dimensions[dimIndex1].Length;

                        innerStride1 -= innerInnerStride1 * in1.Shape.Dimensions[dimIndex2].Length;
                        innerStride3 -= innerInnerStride3 * @out.Shape.Dimensions[dimIndex2].Length;

                        for (long outer = 0; outer < totalOps; outer++)
                        {
                            //Get the array offset for the first element in the outer dimension
                            long ix1 = in1.Shape[counters];
                            long ix3 = @out.Shape[counters];


                            for (long i = 0; i < opsOuter; i++)
                            {
                                for (long j = 0; j < opsInner; j++)
                                {
                                    for (long k = 0; k < opsInnerInner; k++)
                                    {
                                        d2[ix3] = (System.Int16)(Math.Tan(d1[ix1]));
                                        ix1 += innerInnerStride1;
                                        ix3 += innerInnerStride3;
                                    }

                                    ix1 += innerStride1;
                                    ix3 += innerStride3;
                                }

                                ix1 += outerStride1;
                                ix3 += outerStride3;
                            }

                            if (counters.LongLength > 0)
                            {
                                //Basically a ripple carry adder
                                long p = counters.LongLength - 1;
                                while (++counters[p] == limits[p] && p > 0)
                                {
                                    counters[p] = 0;
                                    p--;
                                }
                            }
                        }
                    }
                }
            }
        }

        /// <summary>
        /// Unsafe implementation of applying a unary operation
        /// </summary>
        /// <typeparam name="C">The type of operation to perform</typeparam>
        /// <param name="op">The operation instance</param>
        /// <param name="scalar">The input scalar argument</param>
        /// <param name="out">The output target</param>
        internal static void UFunc_Op_Inner_Unary_Scalar_Flush_Int16_TypedImpl<C>(NumCIL.Int16.Tan op, System.Int16 scalar, NdArray<System.Int16> @out)
            where C : IUnaryOp<System.Int16>
        {
            unsafe
            {
                using (var f2 = new Pinner(@out.DataAccessor))
                {
                    var d2 = (System.Int16*)f2.ptr;

                    if (@out.Shape.Dimensions.Length == 1)
                    {
                        long totalOps = @out.Shape.Dimensions[0].Length;
                        long ix2 = @out.Shape.Offset;
                        long stride2 = @out.Shape.Dimensions[0].Stride;

                        for (long i = 0; i < totalOps; i++)
                        {
                            d2[ix2] = (System.Int16)(Math.Tan(scalar));
                            ix2 += stride2;
                        }
                    }
                    else if (@out.Shape.Dimensions.Length == 2)
                    {
                        long opsOuter = @out.Shape.Dimensions[0].Length;
                        long opsInner = @out.Shape.Dimensions[1].Length;

                        long ix2 = @out.Shape.Offset;
                        long outerStride2 = @out.Shape.Dimensions[0].Stride;
                        long innerStride2 = @out.Shape.Dimensions[1].Stride;
                        outerStride2 -= innerStride2 * @out.Shape.Dimensions[1].Length;

                        for (long i = 0; i < opsOuter; i++)
                        {
                            for (long j = 0; j < opsInner; j++)
                            {
                                d2[ix2] = (System.Int16)(Math.Tan(scalar));
                                ix2 += innerStride2;
                            }

                            ix2 += outerStride2;
                        }
                    }
                    else
                    {
                        long n = @out.Shape.Dimensions.LongLength - 3;
                        long[] limits = @out.Shape.Dimensions.Where(x => n-- > 0).Select(x => x.Length).ToArray();
                        long[] counters = new long[limits.LongLength];

                        long totalOps = limits.LongLength == 0 ? 1 : limits.Aggregate<long>((a, b) => a * b);

                        //This chunck of variables are used to prevent repeated calculations of offsets
                        long dimIndex0 = 0 + limits.LongLength;
                        long dimIndex1 = 1 + limits.LongLength;
                        long dimIndex2 = 2 + limits.LongLength;

                        long opsOuter = @out.Shape.Dimensions[0 + limits.LongLength].Length;
                        long opsInner = @out.Shape.Dimensions[1 + limits.LongLength].Length;
                        long opsInnerInner = @out.Shape.Dimensions[2 + limits.LongLength].Length;

                        long outerStride3 = @out.Shape.Dimensions[dimIndex0].Stride;
                        long innerStride3 = @out.Shape.Dimensions[dimIndex1].Stride;
                        long innerInnerStride3 = @out.Shape.Dimensions[dimIndex2].Stride;
                        outerStride3 -= innerStride3 * @out.Shape.Dimensions[dimIndex1].Length;
                        innerStride3 -= innerInnerStride3 * @out.Shape.Dimensions[dimIndex2].Length;

                        for (long outer = 0; outer < totalOps; outer++)
                        {
                            //Get the array offset for the first element in the outer dimension
                            long ix3 = @out.Shape[counters];

                            for (long i = 0; i < opsOuter; i++)
                            {
                                for (long j = 0; j < opsInner; j++)
                                {
                                    for (long k = 0; k < opsInnerInner; k++)
                                    {
                                        d2[ix3] = (System.Int16)(Math.Tan(scalar));
                                        ix3 += innerInnerStride3;
                                    }

                                    ix3 += innerStride3;
                                }

                                ix3 += outerStride3;
                            }

                            if (counters.LongLength > 0)
                            {
                                //Basically a ripple carry adder
                                long p = counters.LongLength - 1;
                                while (++counters[p] == limits[p] && p > 0)
                                {
                                    counters[p] = 0;
                                    p--;
                                }
                            }
                        }
                    }
                }
            }
        }
        /// <summary>
        /// Unsafe implementation of applying a unary operation
        /// </summary>
        /// <typeparam name="C">The type of operation to perform</typeparam>
        /// <param name="op">The operation instance</param>
        /// <param name="in1">The input argument</param>
        /// <param name="out">The output target</param>
        internal static void UFunc_Op_Inner_Unary_Flush_UInt16_TypedImpl<C>(NumCIL.UInt16.Tan op, NdArray<System.UInt16> in1, NdArray<System.UInt16> @out)
            where C : IUnaryOp<System.UInt16>
        {
            unsafe
            {
                using (var f1 = new Pinner(in1.DataAccessor))
                using (var f2 = new Pinner(@out.DataAccessor))
                {
                    var d1 = (System.UInt16*)f1.ptr;
                    var d2 = (System.UInt16*)f2.ptr;

                    if (@out.Shape.Dimensions.Length == 1)
                    {
                        long totalOps = @out.Shape.Dimensions[0].Length;

                        long ix1 = in1.Shape.Offset;
                        long ix2 = @out.Shape.Offset;

                        long stride1 = in1.Shape.Dimensions[0].Stride;
                        long stride2 = @out.Shape.Dimensions[0].Stride;


                        if (stride1 == stride2 && ix1 == ix2)
                        {
                            //Best case, all are equal, just keep a single counter
                            for (long i = 0; i < totalOps; i++)
                            {
                                d2[ix1] = (System.UInt16)(Math.Tan(d1[ix1]));
                                ix1 += stride1;
                            }
                        }
                        else
                        {
                            for (long i = 0; i < totalOps; i++)
                            {
                                d2[ix2] = (System.UInt16)(Math.Tan(d1[ix1]));
                                ix1 += stride1;
                                ix2 += stride2;
                            }
                        }
                    }
                    else if (@out.Shape.Dimensions.Length == 2)
                    {
                        long opsOuter = @out.Shape.Dimensions[0].Length;
                        long opsInner = @out.Shape.Dimensions[1].Length;

                        long ix1 = in1.Shape.Offset;
                        long ix2 = @out.Shape.Offset;

                        long outerStride1 = in1.Shape.Dimensions[0].Stride;
                        long outerStride2 = @out.Shape.Dimensions[0].Stride;

                        long innerStride1 = in1.Shape.Dimensions[1].Stride;
                        long innerStride2 = @out.Shape.Dimensions[1].Stride;

                        outerStride1 -= innerStride1 * in1.Shape.Dimensions[1].Length;
                        outerStride2 -= innerStride2 * @out.Shape.Dimensions[1].Length;

                        for (long i = 0; i < opsOuter; i++)
                        {
                            for (long j = 0; j < opsInner; j++)
                            {
                                d2[ix2] = (System.UInt16)(Math.Tan(d1[ix1]));
                                ix1 += innerStride1;
                                ix2 += innerStride2;
                            }

                            ix1 += outerStride1;
                            ix2 += outerStride2;
                        }
                    }
                    else
                    {
                        long n = in1.Shape.Dimensions.LongLength - 3;
                        long[] limits = in1.Shape.Dimensions.Where(x => n-- > 0).Select(x => x.Length).ToArray();
                        long[] counters = new long[limits.LongLength];

                        long totalOps = limits.LongLength == 0 ? 1 : limits.Aggregate<long>((a, b) => a * b);

                        //This chunck of variables are used to prevent repeated calculations of offsets
                        long dimIndex0 = 0 + limits.LongLength;
                        long dimIndex1 = 1 + limits.LongLength;
                        long dimIndex2 = 2 + limits.LongLength;

                        long opsOuter = @out.Shape.Dimensions[0 + limits.LongLength].Length;
                        long opsInner = @out.Shape.Dimensions[1 + limits.LongLength].Length;
                        long opsInnerInner = @out.Shape.Dimensions[2 + limits.LongLength].Length;

                        long outerStride1 = in1.Shape.Dimensions[dimIndex0].Stride;
                        long outerStride3 = @out.Shape.Dimensions[dimIndex0].Stride;

                        long innerStride1 = in1.Shape.Dimensions[dimIndex1].Stride;
                        long innerStride3 = @out.Shape.Dimensions[dimIndex1].Stride;

                        long innerInnerStride1 = in1.Shape.Dimensions[dimIndex2].Stride;
                        long innerInnerStride3 = @out.Shape.Dimensions[dimIndex2].Stride;

                        outerStride1 -= innerStride1 * in1.Shape.Dimensions[dimIndex1].Length;
                        outerStride3 -= innerStride3 * @out.Shape.Dimensions[dimIndex1].Length;

                        innerStride1 -= innerInnerStride1 * in1.Shape.Dimensions[dimIndex2].Length;
                        innerStride3 -= innerInnerStride3 * @out.Shape.Dimensions[dimIndex2].Length;

                        for (long outer = 0; outer < totalOps; outer++)
                        {
                            //Get the array offset for the first element in the outer dimension
                            long ix1 = in1.Shape[counters];
                            long ix3 = @out.Shape[counters];


                            for (long i = 0; i < opsOuter; i++)
                            {
                                for (long j = 0; j < opsInner; j++)
                                {
                                    for (long k = 0; k < opsInnerInner; k++)
                                    {
                                        d2[ix3] = (System.UInt16)(Math.Tan(d1[ix1]));
                                        ix1 += innerInnerStride1;
                                        ix3 += innerInnerStride3;
                                    }

                                    ix1 += innerStride1;
                                    ix3 += innerStride3;
                                }

                                ix1 += outerStride1;
                                ix3 += outerStride3;
                            }

                            if (counters.LongLength > 0)
                            {
                                //Basically a ripple carry adder
                                long p = counters.LongLength - 1;
                                while (++counters[p] == limits[p] && p > 0)
                                {
                                    counters[p] = 0;
                                    p--;
                                }
                            }
                        }
                    }
                }
            }
        }

        /// <summary>
        /// Unsafe implementation of applying a unary operation
        /// </summary>
        /// <typeparam name="C">The type of operation to perform</typeparam>
        /// <param name="op">The operation instance</param>
        /// <param name="scalar">The input scalar argument</param>
        /// <param name="out">The output target</param>
        internal static void UFunc_Op_Inner_Unary_Scalar_Flush_UInt16_TypedImpl<C>(NumCIL.UInt16.Tan op, System.UInt16 scalar, NdArray<System.UInt16> @out)
            where C : IUnaryOp<System.UInt16>
        {
            unsafe
            {
                using (var f2 = new Pinner(@out.DataAccessor))
                {
                    var d2 = (System.UInt16*)f2.ptr;

                    if (@out.Shape.Dimensions.Length == 1)
                    {
                        long totalOps = @out.Shape.Dimensions[0].Length;
                        long ix2 = @out.Shape.Offset;
                        long stride2 = @out.Shape.Dimensions[0].Stride;

                        for (long i = 0; i < totalOps; i++)
                        {
                            d2[ix2] = (System.UInt16)(Math.Tan(scalar));
                            ix2 += stride2;
                        }
                    }
                    else if (@out.Shape.Dimensions.Length == 2)
                    {
                        long opsOuter = @out.Shape.Dimensions[0].Length;
                        long opsInner = @out.Shape.Dimensions[1].Length;

                        long ix2 = @out.Shape.Offset;
                        long outerStride2 = @out.Shape.Dimensions[0].Stride;
                        long innerStride2 = @out.Shape.Dimensions[1].Stride;
                        outerStride2 -= innerStride2 * @out.Shape.Dimensions[1].Length;

                        for (long i = 0; i < opsOuter; i++)
                        {
                            for (long j = 0; j < opsInner; j++)
                            {
                                d2[ix2] = (System.UInt16)(Math.Tan(scalar));
                                ix2 += innerStride2;
                            }

                            ix2 += outerStride2;
                        }
                    }
                    else
                    {
                        long n = @out.Shape.Dimensions.LongLength - 3;
                        long[] limits = @out.Shape.Dimensions.Where(x => n-- > 0).Select(x => x.Length).ToArray();
                        long[] counters = new long[limits.LongLength];

                        long totalOps = limits.LongLength == 0 ? 1 : limits.Aggregate<long>((a, b) => a * b);

                        //This chunck of variables are used to prevent repeated calculations of offsets
                        long dimIndex0 = 0 + limits.LongLength;
                        long dimIndex1 = 1 + limits.LongLength;
                        long dimIndex2 = 2 + limits.LongLength;

                        long opsOuter = @out.Shape.Dimensions[0 + limits.LongLength].Length;
                        long opsInner = @out.Shape.Dimensions[1 + limits.LongLength].Length;
                        long opsInnerInner = @out.Shape.Dimensions[2 + limits.LongLength].Length;

                        long outerStride3 = @out.Shape.Dimensions[dimIndex0].Stride;
                        long innerStride3 = @out.Shape.Dimensions[dimIndex1].Stride;
                        long innerInnerStride3 = @out.Shape.Dimensions[dimIndex2].Stride;
                        outerStride3 -= innerStride3 * @out.Shape.Dimensions[dimIndex1].Length;
                        innerStride3 -= innerInnerStride3 * @out.Shape.Dimensions[dimIndex2].Length;

                        for (long outer = 0; outer < totalOps; outer++)
                        {
                            //Get the array offset for the first element in the outer dimension
                            long ix3 = @out.Shape[counters];

                            for (long i = 0; i < opsOuter; i++)
                            {
                                for (long j = 0; j < opsInner; j++)
                                {
                                    for (long k = 0; k < opsInnerInner; k++)
                                    {
                                        d2[ix3] = (System.UInt16)(Math.Tan(scalar));
                                        ix3 += innerInnerStride3;
                                    }

                                    ix3 += innerStride3;
                                }

                                ix3 += outerStride3;
                            }

                            if (counters.LongLength > 0)
                            {
                                //Basically a ripple carry adder
                                long p = counters.LongLength - 1;
                                while (++counters[p] == limits[p] && p > 0)
                                {
                                    counters[p] = 0;
                                    p--;
                                }
                            }
                        }
                    }
                }
            }
        }
        /// <summary>
        /// Unsafe implementation of applying a unary operation
        /// </summary>
        /// <typeparam name="C">The type of operation to perform</typeparam>
        /// <param name="op">The operation instance</param>
        /// <param name="in1">The input argument</param>
        /// <param name="out">The output target</param>
        internal static void UFunc_Op_Inner_Unary_Flush_Int32_TypedImpl<C>(NumCIL.Int32.Tan op, NdArray<System.Int32> in1, NdArray<System.Int32> @out)
            where C : IUnaryOp<System.Int32>
        {
            unsafe
            {
                using (var f1 = new Pinner(in1.DataAccessor))
                using (var f2 = new Pinner(@out.DataAccessor))
                {
                    var d1 = (System.Int32*)f1.ptr;
                    var d2 = (System.Int32*)f2.ptr;

                    if (@out.Shape.Dimensions.Length == 1)
                    {
                        long totalOps = @out.Shape.Dimensions[0].Length;

                        long ix1 = in1.Shape.Offset;
                        long ix2 = @out.Shape.Offset;

                        long stride1 = in1.Shape.Dimensions[0].Stride;
                        long stride2 = @out.Shape.Dimensions[0].Stride;


                        if (stride1 == stride2 && ix1 == ix2)
                        {
                            //Best case, all are equal, just keep a single counter
                            for (long i = 0; i < totalOps; i++)
                            {
                                d2[ix1] = (System.Int32)(Math.Tan(d1[ix1]));
                                ix1 += stride1;
                            }
                        }
                        else
                        {
                            for (long i = 0; i < totalOps; i++)
                            {
                                d2[ix2] = (System.Int32)(Math.Tan(d1[ix1]));
                                ix1 += stride1;
                                ix2 += stride2;
                            }
                        }
                    }
                    else if (@out.Shape.Dimensions.Length == 2)
                    {
                        long opsOuter = @out.Shape.Dimensions[0].Length;
                        long opsInner = @out.Shape.Dimensions[1].Length;

                        long ix1 = in1.Shape.Offset;
                        long ix2 = @out.Shape.Offset;

                        long outerStride1 = in1.Shape.Dimensions[0].Stride;
                        long outerStride2 = @out.Shape.Dimensions[0].Stride;

                        long innerStride1 = in1.Shape.Dimensions[1].Stride;
                        long innerStride2 = @out.Shape.Dimensions[1].Stride;

                        outerStride1 -= innerStride1 * in1.Shape.Dimensions[1].Length;
                        outerStride2 -= innerStride2 * @out.Shape.Dimensions[1].Length;

                        for (long i = 0; i < opsOuter; i++)
                        {
                            for (long j = 0; j < opsInner; j++)
                            {
                                d2[ix2] = (System.Int32)(Math.Tan(d1[ix1]));
                                ix1 += innerStride1;
                                ix2 += innerStride2;
                            }

                            ix1 += outerStride1;
                            ix2 += outerStride2;
                        }
                    }
                    else
                    {
                        long n = in1.Shape.Dimensions.LongLength - 3;
                        long[] limits = in1.Shape.Dimensions.Where(x => n-- > 0).Select(x => x.Length).ToArray();
                        long[] counters = new long[limits.LongLength];

                        long totalOps = limits.LongLength == 0 ? 1 : limits.Aggregate<long>((a, b) => a * b);

                        //This chunck of variables are used to prevent repeated calculations of offsets
                        long dimIndex0 = 0 + limits.LongLength;
                        long dimIndex1 = 1 + limits.LongLength;
                        long dimIndex2 = 2 + limits.LongLength;

                        long opsOuter = @out.Shape.Dimensions[0 + limits.LongLength].Length;
                        long opsInner = @out.Shape.Dimensions[1 + limits.LongLength].Length;
                        long opsInnerInner = @out.Shape.Dimensions[2 + limits.LongLength].Length;

                        long outerStride1 = in1.Shape.Dimensions[dimIndex0].Stride;
                        long outerStride3 = @out.Shape.Dimensions[dimIndex0].Stride;

                        long innerStride1 = in1.Shape.Dimensions[dimIndex1].Stride;
                        long innerStride3 = @out.Shape.Dimensions[dimIndex1].Stride;

                        long innerInnerStride1 = in1.Shape.Dimensions[dimIndex2].Stride;
                        long innerInnerStride3 = @out.Shape.Dimensions[dimIndex2].Stride;

                        outerStride1 -= innerStride1 * in1.Shape.Dimensions[dimIndex1].Length;
                        outerStride3 -= innerStride3 * @out.Shape.Dimensions[dimIndex1].Length;

                        innerStride1 -= innerInnerStride1 * in1.Shape.Dimensions[dimIndex2].Length;
                        innerStride3 -= innerInnerStride3 * @out.Shape.Dimensions[dimIndex2].Length;

                        for (long outer = 0; outer < totalOps; outer++)
                        {
                            //Get the array offset for the first element in the outer dimension
                            long ix1 = in1.Shape[counters];
                            long ix3 = @out.Shape[counters];


                            for (long i = 0; i < opsOuter; i++)
                            {
                                for (long j = 0; j < opsInner; j++)
                                {
                                    for (long k = 0; k < opsInnerInner; k++)
                                    {
                                        d2[ix3] = (System.Int32)(Math.Tan(d1[ix1]));
                                        ix1 += innerInnerStride1;
                                        ix3 += innerInnerStride3;
                                    }

                                    ix1 += innerStride1;
                                    ix3 += innerStride3;
                                }

                                ix1 += outerStride1;
                                ix3 += outerStride3;
                            }

                            if (counters.LongLength > 0)
                            {
                                //Basically a ripple carry adder
                                long p = counters.LongLength - 1;
                                while (++counters[p] == limits[p] && p > 0)
                                {
                                    counters[p] = 0;
                                    p--;
                                }
                            }
                        }
                    }
                }
            }
        }

        /// <summary>
        /// Unsafe implementation of applying a unary operation
        /// </summary>
        /// <typeparam name="C">The type of operation to perform</typeparam>
        /// <param name="op">The operation instance</param>
        /// <param name="scalar">The input scalar argument</param>
        /// <param name="out">The output target</param>
        internal static void UFunc_Op_Inner_Unary_Scalar_Flush_Int32_TypedImpl<C>(NumCIL.Int32.Tan op, System.Int32 scalar, NdArray<System.Int32> @out)
            where C : IUnaryOp<System.Int32>
        {
            unsafe
            {
                using (var f2 = new Pinner(@out.DataAccessor))
                {
                    var d2 = (System.Int32*)f2.ptr;

                    if (@out.Shape.Dimensions.Length == 1)
                    {
                        long totalOps = @out.Shape.Dimensions[0].Length;
                        long ix2 = @out.Shape.Offset;
                        long stride2 = @out.Shape.Dimensions[0].Stride;

                        for (long i = 0; i < totalOps; i++)
                        {
                            d2[ix2] = (System.Int32)(Math.Tan(scalar));
                            ix2 += stride2;
                        }
                    }
                    else if (@out.Shape.Dimensions.Length == 2)
                    {
                        long opsOuter = @out.Shape.Dimensions[0].Length;
                        long opsInner = @out.Shape.Dimensions[1].Length;

                        long ix2 = @out.Shape.Offset;
                        long outerStride2 = @out.Shape.Dimensions[0].Stride;
                        long innerStride2 = @out.Shape.Dimensions[1].Stride;
                        outerStride2 -= innerStride2 * @out.Shape.Dimensions[1].Length;

                        for (long i = 0; i < opsOuter; i++)
                        {
                            for (long j = 0; j < opsInner; j++)
                            {
                                d2[ix2] = (System.Int32)(Math.Tan(scalar));
                                ix2 += innerStride2;
                            }

                            ix2 += outerStride2;
                        }
                    }
                    else
                    {
                        long n = @out.Shape.Dimensions.LongLength - 3;
                        long[] limits = @out.Shape.Dimensions.Where(x => n-- > 0).Select(x => x.Length).ToArray();
                        long[] counters = new long[limits.LongLength];

                        long totalOps = limits.LongLength == 0 ? 1 : limits.Aggregate<long>((a, b) => a * b);

                        //This chunck of variables are used to prevent repeated calculations of offsets
                        long dimIndex0 = 0 + limits.LongLength;
                        long dimIndex1 = 1 + limits.LongLength;
                        long dimIndex2 = 2 + limits.LongLength;

                        long opsOuter = @out.Shape.Dimensions[0 + limits.LongLength].Length;
                        long opsInner = @out.Shape.Dimensions[1 + limits.LongLength].Length;
                        long opsInnerInner = @out.Shape.Dimensions[2 + limits.LongLength].Length;

                        long outerStride3 = @out.Shape.Dimensions[dimIndex0].Stride;
                        long innerStride3 = @out.Shape.Dimensions[dimIndex1].Stride;
                        long innerInnerStride3 = @out.Shape.Dimensions[dimIndex2].Stride;
                        outerStride3 -= innerStride3 * @out.Shape.Dimensions[dimIndex1].Length;
                        innerStride3 -= innerInnerStride3 * @out.Shape.Dimensions[dimIndex2].Length;

                        for (long outer = 0; outer < totalOps; outer++)
                        {
                            //Get the array offset for the first element in the outer dimension
                            long ix3 = @out.Shape[counters];

                            for (long i = 0; i < opsOuter; i++)
                            {
                                for (long j = 0; j < opsInner; j++)
                                {
                                    for (long k = 0; k < opsInnerInner; k++)
                                    {
                                        d2[ix3] = (System.Int32)(Math.Tan(scalar));
                                        ix3 += innerInnerStride3;
                                    }

                                    ix3 += innerStride3;
                                }

                                ix3 += outerStride3;
                            }

                            if (counters.LongLength > 0)
                            {
                                //Basically a ripple carry adder
                                long p = counters.LongLength - 1;
                                while (++counters[p] == limits[p] && p > 0)
                                {
                                    counters[p] = 0;
                                    p--;
                                }
                            }
                        }
                    }
                }
            }
        }
        /// <summary>
        /// Unsafe implementation of applying a unary operation
        /// </summary>
        /// <typeparam name="C">The type of operation to perform</typeparam>
        /// <param name="op">The operation instance</param>
        /// <param name="in1">The input argument</param>
        /// <param name="out">The output target</param>
        internal static void UFunc_Op_Inner_Unary_Flush_UInt32_TypedImpl<C>(NumCIL.UInt32.Tan op, NdArray<System.UInt32> in1, NdArray<System.UInt32> @out)
            where C : IUnaryOp<System.UInt32>
        {
            unsafe
            {
                using (var f1 = new Pinner(in1.DataAccessor))
                using (var f2 = new Pinner(@out.DataAccessor))
                {
                    var d1 = (System.UInt32*)f1.ptr;
                    var d2 = (System.UInt32*)f2.ptr;

                    if (@out.Shape.Dimensions.Length == 1)
                    {
                        long totalOps = @out.Shape.Dimensions[0].Length;

                        long ix1 = in1.Shape.Offset;
                        long ix2 = @out.Shape.Offset;

                        long stride1 = in1.Shape.Dimensions[0].Stride;
                        long stride2 = @out.Shape.Dimensions[0].Stride;


                        if (stride1 == stride2 && ix1 == ix2)
                        {
                            //Best case, all are equal, just keep a single counter
                            for (long i = 0; i < totalOps; i++)
                            {
                                d2[ix1] = (System.UInt32)(Math.Tan(d1[ix1]));
                                ix1 += stride1;
                            }
                        }
                        else
                        {
                            for (long i = 0; i < totalOps; i++)
                            {
                                d2[ix2] = (System.UInt32)(Math.Tan(d1[ix1]));
                                ix1 += stride1;
                                ix2 += stride2;
                            }
                        }
                    }
                    else if (@out.Shape.Dimensions.Length == 2)
                    {
                        long opsOuter = @out.Shape.Dimensions[0].Length;
                        long opsInner = @out.Shape.Dimensions[1].Length;

                        long ix1 = in1.Shape.Offset;
                        long ix2 = @out.Shape.Offset;

                        long outerStride1 = in1.Shape.Dimensions[0].Stride;
                        long outerStride2 = @out.Shape.Dimensions[0].Stride;

                        long innerStride1 = in1.Shape.Dimensions[1].Stride;
                        long innerStride2 = @out.Shape.Dimensions[1].Stride;

                        outerStride1 -= innerStride1 * in1.Shape.Dimensions[1].Length;
                        outerStride2 -= innerStride2 * @out.Shape.Dimensions[1].Length;

                        for (long i = 0; i < opsOuter; i++)
                        {
                            for (long j = 0; j < opsInner; j++)
                            {
                                d2[ix2] = (System.UInt32)(Math.Tan(d1[ix1]));
                                ix1 += innerStride1;
                                ix2 += innerStride2;
                            }

                            ix1 += outerStride1;
                            ix2 += outerStride2;
                        }
                    }
                    else
                    {
                        long n = in1.Shape.Dimensions.LongLength - 3;
                        long[] limits = in1.Shape.Dimensions.Where(x => n-- > 0).Select(x => x.Length).ToArray();
                        long[] counters = new long[limits.LongLength];

                        long totalOps = limits.LongLength == 0 ? 1 : limits.Aggregate<long>((a, b) => a * b);

                        //This chunck of variables are used to prevent repeated calculations of offsets
                        long dimIndex0 = 0 + limits.LongLength;
                        long dimIndex1 = 1 + limits.LongLength;
                        long dimIndex2 = 2 + limits.LongLength;

                        long opsOuter = @out.Shape.Dimensions[0 + limits.LongLength].Length;
                        long opsInner = @out.Shape.Dimensions[1 + limits.LongLength].Length;
                        long opsInnerInner = @out.Shape.Dimensions[2 + limits.LongLength].Length;

                        long outerStride1 = in1.Shape.Dimensions[dimIndex0].Stride;
                        long outerStride3 = @out.Shape.Dimensions[dimIndex0].Stride;

                        long innerStride1 = in1.Shape.Dimensions[dimIndex1].Stride;
                        long innerStride3 = @out.Shape.Dimensions[dimIndex1].Stride;

                        long innerInnerStride1 = in1.Shape.Dimensions[dimIndex2].Stride;
                        long innerInnerStride3 = @out.Shape.Dimensions[dimIndex2].Stride;

                        outerStride1 -= innerStride1 * in1.Shape.Dimensions[dimIndex1].Length;
                        outerStride3 -= innerStride3 * @out.Shape.Dimensions[dimIndex1].Length;

                        innerStride1 -= innerInnerStride1 * in1.Shape.Dimensions[dimIndex2].Length;
                        innerStride3 -= innerInnerStride3 * @out.Shape.Dimensions[dimIndex2].Length;

                        for (long outer = 0; outer < totalOps; outer++)
                        {
                            //Get the array offset for the first element in the outer dimension
                            long ix1 = in1.Shape[counters];
                            long ix3 = @out.Shape[counters];


                            for (long i = 0; i < opsOuter; i++)
                            {
                                for (long j = 0; j < opsInner; j++)
                                {
                                    for (long k = 0; k < opsInnerInner; k++)
                                    {
                                        d2[ix3] = (System.UInt32)(Math.Tan(d1[ix1]));
                                        ix1 += innerInnerStride1;
                                        ix3 += innerInnerStride3;
                                    }

                                    ix1 += innerStride1;
                                    ix3 += innerStride3;
                                }

                                ix1 += outerStride1;
                                ix3 += outerStride3;
                            }

                            if (counters.LongLength > 0)
                            {
                                //Basically a ripple carry adder
                                long p = counters.LongLength - 1;
                                while (++counters[p] == limits[p] && p > 0)
                                {
                                    counters[p] = 0;
                                    p--;
                                }
                            }
                        }
                    }
                }
            }
        }

        /// <summary>
        /// Unsafe implementation of applying a unary operation
        /// </summary>
        /// <typeparam name="C">The type of operation to perform</typeparam>
        /// <param name="op">The operation instance</param>
        /// <param name="scalar">The input scalar argument</param>
        /// <param name="out">The output target</param>
        internal static void UFunc_Op_Inner_Unary_Scalar_Flush_UInt32_TypedImpl<C>(NumCIL.UInt32.Tan op, System.UInt32 scalar, NdArray<System.UInt32> @out)
            where C : IUnaryOp<System.UInt32>
        {
            unsafe
            {
                using (var f2 = new Pinner(@out.DataAccessor))
                {
                    var d2 = (System.UInt32*)f2.ptr;

                    if (@out.Shape.Dimensions.Length == 1)
                    {
                        long totalOps = @out.Shape.Dimensions[0].Length;
                        long ix2 = @out.Shape.Offset;
                        long stride2 = @out.Shape.Dimensions[0].Stride;

                        for (long i = 0; i < totalOps; i++)
                        {
                            d2[ix2] = (System.UInt32)(Math.Tan(scalar));
                            ix2 += stride2;
                        }
                    }
                    else if (@out.Shape.Dimensions.Length == 2)
                    {
                        long opsOuter = @out.Shape.Dimensions[0].Length;
                        long opsInner = @out.Shape.Dimensions[1].Length;

                        long ix2 = @out.Shape.Offset;
                        long outerStride2 = @out.Shape.Dimensions[0].Stride;
                        long innerStride2 = @out.Shape.Dimensions[1].Stride;
                        outerStride2 -= innerStride2 * @out.Shape.Dimensions[1].Length;

                        for (long i = 0; i < opsOuter; i++)
                        {
                            for (long j = 0; j < opsInner; j++)
                            {
                                d2[ix2] = (System.UInt32)(Math.Tan(scalar));
                                ix2 += innerStride2;
                            }

                            ix2 += outerStride2;
                        }
                    }
                    else
                    {
                        long n = @out.Shape.Dimensions.LongLength - 3;
                        long[] limits = @out.Shape.Dimensions.Where(x => n-- > 0).Select(x => x.Length).ToArray();
                        long[] counters = new long[limits.LongLength];

                        long totalOps = limits.LongLength == 0 ? 1 : limits.Aggregate<long>((a, b) => a * b);

                        //This chunck of variables are used to prevent repeated calculations of offsets
                        long dimIndex0 = 0 + limits.LongLength;
                        long dimIndex1 = 1 + limits.LongLength;
                        long dimIndex2 = 2 + limits.LongLength;

                        long opsOuter = @out.Shape.Dimensions[0 + limits.LongLength].Length;
                        long opsInner = @out.Shape.Dimensions[1 + limits.LongLength].Length;
                        long opsInnerInner = @out.Shape.Dimensions[2 + limits.LongLength].Length;

                        long outerStride3 = @out.Shape.Dimensions[dimIndex0].Stride;
                        long innerStride3 = @out.Shape.Dimensions[dimIndex1].Stride;
                        long innerInnerStride3 = @out.Shape.Dimensions[dimIndex2].Stride;
                        outerStride3 -= innerStride3 * @out.Shape.Dimensions[dimIndex1].Length;
                        innerStride3 -= innerInnerStride3 * @out.Shape.Dimensions[dimIndex2].Length;

                        for (long outer = 0; outer < totalOps; outer++)
                        {
                            //Get the array offset for the first element in the outer dimension
                            long ix3 = @out.Shape[counters];

                            for (long i = 0; i < opsOuter; i++)
                            {
                                for (long j = 0; j < opsInner; j++)
                                {
                                    for (long k = 0; k < opsInnerInner; k++)
                                    {
                                        d2[ix3] = (System.UInt32)(Math.Tan(scalar));
                                        ix3 += innerInnerStride3;
                                    }

                                    ix3 += innerStride3;
                                }

                                ix3 += outerStride3;
                            }

                            if (counters.LongLength > 0)
                            {
                                //Basically a ripple carry adder
                                long p = counters.LongLength - 1;
                                while (++counters[p] == limits[p] && p > 0)
                                {
                                    counters[p] = 0;
                                    p--;
                                }
                            }
                        }
                    }
                }
            }
        }
        /// <summary>
        /// Unsafe implementation of applying a unary operation
        /// </summary>
        /// <typeparam name="C">The type of operation to perform</typeparam>
        /// <param name="op">The operation instance</param>
        /// <param name="in1">The input argument</param>
        /// <param name="out">The output target</param>
        internal static void UFunc_Op_Inner_Unary_Flush_Int64_TypedImpl<C>(NumCIL.Int64.Tan op, NdArray<System.Int64> in1, NdArray<System.Int64> @out)
            where C : IUnaryOp<System.Int64>
        {
            unsafe
            {
                using (var f1 = new Pinner(in1.DataAccessor))
                using (var f2 = new Pinner(@out.DataAccessor))
                {
                    var d1 = (System.Int64*)f1.ptr;
                    var d2 = (System.Int64*)f2.ptr;

                    if (@out.Shape.Dimensions.Length == 1)
                    {
                        long totalOps = @out.Shape.Dimensions[0].Length;

                        long ix1 = in1.Shape.Offset;
                        long ix2 = @out.Shape.Offset;

                        long stride1 = in1.Shape.Dimensions[0].Stride;
                        long stride2 = @out.Shape.Dimensions[0].Stride;


                        if (stride1 == stride2 && ix1 == ix2)
                        {
                            //Best case, all are equal, just keep a single counter
                            for (long i = 0; i < totalOps; i++)
                            {
                                d2[ix1] = (System.Int64)(Math.Tan(d1[ix1]));
                                ix1 += stride1;
                            }
                        }
                        else
                        {
                            for (long i = 0; i < totalOps; i++)
                            {
                                d2[ix2] = (System.Int64)(Math.Tan(d1[ix1]));
                                ix1 += stride1;
                                ix2 += stride2;
                            }
                        }
                    }
                    else if (@out.Shape.Dimensions.Length == 2)
                    {
                        long opsOuter = @out.Shape.Dimensions[0].Length;
                        long opsInner = @out.Shape.Dimensions[1].Length;

                        long ix1 = in1.Shape.Offset;
                        long ix2 = @out.Shape.Offset;

                        long outerStride1 = in1.Shape.Dimensions[0].Stride;
                        long outerStride2 = @out.Shape.Dimensions[0].Stride;

                        long innerStride1 = in1.Shape.Dimensions[1].Stride;
                        long innerStride2 = @out.Shape.Dimensions[1].Stride;

                        outerStride1 -= innerStride1 * in1.Shape.Dimensions[1].Length;
                        outerStride2 -= innerStride2 * @out.Shape.Dimensions[1].Length;

                        for (long i = 0; i < opsOuter; i++)
                        {
                            for (long j = 0; j < opsInner; j++)
                            {
                                d2[ix2] = (System.Int64)(Math.Tan(d1[ix1]));
                                ix1 += innerStride1;
                                ix2 += innerStride2;
                            }

                            ix1 += outerStride1;
                            ix2 += outerStride2;
                        }
                    }
                    else
                    {
                        long n = in1.Shape.Dimensions.LongLength - 3;
                        long[] limits = in1.Shape.Dimensions.Where(x => n-- > 0).Select(x => x.Length).ToArray();
                        long[] counters = new long[limits.LongLength];

                        long totalOps = limits.LongLength == 0 ? 1 : limits.Aggregate<long>((a, b) => a * b);

                        //This chunck of variables are used to prevent repeated calculations of offsets
                        long dimIndex0 = 0 + limits.LongLength;
                        long dimIndex1 = 1 + limits.LongLength;
                        long dimIndex2 = 2 + limits.LongLength;

                        long opsOuter = @out.Shape.Dimensions[0 + limits.LongLength].Length;
                        long opsInner = @out.Shape.Dimensions[1 + limits.LongLength].Length;
                        long opsInnerInner = @out.Shape.Dimensions[2 + limits.LongLength].Length;

                        long outerStride1 = in1.Shape.Dimensions[dimIndex0].Stride;
                        long outerStride3 = @out.Shape.Dimensions[dimIndex0].Stride;

                        long innerStride1 = in1.Shape.Dimensions[dimIndex1].Stride;
                        long innerStride3 = @out.Shape.Dimensions[dimIndex1].Stride;

                        long innerInnerStride1 = in1.Shape.Dimensions[dimIndex2].Stride;
                        long innerInnerStride3 = @out.Shape.Dimensions[dimIndex2].Stride;

                        outerStride1 -= innerStride1 * in1.Shape.Dimensions[dimIndex1].Length;
                        outerStride3 -= innerStride3 * @out.Shape.Dimensions[dimIndex1].Length;

                        innerStride1 -= innerInnerStride1 * in1.Shape.Dimensions[dimIndex2].Length;
                        innerStride3 -= innerInnerStride3 * @out.Shape.Dimensions[dimIndex2].Length;

                        for (long outer = 0; outer < totalOps; outer++)
                        {
                            //Get the array offset for the first element in the outer dimension
                            long ix1 = in1.Shape[counters];
                            long ix3 = @out.Shape[counters];


                            for (long i = 0; i < opsOuter; i++)
                            {
                                for (long j = 0; j < opsInner; j++)
                                {
                                    for (long k = 0; k < opsInnerInner; k++)
                                    {
                                        d2[ix3] = (System.Int64)(Math.Tan(d1[ix1]));
                                        ix1 += innerInnerStride1;
                                        ix3 += innerInnerStride3;
                                    }

                                    ix1 += innerStride1;
                                    ix3 += innerStride3;
                                }

                                ix1 += outerStride1;
                                ix3 += outerStride3;
                            }

                            if (counters.LongLength > 0)
                            {
                                //Basically a ripple carry adder
                                long p = counters.LongLength - 1;
                                while (++counters[p] == limits[p] && p > 0)
                                {
                                    counters[p] = 0;
                                    p--;
                                }
                            }
                        }
                    }
                }
            }
        }

        /// <summary>
        /// Unsafe implementation of applying a unary operation
        /// </summary>
        /// <typeparam name="C">The type of operation to perform</typeparam>
        /// <param name="op">The operation instance</param>
        /// <param name="scalar">The input scalar argument</param>
        /// <param name="out">The output target</param>
        internal static void UFunc_Op_Inner_Unary_Scalar_Flush_Int64_TypedImpl<C>(NumCIL.Int64.Tan op, System.Int64 scalar, NdArray<System.Int64> @out)
            where C : IUnaryOp<System.Int64>
        {
            unsafe
            {
                using (var f2 = new Pinner(@out.DataAccessor))
                {
                    var d2 = (System.Int64*)f2.ptr;

                    if (@out.Shape.Dimensions.Length == 1)
                    {
                        long totalOps = @out.Shape.Dimensions[0].Length;
                        long ix2 = @out.Shape.Offset;
                        long stride2 = @out.Shape.Dimensions[0].Stride;

                        for (long i = 0; i < totalOps; i++)
                        {
                            d2[ix2] = (System.Int64)(Math.Tan(scalar));
                            ix2 += stride2;
                        }
                    }
                    else if (@out.Shape.Dimensions.Length == 2)
                    {
                        long opsOuter = @out.Shape.Dimensions[0].Length;
                        long opsInner = @out.Shape.Dimensions[1].Length;

                        long ix2 = @out.Shape.Offset;
                        long outerStride2 = @out.Shape.Dimensions[0].Stride;
                        long innerStride2 = @out.Shape.Dimensions[1].Stride;
                        outerStride2 -= innerStride2 * @out.Shape.Dimensions[1].Length;

                        for (long i = 0; i < opsOuter; i++)
                        {
                            for (long j = 0; j < opsInner; j++)
                            {
                                d2[ix2] = (System.Int64)(Math.Tan(scalar));
                                ix2 += innerStride2;
                            }

                            ix2 += outerStride2;
                        }
                    }
                    else
                    {
                        long n = @out.Shape.Dimensions.LongLength - 3;
                        long[] limits = @out.Shape.Dimensions.Where(x => n-- > 0).Select(x => x.Length).ToArray();
                        long[] counters = new long[limits.LongLength];

                        long totalOps = limits.LongLength == 0 ? 1 : limits.Aggregate<long>((a, b) => a * b);

                        //This chunck of variables are used to prevent repeated calculations of offsets
                        long dimIndex0 = 0 + limits.LongLength;
                        long dimIndex1 = 1 + limits.LongLength;
                        long dimIndex2 = 2 + limits.LongLength;

                        long opsOuter = @out.Shape.Dimensions[0 + limits.LongLength].Length;
                        long opsInner = @out.Shape.Dimensions[1 + limits.LongLength].Length;
                        long opsInnerInner = @out.Shape.Dimensions[2 + limits.LongLength].Length;

                        long outerStride3 = @out.Shape.Dimensions[dimIndex0].Stride;
                        long innerStride3 = @out.Shape.Dimensions[dimIndex1].Stride;
                        long innerInnerStride3 = @out.Shape.Dimensions[dimIndex2].Stride;
                        outerStride3 -= innerStride3 * @out.Shape.Dimensions[dimIndex1].Length;
                        innerStride3 -= innerInnerStride3 * @out.Shape.Dimensions[dimIndex2].Length;

                        for (long outer = 0; outer < totalOps; outer++)
                        {
                            //Get the array offset for the first element in the outer dimension
                            long ix3 = @out.Shape[counters];

                            for (long i = 0; i < opsOuter; i++)
                            {
                                for (long j = 0; j < opsInner; j++)
                                {
                                    for (long k = 0; k < opsInnerInner; k++)
                                    {
                                        d2[ix3] = (System.Int64)(Math.Tan(scalar));
                                        ix3 += innerInnerStride3;
                                    }

                                    ix3 += innerStride3;
                                }

                                ix3 += outerStride3;
                            }

                            if (counters.LongLength > 0)
                            {
                                //Basically a ripple carry adder
                                long p = counters.LongLength - 1;
                                while (++counters[p] == limits[p] && p > 0)
                                {
                                    counters[p] = 0;
                                    p--;
                                }
                            }
                        }
                    }
                }
            }
        }
        /// <summary>
        /// Unsafe implementation of applying a unary operation
        /// </summary>
        /// <typeparam name="C">The type of operation to perform</typeparam>
        /// <param name="op">The operation instance</param>
        /// <param name="in1">The input argument</param>
        /// <param name="out">The output target</param>
        internal static void UFunc_Op_Inner_Unary_Flush_UInt64_TypedImpl<C>(NumCIL.UInt64.Tan op, NdArray<System.UInt64> in1, NdArray<System.UInt64> @out)
            where C : IUnaryOp<System.UInt64>
        {
            unsafe
            {
                using (var f1 = new Pinner(in1.DataAccessor))
                using (var f2 = new Pinner(@out.DataAccessor))
                {
                    var d1 = (System.UInt64*)f1.ptr;
                    var d2 = (System.UInt64*)f2.ptr;

                    if (@out.Shape.Dimensions.Length == 1)
                    {
                        long totalOps = @out.Shape.Dimensions[0].Length;

                        long ix1 = in1.Shape.Offset;
                        long ix2 = @out.Shape.Offset;

                        long stride1 = in1.Shape.Dimensions[0].Stride;
                        long stride2 = @out.Shape.Dimensions[0].Stride;


                        if (stride1 == stride2 && ix1 == ix2)
                        {
                            //Best case, all are equal, just keep a single counter
                            for (long i = 0; i < totalOps; i++)
                            {
                                d2[ix1] = (System.UInt64)(Math.Tan(d1[ix1]));
                                ix1 += stride1;
                            }
                        }
                        else
                        {
                            for (long i = 0; i < totalOps; i++)
                            {
                                d2[ix2] = (System.UInt64)(Math.Tan(d1[ix1]));
                                ix1 += stride1;
                                ix2 += stride2;
                            }
                        }
                    }
                    else if (@out.Shape.Dimensions.Length == 2)
                    {
                        long opsOuter = @out.Shape.Dimensions[0].Length;
                        long opsInner = @out.Shape.Dimensions[1].Length;

                        long ix1 = in1.Shape.Offset;
                        long ix2 = @out.Shape.Offset;

                        long outerStride1 = in1.Shape.Dimensions[0].Stride;
                        long outerStride2 = @out.Shape.Dimensions[0].Stride;

                        long innerStride1 = in1.Shape.Dimensions[1].Stride;
                        long innerStride2 = @out.Shape.Dimensions[1].Stride;

                        outerStride1 -= innerStride1 * in1.Shape.Dimensions[1].Length;
                        outerStride2 -= innerStride2 * @out.Shape.Dimensions[1].Length;

                        for (long i = 0; i < opsOuter; i++)
                        {
                            for (long j = 0; j < opsInner; j++)
                            {
                                d2[ix2] = (System.UInt64)(Math.Tan(d1[ix1]));
                                ix1 += innerStride1;
                                ix2 += innerStride2;
                            }

                            ix1 += outerStride1;
                            ix2 += outerStride2;
                        }
                    }
                    else
                    {
                        long n = in1.Shape.Dimensions.LongLength - 3;
                        long[] limits = in1.Shape.Dimensions.Where(x => n-- > 0).Select(x => x.Length).ToArray();
                        long[] counters = new long[limits.LongLength];

                        long totalOps = limits.LongLength == 0 ? 1 : limits.Aggregate<long>((a, b) => a * b);

                        //This chunck of variables are used to prevent repeated calculations of offsets
                        long dimIndex0 = 0 + limits.LongLength;
                        long dimIndex1 = 1 + limits.LongLength;
                        long dimIndex2 = 2 + limits.LongLength;

                        long opsOuter = @out.Shape.Dimensions[0 + limits.LongLength].Length;
                        long opsInner = @out.Shape.Dimensions[1 + limits.LongLength].Length;
                        long opsInnerInner = @out.Shape.Dimensions[2 + limits.LongLength].Length;

                        long outerStride1 = in1.Shape.Dimensions[dimIndex0].Stride;
                        long outerStride3 = @out.Shape.Dimensions[dimIndex0].Stride;

                        long innerStride1 = in1.Shape.Dimensions[dimIndex1].Stride;
                        long innerStride3 = @out.Shape.Dimensions[dimIndex1].Stride;

                        long innerInnerStride1 = in1.Shape.Dimensions[dimIndex2].Stride;
                        long innerInnerStride3 = @out.Shape.Dimensions[dimIndex2].Stride;

                        outerStride1 -= innerStride1 * in1.Shape.Dimensions[dimIndex1].Length;
                        outerStride3 -= innerStride3 * @out.Shape.Dimensions[dimIndex1].Length;

                        innerStride1 -= innerInnerStride1 * in1.Shape.Dimensions[dimIndex2].Length;
                        innerStride3 -= innerInnerStride3 * @out.Shape.Dimensions[dimIndex2].Length;

                        for (long outer = 0; outer < totalOps; outer++)
                        {
                            //Get the array offset for the first element in the outer dimension
                            long ix1 = in1.Shape[counters];
                            long ix3 = @out.Shape[counters];


                            for (long i = 0; i < opsOuter; i++)
                            {
                                for (long j = 0; j < opsInner; j++)
                                {
                                    for (long k = 0; k < opsInnerInner; k++)
                                    {
                                        d2[ix3] = (System.UInt64)(Math.Tan(d1[ix1]));
                                        ix1 += innerInnerStride1;
                                        ix3 += innerInnerStride3;
                                    }

                                    ix1 += innerStride1;
                                    ix3 += innerStride3;
                                }

                                ix1 += outerStride1;
                                ix3 += outerStride3;
                            }

                            if (counters.LongLength > 0)
                            {
                                //Basically a ripple carry adder
                                long p = counters.LongLength - 1;
                                while (++counters[p] == limits[p] && p > 0)
                                {
                                    counters[p] = 0;
                                    p--;
                                }
                            }
                        }
                    }
                }
            }
        }

        /// <summary>
        /// Unsafe implementation of applying a unary operation
        /// </summary>
        /// <typeparam name="C">The type of operation to perform</typeparam>
        /// <param name="op">The operation instance</param>
        /// <param name="scalar">The input scalar argument</param>
        /// <param name="out">The output target</param>
        internal static void UFunc_Op_Inner_Unary_Scalar_Flush_UInt64_TypedImpl<C>(NumCIL.UInt64.Tan op, System.UInt64 scalar, NdArray<System.UInt64> @out)
            where C : IUnaryOp<System.UInt64>
        {
            unsafe
            {
                using (var f2 = new Pinner(@out.DataAccessor))
                {
                    var d2 = (System.UInt64*)f2.ptr;

                    if (@out.Shape.Dimensions.Length == 1)
                    {
                        long totalOps = @out.Shape.Dimensions[0].Length;
                        long ix2 = @out.Shape.Offset;
                        long stride2 = @out.Shape.Dimensions[0].Stride;

                        for (long i = 0; i < totalOps; i++)
                        {
                            d2[ix2] = (System.UInt64)(Math.Tan(scalar));
                            ix2 += stride2;
                        }
                    }
                    else if (@out.Shape.Dimensions.Length == 2)
                    {
                        long opsOuter = @out.Shape.Dimensions[0].Length;
                        long opsInner = @out.Shape.Dimensions[1].Length;

                        long ix2 = @out.Shape.Offset;
                        long outerStride2 = @out.Shape.Dimensions[0].Stride;
                        long innerStride2 = @out.Shape.Dimensions[1].Stride;
                        outerStride2 -= innerStride2 * @out.Shape.Dimensions[1].Length;

                        for (long i = 0; i < opsOuter; i++)
                        {
                            for (long j = 0; j < opsInner; j++)
                            {
                                d2[ix2] = (System.UInt64)(Math.Tan(scalar));
                                ix2 += innerStride2;
                            }

                            ix2 += outerStride2;
                        }
                    }
                    else
                    {
                        long n = @out.Shape.Dimensions.LongLength - 3;
                        long[] limits = @out.Shape.Dimensions.Where(x => n-- > 0).Select(x => x.Length).ToArray();
                        long[] counters = new long[limits.LongLength];

                        long totalOps = limits.LongLength == 0 ? 1 : limits.Aggregate<long>((a, b) => a * b);

                        //This chunck of variables are used to prevent repeated calculations of offsets
                        long dimIndex0 = 0 + limits.LongLength;
                        long dimIndex1 = 1 + limits.LongLength;
                        long dimIndex2 = 2 + limits.LongLength;

                        long opsOuter = @out.Shape.Dimensions[0 + limits.LongLength].Length;
                        long opsInner = @out.Shape.Dimensions[1 + limits.LongLength].Length;
                        long opsInnerInner = @out.Shape.Dimensions[2 + limits.LongLength].Length;

                        long outerStride3 = @out.Shape.Dimensions[dimIndex0].Stride;
                        long innerStride3 = @out.Shape.Dimensions[dimIndex1].Stride;
                        long innerInnerStride3 = @out.Shape.Dimensions[dimIndex2].Stride;
                        outerStride3 -= innerStride3 * @out.Shape.Dimensions[dimIndex1].Length;
                        innerStride3 -= innerInnerStride3 * @out.Shape.Dimensions[dimIndex2].Length;

                        for (long outer = 0; outer < totalOps; outer++)
                        {
                            //Get the array offset for the first element in the outer dimension
                            long ix3 = @out.Shape[counters];

                            for (long i = 0; i < opsOuter; i++)
                            {
                                for (long j = 0; j < opsInner; j++)
                                {
                                    for (long k = 0; k < opsInnerInner; k++)
                                    {
                                        d2[ix3] = (System.UInt64)(Math.Tan(scalar));
                                        ix3 += innerInnerStride3;
                                    }

                                    ix3 += innerStride3;
                                }

                                ix3 += outerStride3;
                            }

                            if (counters.LongLength > 0)
                            {
                                //Basically a ripple carry adder
                                long p = counters.LongLength - 1;
                                while (++counters[p] == limits[p] && p > 0)
                                {
                                    counters[p] = 0;
                                    p--;
                                }
                            }
                        }
                    }
                }
            }
        }
        /// <summary>
        /// Unsafe implementation of applying a unary operation
        /// </summary>
        /// <typeparam name="C">The type of operation to perform</typeparam>
        /// <param name="op">The operation instance</param>
        /// <param name="in1">The input argument</param>
        /// <param name="out">The output target</param>
        internal static void UFunc_Op_Inner_Unary_Flush_Single_TypedImpl<C>(NumCIL.Float.Tan op, NdArray<System.Single> in1, NdArray<System.Single> @out)
            where C : IUnaryOp<System.Single>
        {
            unsafe
            {
                using (var f1 = new Pinner(in1.DataAccessor))
                using (var f2 = new Pinner(@out.DataAccessor))
                {
                    var d1 = (System.Single*)f1.ptr;
                    var d2 = (System.Single*)f2.ptr;

                    if (@out.Shape.Dimensions.Length == 1)
                    {
                        long totalOps = @out.Shape.Dimensions[0].Length;

                        long ix1 = in1.Shape.Offset;
                        long ix2 = @out.Shape.Offset;

                        long stride1 = in1.Shape.Dimensions[0].Stride;
                        long stride2 = @out.Shape.Dimensions[0].Stride;


                        if (stride1 == stride2 && ix1 == ix2)
                        {
                            //Best case, all are equal, just keep a single counter
                            for (long i = 0; i < totalOps; i++)
                            {
                                d2[ix1] = (System.Single)(Math.Tan(d1[ix1]));
                                ix1 += stride1;
                            }
                        }
                        else
                        {
                            for (long i = 0; i < totalOps; i++)
                            {
                                d2[ix2] = (System.Single)(Math.Tan(d1[ix1]));
                                ix1 += stride1;
                                ix2 += stride2;
                            }
                        }
                    }
                    else if (@out.Shape.Dimensions.Length == 2)
                    {
                        long opsOuter = @out.Shape.Dimensions[0].Length;
                        long opsInner = @out.Shape.Dimensions[1].Length;

                        long ix1 = in1.Shape.Offset;
                        long ix2 = @out.Shape.Offset;

                        long outerStride1 = in1.Shape.Dimensions[0].Stride;
                        long outerStride2 = @out.Shape.Dimensions[0].Stride;

                        long innerStride1 = in1.Shape.Dimensions[1].Stride;
                        long innerStride2 = @out.Shape.Dimensions[1].Stride;

                        outerStride1 -= innerStride1 * in1.Shape.Dimensions[1].Length;
                        outerStride2 -= innerStride2 * @out.Shape.Dimensions[1].Length;

                        for (long i = 0; i < opsOuter; i++)
                        {
                            for (long j = 0; j < opsInner; j++)
                            {
                                d2[ix2] = (System.Single)(Math.Tan(d1[ix1]));
                                ix1 += innerStride1;
                                ix2 += innerStride2;
                            }

                            ix1 += outerStride1;
                            ix2 += outerStride2;
                        }
                    }
                    else
                    {
                        long n = in1.Shape.Dimensions.LongLength - 3;
                        long[] limits = in1.Shape.Dimensions.Where(x => n-- > 0).Select(x => x.Length).ToArray();
                        long[] counters = new long[limits.LongLength];

                        long totalOps = limits.LongLength == 0 ? 1 : limits.Aggregate<long>((a, b) => a * b);

                        //This chunck of variables are used to prevent repeated calculations of offsets
                        long dimIndex0 = 0 + limits.LongLength;
                        long dimIndex1 = 1 + limits.LongLength;
                        long dimIndex2 = 2 + limits.LongLength;

                        long opsOuter = @out.Shape.Dimensions[0 + limits.LongLength].Length;
                        long opsInner = @out.Shape.Dimensions[1 + limits.LongLength].Length;
                        long opsInnerInner = @out.Shape.Dimensions[2 + limits.LongLength].Length;

                        long outerStride1 = in1.Shape.Dimensions[dimIndex0].Stride;
                        long outerStride3 = @out.Shape.Dimensions[dimIndex0].Stride;

                        long innerStride1 = in1.Shape.Dimensions[dimIndex1].Stride;
                        long innerStride3 = @out.Shape.Dimensions[dimIndex1].Stride;

                        long innerInnerStride1 = in1.Shape.Dimensions[dimIndex2].Stride;
                        long innerInnerStride3 = @out.Shape.Dimensions[dimIndex2].Stride;

                        outerStride1 -= innerStride1 * in1.Shape.Dimensions[dimIndex1].Length;
                        outerStride3 -= innerStride3 * @out.Shape.Dimensions[dimIndex1].Length;

                        innerStride1 -= innerInnerStride1 * in1.Shape.Dimensions[dimIndex2].Length;
                        innerStride3 -= innerInnerStride3 * @out.Shape.Dimensions[dimIndex2].Length;

                        for (long outer = 0; outer < totalOps; outer++)
                        {
                            //Get the array offset for the first element in the outer dimension
                            long ix1 = in1.Shape[counters];
                            long ix3 = @out.Shape[counters];


                            for (long i = 0; i < opsOuter; i++)
                            {
                                for (long j = 0; j < opsInner; j++)
                                {
                                    for (long k = 0; k < opsInnerInner; k++)
                                    {
                                        d2[ix3] = (System.Single)(Math.Tan(d1[ix1]));
                                        ix1 += innerInnerStride1;
                                        ix3 += innerInnerStride3;
                                    }

                                    ix1 += innerStride1;
                                    ix3 += innerStride3;
                                }

                                ix1 += outerStride1;
                                ix3 += outerStride3;
                            }

                            if (counters.LongLength > 0)
                            {
                                //Basically a ripple carry adder
                                long p = counters.LongLength - 1;
                                while (++counters[p] == limits[p] && p > 0)
                                {
                                    counters[p] = 0;
                                    p--;
                                }
                            }
                        }
                    }
                }
            }
        }

        /// <summary>
        /// Unsafe implementation of applying a unary operation
        /// </summary>
        /// <typeparam name="C">The type of operation to perform</typeparam>
        /// <param name="op">The operation instance</param>
        /// <param name="scalar">The input scalar argument</param>
        /// <param name="out">The output target</param>
        internal static void UFunc_Op_Inner_Unary_Scalar_Flush_Single_TypedImpl<C>(NumCIL.Float.Tan op, System.Single scalar, NdArray<System.Single> @out)
            where C : IUnaryOp<System.Single>
        {
            unsafe
            {
                using (var f2 = new Pinner(@out.DataAccessor))
                {
                    var d2 = (System.Single*)f2.ptr;

                    if (@out.Shape.Dimensions.Length == 1)
                    {
                        long totalOps = @out.Shape.Dimensions[0].Length;
                        long ix2 = @out.Shape.Offset;
                        long stride2 = @out.Shape.Dimensions[0].Stride;

                        for (long i = 0; i < totalOps; i++)
                        {
                            d2[ix2] = (System.Single)(Math.Tan(scalar));
                            ix2 += stride2;
                        }
                    }
                    else if (@out.Shape.Dimensions.Length == 2)
                    {
                        long opsOuter = @out.Shape.Dimensions[0].Length;
                        long opsInner = @out.Shape.Dimensions[1].Length;

                        long ix2 = @out.Shape.Offset;
                        long outerStride2 = @out.Shape.Dimensions[0].Stride;
                        long innerStride2 = @out.Shape.Dimensions[1].Stride;
                        outerStride2 -= innerStride2 * @out.Shape.Dimensions[1].Length;

                        for (long i = 0; i < opsOuter; i++)
                        {
                            for (long j = 0; j < opsInner; j++)
                            {
                                d2[ix2] = (System.Single)(Math.Tan(scalar));
                                ix2 += innerStride2;
                            }

                            ix2 += outerStride2;
                        }
                    }
                    else
                    {
                        long n = @out.Shape.Dimensions.LongLength - 3;
                        long[] limits = @out.Shape.Dimensions.Where(x => n-- > 0).Select(x => x.Length).ToArray();
                        long[] counters = new long[limits.LongLength];

                        long totalOps = limits.LongLength == 0 ? 1 : limits.Aggregate<long>((a, b) => a * b);

                        //This chunck of variables are used to prevent repeated calculations of offsets
                        long dimIndex0 = 0 + limits.LongLength;
                        long dimIndex1 = 1 + limits.LongLength;
                        long dimIndex2 = 2 + limits.LongLength;

                        long opsOuter = @out.Shape.Dimensions[0 + limits.LongLength].Length;
                        long opsInner = @out.Shape.Dimensions[1 + limits.LongLength].Length;
                        long opsInnerInner = @out.Shape.Dimensions[2 + limits.LongLength].Length;

                        long outerStride3 = @out.Shape.Dimensions[dimIndex0].Stride;
                        long innerStride3 = @out.Shape.Dimensions[dimIndex1].Stride;
                        long innerInnerStride3 = @out.Shape.Dimensions[dimIndex2].Stride;
                        outerStride3 -= innerStride3 * @out.Shape.Dimensions[dimIndex1].Length;
                        innerStride3 -= innerInnerStride3 * @out.Shape.Dimensions[dimIndex2].Length;

                        for (long outer = 0; outer < totalOps; outer++)
                        {
                            //Get the array offset for the first element in the outer dimension
                            long ix3 = @out.Shape[counters];

                            for (long i = 0; i < opsOuter; i++)
                            {
                                for (long j = 0; j < opsInner; j++)
                                {
                                    for (long k = 0; k < opsInnerInner; k++)
                                    {
                                        d2[ix3] = (System.Single)(Math.Tan(scalar));
                                        ix3 += innerInnerStride3;
                                    }

                                    ix3 += innerStride3;
                                }

                                ix3 += outerStride3;
                            }

                            if (counters.LongLength > 0)
                            {
                                //Basically a ripple carry adder
                                long p = counters.LongLength - 1;
                                while (++counters[p] == limits[p] && p > 0)
                                {
                                    counters[p] = 0;
                                    p--;
                                }
                            }
                        }
                    }
                }
            }
        }
        /// <summary>
        /// Unsafe implementation of applying a unary operation
        /// </summary>
        /// <typeparam name="C">The type of operation to perform</typeparam>
        /// <param name="op">The operation instance</param>
        /// <param name="in1">The input argument</param>
        /// <param name="out">The output target</param>
        internal static void UFunc_Op_Inner_Unary_Flush_Double_TypedImpl<C>(NumCIL.Double.Tan op, NdArray<System.Double> in1, NdArray<System.Double> @out)
            where C : IUnaryOp<System.Double>
        {
            unsafe
            {
                using (var f1 = new Pinner(in1.DataAccessor))
                using (var f2 = new Pinner(@out.DataAccessor))
                {
                    var d1 = (System.Double*)f1.ptr;
                    var d2 = (System.Double*)f2.ptr;

                    if (@out.Shape.Dimensions.Length == 1)
                    {
                        long totalOps = @out.Shape.Dimensions[0].Length;

                        long ix1 = in1.Shape.Offset;
                        long ix2 = @out.Shape.Offset;

                        long stride1 = in1.Shape.Dimensions[0].Stride;
                        long stride2 = @out.Shape.Dimensions[0].Stride;


                        if (stride1 == stride2 && ix1 == ix2)
                        {
                            //Best case, all are equal, just keep a single counter
                            for (long i = 0; i < totalOps; i++)
                            {
                                d2[ix1] = (System.Double)(Math.Tan(d1[ix1]));
                                ix1 += stride1;
                            }
                        }
                        else
                        {
                            for (long i = 0; i < totalOps; i++)
                            {
                                d2[ix2] = (System.Double)(Math.Tan(d1[ix1]));
                                ix1 += stride1;
                                ix2 += stride2;
                            }
                        }
                    }
                    else if (@out.Shape.Dimensions.Length == 2)
                    {
                        long opsOuter = @out.Shape.Dimensions[0].Length;
                        long opsInner = @out.Shape.Dimensions[1].Length;

                        long ix1 = in1.Shape.Offset;
                        long ix2 = @out.Shape.Offset;

                        long outerStride1 = in1.Shape.Dimensions[0].Stride;
                        long outerStride2 = @out.Shape.Dimensions[0].Stride;

                        long innerStride1 = in1.Shape.Dimensions[1].Stride;
                        long innerStride2 = @out.Shape.Dimensions[1].Stride;

                        outerStride1 -= innerStride1 * in1.Shape.Dimensions[1].Length;
                        outerStride2 -= innerStride2 * @out.Shape.Dimensions[1].Length;

                        for (long i = 0; i < opsOuter; i++)
                        {
                            for (long j = 0; j < opsInner; j++)
                            {
                                d2[ix2] = (System.Double)(Math.Tan(d1[ix1]));
                                ix1 += innerStride1;
                                ix2 += innerStride2;
                            }

                            ix1 += outerStride1;
                            ix2 += outerStride2;
                        }
                    }
                    else
                    {
                        long n = in1.Shape.Dimensions.LongLength - 3;
                        long[] limits = in1.Shape.Dimensions.Where(x => n-- > 0).Select(x => x.Length).ToArray();
                        long[] counters = new long[limits.LongLength];

                        long totalOps = limits.LongLength == 0 ? 1 : limits.Aggregate<long>((a, b) => a * b);

                        //This chunck of variables are used to prevent repeated calculations of offsets
                        long dimIndex0 = 0 + limits.LongLength;
                        long dimIndex1 = 1 + limits.LongLength;
                        long dimIndex2 = 2 + limits.LongLength;

                        long opsOuter = @out.Shape.Dimensions[0 + limits.LongLength].Length;
                        long opsInner = @out.Shape.Dimensions[1 + limits.LongLength].Length;
                        long opsInnerInner = @out.Shape.Dimensions[2 + limits.LongLength].Length;

                        long outerStride1 = in1.Shape.Dimensions[dimIndex0].Stride;
                        long outerStride3 = @out.Shape.Dimensions[dimIndex0].Stride;

                        long innerStride1 = in1.Shape.Dimensions[dimIndex1].Stride;
                        long innerStride3 = @out.Shape.Dimensions[dimIndex1].Stride;

                        long innerInnerStride1 = in1.Shape.Dimensions[dimIndex2].Stride;
                        long innerInnerStride3 = @out.Shape.Dimensions[dimIndex2].Stride;

                        outerStride1 -= innerStride1 * in1.Shape.Dimensions[dimIndex1].Length;
                        outerStride3 -= innerStride3 * @out.Shape.Dimensions[dimIndex1].Length;

                        innerStride1 -= innerInnerStride1 * in1.Shape.Dimensions[dimIndex2].Length;
                        innerStride3 -= innerInnerStride3 * @out.Shape.Dimensions[dimIndex2].Length;

                        for (long outer = 0; outer < totalOps; outer++)
                        {
                            //Get the array offset for the first element in the outer dimension
                            long ix1 = in1.Shape[counters];
                            long ix3 = @out.Shape[counters];


                            for (long i = 0; i < opsOuter; i++)
                            {
                                for (long j = 0; j < opsInner; j++)
                                {
                                    for (long k = 0; k < opsInnerInner; k++)
                                    {
                                        d2[ix3] = (System.Double)(Math.Tan(d1[ix1]));
                                        ix1 += innerInnerStride1;
                                        ix3 += innerInnerStride3;
                                    }

                                    ix1 += innerStride1;
                                    ix3 += innerStride3;
                                }

                                ix1 += outerStride1;
                                ix3 += outerStride3;
                            }

                            if (counters.LongLength > 0)
                            {
                                //Basically a ripple carry adder
                                long p = counters.LongLength - 1;
                                while (++counters[p] == limits[p] && p > 0)
                                {
                                    counters[p] = 0;
                                    p--;
                                }
                            }
                        }
                    }
                }
            }
        }

        /// <summary>
        /// Unsafe implementation of applying a unary operation
        /// </summary>
        /// <typeparam name="C">The type of operation to perform</typeparam>
        /// <param name="op">The operation instance</param>
        /// <param name="scalar">The input scalar argument</param>
        /// <param name="out">The output target</param>
        internal static void UFunc_Op_Inner_Unary_Scalar_Flush_Double_TypedImpl<C>(NumCIL.Double.Tan op, System.Double scalar, NdArray<System.Double> @out)
            where C : IUnaryOp<System.Double>
        {
            unsafe
            {
                using (var f2 = new Pinner(@out.DataAccessor))
                {
                    var d2 = (System.Double*)f2.ptr;

                    if (@out.Shape.Dimensions.Length == 1)
                    {
                        long totalOps = @out.Shape.Dimensions[0].Length;
                        long ix2 = @out.Shape.Offset;
                        long stride2 = @out.Shape.Dimensions[0].Stride;

                        for (long i = 0; i < totalOps; i++)
                        {
                            d2[ix2] = (System.Double)(Math.Tan(scalar));
                            ix2 += stride2;
                        }
                    }
                    else if (@out.Shape.Dimensions.Length == 2)
                    {
                        long opsOuter = @out.Shape.Dimensions[0].Length;
                        long opsInner = @out.Shape.Dimensions[1].Length;

                        long ix2 = @out.Shape.Offset;
                        long outerStride2 = @out.Shape.Dimensions[0].Stride;
                        long innerStride2 = @out.Shape.Dimensions[1].Stride;
                        outerStride2 -= innerStride2 * @out.Shape.Dimensions[1].Length;

                        for (long i = 0; i < opsOuter; i++)
                        {
                            for (long j = 0; j < opsInner; j++)
                            {
                                d2[ix2] = (System.Double)(Math.Tan(scalar));
                                ix2 += innerStride2;
                            }

                            ix2 += outerStride2;
                        }
                    }
                    else
                    {
                        long n = @out.Shape.Dimensions.LongLength - 3;
                        long[] limits = @out.Shape.Dimensions.Where(x => n-- > 0).Select(x => x.Length).ToArray();
                        long[] counters = new long[limits.LongLength];

                        long totalOps = limits.LongLength == 0 ? 1 : limits.Aggregate<long>((a, b) => a * b);

                        //This chunck of variables are used to prevent repeated calculations of offsets
                        long dimIndex0 = 0 + limits.LongLength;
                        long dimIndex1 = 1 + limits.LongLength;
                        long dimIndex2 = 2 + limits.LongLength;

                        long opsOuter = @out.Shape.Dimensions[0 + limits.LongLength].Length;
                        long opsInner = @out.Shape.Dimensions[1 + limits.LongLength].Length;
                        long opsInnerInner = @out.Shape.Dimensions[2 + limits.LongLength].Length;

                        long outerStride3 = @out.Shape.Dimensions[dimIndex0].Stride;
                        long innerStride3 = @out.Shape.Dimensions[dimIndex1].Stride;
                        long innerInnerStride3 = @out.Shape.Dimensions[dimIndex2].Stride;
                        outerStride3 -= innerStride3 * @out.Shape.Dimensions[dimIndex1].Length;
                        innerStride3 -= innerInnerStride3 * @out.Shape.Dimensions[dimIndex2].Length;

                        for (long outer = 0; outer < totalOps; outer++)
                        {
                            //Get the array offset for the first element in the outer dimension
                            long ix3 = @out.Shape[counters];

                            for (long i = 0; i < opsOuter; i++)
                            {
                                for (long j = 0; j < opsInner; j++)
                                {
                                    for (long k = 0; k < opsInnerInner; k++)
                                    {
                                        d2[ix3] = (System.Double)(Math.Tan(scalar));
                                        ix3 += innerInnerStride3;
                                    }

                                    ix3 += innerStride3;
                                }

                                ix3 += outerStride3;
                            }

                            if (counters.LongLength > 0)
                            {
                                //Basically a ripple carry adder
                                long p = counters.LongLength - 1;
                                while (++counters[p] == limits[p] && p > 0)
                                {
                                    counters[p] = 0;
                                    p--;
                                }
                            }
                        }
                    }
                }
            }
        }
        /// <summary>
        /// Unsafe implementation of applying a unary operation
        /// </summary>
        /// <typeparam name="C">The type of operation to perform</typeparam>
        /// <param name="op">The operation instance</param>
        /// <param name="in1">The input argument</param>
        /// <param name="out">The output target</param>
        internal static void UFunc_Op_Inner_Unary_Flush_SByte_TypedImpl<C>(NumCIL.Int8.Asin op, NdArray<System.SByte> in1, NdArray<System.SByte> @out)
            where C : IUnaryOp<System.SByte>
        {
            unsafe
            {
                using (var f1 = new Pinner(in1.DataAccessor))
                using (var f2 = new Pinner(@out.DataAccessor))
                {
                    var d1 = (System.SByte*)f1.ptr;
                    var d2 = (System.SByte*)f2.ptr;

                    if (@out.Shape.Dimensions.Length == 1)
                    {
                        long totalOps = @out.Shape.Dimensions[0].Length;

                        long ix1 = in1.Shape.Offset;
                        long ix2 = @out.Shape.Offset;

                        long stride1 = in1.Shape.Dimensions[0].Stride;
                        long stride2 = @out.Shape.Dimensions[0].Stride;


                        if (stride1 == stride2 && ix1 == ix2)
                        {
                            //Best case, all are equal, just keep a single counter
                            for (long i = 0; i < totalOps; i++)
                            {
                                d2[ix1] = (System.SByte)(Math.Asin(d1[ix1]));
                                ix1 += stride1;
                            }
                        }
                        else
                        {
                            for (long i = 0; i < totalOps; i++)
                            {
                                d2[ix2] = (System.SByte)(Math.Asin(d1[ix1]));
                                ix1 += stride1;
                                ix2 += stride2;
                            }
                        }
                    }
                    else if (@out.Shape.Dimensions.Length == 2)
                    {
                        long opsOuter = @out.Shape.Dimensions[0].Length;
                        long opsInner = @out.Shape.Dimensions[1].Length;

                        long ix1 = in1.Shape.Offset;
                        long ix2 = @out.Shape.Offset;

                        long outerStride1 = in1.Shape.Dimensions[0].Stride;
                        long outerStride2 = @out.Shape.Dimensions[0].Stride;

                        long innerStride1 = in1.Shape.Dimensions[1].Stride;
                        long innerStride2 = @out.Shape.Dimensions[1].Stride;

                        outerStride1 -= innerStride1 * in1.Shape.Dimensions[1].Length;
                        outerStride2 -= innerStride2 * @out.Shape.Dimensions[1].Length;

                        for (long i = 0; i < opsOuter; i++)
                        {
                            for (long j = 0; j < opsInner; j++)
                            {
                                d2[ix2] = (System.SByte)(Math.Asin(d1[ix1]));
                                ix1 += innerStride1;
                                ix2 += innerStride2;
                            }

                            ix1 += outerStride1;
                            ix2 += outerStride2;
                        }
                    }
                    else
                    {
                        long n = in1.Shape.Dimensions.LongLength - 3;
                        long[] limits = in1.Shape.Dimensions.Where(x => n-- > 0).Select(x => x.Length).ToArray();
                        long[] counters = new long[limits.LongLength];

                        long totalOps = limits.LongLength == 0 ? 1 : limits.Aggregate<long>((a, b) => a * b);

                        //This chunck of variables are used to prevent repeated calculations of offsets
                        long dimIndex0 = 0 + limits.LongLength;
                        long dimIndex1 = 1 + limits.LongLength;
                        long dimIndex2 = 2 + limits.LongLength;

                        long opsOuter = @out.Shape.Dimensions[0 + limits.LongLength].Length;
                        long opsInner = @out.Shape.Dimensions[1 + limits.LongLength].Length;
                        long opsInnerInner = @out.Shape.Dimensions[2 + limits.LongLength].Length;

                        long outerStride1 = in1.Shape.Dimensions[dimIndex0].Stride;
                        long outerStride3 = @out.Shape.Dimensions[dimIndex0].Stride;

                        long innerStride1 = in1.Shape.Dimensions[dimIndex1].Stride;
                        long innerStride3 = @out.Shape.Dimensions[dimIndex1].Stride;

                        long innerInnerStride1 = in1.Shape.Dimensions[dimIndex2].Stride;
                        long innerInnerStride3 = @out.Shape.Dimensions[dimIndex2].Stride;

                        outerStride1 -= innerStride1 * in1.Shape.Dimensions[dimIndex1].Length;
                        outerStride3 -= innerStride3 * @out.Shape.Dimensions[dimIndex1].Length;

                        innerStride1 -= innerInnerStride1 * in1.Shape.Dimensions[dimIndex2].Length;
                        innerStride3 -= innerInnerStride3 * @out.Shape.Dimensions[dimIndex2].Length;

                        for (long outer = 0; outer < totalOps; outer++)
                        {
                            //Get the array offset for the first element in the outer dimension
                            long ix1 = in1.Shape[counters];
                            long ix3 = @out.Shape[counters];


                            for (long i = 0; i < opsOuter; i++)
                            {
                                for (long j = 0; j < opsInner; j++)
                                {
                                    for (long k = 0; k < opsInnerInner; k++)
                                    {
                                        d2[ix3] = (System.SByte)(Math.Asin(d1[ix1]));
                                        ix1 += innerInnerStride1;
                                        ix3 += innerInnerStride3;
                                    }

                                    ix1 += innerStride1;
                                    ix3 += innerStride3;
                                }

                                ix1 += outerStride1;
                                ix3 += outerStride3;
                            }

                            if (counters.LongLength > 0)
                            {
                                //Basically a ripple carry adder
                                long p = counters.LongLength - 1;
                                while (++counters[p] == limits[p] && p > 0)
                                {
                                    counters[p] = 0;
                                    p--;
                                }
                            }
                        }
                    }
                }
            }
        }

        /// <summary>
        /// Unsafe implementation of applying a unary operation
        /// </summary>
        /// <typeparam name="C">The type of operation to perform</typeparam>
        /// <param name="op">The operation instance</param>
        /// <param name="scalar">The input scalar argument</param>
        /// <param name="out">The output target</param>
        internal static void UFunc_Op_Inner_Unary_Scalar_Flush_SByte_TypedImpl<C>(NumCIL.Int8.Asin op, System.SByte scalar, NdArray<System.SByte> @out)
            where C : IUnaryOp<System.SByte>
        {
            unsafe
            {
                using (var f2 = new Pinner(@out.DataAccessor))
                {
                    var d2 = (System.SByte*)f2.ptr;

                    if (@out.Shape.Dimensions.Length == 1)
                    {
                        long totalOps = @out.Shape.Dimensions[0].Length;
                        long ix2 = @out.Shape.Offset;
                        long stride2 = @out.Shape.Dimensions[0].Stride;

                        for (long i = 0; i < totalOps; i++)
                        {
                            d2[ix2] = (System.SByte)(Math.Asin(scalar));
                            ix2 += stride2;
                        }
                    }
                    else if (@out.Shape.Dimensions.Length == 2)
                    {
                        long opsOuter = @out.Shape.Dimensions[0].Length;
                        long opsInner = @out.Shape.Dimensions[1].Length;

                        long ix2 = @out.Shape.Offset;
                        long outerStride2 = @out.Shape.Dimensions[0].Stride;
                        long innerStride2 = @out.Shape.Dimensions[1].Stride;
                        outerStride2 -= innerStride2 * @out.Shape.Dimensions[1].Length;

                        for (long i = 0; i < opsOuter; i++)
                        {
                            for (long j = 0; j < opsInner; j++)
                            {
                                d2[ix2] = (System.SByte)(Math.Asin(scalar));
                                ix2 += innerStride2;
                            }

                            ix2 += outerStride2;
                        }
                    }
                    else
                    {
                        long n = @out.Shape.Dimensions.LongLength - 3;
                        long[] limits = @out.Shape.Dimensions.Where(x => n-- > 0).Select(x => x.Length).ToArray();
                        long[] counters = new long[limits.LongLength];

                        long totalOps = limits.LongLength == 0 ? 1 : limits.Aggregate<long>((a, b) => a * b);

                        //This chunck of variables are used to prevent repeated calculations of offsets
                        long dimIndex0 = 0 + limits.LongLength;
                        long dimIndex1 = 1 + limits.LongLength;
                        long dimIndex2 = 2 + limits.LongLength;

                        long opsOuter = @out.Shape.Dimensions[0 + limits.LongLength].Length;
                        long opsInner = @out.Shape.Dimensions[1 + limits.LongLength].Length;
                        long opsInnerInner = @out.Shape.Dimensions[2 + limits.LongLength].Length;

                        long outerStride3 = @out.Shape.Dimensions[dimIndex0].Stride;
                        long innerStride3 = @out.Shape.Dimensions[dimIndex1].Stride;
                        long innerInnerStride3 = @out.Shape.Dimensions[dimIndex2].Stride;
                        outerStride3 -= innerStride3 * @out.Shape.Dimensions[dimIndex1].Length;
                        innerStride3 -= innerInnerStride3 * @out.Shape.Dimensions[dimIndex2].Length;

                        for (long outer = 0; outer < totalOps; outer++)
                        {
                            //Get the array offset for the first element in the outer dimension
                            long ix3 = @out.Shape[counters];

                            for (long i = 0; i < opsOuter; i++)
                            {
                                for (long j = 0; j < opsInner; j++)
                                {
                                    for (long k = 0; k < opsInnerInner; k++)
                                    {
                                        d2[ix3] = (System.SByte)(Math.Asin(scalar));
                                        ix3 += innerInnerStride3;
                                    }

                                    ix3 += innerStride3;
                                }

                                ix3 += outerStride3;
                            }

                            if (counters.LongLength > 0)
                            {
                                //Basically a ripple carry adder
                                long p = counters.LongLength - 1;
                                while (++counters[p] == limits[p] && p > 0)
                                {
                                    counters[p] = 0;
                                    p--;
                                }
                            }
                        }
                    }
                }
            }
        }
        /// <summary>
        /// Unsafe implementation of applying a unary operation
        /// </summary>
        /// <typeparam name="C">The type of operation to perform</typeparam>
        /// <param name="op">The operation instance</param>
        /// <param name="in1">The input argument</param>
        /// <param name="out">The output target</param>
        internal static void UFunc_Op_Inner_Unary_Flush_Byte_TypedImpl<C>(NumCIL.UInt8.Asin op, NdArray<System.Byte> in1, NdArray<System.Byte> @out)
            where C : IUnaryOp<System.Byte>
        {
            unsafe
            {
                using (var f1 = new Pinner(in1.DataAccessor))
                using (var f2 = new Pinner(@out.DataAccessor))
                {
                    var d1 = (System.Byte*)f1.ptr;
                    var d2 = (System.Byte*)f2.ptr;

                    if (@out.Shape.Dimensions.Length == 1)
                    {
                        long totalOps = @out.Shape.Dimensions[0].Length;

                        long ix1 = in1.Shape.Offset;
                        long ix2 = @out.Shape.Offset;

                        long stride1 = in1.Shape.Dimensions[0].Stride;
                        long stride2 = @out.Shape.Dimensions[0].Stride;


                        if (stride1 == stride2 && ix1 == ix2)
                        {
                            //Best case, all are equal, just keep a single counter
                            for (long i = 0; i < totalOps; i++)
                            {
                                d2[ix1] = (System.Byte)(Math.Asin(d1[ix1]));
                                ix1 += stride1;
                            }
                        }
                        else
                        {
                            for (long i = 0; i < totalOps; i++)
                            {
                                d2[ix2] = (System.Byte)(Math.Asin(d1[ix1]));
                                ix1 += stride1;
                                ix2 += stride2;
                            }
                        }
                    }
                    else if (@out.Shape.Dimensions.Length == 2)
                    {
                        long opsOuter = @out.Shape.Dimensions[0].Length;
                        long opsInner = @out.Shape.Dimensions[1].Length;

                        long ix1 = in1.Shape.Offset;
                        long ix2 = @out.Shape.Offset;

                        long outerStride1 = in1.Shape.Dimensions[0].Stride;
                        long outerStride2 = @out.Shape.Dimensions[0].Stride;

                        long innerStride1 = in1.Shape.Dimensions[1].Stride;
                        long innerStride2 = @out.Shape.Dimensions[1].Stride;

                        outerStride1 -= innerStride1 * in1.Shape.Dimensions[1].Length;
                        outerStride2 -= innerStride2 * @out.Shape.Dimensions[1].Length;

                        for (long i = 0; i < opsOuter; i++)
                        {
                            for (long j = 0; j < opsInner; j++)
                            {
                                d2[ix2] = (System.Byte)(Math.Asin(d1[ix1]));
                                ix1 += innerStride1;
                                ix2 += innerStride2;
                            }

                            ix1 += outerStride1;
                            ix2 += outerStride2;
                        }
                    }
                    else
                    {
                        long n = in1.Shape.Dimensions.LongLength - 3;
                        long[] limits = in1.Shape.Dimensions.Where(x => n-- > 0).Select(x => x.Length).ToArray();
                        long[] counters = new long[limits.LongLength];

                        long totalOps = limits.LongLength == 0 ? 1 : limits.Aggregate<long>((a, b) => a * b);

                        //This chunck of variables are used to prevent repeated calculations of offsets
                        long dimIndex0 = 0 + limits.LongLength;
                        long dimIndex1 = 1 + limits.LongLength;
                        long dimIndex2 = 2 + limits.LongLength;

                        long opsOuter = @out.Shape.Dimensions[0 + limits.LongLength].Length;
                        long opsInner = @out.Shape.Dimensions[1 + limits.LongLength].Length;
                        long opsInnerInner = @out.Shape.Dimensions[2 + limits.LongLength].Length;

                        long outerStride1 = in1.Shape.Dimensions[dimIndex0].Stride;
                        long outerStride3 = @out.Shape.Dimensions[dimIndex0].Stride;

                        long innerStride1 = in1.Shape.Dimensions[dimIndex1].Stride;
                        long innerStride3 = @out.Shape.Dimensions[dimIndex1].Stride;

                        long innerInnerStride1 = in1.Shape.Dimensions[dimIndex2].Stride;
                        long innerInnerStride3 = @out.Shape.Dimensions[dimIndex2].Stride;

                        outerStride1 -= innerStride1 * in1.Shape.Dimensions[dimIndex1].Length;
                        outerStride3 -= innerStride3 * @out.Shape.Dimensions[dimIndex1].Length;

                        innerStride1 -= innerInnerStride1 * in1.Shape.Dimensions[dimIndex2].Length;
                        innerStride3 -= innerInnerStride3 * @out.Shape.Dimensions[dimIndex2].Length;

                        for (long outer = 0; outer < totalOps; outer++)
                        {
                            //Get the array offset for the first element in the outer dimension
                            long ix1 = in1.Shape[counters];
                            long ix3 = @out.Shape[counters];


                            for (long i = 0; i < opsOuter; i++)
                            {
                                for (long j = 0; j < opsInner; j++)
                                {
                                    for (long k = 0; k < opsInnerInner; k++)
                                    {
                                        d2[ix3] = (System.Byte)(Math.Asin(d1[ix1]));
                                        ix1 += innerInnerStride1;
                                        ix3 += innerInnerStride3;
                                    }

                                    ix1 += innerStride1;
                                    ix3 += innerStride3;
                                }

                                ix1 += outerStride1;
                                ix3 += outerStride3;
                            }

                            if (counters.LongLength > 0)
                            {
                                //Basically a ripple carry adder
                                long p = counters.LongLength - 1;
                                while (++counters[p] == limits[p] && p > 0)
                                {
                                    counters[p] = 0;
                                    p--;
                                }
                            }
                        }
                    }
                }
            }
        }

        /// <summary>
        /// Unsafe implementation of applying a unary operation
        /// </summary>
        /// <typeparam name="C">The type of operation to perform</typeparam>
        /// <param name="op">The operation instance</param>
        /// <param name="scalar">The input scalar argument</param>
        /// <param name="out">The output target</param>
        internal static void UFunc_Op_Inner_Unary_Scalar_Flush_Byte_TypedImpl<C>(NumCIL.UInt8.Asin op, System.Byte scalar, NdArray<System.Byte> @out)
            where C : IUnaryOp<System.Byte>
        {
            unsafe
            {
                using (var f2 = new Pinner(@out.DataAccessor))
                {
                    var d2 = (System.Byte*)f2.ptr;

                    if (@out.Shape.Dimensions.Length == 1)
                    {
                        long totalOps = @out.Shape.Dimensions[0].Length;
                        long ix2 = @out.Shape.Offset;
                        long stride2 = @out.Shape.Dimensions[0].Stride;

                        for (long i = 0; i < totalOps; i++)
                        {
                            d2[ix2] = (System.Byte)(Math.Asin(scalar));
                            ix2 += stride2;
                        }
                    }
                    else if (@out.Shape.Dimensions.Length == 2)
                    {
                        long opsOuter = @out.Shape.Dimensions[0].Length;
                        long opsInner = @out.Shape.Dimensions[1].Length;

                        long ix2 = @out.Shape.Offset;
                        long outerStride2 = @out.Shape.Dimensions[0].Stride;
                        long innerStride2 = @out.Shape.Dimensions[1].Stride;
                        outerStride2 -= innerStride2 * @out.Shape.Dimensions[1].Length;

                        for (long i = 0; i < opsOuter; i++)
                        {
                            for (long j = 0; j < opsInner; j++)
                            {
                                d2[ix2] = (System.Byte)(Math.Asin(scalar));
                                ix2 += innerStride2;
                            }

                            ix2 += outerStride2;
                        }
                    }
                    else
                    {
                        long n = @out.Shape.Dimensions.LongLength - 3;
                        long[] limits = @out.Shape.Dimensions.Where(x => n-- > 0).Select(x => x.Length).ToArray();
                        long[] counters = new long[limits.LongLength];

                        long totalOps = limits.LongLength == 0 ? 1 : limits.Aggregate<long>((a, b) => a * b);

                        //This chunck of variables are used to prevent repeated calculations of offsets
                        long dimIndex0 = 0 + limits.LongLength;
                        long dimIndex1 = 1 + limits.LongLength;
                        long dimIndex2 = 2 + limits.LongLength;

                        long opsOuter = @out.Shape.Dimensions[0 + limits.LongLength].Length;
                        long opsInner = @out.Shape.Dimensions[1 + limits.LongLength].Length;
                        long opsInnerInner = @out.Shape.Dimensions[2 + limits.LongLength].Length;

                        long outerStride3 = @out.Shape.Dimensions[dimIndex0].Stride;
                        long innerStride3 = @out.Shape.Dimensions[dimIndex1].Stride;
                        long innerInnerStride3 = @out.Shape.Dimensions[dimIndex2].Stride;
                        outerStride3 -= innerStride3 * @out.Shape.Dimensions[dimIndex1].Length;
                        innerStride3 -= innerInnerStride3 * @out.Shape.Dimensions[dimIndex2].Length;

                        for (long outer = 0; outer < totalOps; outer++)
                        {
                            //Get the array offset for the first element in the outer dimension
                            long ix3 = @out.Shape[counters];

                            for (long i = 0; i < opsOuter; i++)
                            {
                                for (long j = 0; j < opsInner; j++)
                                {
                                    for (long k = 0; k < opsInnerInner; k++)
                                    {
                                        d2[ix3] = (System.Byte)(Math.Asin(scalar));
                                        ix3 += innerInnerStride3;
                                    }

                                    ix3 += innerStride3;
                                }

                                ix3 += outerStride3;
                            }

                            if (counters.LongLength > 0)
                            {
                                //Basically a ripple carry adder
                                long p = counters.LongLength - 1;
                                while (++counters[p] == limits[p] && p > 0)
                                {
                                    counters[p] = 0;
                                    p--;
                                }
                            }
                        }
                    }
                }
            }
        }
        /// <summary>
        /// Unsafe implementation of applying a unary operation
        /// </summary>
        /// <typeparam name="C">The type of operation to perform</typeparam>
        /// <param name="op">The operation instance</param>
        /// <param name="in1">The input argument</param>
        /// <param name="out">The output target</param>
        internal static void UFunc_Op_Inner_Unary_Flush_Int16_TypedImpl<C>(NumCIL.Int16.Asin op, NdArray<System.Int16> in1, NdArray<System.Int16> @out)
            where C : IUnaryOp<System.Int16>
        {
            unsafe
            {
                using (var f1 = new Pinner(in1.DataAccessor))
                using (var f2 = new Pinner(@out.DataAccessor))
                {
                    var d1 = (System.Int16*)f1.ptr;
                    var d2 = (System.Int16*)f2.ptr;

                    if (@out.Shape.Dimensions.Length == 1)
                    {
                        long totalOps = @out.Shape.Dimensions[0].Length;

                        long ix1 = in1.Shape.Offset;
                        long ix2 = @out.Shape.Offset;

                        long stride1 = in1.Shape.Dimensions[0].Stride;
                        long stride2 = @out.Shape.Dimensions[0].Stride;


                        if (stride1 == stride2 && ix1 == ix2)
                        {
                            //Best case, all are equal, just keep a single counter
                            for (long i = 0; i < totalOps; i++)
                            {
                                d2[ix1] = (System.Int16)(Math.Asin(d1[ix1]));
                                ix1 += stride1;
                            }
                        }
                        else
                        {
                            for (long i = 0; i < totalOps; i++)
                            {
                                d2[ix2] = (System.Int16)(Math.Asin(d1[ix1]));
                                ix1 += stride1;
                                ix2 += stride2;
                            }
                        }
                    }
                    else if (@out.Shape.Dimensions.Length == 2)
                    {
                        long opsOuter = @out.Shape.Dimensions[0].Length;
                        long opsInner = @out.Shape.Dimensions[1].Length;

                        long ix1 = in1.Shape.Offset;
                        long ix2 = @out.Shape.Offset;

                        long outerStride1 = in1.Shape.Dimensions[0].Stride;
                        long outerStride2 = @out.Shape.Dimensions[0].Stride;

                        long innerStride1 = in1.Shape.Dimensions[1].Stride;
                        long innerStride2 = @out.Shape.Dimensions[1].Stride;

                        outerStride1 -= innerStride1 * in1.Shape.Dimensions[1].Length;
                        outerStride2 -= innerStride2 * @out.Shape.Dimensions[1].Length;

                        for (long i = 0; i < opsOuter; i++)
                        {
                            for (long j = 0; j < opsInner; j++)
                            {
                                d2[ix2] = (System.Int16)(Math.Asin(d1[ix1]));
                                ix1 += innerStride1;
                                ix2 += innerStride2;
                            }

                            ix1 += outerStride1;
                            ix2 += outerStride2;
                        }
                    }
                    else
                    {
                        long n = in1.Shape.Dimensions.LongLength - 3;
                        long[] limits = in1.Shape.Dimensions.Where(x => n-- > 0).Select(x => x.Length).ToArray();
                        long[] counters = new long[limits.LongLength];

                        long totalOps = limits.LongLength == 0 ? 1 : limits.Aggregate<long>((a, b) => a * b);

                        //This chunck of variables are used to prevent repeated calculations of offsets
                        long dimIndex0 = 0 + limits.LongLength;
                        long dimIndex1 = 1 + limits.LongLength;
                        long dimIndex2 = 2 + limits.LongLength;

                        long opsOuter = @out.Shape.Dimensions[0 + limits.LongLength].Length;
                        long opsInner = @out.Shape.Dimensions[1 + limits.LongLength].Length;
                        long opsInnerInner = @out.Shape.Dimensions[2 + limits.LongLength].Length;

                        long outerStride1 = in1.Shape.Dimensions[dimIndex0].Stride;
                        long outerStride3 = @out.Shape.Dimensions[dimIndex0].Stride;

                        long innerStride1 = in1.Shape.Dimensions[dimIndex1].Stride;
                        long innerStride3 = @out.Shape.Dimensions[dimIndex1].Stride;

                        long innerInnerStride1 = in1.Shape.Dimensions[dimIndex2].Stride;
                        long innerInnerStride3 = @out.Shape.Dimensions[dimIndex2].Stride;

                        outerStride1 -= innerStride1 * in1.Shape.Dimensions[dimIndex1].Length;
                        outerStride3 -= innerStride3 * @out.Shape.Dimensions[dimIndex1].Length;

                        innerStride1 -= innerInnerStride1 * in1.Shape.Dimensions[dimIndex2].Length;
                        innerStride3 -= innerInnerStride3 * @out.Shape.Dimensions[dimIndex2].Length;

                        for (long outer = 0; outer < totalOps; outer++)
                        {
                            //Get the array offset for the first element in the outer dimension
                            long ix1 = in1.Shape[counters];
                            long ix3 = @out.Shape[counters];


                            for (long i = 0; i < opsOuter; i++)
                            {
                                for (long j = 0; j < opsInner; j++)
                                {
                                    for (long k = 0; k < opsInnerInner; k++)
                                    {
                                        d2[ix3] = (System.Int16)(Math.Asin(d1[ix1]));
                                        ix1 += innerInnerStride1;
                                        ix3 += innerInnerStride3;
                                    }

                                    ix1 += innerStride1;
                                    ix3 += innerStride3;
                                }

                                ix1 += outerStride1;
                                ix3 += outerStride3;
                            }

                            if (counters.LongLength > 0)
                            {
                                //Basically a ripple carry adder
                                long p = counters.LongLength - 1;
                                while (++counters[p] == limits[p] && p > 0)
                                {
                                    counters[p] = 0;
                                    p--;
                                }
                            }
                        }
                    }
                }
            }
        }

        /// <summary>
        /// Unsafe implementation of applying a unary operation
        /// </summary>
        /// <typeparam name="C">The type of operation to perform</typeparam>
        /// <param name="op">The operation instance</param>
        /// <param name="scalar">The input scalar argument</param>
        /// <param name="out">The output target</param>
        internal static void UFunc_Op_Inner_Unary_Scalar_Flush_Int16_TypedImpl<C>(NumCIL.Int16.Asin op, System.Int16 scalar, NdArray<System.Int16> @out)
            where C : IUnaryOp<System.Int16>
        {
            unsafe
            {
                using (var f2 = new Pinner(@out.DataAccessor))
                {
                    var d2 = (System.Int16*)f2.ptr;

                    if (@out.Shape.Dimensions.Length == 1)
                    {
                        long totalOps = @out.Shape.Dimensions[0].Length;
                        long ix2 = @out.Shape.Offset;
                        long stride2 = @out.Shape.Dimensions[0].Stride;

                        for (long i = 0; i < totalOps; i++)
                        {
                            d2[ix2] = (System.Int16)(Math.Asin(scalar));
                            ix2 += stride2;
                        }
                    }
                    else if (@out.Shape.Dimensions.Length == 2)
                    {
                        long opsOuter = @out.Shape.Dimensions[0].Length;
                        long opsInner = @out.Shape.Dimensions[1].Length;

                        long ix2 = @out.Shape.Offset;
                        long outerStride2 = @out.Shape.Dimensions[0].Stride;
                        long innerStride2 = @out.Shape.Dimensions[1].Stride;
                        outerStride2 -= innerStride2 * @out.Shape.Dimensions[1].Length;

                        for (long i = 0; i < opsOuter; i++)
                        {
                            for (long j = 0; j < opsInner; j++)
                            {
                                d2[ix2] = (System.Int16)(Math.Asin(scalar));
                                ix2 += innerStride2;
                            }

                            ix2 += outerStride2;
                        }
                    }
                    else
                    {
                        long n = @out.Shape.Dimensions.LongLength - 3;
                        long[] limits = @out.Shape.Dimensions.Where(x => n-- > 0).Select(x => x.Length).ToArray();
                        long[] counters = new long[limits.LongLength];

                        long totalOps = limits.LongLength == 0 ? 1 : limits.Aggregate<long>((a, b) => a * b);

                        //This chunck of variables are used to prevent repeated calculations of offsets
                        long dimIndex0 = 0 + limits.LongLength;
                        long dimIndex1 = 1 + limits.LongLength;
                        long dimIndex2 = 2 + limits.LongLength;

                        long opsOuter = @out.Shape.Dimensions[0 + limits.LongLength].Length;
                        long opsInner = @out.Shape.Dimensions[1 + limits.LongLength].Length;
                        long opsInnerInner = @out.Shape.Dimensions[2 + limits.LongLength].Length;

                        long outerStride3 = @out.Shape.Dimensions[dimIndex0].Stride;
                        long innerStride3 = @out.Shape.Dimensions[dimIndex1].Stride;
                        long innerInnerStride3 = @out.Shape.Dimensions[dimIndex2].Stride;
                        outerStride3 -= innerStride3 * @out.Shape.Dimensions[dimIndex1].Length;
                        innerStride3 -= innerInnerStride3 * @out.Shape.Dimensions[dimIndex2].Length;

                        for (long outer = 0; outer < totalOps; outer++)
                        {
                            //Get the array offset for the first element in the outer dimension
                            long ix3 = @out.Shape[counters];

                            for (long i = 0; i < opsOuter; i++)
                            {
                                for (long j = 0; j < opsInner; j++)
                                {
                                    for (long k = 0; k < opsInnerInner; k++)
                                    {
                                        d2[ix3] = (System.Int16)(Math.Asin(scalar));
                                        ix3 += innerInnerStride3;
                                    }

                                    ix3 += innerStride3;
                                }

                                ix3 += outerStride3;
                            }

                            if (counters.LongLength > 0)
                            {
                                //Basically a ripple carry adder
                                long p = counters.LongLength - 1;
                                while (++counters[p] == limits[p] && p > 0)
                                {
                                    counters[p] = 0;
                                    p--;
                                }
                            }
                        }
                    }
                }
            }
        }
        /// <summary>
        /// Unsafe implementation of applying a unary operation
        /// </summary>
        /// <typeparam name="C">The type of operation to perform</typeparam>
        /// <param name="op">The operation instance</param>
        /// <param name="in1">The input argument</param>
        /// <param name="out">The output target</param>
        internal static void UFunc_Op_Inner_Unary_Flush_UInt16_TypedImpl<C>(NumCIL.UInt16.Asin op, NdArray<System.UInt16> in1, NdArray<System.UInt16> @out)
            where C : IUnaryOp<System.UInt16>
        {
            unsafe
            {
                using (var f1 = new Pinner(in1.DataAccessor))
                using (var f2 = new Pinner(@out.DataAccessor))
                {
                    var d1 = (System.UInt16*)f1.ptr;
                    var d2 = (System.UInt16*)f2.ptr;

                    if (@out.Shape.Dimensions.Length == 1)
                    {
                        long totalOps = @out.Shape.Dimensions[0].Length;

                        long ix1 = in1.Shape.Offset;
                        long ix2 = @out.Shape.Offset;

                        long stride1 = in1.Shape.Dimensions[0].Stride;
                        long stride2 = @out.Shape.Dimensions[0].Stride;


                        if (stride1 == stride2 && ix1 == ix2)
                        {
                            //Best case, all are equal, just keep a single counter
                            for (long i = 0; i < totalOps; i++)
                            {
                                d2[ix1] = (System.UInt16)(Math.Asin(d1[ix1]));
                                ix1 += stride1;
                            }
                        }
                        else
                        {
                            for (long i = 0; i < totalOps; i++)
                            {
                                d2[ix2] = (System.UInt16)(Math.Asin(d1[ix1]));
                                ix1 += stride1;
                                ix2 += stride2;
                            }
                        }
                    }
                    else if (@out.Shape.Dimensions.Length == 2)
                    {
                        long opsOuter = @out.Shape.Dimensions[0].Length;
                        long opsInner = @out.Shape.Dimensions[1].Length;

                        long ix1 = in1.Shape.Offset;
                        long ix2 = @out.Shape.Offset;

                        long outerStride1 = in1.Shape.Dimensions[0].Stride;
                        long outerStride2 = @out.Shape.Dimensions[0].Stride;

                        long innerStride1 = in1.Shape.Dimensions[1].Stride;
                        long innerStride2 = @out.Shape.Dimensions[1].Stride;

                        outerStride1 -= innerStride1 * in1.Shape.Dimensions[1].Length;
                        outerStride2 -= innerStride2 * @out.Shape.Dimensions[1].Length;

                        for (long i = 0; i < opsOuter; i++)
                        {
                            for (long j = 0; j < opsInner; j++)
                            {
                                d2[ix2] = (System.UInt16)(Math.Asin(d1[ix1]));
                                ix1 += innerStride1;
                                ix2 += innerStride2;
                            }

                            ix1 += outerStride1;
                            ix2 += outerStride2;
                        }
                    }
                    else
                    {
                        long n = in1.Shape.Dimensions.LongLength - 3;
                        long[] limits = in1.Shape.Dimensions.Where(x => n-- > 0).Select(x => x.Length).ToArray();
                        long[] counters = new long[limits.LongLength];

                        long totalOps = limits.LongLength == 0 ? 1 : limits.Aggregate<long>((a, b) => a * b);

                        //This chunck of variables are used to prevent repeated calculations of offsets
                        long dimIndex0 = 0 + limits.LongLength;
                        long dimIndex1 = 1 + limits.LongLength;
                        long dimIndex2 = 2 + limits.LongLength;

                        long opsOuter = @out.Shape.Dimensions[0 + limits.LongLength].Length;
                        long opsInner = @out.Shape.Dimensions[1 + limits.LongLength].Length;
                        long opsInnerInner = @out.Shape.Dimensions[2 + limits.LongLength].Length;

                        long outerStride1 = in1.Shape.Dimensions[dimIndex0].Stride;
                        long outerStride3 = @out.Shape.Dimensions[dimIndex0].Stride;

                        long innerStride1 = in1.Shape.Dimensions[dimIndex1].Stride;
                        long innerStride3 = @out.Shape.Dimensions[dimIndex1].Stride;

                        long innerInnerStride1 = in1.Shape.Dimensions[dimIndex2].Stride;
                        long innerInnerStride3 = @out.Shape.Dimensions[dimIndex2].Stride;

                        outerStride1 -= innerStride1 * in1.Shape.Dimensions[dimIndex1].Length;
                        outerStride3 -= innerStride3 * @out.Shape.Dimensions[dimIndex1].Length;

                        innerStride1 -= innerInnerStride1 * in1.Shape.Dimensions[dimIndex2].Length;
                        innerStride3 -= innerInnerStride3 * @out.Shape.Dimensions[dimIndex2].Length;

                        for (long outer = 0; outer < totalOps; outer++)
                        {
                            //Get the array offset for the first element in the outer dimension
                            long ix1 = in1.Shape[counters];
                            long ix3 = @out.Shape[counters];


                            for (long i = 0; i < opsOuter; i++)
                            {
                                for (long j = 0; j < opsInner; j++)
                                {
                                    for (long k = 0; k < opsInnerInner; k++)
                                    {
                                        d2[ix3] = (System.UInt16)(Math.Asin(d1[ix1]));
                                        ix1 += innerInnerStride1;
                                        ix3 += innerInnerStride3;
                                    }

                                    ix1 += innerStride1;
                                    ix3 += innerStride3;
                                }

                                ix1 += outerStride1;
                                ix3 += outerStride3;
                            }

                            if (counters.LongLength > 0)
                            {
                                //Basically a ripple carry adder
                                long p = counters.LongLength - 1;
                                while (++counters[p] == limits[p] && p > 0)
                                {
                                    counters[p] = 0;
                                    p--;
                                }
                            }
                        }
                    }
                }
            }
        }

        /// <summary>
        /// Unsafe implementation of applying a unary operation
        /// </summary>
        /// <typeparam name="C">The type of operation to perform</typeparam>
        /// <param name="op">The operation instance</param>
        /// <param name="scalar">The input scalar argument</param>
        /// <param name="out">The output target</param>
        internal static void UFunc_Op_Inner_Unary_Scalar_Flush_UInt16_TypedImpl<C>(NumCIL.UInt16.Asin op, System.UInt16 scalar, NdArray<System.UInt16> @out)
            where C : IUnaryOp<System.UInt16>
        {
            unsafe
            {
                using (var f2 = new Pinner(@out.DataAccessor))
                {
                    var d2 = (System.UInt16*)f2.ptr;

                    if (@out.Shape.Dimensions.Length == 1)
                    {
                        long totalOps = @out.Shape.Dimensions[0].Length;
                        long ix2 = @out.Shape.Offset;
                        long stride2 = @out.Shape.Dimensions[0].Stride;

                        for (long i = 0; i < totalOps; i++)
                        {
                            d2[ix2] = (System.UInt16)(Math.Asin(scalar));
                            ix2 += stride2;
                        }
                    }
                    else if (@out.Shape.Dimensions.Length == 2)
                    {
                        long opsOuter = @out.Shape.Dimensions[0].Length;
                        long opsInner = @out.Shape.Dimensions[1].Length;

                        long ix2 = @out.Shape.Offset;
                        long outerStride2 = @out.Shape.Dimensions[0].Stride;
                        long innerStride2 = @out.Shape.Dimensions[1].Stride;
                        outerStride2 -= innerStride2 * @out.Shape.Dimensions[1].Length;

                        for (long i = 0; i < opsOuter; i++)
                        {
                            for (long j = 0; j < opsInner; j++)
                            {
                                d2[ix2] = (System.UInt16)(Math.Asin(scalar));
                                ix2 += innerStride2;
                            }

                            ix2 += outerStride2;
                        }
                    }
                    else
                    {
                        long n = @out.Shape.Dimensions.LongLength - 3;
                        long[] limits = @out.Shape.Dimensions.Where(x => n-- > 0).Select(x => x.Length).ToArray();
                        long[] counters = new long[limits.LongLength];

                        long totalOps = limits.LongLength == 0 ? 1 : limits.Aggregate<long>((a, b) => a * b);

                        //This chunck of variables are used to prevent repeated calculations of offsets
                        long dimIndex0 = 0 + limits.LongLength;
                        long dimIndex1 = 1 + limits.LongLength;
                        long dimIndex2 = 2 + limits.LongLength;

                        long opsOuter = @out.Shape.Dimensions[0 + limits.LongLength].Length;
                        long opsInner = @out.Shape.Dimensions[1 + limits.LongLength].Length;
                        long opsInnerInner = @out.Shape.Dimensions[2 + limits.LongLength].Length;

                        long outerStride3 = @out.Shape.Dimensions[dimIndex0].Stride;
                        long innerStride3 = @out.Shape.Dimensions[dimIndex1].Stride;
                        long innerInnerStride3 = @out.Shape.Dimensions[dimIndex2].Stride;
                        outerStride3 -= innerStride3 * @out.Shape.Dimensions[dimIndex1].Length;
                        innerStride3 -= innerInnerStride3 * @out.Shape.Dimensions[dimIndex2].Length;

                        for (long outer = 0; outer < totalOps; outer++)
                        {
                            //Get the array offset for the first element in the outer dimension
                            long ix3 = @out.Shape[counters];

                            for (long i = 0; i < opsOuter; i++)
                            {
                                for (long j = 0; j < opsInner; j++)
                                {
                                    for (long k = 0; k < opsInnerInner; k++)
                                    {
                                        d2[ix3] = (System.UInt16)(Math.Asin(scalar));
                                        ix3 += innerInnerStride3;
                                    }

                                    ix3 += innerStride3;
                                }

                                ix3 += outerStride3;
                            }

                            if (counters.LongLength > 0)
                            {
                                //Basically a ripple carry adder
                                long p = counters.LongLength - 1;
                                while (++counters[p] == limits[p] && p > 0)
                                {
                                    counters[p] = 0;
                                    p--;
                                }
                            }
                        }
                    }
                }
            }
        }
        /// <summary>
        /// Unsafe implementation of applying a unary operation
        /// </summary>
        /// <typeparam name="C">The type of operation to perform</typeparam>
        /// <param name="op">The operation instance</param>
        /// <param name="in1">The input argument</param>
        /// <param name="out">The output target</param>
        internal static void UFunc_Op_Inner_Unary_Flush_Int32_TypedImpl<C>(NumCIL.Int32.Asin op, NdArray<System.Int32> in1, NdArray<System.Int32> @out)
            where C : IUnaryOp<System.Int32>
        {
            unsafe
            {
                using (var f1 = new Pinner(in1.DataAccessor))
                using (var f2 = new Pinner(@out.DataAccessor))
                {
                    var d1 = (System.Int32*)f1.ptr;
                    var d2 = (System.Int32*)f2.ptr;

                    if (@out.Shape.Dimensions.Length == 1)
                    {
                        long totalOps = @out.Shape.Dimensions[0].Length;

                        long ix1 = in1.Shape.Offset;
                        long ix2 = @out.Shape.Offset;

                        long stride1 = in1.Shape.Dimensions[0].Stride;
                        long stride2 = @out.Shape.Dimensions[0].Stride;


                        if (stride1 == stride2 && ix1 == ix2)
                        {
                            //Best case, all are equal, just keep a single counter
                            for (long i = 0; i < totalOps; i++)
                            {
                                d2[ix1] = (System.Int32)(Math.Asin(d1[ix1]));
                                ix1 += stride1;
                            }
                        }
                        else
                        {
                            for (long i = 0; i < totalOps; i++)
                            {
                                d2[ix2] = (System.Int32)(Math.Asin(d1[ix1]));
                                ix1 += stride1;
                                ix2 += stride2;
                            }
                        }
                    }
                    else if (@out.Shape.Dimensions.Length == 2)
                    {
                        long opsOuter = @out.Shape.Dimensions[0].Length;
                        long opsInner = @out.Shape.Dimensions[1].Length;

                        long ix1 = in1.Shape.Offset;
                        long ix2 = @out.Shape.Offset;

                        long outerStride1 = in1.Shape.Dimensions[0].Stride;
                        long outerStride2 = @out.Shape.Dimensions[0].Stride;

                        long innerStride1 = in1.Shape.Dimensions[1].Stride;
                        long innerStride2 = @out.Shape.Dimensions[1].Stride;

                        outerStride1 -= innerStride1 * in1.Shape.Dimensions[1].Length;
                        outerStride2 -= innerStride2 * @out.Shape.Dimensions[1].Length;

                        for (long i = 0; i < opsOuter; i++)
                        {
                            for (long j = 0; j < opsInner; j++)
                            {
                                d2[ix2] = (System.Int32)(Math.Asin(d1[ix1]));
                                ix1 += innerStride1;
                                ix2 += innerStride2;
                            }

                            ix1 += outerStride1;
                            ix2 += outerStride2;
                        }
                    }
                    else
                    {
                        long n = in1.Shape.Dimensions.LongLength - 3;
                        long[] limits = in1.Shape.Dimensions.Where(x => n-- > 0).Select(x => x.Length).ToArray();
                        long[] counters = new long[limits.LongLength];

                        long totalOps = limits.LongLength == 0 ? 1 : limits.Aggregate<long>((a, b) => a * b);

                        //This chunck of variables are used to prevent repeated calculations of offsets
                        long dimIndex0 = 0 + limits.LongLength;
                        long dimIndex1 = 1 + limits.LongLength;
                        long dimIndex2 = 2 + limits.LongLength;

                        long opsOuter = @out.Shape.Dimensions[0 + limits.LongLength].Length;
                        long opsInner = @out.Shape.Dimensions[1 + limits.LongLength].Length;
                        long opsInnerInner = @out.Shape.Dimensions[2 + limits.LongLength].Length;

                        long outerStride1 = in1.Shape.Dimensions[dimIndex0].Stride;
                        long outerStride3 = @out.Shape.Dimensions[dimIndex0].Stride;

                        long innerStride1 = in1.Shape.Dimensions[dimIndex1].Stride;
                        long innerStride3 = @out.Shape.Dimensions[dimIndex1].Stride;

                        long innerInnerStride1 = in1.Shape.Dimensions[dimIndex2].Stride;
                        long innerInnerStride3 = @out.Shape.Dimensions[dimIndex2].Stride;

                        outerStride1 -= innerStride1 * in1.Shape.Dimensions[dimIndex1].Length;
                        outerStride3 -= innerStride3 * @out.Shape.Dimensions[dimIndex1].Length;

                        innerStride1 -= innerInnerStride1 * in1.Shape.Dimensions[dimIndex2].Length;
                        innerStride3 -= innerInnerStride3 * @out.Shape.Dimensions[dimIndex2].Length;

                        for (long outer = 0; outer < totalOps; outer++)
                        {
                            //Get the array offset for the first element in the outer dimension
                            long ix1 = in1.Shape[counters];
                            long ix3 = @out.Shape[counters];


                            for (long i = 0; i < opsOuter; i++)
                            {
                                for (long j = 0; j < opsInner; j++)
                                {
                                    for (long k = 0; k < opsInnerInner; k++)
                                    {
                                        d2[ix3] = (System.Int32)(Math.Asin(d1[ix1]));
                                        ix1 += innerInnerStride1;
                                        ix3 += innerInnerStride3;
                                    }

                                    ix1 += innerStride1;
                                    ix3 += innerStride3;
                                }

                                ix1 += outerStride1;
                                ix3 += outerStride3;
                            }

                            if (counters.LongLength > 0)
                            {
                                //Basically a ripple carry adder
                                long p = counters.LongLength - 1;
                                while (++counters[p] == limits[p] && p > 0)
                                {
                                    counters[p] = 0;
                                    p--;
                                }
                            }
                        }
                    }
                }
            }
        }

        /// <summary>
        /// Unsafe implementation of applying a unary operation
        /// </summary>
        /// <typeparam name="C">The type of operation to perform</typeparam>
        /// <param name="op">The operation instance</param>
        /// <param name="scalar">The input scalar argument</param>
        /// <param name="out">The output target</param>
        internal static void UFunc_Op_Inner_Unary_Scalar_Flush_Int32_TypedImpl<C>(NumCIL.Int32.Asin op, System.Int32 scalar, NdArray<System.Int32> @out)
            where C : IUnaryOp<System.Int32>
        {
            unsafe
            {
                using (var f2 = new Pinner(@out.DataAccessor))
                {
                    var d2 = (System.Int32*)f2.ptr;

                    if (@out.Shape.Dimensions.Length == 1)
                    {
                        long totalOps = @out.Shape.Dimensions[0].Length;
                        long ix2 = @out.Shape.Offset;
                        long stride2 = @out.Shape.Dimensions[0].Stride;

                        for (long i = 0; i < totalOps; i++)
                        {
                            d2[ix2] = (System.Int32)(Math.Asin(scalar));
                            ix2 += stride2;
                        }
                    }
                    else if (@out.Shape.Dimensions.Length == 2)
                    {
                        long opsOuter = @out.Shape.Dimensions[0].Length;
                        long opsInner = @out.Shape.Dimensions[1].Length;

                        long ix2 = @out.Shape.Offset;
                        long outerStride2 = @out.Shape.Dimensions[0].Stride;
                        long innerStride2 = @out.Shape.Dimensions[1].Stride;
                        outerStride2 -= innerStride2 * @out.Shape.Dimensions[1].Length;

                        for (long i = 0; i < opsOuter; i++)
                        {
                            for (long j = 0; j < opsInner; j++)
                            {
                                d2[ix2] = (System.Int32)(Math.Asin(scalar));
                                ix2 += innerStride2;
                            }

                            ix2 += outerStride2;
                        }
                    }
                    else
                    {
                        long n = @out.Shape.Dimensions.LongLength - 3;
                        long[] limits = @out.Shape.Dimensions.Where(x => n-- > 0).Select(x => x.Length).ToArray();
                        long[] counters = new long[limits.LongLength];

                        long totalOps = limits.LongLength == 0 ? 1 : limits.Aggregate<long>((a, b) => a * b);

                        //This chunck of variables are used to prevent repeated calculations of offsets
                        long dimIndex0 = 0 + limits.LongLength;
                        long dimIndex1 = 1 + limits.LongLength;
                        long dimIndex2 = 2 + limits.LongLength;

                        long opsOuter = @out.Shape.Dimensions[0 + limits.LongLength].Length;
                        long opsInner = @out.Shape.Dimensions[1 + limits.LongLength].Length;
                        long opsInnerInner = @out.Shape.Dimensions[2 + limits.LongLength].Length;

                        long outerStride3 = @out.Shape.Dimensions[dimIndex0].Stride;
                        long innerStride3 = @out.Shape.Dimensions[dimIndex1].Stride;
                        long innerInnerStride3 = @out.Shape.Dimensions[dimIndex2].Stride;
                        outerStride3 -= innerStride3 * @out.Shape.Dimensions[dimIndex1].Length;
                        innerStride3 -= innerInnerStride3 * @out.Shape.Dimensions[dimIndex2].Length;

                        for (long outer = 0; outer < totalOps; outer++)
                        {
                            //Get the array offset for the first element in the outer dimension
                            long ix3 = @out.Shape[counters];

                            for (long i = 0; i < opsOuter; i++)
                            {
                                for (long j = 0; j < opsInner; j++)
                                {
                                    for (long k = 0; k < opsInnerInner; k++)
                                    {
                                        d2[ix3] = (System.Int32)(Math.Asin(scalar));
                                        ix3 += innerInnerStride3;
                                    }

                                    ix3 += innerStride3;
                                }

                                ix3 += outerStride3;
                            }

                            if (counters.LongLength > 0)
                            {
                                //Basically a ripple carry adder
                                long p = counters.LongLength - 1;
                                while (++counters[p] == limits[p] && p > 0)
                                {
                                    counters[p] = 0;
                                    p--;
                                }
                            }
                        }
                    }
                }
            }
        }
        /// <summary>
        /// Unsafe implementation of applying a unary operation
        /// </summary>
        /// <typeparam name="C">The type of operation to perform</typeparam>
        /// <param name="op">The operation instance</param>
        /// <param name="in1">The input argument</param>
        /// <param name="out">The output target</param>
        internal static void UFunc_Op_Inner_Unary_Flush_UInt32_TypedImpl<C>(NumCIL.UInt32.Asin op, NdArray<System.UInt32> in1, NdArray<System.UInt32> @out)
            where C : IUnaryOp<System.UInt32>
        {
            unsafe
            {
                using (var f1 = new Pinner(in1.DataAccessor))
                using (var f2 = new Pinner(@out.DataAccessor))
                {
                    var d1 = (System.UInt32*)f1.ptr;
                    var d2 = (System.UInt32*)f2.ptr;

                    if (@out.Shape.Dimensions.Length == 1)
                    {
                        long totalOps = @out.Shape.Dimensions[0].Length;

                        long ix1 = in1.Shape.Offset;
                        long ix2 = @out.Shape.Offset;

                        long stride1 = in1.Shape.Dimensions[0].Stride;
                        long stride2 = @out.Shape.Dimensions[0].Stride;


                        if (stride1 == stride2 && ix1 == ix2)
                        {
                            //Best case, all are equal, just keep a single counter
                            for (long i = 0; i < totalOps; i++)
                            {
                                d2[ix1] = (System.UInt32)(Math.Asin(d1[ix1]));
                                ix1 += stride1;
                            }
                        }
                        else
                        {
                            for (long i = 0; i < totalOps; i++)
                            {
                                d2[ix2] = (System.UInt32)(Math.Asin(d1[ix1]));
                                ix1 += stride1;
                                ix2 += stride2;
                            }
                        }
                    }
                    else if (@out.Shape.Dimensions.Length == 2)
                    {
                        long opsOuter = @out.Shape.Dimensions[0].Length;
                        long opsInner = @out.Shape.Dimensions[1].Length;

                        long ix1 = in1.Shape.Offset;
                        long ix2 = @out.Shape.Offset;

                        long outerStride1 = in1.Shape.Dimensions[0].Stride;
                        long outerStride2 = @out.Shape.Dimensions[0].Stride;

                        long innerStride1 = in1.Shape.Dimensions[1].Stride;
                        long innerStride2 = @out.Shape.Dimensions[1].Stride;

                        outerStride1 -= innerStride1 * in1.Shape.Dimensions[1].Length;
                        outerStride2 -= innerStride2 * @out.Shape.Dimensions[1].Length;

                        for (long i = 0; i < opsOuter; i++)
                        {
                            for (long j = 0; j < opsInner; j++)
                            {
                                d2[ix2] = (System.UInt32)(Math.Asin(d1[ix1]));
                                ix1 += innerStride1;
                                ix2 += innerStride2;
                            }

                            ix1 += outerStride1;
                            ix2 += outerStride2;
                        }
                    }
                    else
                    {
                        long n = in1.Shape.Dimensions.LongLength - 3;
                        long[] limits = in1.Shape.Dimensions.Where(x => n-- > 0).Select(x => x.Length).ToArray();
                        long[] counters = new long[limits.LongLength];

                        long totalOps = limits.LongLength == 0 ? 1 : limits.Aggregate<long>((a, b) => a * b);

                        //This chunck of variables are used to prevent repeated calculations of offsets
                        long dimIndex0 = 0 + limits.LongLength;
                        long dimIndex1 = 1 + limits.LongLength;
                        long dimIndex2 = 2 + limits.LongLength;

                        long opsOuter = @out.Shape.Dimensions[0 + limits.LongLength].Length;
                        long opsInner = @out.Shape.Dimensions[1 + limits.LongLength].Length;
                        long opsInnerInner = @out.Shape.Dimensions[2 + limits.LongLength].Length;

                        long outerStride1 = in1.Shape.Dimensions[dimIndex0].Stride;
                        long outerStride3 = @out.Shape.Dimensions[dimIndex0].Stride;

                        long innerStride1 = in1.Shape.Dimensions[dimIndex1].Stride;
                        long innerStride3 = @out.Shape.Dimensions[dimIndex1].Stride;

                        long innerInnerStride1 = in1.Shape.Dimensions[dimIndex2].Stride;
                        long innerInnerStride3 = @out.Shape.Dimensions[dimIndex2].Stride;

                        outerStride1 -= innerStride1 * in1.Shape.Dimensions[dimIndex1].Length;
                        outerStride3 -= innerStride3 * @out.Shape.Dimensions[dimIndex1].Length;

                        innerStride1 -= innerInnerStride1 * in1.Shape.Dimensions[dimIndex2].Length;
                        innerStride3 -= innerInnerStride3 * @out.Shape.Dimensions[dimIndex2].Length;

                        for (long outer = 0; outer < totalOps; outer++)
                        {
                            //Get the array offset for the first element in the outer dimension
                            long ix1 = in1.Shape[counters];
                            long ix3 = @out.Shape[counters];


                            for (long i = 0; i < opsOuter; i++)
                            {
                                for (long j = 0; j < opsInner; j++)
                                {
                                    for (long k = 0; k < opsInnerInner; k++)
                                    {
                                        d2[ix3] = (System.UInt32)(Math.Asin(d1[ix1]));
                                        ix1 += innerInnerStride1;
                                        ix3 += innerInnerStride3;
                                    }

                                    ix1 += innerStride1;
                                    ix3 += innerStride3;
                                }

                                ix1 += outerStride1;
                                ix3 += outerStride3;
                            }

                            if (counters.LongLength > 0)
                            {
                                //Basically a ripple carry adder
                                long p = counters.LongLength - 1;
                                while (++counters[p] == limits[p] && p > 0)
                                {
                                    counters[p] = 0;
                                    p--;
                                }
                            }
                        }
                    }
                }
            }
        }

        /// <summary>
        /// Unsafe implementation of applying a unary operation
        /// </summary>
        /// <typeparam name="C">The type of operation to perform</typeparam>
        /// <param name="op">The operation instance</param>
        /// <param name="scalar">The input scalar argument</param>
        /// <param name="out">The output target</param>
        internal static void UFunc_Op_Inner_Unary_Scalar_Flush_UInt32_TypedImpl<C>(NumCIL.UInt32.Asin op, System.UInt32 scalar, NdArray<System.UInt32> @out)
            where C : IUnaryOp<System.UInt32>
        {
            unsafe
            {
                using (var f2 = new Pinner(@out.DataAccessor))
                {
                    var d2 = (System.UInt32*)f2.ptr;

                    if (@out.Shape.Dimensions.Length == 1)
                    {
                        long totalOps = @out.Shape.Dimensions[0].Length;
                        long ix2 = @out.Shape.Offset;
                        long stride2 = @out.Shape.Dimensions[0].Stride;

                        for (long i = 0; i < totalOps; i++)
                        {
                            d2[ix2] = (System.UInt32)(Math.Asin(scalar));
                            ix2 += stride2;
                        }
                    }
                    else if (@out.Shape.Dimensions.Length == 2)
                    {
                        long opsOuter = @out.Shape.Dimensions[0].Length;
                        long opsInner = @out.Shape.Dimensions[1].Length;

                        long ix2 = @out.Shape.Offset;
                        long outerStride2 = @out.Shape.Dimensions[0].Stride;
                        long innerStride2 = @out.Shape.Dimensions[1].Stride;
                        outerStride2 -= innerStride2 * @out.Shape.Dimensions[1].Length;

                        for (long i = 0; i < opsOuter; i++)
                        {
                            for (long j = 0; j < opsInner; j++)
                            {
                                d2[ix2] = (System.UInt32)(Math.Asin(scalar));
                                ix2 += innerStride2;
                            }

                            ix2 += outerStride2;
                        }
                    }
                    else
                    {
                        long n = @out.Shape.Dimensions.LongLength - 3;
                        long[] limits = @out.Shape.Dimensions.Where(x => n-- > 0).Select(x => x.Length).ToArray();
                        long[] counters = new long[limits.LongLength];

                        long totalOps = limits.LongLength == 0 ? 1 : limits.Aggregate<long>((a, b) => a * b);

                        //This chunck of variables are used to prevent repeated calculations of offsets
                        long dimIndex0 = 0 + limits.LongLength;
                        long dimIndex1 = 1 + limits.LongLength;
                        long dimIndex2 = 2 + limits.LongLength;

                        long opsOuter = @out.Shape.Dimensions[0 + limits.LongLength].Length;
                        long opsInner = @out.Shape.Dimensions[1 + limits.LongLength].Length;
                        long opsInnerInner = @out.Shape.Dimensions[2 + limits.LongLength].Length;

                        long outerStride3 = @out.Shape.Dimensions[dimIndex0].Stride;
                        long innerStride3 = @out.Shape.Dimensions[dimIndex1].Stride;
                        long innerInnerStride3 = @out.Shape.Dimensions[dimIndex2].Stride;
                        outerStride3 -= innerStride3 * @out.Shape.Dimensions[dimIndex1].Length;
                        innerStride3 -= innerInnerStride3 * @out.Shape.Dimensions[dimIndex2].Length;

                        for (long outer = 0; outer < totalOps; outer++)
                        {
                            //Get the array offset for the first element in the outer dimension
                            long ix3 = @out.Shape[counters];

                            for (long i = 0; i < opsOuter; i++)
                            {
                                for (long j = 0; j < opsInner; j++)
                                {
                                    for (long k = 0; k < opsInnerInner; k++)
                                    {
                                        d2[ix3] = (System.UInt32)(Math.Asin(scalar));
                                        ix3 += innerInnerStride3;
                                    }

                                    ix3 += innerStride3;
                                }

                                ix3 += outerStride3;
                            }

                            if (counters.LongLength > 0)
                            {
                                //Basically a ripple carry adder
                                long p = counters.LongLength - 1;
                                while (++counters[p] == limits[p] && p > 0)
                                {
                                    counters[p] = 0;
                                    p--;
                                }
                            }
                        }
                    }
                }
            }
        }
        /// <summary>
        /// Unsafe implementation of applying a unary operation
        /// </summary>
        /// <typeparam name="C">The type of operation to perform</typeparam>
        /// <param name="op">The operation instance</param>
        /// <param name="in1">The input argument</param>
        /// <param name="out">The output target</param>
        internal static void UFunc_Op_Inner_Unary_Flush_Int64_TypedImpl<C>(NumCIL.Int64.Asin op, NdArray<System.Int64> in1, NdArray<System.Int64> @out)
            where C : IUnaryOp<System.Int64>
        {
            unsafe
            {
                using (var f1 = new Pinner(in1.DataAccessor))
                using (var f2 = new Pinner(@out.DataAccessor))
                {
                    var d1 = (System.Int64*)f1.ptr;
                    var d2 = (System.Int64*)f2.ptr;

                    if (@out.Shape.Dimensions.Length == 1)
                    {
                        long totalOps = @out.Shape.Dimensions[0].Length;

                        long ix1 = in1.Shape.Offset;
                        long ix2 = @out.Shape.Offset;

                        long stride1 = in1.Shape.Dimensions[0].Stride;
                        long stride2 = @out.Shape.Dimensions[0].Stride;


                        if (stride1 == stride2 && ix1 == ix2)
                        {
                            //Best case, all are equal, just keep a single counter
                            for (long i = 0; i < totalOps; i++)
                            {
                                d2[ix1] = (System.Int64)(Math.Asin(d1[ix1]));
                                ix1 += stride1;
                            }
                        }
                        else
                        {
                            for (long i = 0; i < totalOps; i++)
                            {
                                d2[ix2] = (System.Int64)(Math.Asin(d1[ix1]));
                                ix1 += stride1;
                                ix2 += stride2;
                            }
                        }
                    }
                    else if (@out.Shape.Dimensions.Length == 2)
                    {
                        long opsOuter = @out.Shape.Dimensions[0].Length;
                        long opsInner = @out.Shape.Dimensions[1].Length;

                        long ix1 = in1.Shape.Offset;
                        long ix2 = @out.Shape.Offset;

                        long outerStride1 = in1.Shape.Dimensions[0].Stride;
                        long outerStride2 = @out.Shape.Dimensions[0].Stride;

                        long innerStride1 = in1.Shape.Dimensions[1].Stride;
                        long innerStride2 = @out.Shape.Dimensions[1].Stride;

                        outerStride1 -= innerStride1 * in1.Shape.Dimensions[1].Length;
                        outerStride2 -= innerStride2 * @out.Shape.Dimensions[1].Length;

                        for (long i = 0; i < opsOuter; i++)
                        {
                            for (long j = 0; j < opsInner; j++)
                            {
                                d2[ix2] = (System.Int64)(Math.Asin(d1[ix1]));
                                ix1 += innerStride1;
                                ix2 += innerStride2;
                            }

                            ix1 += outerStride1;
                            ix2 += outerStride2;
                        }
                    }
                    else
                    {
                        long n = in1.Shape.Dimensions.LongLength - 3;
                        long[] limits = in1.Shape.Dimensions.Where(x => n-- > 0).Select(x => x.Length).ToArray();
                        long[] counters = new long[limits.LongLength];

                        long totalOps = limits.LongLength == 0 ? 1 : limits.Aggregate<long>((a, b) => a * b);

                        //This chunck of variables are used to prevent repeated calculations of offsets
                        long dimIndex0 = 0 + limits.LongLength;
                        long dimIndex1 = 1 + limits.LongLength;
                        long dimIndex2 = 2 + limits.LongLength;

                        long opsOuter = @out.Shape.Dimensions[0 + limits.LongLength].Length;
                        long opsInner = @out.Shape.Dimensions[1 + limits.LongLength].Length;
                        long opsInnerInner = @out.Shape.Dimensions[2 + limits.LongLength].Length;

                        long outerStride1 = in1.Shape.Dimensions[dimIndex0].Stride;
                        long outerStride3 = @out.Shape.Dimensions[dimIndex0].Stride;

                        long innerStride1 = in1.Shape.Dimensions[dimIndex1].Stride;
                        long innerStride3 = @out.Shape.Dimensions[dimIndex1].Stride;

                        long innerInnerStride1 = in1.Shape.Dimensions[dimIndex2].Stride;
                        long innerInnerStride3 = @out.Shape.Dimensions[dimIndex2].Stride;

                        outerStride1 -= innerStride1 * in1.Shape.Dimensions[dimIndex1].Length;
                        outerStride3 -= innerStride3 * @out.Shape.Dimensions[dimIndex1].Length;

                        innerStride1 -= innerInnerStride1 * in1.Shape.Dimensions[dimIndex2].Length;
                        innerStride3 -= innerInnerStride3 * @out.Shape.Dimensions[dimIndex2].Length;

                        for (long outer = 0; outer < totalOps; outer++)
                        {
                            //Get the array offset for the first element in the outer dimension
                            long ix1 = in1.Shape[counters];
                            long ix3 = @out.Shape[counters];


                            for (long i = 0; i < opsOuter; i++)
                            {
                                for (long j = 0; j < opsInner; j++)
                                {
                                    for (long k = 0; k < opsInnerInner; k++)
                                    {
                                        d2[ix3] = (System.Int64)(Math.Asin(d1[ix1]));
                                        ix1 += innerInnerStride1;
                                        ix3 += innerInnerStride3;
                                    }

                                    ix1 += innerStride1;
                                    ix3 += innerStride3;
                                }

                                ix1 += outerStride1;
                                ix3 += outerStride3;
                            }

                            if (counters.LongLength > 0)
                            {
                                //Basically a ripple carry adder
                                long p = counters.LongLength - 1;
                                while (++counters[p] == limits[p] && p > 0)
                                {
                                    counters[p] = 0;
                                    p--;
                                }
                            }
                        }
                    }
                }
            }
        }

        /// <summary>
        /// Unsafe implementation of applying a unary operation
        /// </summary>
        /// <typeparam name="C">The type of operation to perform</typeparam>
        /// <param name="op">The operation instance</param>
        /// <param name="scalar">The input scalar argument</param>
        /// <param name="out">The output target</param>
        internal static void UFunc_Op_Inner_Unary_Scalar_Flush_Int64_TypedImpl<C>(NumCIL.Int64.Asin op, System.Int64 scalar, NdArray<System.Int64> @out)
            where C : IUnaryOp<System.Int64>
        {
            unsafe
            {
                using (var f2 = new Pinner(@out.DataAccessor))
                {
                    var d2 = (System.Int64*)f2.ptr;

                    if (@out.Shape.Dimensions.Length == 1)
                    {
                        long totalOps = @out.Shape.Dimensions[0].Length;
                        long ix2 = @out.Shape.Offset;
                        long stride2 = @out.Shape.Dimensions[0].Stride;

                        for (long i = 0; i < totalOps; i++)
                        {
                            d2[ix2] = (System.Int64)(Math.Asin(scalar));
                            ix2 += stride2;
                        }
                    }
                    else if (@out.Shape.Dimensions.Length == 2)
                    {
                        long opsOuter = @out.Shape.Dimensions[0].Length;
                        long opsInner = @out.Shape.Dimensions[1].Length;

                        long ix2 = @out.Shape.Offset;
                        long outerStride2 = @out.Shape.Dimensions[0].Stride;
                        long innerStride2 = @out.Shape.Dimensions[1].Stride;
                        outerStride2 -= innerStride2 * @out.Shape.Dimensions[1].Length;

                        for (long i = 0; i < opsOuter; i++)
                        {
                            for (long j = 0; j < opsInner; j++)
                            {
                                d2[ix2] = (System.Int64)(Math.Asin(scalar));
                                ix2 += innerStride2;
                            }

                            ix2 += outerStride2;
                        }
                    }
                    else
                    {
                        long n = @out.Shape.Dimensions.LongLength - 3;
                        long[] limits = @out.Shape.Dimensions.Where(x => n-- > 0).Select(x => x.Length).ToArray();
                        long[] counters = new long[limits.LongLength];

                        long totalOps = limits.LongLength == 0 ? 1 : limits.Aggregate<long>((a, b) => a * b);

                        //This chunck of variables are used to prevent repeated calculations of offsets
                        long dimIndex0 = 0 + limits.LongLength;
                        long dimIndex1 = 1 + limits.LongLength;
                        long dimIndex2 = 2 + limits.LongLength;

                        long opsOuter = @out.Shape.Dimensions[0 + limits.LongLength].Length;
                        long opsInner = @out.Shape.Dimensions[1 + limits.LongLength].Length;
                        long opsInnerInner = @out.Shape.Dimensions[2 + limits.LongLength].Length;

                        long outerStride3 = @out.Shape.Dimensions[dimIndex0].Stride;
                        long innerStride3 = @out.Shape.Dimensions[dimIndex1].Stride;
                        long innerInnerStride3 = @out.Shape.Dimensions[dimIndex2].Stride;
                        outerStride3 -= innerStride3 * @out.Shape.Dimensions[dimIndex1].Length;
                        innerStride3 -= innerInnerStride3 * @out.Shape.Dimensions[dimIndex2].Length;

                        for (long outer = 0; outer < totalOps; outer++)
                        {
                            //Get the array offset for the first element in the outer dimension
                            long ix3 = @out.Shape[counters];

                            for (long i = 0; i < opsOuter; i++)
                            {
                                for (long j = 0; j < opsInner; j++)
                                {
                                    for (long k = 0; k < opsInnerInner; k++)
                                    {
                                        d2[ix3] = (System.Int64)(Math.Asin(scalar));
                                        ix3 += innerInnerStride3;
                                    }

                                    ix3 += innerStride3;
                                }

                                ix3 += outerStride3;
                            }

                            if (counters.LongLength > 0)
                            {
                                //Basically a ripple carry adder
                                long p = counters.LongLength - 1;
                                while (++counters[p] == limits[p] && p > 0)
                                {
                                    counters[p] = 0;
                                    p--;
                                }
                            }
                        }
                    }
                }
            }
        }
        /// <summary>
        /// Unsafe implementation of applying a unary operation
        /// </summary>
        /// <typeparam name="C">The type of operation to perform</typeparam>
        /// <param name="op">The operation instance</param>
        /// <param name="in1">The input argument</param>
        /// <param name="out">The output target</param>
        internal static void UFunc_Op_Inner_Unary_Flush_UInt64_TypedImpl<C>(NumCIL.UInt64.Asin op, NdArray<System.UInt64> in1, NdArray<System.UInt64> @out)
            where C : IUnaryOp<System.UInt64>
        {
            unsafe
            {
                using (var f1 = new Pinner(in1.DataAccessor))
                using (var f2 = new Pinner(@out.DataAccessor))
                {
                    var d1 = (System.UInt64*)f1.ptr;
                    var d2 = (System.UInt64*)f2.ptr;

                    if (@out.Shape.Dimensions.Length == 1)
                    {
                        long totalOps = @out.Shape.Dimensions[0].Length;

                        long ix1 = in1.Shape.Offset;
                        long ix2 = @out.Shape.Offset;

                        long stride1 = in1.Shape.Dimensions[0].Stride;
                        long stride2 = @out.Shape.Dimensions[0].Stride;


                        if (stride1 == stride2 && ix1 == ix2)
                        {
                            //Best case, all are equal, just keep a single counter
                            for (long i = 0; i < totalOps; i++)
                            {
                                d2[ix1] = (System.UInt64)(Math.Asin(d1[ix1]));
                                ix1 += stride1;
                            }
                        }
                        else
                        {
                            for (long i = 0; i < totalOps; i++)
                            {
                                d2[ix2] = (System.UInt64)(Math.Asin(d1[ix1]));
                                ix1 += stride1;
                                ix2 += stride2;
                            }
                        }
                    }
                    else if (@out.Shape.Dimensions.Length == 2)
                    {
                        long opsOuter = @out.Shape.Dimensions[0].Length;
                        long opsInner = @out.Shape.Dimensions[1].Length;

                        long ix1 = in1.Shape.Offset;
                        long ix2 = @out.Shape.Offset;

                        long outerStride1 = in1.Shape.Dimensions[0].Stride;
                        long outerStride2 = @out.Shape.Dimensions[0].Stride;

                        long innerStride1 = in1.Shape.Dimensions[1].Stride;
                        long innerStride2 = @out.Shape.Dimensions[1].Stride;

                        outerStride1 -= innerStride1 * in1.Shape.Dimensions[1].Length;
                        outerStride2 -= innerStride2 * @out.Shape.Dimensions[1].Length;

                        for (long i = 0; i < opsOuter; i++)
                        {
                            for (long j = 0; j < opsInner; j++)
                            {
                                d2[ix2] = (System.UInt64)(Math.Asin(d1[ix1]));
                                ix1 += innerStride1;
                                ix2 += innerStride2;
                            }

                            ix1 += outerStride1;
                            ix2 += outerStride2;
                        }
                    }
                    else
                    {
                        long n = in1.Shape.Dimensions.LongLength - 3;
                        long[] limits = in1.Shape.Dimensions.Where(x => n-- > 0).Select(x => x.Length).ToArray();
                        long[] counters = new long[limits.LongLength];

                        long totalOps = limits.LongLength == 0 ? 1 : limits.Aggregate<long>((a, b) => a * b);

                        //This chunck of variables are used to prevent repeated calculations of offsets
                        long dimIndex0 = 0 + limits.LongLength;
                        long dimIndex1 = 1 + limits.LongLength;
                        long dimIndex2 = 2 + limits.LongLength;

                        long opsOuter = @out.Shape.Dimensions[0 + limits.LongLength].Length;
                        long opsInner = @out.Shape.Dimensions[1 + limits.LongLength].Length;
                        long opsInnerInner = @out.Shape.Dimensions[2 + limits.LongLength].Length;

                        long outerStride1 = in1.Shape.Dimensions[dimIndex0].Stride;
                        long outerStride3 = @out.Shape.Dimensions[dimIndex0].Stride;

                        long innerStride1 = in1.Shape.Dimensions[dimIndex1].Stride;
                        long innerStride3 = @out.Shape.Dimensions[dimIndex1].Stride;

                        long innerInnerStride1 = in1.Shape.Dimensions[dimIndex2].Stride;
                        long innerInnerStride3 = @out.Shape.Dimensions[dimIndex2].Stride;

                        outerStride1 -= innerStride1 * in1.Shape.Dimensions[dimIndex1].Length;
                        outerStride3 -= innerStride3 * @out.Shape.Dimensions[dimIndex1].Length;

                        innerStride1 -= innerInnerStride1 * in1.Shape.Dimensions[dimIndex2].Length;
                        innerStride3 -= innerInnerStride3 * @out.Shape.Dimensions[dimIndex2].Length;

                        for (long outer = 0; outer < totalOps; outer++)
                        {
                            //Get the array offset for the first element in the outer dimension
                            long ix1 = in1.Shape[counters];
                            long ix3 = @out.Shape[counters];


                            for (long i = 0; i < opsOuter; i++)
                            {
                                for (long j = 0; j < opsInner; j++)
                                {
                                    for (long k = 0; k < opsInnerInner; k++)
                                    {
                                        d2[ix3] = (System.UInt64)(Math.Asin(d1[ix1]));
                                        ix1 += innerInnerStride1;
                                        ix3 += innerInnerStride3;
                                    }

                                    ix1 += innerStride1;
                                    ix3 += innerStride3;
                                }

                                ix1 += outerStride1;
                                ix3 += outerStride3;
                            }

                            if (counters.LongLength > 0)
                            {
                                //Basically a ripple carry adder
                                long p = counters.LongLength - 1;
                                while (++counters[p] == limits[p] && p > 0)
                                {
                                    counters[p] = 0;
                                    p--;
                                }
                            }
                        }
                    }
                }
            }
        }

        /// <summary>
        /// Unsafe implementation of applying a unary operation
        /// </summary>
        /// <typeparam name="C">The type of operation to perform</typeparam>
        /// <param name="op">The operation instance</param>
        /// <param name="scalar">The input scalar argument</param>
        /// <param name="out">The output target</param>
        internal static void UFunc_Op_Inner_Unary_Scalar_Flush_UInt64_TypedImpl<C>(NumCIL.UInt64.Asin op, System.UInt64 scalar, NdArray<System.UInt64> @out)
            where C : IUnaryOp<System.UInt64>
        {
            unsafe
            {
                using (var f2 = new Pinner(@out.DataAccessor))
                {
                    var d2 = (System.UInt64*)f2.ptr;

                    if (@out.Shape.Dimensions.Length == 1)
                    {
                        long totalOps = @out.Shape.Dimensions[0].Length;
                        long ix2 = @out.Shape.Offset;
                        long stride2 = @out.Shape.Dimensions[0].Stride;

                        for (long i = 0; i < totalOps; i++)
                        {
                            d2[ix2] = (System.UInt64)(Math.Asin(scalar));
                            ix2 += stride2;
                        }
                    }
                    else if (@out.Shape.Dimensions.Length == 2)
                    {
                        long opsOuter = @out.Shape.Dimensions[0].Length;
                        long opsInner = @out.Shape.Dimensions[1].Length;

                        long ix2 = @out.Shape.Offset;
                        long outerStride2 = @out.Shape.Dimensions[0].Stride;
                        long innerStride2 = @out.Shape.Dimensions[1].Stride;
                        outerStride2 -= innerStride2 * @out.Shape.Dimensions[1].Length;

                        for (long i = 0; i < opsOuter; i++)
                        {
                            for (long j = 0; j < opsInner; j++)
                            {
                                d2[ix2] = (System.UInt64)(Math.Asin(scalar));
                                ix2 += innerStride2;
                            }

                            ix2 += outerStride2;
                        }
                    }
                    else
                    {
                        long n = @out.Shape.Dimensions.LongLength - 3;
                        long[] limits = @out.Shape.Dimensions.Where(x => n-- > 0).Select(x => x.Length).ToArray();
                        long[] counters = new long[limits.LongLength];

                        long totalOps = limits.LongLength == 0 ? 1 : limits.Aggregate<long>((a, b) => a * b);

                        //This chunck of variables are used to prevent repeated calculations of offsets
                        long dimIndex0 = 0 + limits.LongLength;
                        long dimIndex1 = 1 + limits.LongLength;
                        long dimIndex2 = 2 + limits.LongLength;

                        long opsOuter = @out.Shape.Dimensions[0 + limits.LongLength].Length;
                        long opsInner = @out.Shape.Dimensions[1 + limits.LongLength].Length;
                        long opsInnerInner = @out.Shape.Dimensions[2 + limits.LongLength].Length;

                        long outerStride3 = @out.Shape.Dimensions[dimIndex0].Stride;
                        long innerStride3 = @out.Shape.Dimensions[dimIndex1].Stride;
                        long innerInnerStride3 = @out.Shape.Dimensions[dimIndex2].Stride;
                        outerStride3 -= innerStride3 * @out.Shape.Dimensions[dimIndex1].Length;
                        innerStride3 -= innerInnerStride3 * @out.Shape.Dimensions[dimIndex2].Length;

                        for (long outer = 0; outer < totalOps; outer++)
                        {
                            //Get the array offset for the first element in the outer dimension
                            long ix3 = @out.Shape[counters];

                            for (long i = 0; i < opsOuter; i++)
                            {
                                for (long j = 0; j < opsInner; j++)
                                {
                                    for (long k = 0; k < opsInnerInner; k++)
                                    {
                                        d2[ix3] = (System.UInt64)(Math.Asin(scalar));
                                        ix3 += innerInnerStride3;
                                    }

                                    ix3 += innerStride3;
                                }

                                ix3 += outerStride3;
                            }

                            if (counters.LongLength > 0)
                            {
                                //Basically a ripple carry adder
                                long p = counters.LongLength - 1;
                                while (++counters[p] == limits[p] && p > 0)
                                {
                                    counters[p] = 0;
                                    p--;
                                }
                            }
                        }
                    }
                }
            }
        }
        /// <summary>
        /// Unsafe implementation of applying a unary operation
        /// </summary>
        /// <typeparam name="C">The type of operation to perform</typeparam>
        /// <param name="op">The operation instance</param>
        /// <param name="in1">The input argument</param>
        /// <param name="out">The output target</param>
        internal static void UFunc_Op_Inner_Unary_Flush_Single_TypedImpl<C>(NumCIL.Float.Asin op, NdArray<System.Single> in1, NdArray<System.Single> @out)
            where C : IUnaryOp<System.Single>
        {
            unsafe
            {
                using (var f1 = new Pinner(in1.DataAccessor))
                using (var f2 = new Pinner(@out.DataAccessor))
                {
                    var d1 = (System.Single*)f1.ptr;
                    var d2 = (System.Single*)f2.ptr;

                    if (@out.Shape.Dimensions.Length == 1)
                    {
                        long totalOps = @out.Shape.Dimensions[0].Length;

                        long ix1 = in1.Shape.Offset;
                        long ix2 = @out.Shape.Offset;

                        long stride1 = in1.Shape.Dimensions[0].Stride;
                        long stride2 = @out.Shape.Dimensions[0].Stride;


                        if (stride1 == stride2 && ix1 == ix2)
                        {
                            //Best case, all are equal, just keep a single counter
                            for (long i = 0; i < totalOps; i++)
                            {
                                d2[ix1] = (System.Single)(Math.Asin(d1[ix1]));
                                ix1 += stride1;
                            }
                        }
                        else
                        {
                            for (long i = 0; i < totalOps; i++)
                            {
                                d2[ix2] = (System.Single)(Math.Asin(d1[ix1]));
                                ix1 += stride1;
                                ix2 += stride2;
                            }
                        }
                    }
                    else if (@out.Shape.Dimensions.Length == 2)
                    {
                        long opsOuter = @out.Shape.Dimensions[0].Length;
                        long opsInner = @out.Shape.Dimensions[1].Length;

                        long ix1 = in1.Shape.Offset;
                        long ix2 = @out.Shape.Offset;

                        long outerStride1 = in1.Shape.Dimensions[0].Stride;
                        long outerStride2 = @out.Shape.Dimensions[0].Stride;

                        long innerStride1 = in1.Shape.Dimensions[1].Stride;
                        long innerStride2 = @out.Shape.Dimensions[1].Stride;

                        outerStride1 -= innerStride1 * in1.Shape.Dimensions[1].Length;
                        outerStride2 -= innerStride2 * @out.Shape.Dimensions[1].Length;

                        for (long i = 0; i < opsOuter; i++)
                        {
                            for (long j = 0; j < opsInner; j++)
                            {
                                d2[ix2] = (System.Single)(Math.Asin(d1[ix1]));
                                ix1 += innerStride1;
                                ix2 += innerStride2;
                            }

                            ix1 += outerStride1;
                            ix2 += outerStride2;
                        }
                    }
                    else
                    {
                        long n = in1.Shape.Dimensions.LongLength - 3;
                        long[] limits = in1.Shape.Dimensions.Where(x => n-- > 0).Select(x => x.Length).ToArray();
                        long[] counters = new long[limits.LongLength];

                        long totalOps = limits.LongLength == 0 ? 1 : limits.Aggregate<long>((a, b) => a * b);

                        //This chunck of variables are used to prevent repeated calculations of offsets
                        long dimIndex0 = 0 + limits.LongLength;
                        long dimIndex1 = 1 + limits.LongLength;
                        long dimIndex2 = 2 + limits.LongLength;

                        long opsOuter = @out.Shape.Dimensions[0 + limits.LongLength].Length;
                        long opsInner = @out.Shape.Dimensions[1 + limits.LongLength].Length;
                        long opsInnerInner = @out.Shape.Dimensions[2 + limits.LongLength].Length;

                        long outerStride1 = in1.Shape.Dimensions[dimIndex0].Stride;
                        long outerStride3 = @out.Shape.Dimensions[dimIndex0].Stride;

                        long innerStride1 = in1.Shape.Dimensions[dimIndex1].Stride;
                        long innerStride3 = @out.Shape.Dimensions[dimIndex1].Stride;

                        long innerInnerStride1 = in1.Shape.Dimensions[dimIndex2].Stride;
                        long innerInnerStride3 = @out.Shape.Dimensions[dimIndex2].Stride;

                        outerStride1 -= innerStride1 * in1.Shape.Dimensions[dimIndex1].Length;
                        outerStride3 -= innerStride3 * @out.Shape.Dimensions[dimIndex1].Length;

                        innerStride1 -= innerInnerStride1 * in1.Shape.Dimensions[dimIndex2].Length;
                        innerStride3 -= innerInnerStride3 * @out.Shape.Dimensions[dimIndex2].Length;

                        for (long outer = 0; outer < totalOps; outer++)
                        {
                            //Get the array offset for the first element in the outer dimension
                            long ix1 = in1.Shape[counters];
                            long ix3 = @out.Shape[counters];


                            for (long i = 0; i < opsOuter; i++)
                            {
                                for (long j = 0; j < opsInner; j++)
                                {
                                    for (long k = 0; k < opsInnerInner; k++)
                                    {
                                        d2[ix3] = (System.Single)(Math.Asin(d1[ix1]));
                                        ix1 += innerInnerStride1;
                                        ix3 += innerInnerStride3;
                                    }

                                    ix1 += innerStride1;
                                    ix3 += innerStride3;
                                }

                                ix1 += outerStride1;
                                ix3 += outerStride3;
                            }

                            if (counters.LongLength > 0)
                            {
                                //Basically a ripple carry adder
                                long p = counters.LongLength - 1;
                                while (++counters[p] == limits[p] && p > 0)
                                {
                                    counters[p] = 0;
                                    p--;
                                }
                            }
                        }
                    }
                }
            }
        }

        /// <summary>
        /// Unsafe implementation of applying a unary operation
        /// </summary>
        /// <typeparam name="C">The type of operation to perform</typeparam>
        /// <param name="op">The operation instance</param>
        /// <param name="scalar">The input scalar argument</param>
        /// <param name="out">The output target</param>
        internal static void UFunc_Op_Inner_Unary_Scalar_Flush_Single_TypedImpl<C>(NumCIL.Float.Asin op, System.Single scalar, NdArray<System.Single> @out)
            where C : IUnaryOp<System.Single>
        {
            unsafe
            {
                using (var f2 = new Pinner(@out.DataAccessor))
                {
                    var d2 = (System.Single*)f2.ptr;

                    if (@out.Shape.Dimensions.Length == 1)
                    {
                        long totalOps = @out.Shape.Dimensions[0].Length;
                        long ix2 = @out.Shape.Offset;
                        long stride2 = @out.Shape.Dimensions[0].Stride;

                        for (long i = 0; i < totalOps; i++)
                        {
                            d2[ix2] = (System.Single)(Math.Asin(scalar));
                            ix2 += stride2;
                        }
                    }
                    else if (@out.Shape.Dimensions.Length == 2)
                    {
                        long opsOuter = @out.Shape.Dimensions[0].Length;
                        long opsInner = @out.Shape.Dimensions[1].Length;

                        long ix2 = @out.Shape.Offset;
                        long outerStride2 = @out.Shape.Dimensions[0].Stride;
                        long innerStride2 = @out.Shape.Dimensions[1].Stride;
                        outerStride2 -= innerStride2 * @out.Shape.Dimensions[1].Length;

                        for (long i = 0; i < opsOuter; i++)
                        {
                            for (long j = 0; j < opsInner; j++)
                            {
                                d2[ix2] = (System.Single)(Math.Asin(scalar));
                                ix2 += innerStride2;
                            }

                            ix2 += outerStride2;
                        }
                    }
                    else
                    {
                        long n = @out.Shape.Dimensions.LongLength - 3;
                        long[] limits = @out.Shape.Dimensions.Where(x => n-- > 0).Select(x => x.Length).ToArray();
                        long[] counters = new long[limits.LongLength];

                        long totalOps = limits.LongLength == 0 ? 1 : limits.Aggregate<long>((a, b) => a * b);

                        //This chunck of variables are used to prevent repeated calculations of offsets
                        long dimIndex0 = 0 + limits.LongLength;
                        long dimIndex1 = 1 + limits.LongLength;
                        long dimIndex2 = 2 + limits.LongLength;

                        long opsOuter = @out.Shape.Dimensions[0 + limits.LongLength].Length;
                        long opsInner = @out.Shape.Dimensions[1 + limits.LongLength].Length;
                        long opsInnerInner = @out.Shape.Dimensions[2 + limits.LongLength].Length;

                        long outerStride3 = @out.Shape.Dimensions[dimIndex0].Stride;
                        long innerStride3 = @out.Shape.Dimensions[dimIndex1].Stride;
                        long innerInnerStride3 = @out.Shape.Dimensions[dimIndex2].Stride;
                        outerStride3 -= innerStride3 * @out.Shape.Dimensions[dimIndex1].Length;
                        innerStride3 -= innerInnerStride3 * @out.Shape.Dimensions[dimIndex2].Length;

                        for (long outer = 0; outer < totalOps; outer++)
                        {
                            //Get the array offset for the first element in the outer dimension
                            long ix3 = @out.Shape[counters];

                            for (long i = 0; i < opsOuter; i++)
                            {
                                for (long j = 0; j < opsInner; j++)
                                {
                                    for (long k = 0; k < opsInnerInner; k++)
                                    {
                                        d2[ix3] = (System.Single)(Math.Asin(scalar));
                                        ix3 += innerInnerStride3;
                                    }

                                    ix3 += innerStride3;
                                }

                                ix3 += outerStride3;
                            }

                            if (counters.LongLength > 0)
                            {
                                //Basically a ripple carry adder
                                long p = counters.LongLength - 1;
                                while (++counters[p] == limits[p] && p > 0)
                                {
                                    counters[p] = 0;
                                    p--;
                                }
                            }
                        }
                    }
                }
            }
        }
        /// <summary>
        /// Unsafe implementation of applying a unary operation
        /// </summary>
        /// <typeparam name="C">The type of operation to perform</typeparam>
        /// <param name="op">The operation instance</param>
        /// <param name="in1">The input argument</param>
        /// <param name="out">The output target</param>
        internal static void UFunc_Op_Inner_Unary_Flush_Double_TypedImpl<C>(NumCIL.Double.Asin op, NdArray<System.Double> in1, NdArray<System.Double> @out)
            where C : IUnaryOp<System.Double>
        {
            unsafe
            {
                using (var f1 = new Pinner(in1.DataAccessor))
                using (var f2 = new Pinner(@out.DataAccessor))
                {
                    var d1 = (System.Double*)f1.ptr;
                    var d2 = (System.Double*)f2.ptr;

                    if (@out.Shape.Dimensions.Length == 1)
                    {
                        long totalOps = @out.Shape.Dimensions[0].Length;

                        long ix1 = in1.Shape.Offset;
                        long ix2 = @out.Shape.Offset;

                        long stride1 = in1.Shape.Dimensions[0].Stride;
                        long stride2 = @out.Shape.Dimensions[0].Stride;


                        if (stride1 == stride2 && ix1 == ix2)
                        {
                            //Best case, all are equal, just keep a single counter
                            for (long i = 0; i < totalOps; i++)
                            {
                                d2[ix1] = (System.Double)(Math.Asin(d1[ix1]));
                                ix1 += stride1;
                            }
                        }
                        else
                        {
                            for (long i = 0; i < totalOps; i++)
                            {
                                d2[ix2] = (System.Double)(Math.Asin(d1[ix1]));
                                ix1 += stride1;
                                ix2 += stride2;
                            }
                        }
                    }
                    else if (@out.Shape.Dimensions.Length == 2)
                    {
                        long opsOuter = @out.Shape.Dimensions[0].Length;
                        long opsInner = @out.Shape.Dimensions[1].Length;

                        long ix1 = in1.Shape.Offset;
                        long ix2 = @out.Shape.Offset;

                        long outerStride1 = in1.Shape.Dimensions[0].Stride;
                        long outerStride2 = @out.Shape.Dimensions[0].Stride;

                        long innerStride1 = in1.Shape.Dimensions[1].Stride;
                        long innerStride2 = @out.Shape.Dimensions[1].Stride;

                        outerStride1 -= innerStride1 * in1.Shape.Dimensions[1].Length;
                        outerStride2 -= innerStride2 * @out.Shape.Dimensions[1].Length;

                        for (long i = 0; i < opsOuter; i++)
                        {
                            for (long j = 0; j < opsInner; j++)
                            {
                                d2[ix2] = (System.Double)(Math.Asin(d1[ix1]));
                                ix1 += innerStride1;
                                ix2 += innerStride2;
                            }

                            ix1 += outerStride1;
                            ix2 += outerStride2;
                        }
                    }
                    else
                    {
                        long n = in1.Shape.Dimensions.LongLength - 3;
                        long[] limits = in1.Shape.Dimensions.Where(x => n-- > 0).Select(x => x.Length).ToArray();
                        long[] counters = new long[limits.LongLength];

                        long totalOps = limits.LongLength == 0 ? 1 : limits.Aggregate<long>((a, b) => a * b);

                        //This chunck of variables are used to prevent repeated calculations of offsets
                        long dimIndex0 = 0 + limits.LongLength;
                        long dimIndex1 = 1 + limits.LongLength;
                        long dimIndex2 = 2 + limits.LongLength;

                        long opsOuter = @out.Shape.Dimensions[0 + limits.LongLength].Length;
                        long opsInner = @out.Shape.Dimensions[1 + limits.LongLength].Length;
                        long opsInnerInner = @out.Shape.Dimensions[2 + limits.LongLength].Length;

                        long outerStride1 = in1.Shape.Dimensions[dimIndex0].Stride;
                        long outerStride3 = @out.Shape.Dimensions[dimIndex0].Stride;

                        long innerStride1 = in1.Shape.Dimensions[dimIndex1].Stride;
                        long innerStride3 = @out.Shape.Dimensions[dimIndex1].Stride;

                        long innerInnerStride1 = in1.Shape.Dimensions[dimIndex2].Stride;
                        long innerInnerStride3 = @out.Shape.Dimensions[dimIndex2].Stride;

                        outerStride1 -= innerStride1 * in1.Shape.Dimensions[dimIndex1].Length;
                        outerStride3 -= innerStride3 * @out.Shape.Dimensions[dimIndex1].Length;

                        innerStride1 -= innerInnerStride1 * in1.Shape.Dimensions[dimIndex2].Length;
                        innerStride3 -= innerInnerStride3 * @out.Shape.Dimensions[dimIndex2].Length;

                        for (long outer = 0; outer < totalOps; outer++)
                        {
                            //Get the array offset for the first element in the outer dimension
                            long ix1 = in1.Shape[counters];
                            long ix3 = @out.Shape[counters];


                            for (long i = 0; i < opsOuter; i++)
                            {
                                for (long j = 0; j < opsInner; j++)
                                {
                                    for (long k = 0; k < opsInnerInner; k++)
                                    {
                                        d2[ix3] = (System.Double)(Math.Asin(d1[ix1]));
                                        ix1 += innerInnerStride1;
                                        ix3 += innerInnerStride3;
                                    }

                                    ix1 += innerStride1;
                                    ix3 += innerStride3;
                                }

                                ix1 += outerStride1;
                                ix3 += outerStride3;
                            }

                            if (counters.LongLength > 0)
                            {
                                //Basically a ripple carry adder
                                long p = counters.LongLength - 1;
                                while (++counters[p] == limits[p] && p > 0)
                                {
                                    counters[p] = 0;
                                    p--;
                                }
                            }
                        }
                    }
                }
            }
        }

        /// <summary>
        /// Unsafe implementation of applying a unary operation
        /// </summary>
        /// <typeparam name="C">The type of operation to perform</typeparam>
        /// <param name="op">The operation instance</param>
        /// <param name="scalar">The input scalar argument</param>
        /// <param name="out">The output target</param>
        internal static void UFunc_Op_Inner_Unary_Scalar_Flush_Double_TypedImpl<C>(NumCIL.Double.Asin op, System.Double scalar, NdArray<System.Double> @out)
            where C : IUnaryOp<System.Double>
        {
            unsafe
            {
                using (var f2 = new Pinner(@out.DataAccessor))
                {
                    var d2 = (System.Double*)f2.ptr;

                    if (@out.Shape.Dimensions.Length == 1)
                    {
                        long totalOps = @out.Shape.Dimensions[0].Length;
                        long ix2 = @out.Shape.Offset;
                        long stride2 = @out.Shape.Dimensions[0].Stride;

                        for (long i = 0; i < totalOps; i++)
                        {
                            d2[ix2] = (System.Double)(Math.Asin(scalar));
                            ix2 += stride2;
                        }
                    }
                    else if (@out.Shape.Dimensions.Length == 2)
                    {
                        long opsOuter = @out.Shape.Dimensions[0].Length;
                        long opsInner = @out.Shape.Dimensions[1].Length;

                        long ix2 = @out.Shape.Offset;
                        long outerStride2 = @out.Shape.Dimensions[0].Stride;
                        long innerStride2 = @out.Shape.Dimensions[1].Stride;
                        outerStride2 -= innerStride2 * @out.Shape.Dimensions[1].Length;

                        for (long i = 0; i < opsOuter; i++)
                        {
                            for (long j = 0; j < opsInner; j++)
                            {
                                d2[ix2] = (System.Double)(Math.Asin(scalar));
                                ix2 += innerStride2;
                            }

                            ix2 += outerStride2;
                        }
                    }
                    else
                    {
                        long n = @out.Shape.Dimensions.LongLength - 3;
                        long[] limits = @out.Shape.Dimensions.Where(x => n-- > 0).Select(x => x.Length).ToArray();
                        long[] counters = new long[limits.LongLength];

                        long totalOps = limits.LongLength == 0 ? 1 : limits.Aggregate<long>((a, b) => a * b);

                        //This chunck of variables are used to prevent repeated calculations of offsets
                        long dimIndex0 = 0 + limits.LongLength;
                        long dimIndex1 = 1 + limits.LongLength;
                        long dimIndex2 = 2 + limits.LongLength;

                        long opsOuter = @out.Shape.Dimensions[0 + limits.LongLength].Length;
                        long opsInner = @out.Shape.Dimensions[1 + limits.LongLength].Length;
                        long opsInnerInner = @out.Shape.Dimensions[2 + limits.LongLength].Length;

                        long outerStride3 = @out.Shape.Dimensions[dimIndex0].Stride;
                        long innerStride3 = @out.Shape.Dimensions[dimIndex1].Stride;
                        long innerInnerStride3 = @out.Shape.Dimensions[dimIndex2].Stride;
                        outerStride3 -= innerStride3 * @out.Shape.Dimensions[dimIndex1].Length;
                        innerStride3 -= innerInnerStride3 * @out.Shape.Dimensions[dimIndex2].Length;

                        for (long outer = 0; outer < totalOps; outer++)
                        {
                            //Get the array offset for the first element in the outer dimension
                            long ix3 = @out.Shape[counters];

                            for (long i = 0; i < opsOuter; i++)
                            {
                                for (long j = 0; j < opsInner; j++)
                                {
                                    for (long k = 0; k < opsInnerInner; k++)
                                    {
                                        d2[ix3] = (System.Double)(Math.Asin(scalar));
                                        ix3 += innerInnerStride3;
                                    }

                                    ix3 += innerStride3;
                                }

                                ix3 += outerStride3;
                            }

                            if (counters.LongLength > 0)
                            {
                                //Basically a ripple carry adder
                                long p = counters.LongLength - 1;
                                while (++counters[p] == limits[p] && p > 0)
                                {
                                    counters[p] = 0;
                                    p--;
                                }
                            }
                        }
                    }
                }
            }
        }
        /// <summary>
        /// Unsafe implementation of applying a unary operation
        /// </summary>
        /// <typeparam name="C">The type of operation to perform</typeparam>
        /// <param name="op">The operation instance</param>
        /// <param name="in1">The input argument</param>
        /// <param name="out">The output target</param>
        internal static void UFunc_Op_Inner_Unary_Flush_SByte_TypedImpl<C>(NumCIL.Int8.Acos op, NdArray<System.SByte> in1, NdArray<System.SByte> @out)
            where C : IUnaryOp<System.SByte>
        {
            unsafe
            {
                using (var f1 = new Pinner(in1.DataAccessor))
                using (var f2 = new Pinner(@out.DataAccessor))
                {
                    var d1 = (System.SByte*)f1.ptr;
                    var d2 = (System.SByte*)f2.ptr;

                    if (@out.Shape.Dimensions.Length == 1)
                    {
                        long totalOps = @out.Shape.Dimensions[0].Length;

                        long ix1 = in1.Shape.Offset;
                        long ix2 = @out.Shape.Offset;

                        long stride1 = in1.Shape.Dimensions[0].Stride;
                        long stride2 = @out.Shape.Dimensions[0].Stride;


                        if (stride1 == stride2 && ix1 == ix2)
                        {
                            //Best case, all are equal, just keep a single counter
                            for (long i = 0; i < totalOps; i++)
                            {
                                d2[ix1] = (System.SByte)(Math.Acos(d1[ix1]));
                                ix1 += stride1;
                            }
                        }
                        else
                        {
                            for (long i = 0; i < totalOps; i++)
                            {
                                d2[ix2] = (System.SByte)(Math.Acos(d1[ix1]));
                                ix1 += stride1;
                                ix2 += stride2;
                            }
                        }
                    }
                    else if (@out.Shape.Dimensions.Length == 2)
                    {
                        long opsOuter = @out.Shape.Dimensions[0].Length;
                        long opsInner = @out.Shape.Dimensions[1].Length;

                        long ix1 = in1.Shape.Offset;
                        long ix2 = @out.Shape.Offset;

                        long outerStride1 = in1.Shape.Dimensions[0].Stride;
                        long outerStride2 = @out.Shape.Dimensions[0].Stride;

                        long innerStride1 = in1.Shape.Dimensions[1].Stride;
                        long innerStride2 = @out.Shape.Dimensions[1].Stride;

                        outerStride1 -= innerStride1 * in1.Shape.Dimensions[1].Length;
                        outerStride2 -= innerStride2 * @out.Shape.Dimensions[1].Length;

                        for (long i = 0; i < opsOuter; i++)
                        {
                            for (long j = 0; j < opsInner; j++)
                            {
                                d2[ix2] = (System.SByte)(Math.Acos(d1[ix1]));
                                ix1 += innerStride1;
                                ix2 += innerStride2;
                            }

                            ix1 += outerStride1;
                            ix2 += outerStride2;
                        }
                    }
                    else
                    {
                        long n = in1.Shape.Dimensions.LongLength - 3;
                        long[] limits = in1.Shape.Dimensions.Where(x => n-- > 0).Select(x => x.Length).ToArray();
                        long[] counters = new long[limits.LongLength];

                        long totalOps = limits.LongLength == 0 ? 1 : limits.Aggregate<long>((a, b) => a * b);

                        //This chunck of variables are used to prevent repeated calculations of offsets
                        long dimIndex0 = 0 + limits.LongLength;
                        long dimIndex1 = 1 + limits.LongLength;
                        long dimIndex2 = 2 + limits.LongLength;

                        long opsOuter = @out.Shape.Dimensions[0 + limits.LongLength].Length;
                        long opsInner = @out.Shape.Dimensions[1 + limits.LongLength].Length;
                        long opsInnerInner = @out.Shape.Dimensions[2 + limits.LongLength].Length;

                        long outerStride1 = in1.Shape.Dimensions[dimIndex0].Stride;
                        long outerStride3 = @out.Shape.Dimensions[dimIndex0].Stride;

                        long innerStride1 = in1.Shape.Dimensions[dimIndex1].Stride;
                        long innerStride3 = @out.Shape.Dimensions[dimIndex1].Stride;

                        long innerInnerStride1 = in1.Shape.Dimensions[dimIndex2].Stride;
                        long innerInnerStride3 = @out.Shape.Dimensions[dimIndex2].Stride;

                        outerStride1 -= innerStride1 * in1.Shape.Dimensions[dimIndex1].Length;
                        outerStride3 -= innerStride3 * @out.Shape.Dimensions[dimIndex1].Length;

                        innerStride1 -= innerInnerStride1 * in1.Shape.Dimensions[dimIndex2].Length;
                        innerStride3 -= innerInnerStride3 * @out.Shape.Dimensions[dimIndex2].Length;

                        for (long outer = 0; outer < totalOps; outer++)
                        {
                            //Get the array offset for the first element in the outer dimension
                            long ix1 = in1.Shape[counters];
                            long ix3 = @out.Shape[counters];


                            for (long i = 0; i < opsOuter; i++)
                            {
                                for (long j = 0; j < opsInner; j++)
                                {
                                    for (long k = 0; k < opsInnerInner; k++)
                                    {
                                        d2[ix3] = (System.SByte)(Math.Acos(d1[ix1]));
                                        ix1 += innerInnerStride1;
                                        ix3 += innerInnerStride3;
                                    }

                                    ix1 += innerStride1;
                                    ix3 += innerStride3;
                                }

                                ix1 += outerStride1;
                                ix3 += outerStride3;
                            }

                            if (counters.LongLength > 0)
                            {
                                //Basically a ripple carry adder
                                long p = counters.LongLength - 1;
                                while (++counters[p] == limits[p] && p > 0)
                                {
                                    counters[p] = 0;
                                    p--;
                                }
                            }
                        }
                    }
                }
            }
        }

        /// <summary>
        /// Unsafe implementation of applying a unary operation
        /// </summary>
        /// <typeparam name="C">The type of operation to perform</typeparam>
        /// <param name="op">The operation instance</param>
        /// <param name="scalar">The input scalar argument</param>
        /// <param name="out">The output target</param>
        internal static void UFunc_Op_Inner_Unary_Scalar_Flush_SByte_TypedImpl<C>(NumCIL.Int8.Acos op, System.SByte scalar, NdArray<System.SByte> @out)
            where C : IUnaryOp<System.SByte>
        {
            unsafe
            {
                using (var f2 = new Pinner(@out.DataAccessor))
                {
                    var d2 = (System.SByte*)f2.ptr;

                    if (@out.Shape.Dimensions.Length == 1)
                    {
                        long totalOps = @out.Shape.Dimensions[0].Length;
                        long ix2 = @out.Shape.Offset;
                        long stride2 = @out.Shape.Dimensions[0].Stride;

                        for (long i = 0; i < totalOps; i++)
                        {
                            d2[ix2] = (System.SByte)(Math.Acos(scalar));
                            ix2 += stride2;
                        }
                    }
                    else if (@out.Shape.Dimensions.Length == 2)
                    {
                        long opsOuter = @out.Shape.Dimensions[0].Length;
                        long opsInner = @out.Shape.Dimensions[1].Length;

                        long ix2 = @out.Shape.Offset;
                        long outerStride2 = @out.Shape.Dimensions[0].Stride;
                        long innerStride2 = @out.Shape.Dimensions[1].Stride;
                        outerStride2 -= innerStride2 * @out.Shape.Dimensions[1].Length;

                        for (long i = 0; i < opsOuter; i++)
                        {
                            for (long j = 0; j < opsInner; j++)
                            {
                                d2[ix2] = (System.SByte)(Math.Acos(scalar));
                                ix2 += innerStride2;
                            }

                            ix2 += outerStride2;
                        }
                    }
                    else
                    {
                        long n = @out.Shape.Dimensions.LongLength - 3;
                        long[] limits = @out.Shape.Dimensions.Where(x => n-- > 0).Select(x => x.Length).ToArray();
                        long[] counters = new long[limits.LongLength];

                        long totalOps = limits.LongLength == 0 ? 1 : limits.Aggregate<long>((a, b) => a * b);

                        //This chunck of variables are used to prevent repeated calculations of offsets
                        long dimIndex0 = 0 + limits.LongLength;
                        long dimIndex1 = 1 + limits.LongLength;
                        long dimIndex2 = 2 + limits.LongLength;

                        long opsOuter = @out.Shape.Dimensions[0 + limits.LongLength].Length;
                        long opsInner = @out.Shape.Dimensions[1 + limits.LongLength].Length;
                        long opsInnerInner = @out.Shape.Dimensions[2 + limits.LongLength].Length;

                        long outerStride3 = @out.Shape.Dimensions[dimIndex0].Stride;
                        long innerStride3 = @out.Shape.Dimensions[dimIndex1].Stride;
                        long innerInnerStride3 = @out.Shape.Dimensions[dimIndex2].Stride;
                        outerStride3 -= innerStride3 * @out.Shape.Dimensions[dimIndex1].Length;
                        innerStride3 -= innerInnerStride3 * @out.Shape.Dimensions[dimIndex2].Length;

                        for (long outer = 0; outer < totalOps; outer++)
                        {
                            //Get the array offset for the first element in the outer dimension
                            long ix3 = @out.Shape[counters];

                            for (long i = 0; i < opsOuter; i++)
                            {
                                for (long j = 0; j < opsInner; j++)
                                {
                                    for (long k = 0; k < opsInnerInner; k++)
                                    {
                                        d2[ix3] = (System.SByte)(Math.Acos(scalar));
                                        ix3 += innerInnerStride3;
                                    }

                                    ix3 += innerStride3;
                                }

                                ix3 += outerStride3;
                            }

                            if (counters.LongLength > 0)
                            {
                                //Basically a ripple carry adder
                                long p = counters.LongLength - 1;
                                while (++counters[p] == limits[p] && p > 0)
                                {
                                    counters[p] = 0;
                                    p--;
                                }
                            }
                        }
                    }
                }
            }
        }
        /// <summary>
        /// Unsafe implementation of applying a unary operation
        /// </summary>
        /// <typeparam name="C">The type of operation to perform</typeparam>
        /// <param name="op">The operation instance</param>
        /// <param name="in1">The input argument</param>
        /// <param name="out">The output target</param>
        internal static void UFunc_Op_Inner_Unary_Flush_Byte_TypedImpl<C>(NumCIL.UInt8.Acos op, NdArray<System.Byte> in1, NdArray<System.Byte> @out)
            where C : IUnaryOp<System.Byte>
        {
            unsafe
            {
                using (var f1 = new Pinner(in1.DataAccessor))
                using (var f2 = new Pinner(@out.DataAccessor))
                {
                    var d1 = (System.Byte*)f1.ptr;
                    var d2 = (System.Byte*)f2.ptr;

                    if (@out.Shape.Dimensions.Length == 1)
                    {
                        long totalOps = @out.Shape.Dimensions[0].Length;

                        long ix1 = in1.Shape.Offset;
                        long ix2 = @out.Shape.Offset;

                        long stride1 = in1.Shape.Dimensions[0].Stride;
                        long stride2 = @out.Shape.Dimensions[0].Stride;


                        if (stride1 == stride2 && ix1 == ix2)
                        {
                            //Best case, all are equal, just keep a single counter
                            for (long i = 0; i < totalOps; i++)
                            {
                                d2[ix1] = (System.Byte)(Math.Acos(d1[ix1]));
                                ix1 += stride1;
                            }
                        }
                        else
                        {
                            for (long i = 0; i < totalOps; i++)
                            {
                                d2[ix2] = (System.Byte)(Math.Acos(d1[ix1]));
                                ix1 += stride1;
                                ix2 += stride2;
                            }
                        }
                    }
                    else if (@out.Shape.Dimensions.Length == 2)
                    {
                        long opsOuter = @out.Shape.Dimensions[0].Length;
                        long opsInner = @out.Shape.Dimensions[1].Length;

                        long ix1 = in1.Shape.Offset;
                        long ix2 = @out.Shape.Offset;

                        long outerStride1 = in1.Shape.Dimensions[0].Stride;
                        long outerStride2 = @out.Shape.Dimensions[0].Stride;

                        long innerStride1 = in1.Shape.Dimensions[1].Stride;
                        long innerStride2 = @out.Shape.Dimensions[1].Stride;

                        outerStride1 -= innerStride1 * in1.Shape.Dimensions[1].Length;
                        outerStride2 -= innerStride2 * @out.Shape.Dimensions[1].Length;

                        for (long i = 0; i < opsOuter; i++)
                        {
                            for (long j = 0; j < opsInner; j++)
                            {
                                d2[ix2] = (System.Byte)(Math.Acos(d1[ix1]));
                                ix1 += innerStride1;
                                ix2 += innerStride2;
                            }

                            ix1 += outerStride1;
                            ix2 += outerStride2;
                        }
                    }
                    else
                    {
                        long n = in1.Shape.Dimensions.LongLength - 3;
                        long[] limits = in1.Shape.Dimensions.Where(x => n-- > 0).Select(x => x.Length).ToArray();
                        long[] counters = new long[limits.LongLength];

                        long totalOps = limits.LongLength == 0 ? 1 : limits.Aggregate<long>((a, b) => a * b);

                        //This chunck of variables are used to prevent repeated calculations of offsets
                        long dimIndex0 = 0 + limits.LongLength;
                        long dimIndex1 = 1 + limits.LongLength;
                        long dimIndex2 = 2 + limits.LongLength;

                        long opsOuter = @out.Shape.Dimensions[0 + limits.LongLength].Length;
                        long opsInner = @out.Shape.Dimensions[1 + limits.LongLength].Length;
                        long opsInnerInner = @out.Shape.Dimensions[2 + limits.LongLength].Length;

                        long outerStride1 = in1.Shape.Dimensions[dimIndex0].Stride;
                        long outerStride3 = @out.Shape.Dimensions[dimIndex0].Stride;

                        long innerStride1 = in1.Shape.Dimensions[dimIndex1].Stride;
                        long innerStride3 = @out.Shape.Dimensions[dimIndex1].Stride;

                        long innerInnerStride1 = in1.Shape.Dimensions[dimIndex2].Stride;
                        long innerInnerStride3 = @out.Shape.Dimensions[dimIndex2].Stride;

                        outerStride1 -= innerStride1 * in1.Shape.Dimensions[dimIndex1].Length;
                        outerStride3 -= innerStride3 * @out.Shape.Dimensions[dimIndex1].Length;

                        innerStride1 -= innerInnerStride1 * in1.Shape.Dimensions[dimIndex2].Length;
                        innerStride3 -= innerInnerStride3 * @out.Shape.Dimensions[dimIndex2].Length;

                        for (long outer = 0; outer < totalOps; outer++)
                        {
                            //Get the array offset for the first element in the outer dimension
                            long ix1 = in1.Shape[counters];
                            long ix3 = @out.Shape[counters];


                            for (long i = 0; i < opsOuter; i++)
                            {
                                for (long j = 0; j < opsInner; j++)
                                {
                                    for (long k = 0; k < opsInnerInner; k++)
                                    {
                                        d2[ix3] = (System.Byte)(Math.Acos(d1[ix1]));
                                        ix1 += innerInnerStride1;
                                        ix3 += innerInnerStride3;
                                    }

                                    ix1 += innerStride1;
                                    ix3 += innerStride3;
                                }

                                ix1 += outerStride1;
                                ix3 += outerStride3;
                            }

                            if (counters.LongLength > 0)
                            {
                                //Basically a ripple carry adder
                                long p = counters.LongLength - 1;
                                while (++counters[p] == limits[p] && p > 0)
                                {
                                    counters[p] = 0;
                                    p--;
                                }
                            }
                        }
                    }
                }
            }
        }

        /// <summary>
        /// Unsafe implementation of applying a unary operation
        /// </summary>
        /// <typeparam name="C">The type of operation to perform</typeparam>
        /// <param name="op">The operation instance</param>
        /// <param name="scalar">The input scalar argument</param>
        /// <param name="out">The output target</param>
        internal static void UFunc_Op_Inner_Unary_Scalar_Flush_Byte_TypedImpl<C>(NumCIL.UInt8.Acos op, System.Byte scalar, NdArray<System.Byte> @out)
            where C : IUnaryOp<System.Byte>
        {
            unsafe
            {
                using (var f2 = new Pinner(@out.DataAccessor))
                {
                    var d2 = (System.Byte*)f2.ptr;

                    if (@out.Shape.Dimensions.Length == 1)
                    {
                        long totalOps = @out.Shape.Dimensions[0].Length;
                        long ix2 = @out.Shape.Offset;
                        long stride2 = @out.Shape.Dimensions[0].Stride;

                        for (long i = 0; i < totalOps; i++)
                        {
                            d2[ix2] = (System.Byte)(Math.Acos(scalar));
                            ix2 += stride2;
                        }
                    }
                    else if (@out.Shape.Dimensions.Length == 2)
                    {
                        long opsOuter = @out.Shape.Dimensions[0].Length;
                        long opsInner = @out.Shape.Dimensions[1].Length;

                        long ix2 = @out.Shape.Offset;
                        long outerStride2 = @out.Shape.Dimensions[0].Stride;
                        long innerStride2 = @out.Shape.Dimensions[1].Stride;
                        outerStride2 -= innerStride2 * @out.Shape.Dimensions[1].Length;

                        for (long i = 0; i < opsOuter; i++)
                        {
                            for (long j = 0; j < opsInner; j++)
                            {
                                d2[ix2] = (System.Byte)(Math.Acos(scalar));
                                ix2 += innerStride2;
                            }

                            ix2 += outerStride2;
                        }
                    }
                    else
                    {
                        long n = @out.Shape.Dimensions.LongLength - 3;
                        long[] limits = @out.Shape.Dimensions.Where(x => n-- > 0).Select(x => x.Length).ToArray();
                        long[] counters = new long[limits.LongLength];

                        long totalOps = limits.LongLength == 0 ? 1 : limits.Aggregate<long>((a, b) => a * b);

                        //This chunck of variables are used to prevent repeated calculations of offsets
                        long dimIndex0 = 0 + limits.LongLength;
                        long dimIndex1 = 1 + limits.LongLength;
                        long dimIndex2 = 2 + limits.LongLength;

                        long opsOuter = @out.Shape.Dimensions[0 + limits.LongLength].Length;
                        long opsInner = @out.Shape.Dimensions[1 + limits.LongLength].Length;
                        long opsInnerInner = @out.Shape.Dimensions[2 + limits.LongLength].Length;

                        long outerStride3 = @out.Shape.Dimensions[dimIndex0].Stride;
                        long innerStride3 = @out.Shape.Dimensions[dimIndex1].Stride;
                        long innerInnerStride3 = @out.Shape.Dimensions[dimIndex2].Stride;
                        outerStride3 -= innerStride3 * @out.Shape.Dimensions[dimIndex1].Length;
                        innerStride3 -= innerInnerStride3 * @out.Shape.Dimensions[dimIndex2].Length;

                        for (long outer = 0; outer < totalOps; outer++)
                        {
                            //Get the array offset for the first element in the outer dimension
                            long ix3 = @out.Shape[counters];

                            for (long i = 0; i < opsOuter; i++)
                            {
                                for (long j = 0; j < opsInner; j++)
                                {
                                    for (long k = 0; k < opsInnerInner; k++)
                                    {
                                        d2[ix3] = (System.Byte)(Math.Acos(scalar));
                                        ix3 += innerInnerStride3;
                                    }

                                    ix3 += innerStride3;
                                }

                                ix3 += outerStride3;
                            }

                            if (counters.LongLength > 0)
                            {
                                //Basically a ripple carry adder
                                long p = counters.LongLength - 1;
                                while (++counters[p] == limits[p] && p > 0)
                                {
                                    counters[p] = 0;
                                    p--;
                                }
                            }
                        }
                    }
                }
            }
        }
        /// <summary>
        /// Unsafe implementation of applying a unary operation
        /// </summary>
        /// <typeparam name="C">The type of operation to perform</typeparam>
        /// <param name="op">The operation instance</param>
        /// <param name="in1">The input argument</param>
        /// <param name="out">The output target</param>
        internal static void UFunc_Op_Inner_Unary_Flush_Int16_TypedImpl<C>(NumCIL.Int16.Acos op, NdArray<System.Int16> in1, NdArray<System.Int16> @out)
            where C : IUnaryOp<System.Int16>
        {
            unsafe
            {
                using (var f1 = new Pinner(in1.DataAccessor))
                using (var f2 = new Pinner(@out.DataAccessor))
                {
                    var d1 = (System.Int16*)f1.ptr;
                    var d2 = (System.Int16*)f2.ptr;

                    if (@out.Shape.Dimensions.Length == 1)
                    {
                        long totalOps = @out.Shape.Dimensions[0].Length;

                        long ix1 = in1.Shape.Offset;
                        long ix2 = @out.Shape.Offset;

                        long stride1 = in1.Shape.Dimensions[0].Stride;
                        long stride2 = @out.Shape.Dimensions[0].Stride;


                        if (stride1 == stride2 && ix1 == ix2)
                        {
                            //Best case, all are equal, just keep a single counter
                            for (long i = 0; i < totalOps; i++)
                            {
                                d2[ix1] = (System.Int16)(Math.Acos(d1[ix1]));
                                ix1 += stride1;
                            }
                        }
                        else
                        {
                            for (long i = 0; i < totalOps; i++)
                            {
                                d2[ix2] = (System.Int16)(Math.Acos(d1[ix1]));
                                ix1 += stride1;
                                ix2 += stride2;
                            }
                        }
                    }
                    else if (@out.Shape.Dimensions.Length == 2)
                    {
                        long opsOuter = @out.Shape.Dimensions[0].Length;
                        long opsInner = @out.Shape.Dimensions[1].Length;

                        long ix1 = in1.Shape.Offset;
                        long ix2 = @out.Shape.Offset;

                        long outerStride1 = in1.Shape.Dimensions[0].Stride;
                        long outerStride2 = @out.Shape.Dimensions[0].Stride;

                        long innerStride1 = in1.Shape.Dimensions[1].Stride;
                        long innerStride2 = @out.Shape.Dimensions[1].Stride;

                        outerStride1 -= innerStride1 * in1.Shape.Dimensions[1].Length;
                        outerStride2 -= innerStride2 * @out.Shape.Dimensions[1].Length;

                        for (long i = 0; i < opsOuter; i++)
                        {
                            for (long j = 0; j < opsInner; j++)
                            {
                                d2[ix2] = (System.Int16)(Math.Acos(d1[ix1]));
                                ix1 += innerStride1;
                                ix2 += innerStride2;
                            }

                            ix1 += outerStride1;
                            ix2 += outerStride2;
                        }
                    }
                    else
                    {
                        long n = in1.Shape.Dimensions.LongLength - 3;
                        long[] limits = in1.Shape.Dimensions.Where(x => n-- > 0).Select(x => x.Length).ToArray();
                        long[] counters = new long[limits.LongLength];

                        long totalOps = limits.LongLength == 0 ? 1 : limits.Aggregate<long>((a, b) => a * b);

                        //This chunck of variables are used to prevent repeated calculations of offsets
                        long dimIndex0 = 0 + limits.LongLength;
                        long dimIndex1 = 1 + limits.LongLength;
                        long dimIndex2 = 2 + limits.LongLength;

                        long opsOuter = @out.Shape.Dimensions[0 + limits.LongLength].Length;
                        long opsInner = @out.Shape.Dimensions[1 + limits.LongLength].Length;
                        long opsInnerInner = @out.Shape.Dimensions[2 + limits.LongLength].Length;

                        long outerStride1 = in1.Shape.Dimensions[dimIndex0].Stride;
                        long outerStride3 = @out.Shape.Dimensions[dimIndex0].Stride;

                        long innerStride1 = in1.Shape.Dimensions[dimIndex1].Stride;
                        long innerStride3 = @out.Shape.Dimensions[dimIndex1].Stride;

                        long innerInnerStride1 = in1.Shape.Dimensions[dimIndex2].Stride;
                        long innerInnerStride3 = @out.Shape.Dimensions[dimIndex2].Stride;

                        outerStride1 -= innerStride1 * in1.Shape.Dimensions[dimIndex1].Length;
                        outerStride3 -= innerStride3 * @out.Shape.Dimensions[dimIndex1].Length;

                        innerStride1 -= innerInnerStride1 * in1.Shape.Dimensions[dimIndex2].Length;
                        innerStride3 -= innerInnerStride3 * @out.Shape.Dimensions[dimIndex2].Length;

                        for (long outer = 0; outer < totalOps; outer++)
                        {
                            //Get the array offset for the first element in the outer dimension
                            long ix1 = in1.Shape[counters];
                            long ix3 = @out.Shape[counters];


                            for (long i = 0; i < opsOuter; i++)
                            {
                                for (long j = 0; j < opsInner; j++)
                                {
                                    for (long k = 0; k < opsInnerInner; k++)
                                    {
                                        d2[ix3] = (System.Int16)(Math.Acos(d1[ix1]));
                                        ix1 += innerInnerStride1;
                                        ix3 += innerInnerStride3;
                                    }

                                    ix1 += innerStride1;
                                    ix3 += innerStride3;
                                }

                                ix1 += outerStride1;
                                ix3 += outerStride3;
                            }

                            if (counters.LongLength > 0)
                            {
                                //Basically a ripple carry adder
                                long p = counters.LongLength - 1;
                                while (++counters[p] == limits[p] && p > 0)
                                {
                                    counters[p] = 0;
                                    p--;
                                }
                            }
                        }
                    }
                }
            }
        }

        /// <summary>
        /// Unsafe implementation of applying a unary operation
        /// </summary>
        /// <typeparam name="C">The type of operation to perform</typeparam>
        /// <param name="op">The operation instance</param>
        /// <param name="scalar">The input scalar argument</param>
        /// <param name="out">The output target</param>
        internal static void UFunc_Op_Inner_Unary_Scalar_Flush_Int16_TypedImpl<C>(NumCIL.Int16.Acos op, System.Int16 scalar, NdArray<System.Int16> @out)
            where C : IUnaryOp<System.Int16>
        {
            unsafe
            {
                using (var f2 = new Pinner(@out.DataAccessor))
                {
                    var d2 = (System.Int16*)f2.ptr;

                    if (@out.Shape.Dimensions.Length == 1)
                    {
                        long totalOps = @out.Shape.Dimensions[0].Length;
                        long ix2 = @out.Shape.Offset;
                        long stride2 = @out.Shape.Dimensions[0].Stride;

                        for (long i = 0; i < totalOps; i++)
                        {
                            d2[ix2] = (System.Int16)(Math.Acos(scalar));
                            ix2 += stride2;
                        }
                    }
                    else if (@out.Shape.Dimensions.Length == 2)
                    {
                        long opsOuter = @out.Shape.Dimensions[0].Length;
                        long opsInner = @out.Shape.Dimensions[1].Length;

                        long ix2 = @out.Shape.Offset;
                        long outerStride2 = @out.Shape.Dimensions[0].Stride;
                        long innerStride2 = @out.Shape.Dimensions[1].Stride;
                        outerStride2 -= innerStride2 * @out.Shape.Dimensions[1].Length;

                        for (long i = 0; i < opsOuter; i++)
                        {
                            for (long j = 0; j < opsInner; j++)
                            {
                                d2[ix2] = (System.Int16)(Math.Acos(scalar));
                                ix2 += innerStride2;
                            }

                            ix2 += outerStride2;
                        }
                    }
                    else
                    {
                        long n = @out.Shape.Dimensions.LongLength - 3;
                        long[] limits = @out.Shape.Dimensions.Where(x => n-- > 0).Select(x => x.Length).ToArray();
                        long[] counters = new long[limits.LongLength];

                        long totalOps = limits.LongLength == 0 ? 1 : limits.Aggregate<long>((a, b) => a * b);

                        //This chunck of variables are used to prevent repeated calculations of offsets
                        long dimIndex0 = 0 + limits.LongLength;
                        long dimIndex1 = 1 + limits.LongLength;
                        long dimIndex2 = 2 + limits.LongLength;

                        long opsOuter = @out.Shape.Dimensions[0 + limits.LongLength].Length;
                        long opsInner = @out.Shape.Dimensions[1 + limits.LongLength].Length;
                        long opsInnerInner = @out.Shape.Dimensions[2 + limits.LongLength].Length;

                        long outerStride3 = @out.Shape.Dimensions[dimIndex0].Stride;
                        long innerStride3 = @out.Shape.Dimensions[dimIndex1].Stride;
                        long innerInnerStride3 = @out.Shape.Dimensions[dimIndex2].Stride;
                        outerStride3 -= innerStride3 * @out.Shape.Dimensions[dimIndex1].Length;
                        innerStride3 -= innerInnerStride3 * @out.Shape.Dimensions[dimIndex2].Length;

                        for (long outer = 0; outer < totalOps; outer++)
                        {
                            //Get the array offset for the first element in the outer dimension
                            long ix3 = @out.Shape[counters];

                            for (long i = 0; i < opsOuter; i++)
                            {
                                for (long j = 0; j < opsInner; j++)
                                {
                                    for (long k = 0; k < opsInnerInner; k++)
                                    {
                                        d2[ix3] = (System.Int16)(Math.Acos(scalar));
                                        ix3 += innerInnerStride3;
                                    }

                                    ix3 += innerStride3;
                                }

                                ix3 += outerStride3;
                            }

                            if (counters.LongLength > 0)
                            {
                                //Basically a ripple carry adder
                                long p = counters.LongLength - 1;
                                while (++counters[p] == limits[p] && p > 0)
                                {
                                    counters[p] = 0;
                                    p--;
                                }
                            }
                        }
                    }
                }
            }
        }
        /// <summary>
        /// Unsafe implementation of applying a unary operation
        /// </summary>
        /// <typeparam name="C">The type of operation to perform</typeparam>
        /// <param name="op">The operation instance</param>
        /// <param name="in1">The input argument</param>
        /// <param name="out">The output target</param>
        internal static void UFunc_Op_Inner_Unary_Flush_UInt16_TypedImpl<C>(NumCIL.UInt16.Acos op, NdArray<System.UInt16> in1, NdArray<System.UInt16> @out)
            where C : IUnaryOp<System.UInt16>
        {
            unsafe
            {
                using (var f1 = new Pinner(in1.DataAccessor))
                using (var f2 = new Pinner(@out.DataAccessor))
                {
                    var d1 = (System.UInt16*)f1.ptr;
                    var d2 = (System.UInt16*)f2.ptr;

                    if (@out.Shape.Dimensions.Length == 1)
                    {
                        long totalOps = @out.Shape.Dimensions[0].Length;

                        long ix1 = in1.Shape.Offset;
                        long ix2 = @out.Shape.Offset;

                        long stride1 = in1.Shape.Dimensions[0].Stride;
                        long stride2 = @out.Shape.Dimensions[0].Stride;


                        if (stride1 == stride2 && ix1 == ix2)
                        {
                            //Best case, all are equal, just keep a single counter
                            for (long i = 0; i < totalOps; i++)
                            {
                                d2[ix1] = (System.UInt16)(Math.Acos(d1[ix1]));
                                ix1 += stride1;
                            }
                        }
                        else
                        {
                            for (long i = 0; i < totalOps; i++)
                            {
                                d2[ix2] = (System.UInt16)(Math.Acos(d1[ix1]));
                                ix1 += stride1;
                                ix2 += stride2;
                            }
                        }
                    }
                    else if (@out.Shape.Dimensions.Length == 2)
                    {
                        long opsOuter = @out.Shape.Dimensions[0].Length;
                        long opsInner = @out.Shape.Dimensions[1].Length;

                        long ix1 = in1.Shape.Offset;
                        long ix2 = @out.Shape.Offset;

                        long outerStride1 = in1.Shape.Dimensions[0].Stride;
                        long outerStride2 = @out.Shape.Dimensions[0].Stride;

                        long innerStride1 = in1.Shape.Dimensions[1].Stride;
                        long innerStride2 = @out.Shape.Dimensions[1].Stride;

                        outerStride1 -= innerStride1 * in1.Shape.Dimensions[1].Length;
                        outerStride2 -= innerStride2 * @out.Shape.Dimensions[1].Length;

                        for (long i = 0; i < opsOuter; i++)
                        {
                            for (long j = 0; j < opsInner; j++)
                            {
                                d2[ix2] = (System.UInt16)(Math.Acos(d1[ix1]));
                                ix1 += innerStride1;
                                ix2 += innerStride2;
                            }

                            ix1 += outerStride1;
                            ix2 += outerStride2;
                        }
                    }
                    else
                    {
                        long n = in1.Shape.Dimensions.LongLength - 3;
                        long[] limits = in1.Shape.Dimensions.Where(x => n-- > 0).Select(x => x.Length).ToArray();
                        long[] counters = new long[limits.LongLength];

                        long totalOps = limits.LongLength == 0 ? 1 : limits.Aggregate<long>((a, b) => a * b);

                        //This chunck of variables are used to prevent repeated calculations of offsets
                        long dimIndex0 = 0 + limits.LongLength;
                        long dimIndex1 = 1 + limits.LongLength;
                        long dimIndex2 = 2 + limits.LongLength;

                        long opsOuter = @out.Shape.Dimensions[0 + limits.LongLength].Length;
                        long opsInner = @out.Shape.Dimensions[1 + limits.LongLength].Length;
                        long opsInnerInner = @out.Shape.Dimensions[2 + limits.LongLength].Length;

                        long outerStride1 = in1.Shape.Dimensions[dimIndex0].Stride;
                        long outerStride3 = @out.Shape.Dimensions[dimIndex0].Stride;

                        long innerStride1 = in1.Shape.Dimensions[dimIndex1].Stride;
                        long innerStride3 = @out.Shape.Dimensions[dimIndex1].Stride;

                        long innerInnerStride1 = in1.Shape.Dimensions[dimIndex2].Stride;
                        long innerInnerStride3 = @out.Shape.Dimensions[dimIndex2].Stride;

                        outerStride1 -= innerStride1 * in1.Shape.Dimensions[dimIndex1].Length;
                        outerStride3 -= innerStride3 * @out.Shape.Dimensions[dimIndex1].Length;

                        innerStride1 -= innerInnerStride1 * in1.Shape.Dimensions[dimIndex2].Length;
                        innerStride3 -= innerInnerStride3 * @out.Shape.Dimensions[dimIndex2].Length;

                        for (long outer = 0; outer < totalOps; outer++)
                        {
                            //Get the array offset for the first element in the outer dimension
                            long ix1 = in1.Shape[counters];
                            long ix3 = @out.Shape[counters];


                            for (long i = 0; i < opsOuter; i++)
                            {
                                for (long j = 0; j < opsInner; j++)
                                {
                                    for (long k = 0; k < opsInnerInner; k++)
                                    {
                                        d2[ix3] = (System.UInt16)(Math.Acos(d1[ix1]));
                                        ix1 += innerInnerStride1;
                                        ix3 += innerInnerStride3;
                                    }

                                    ix1 += innerStride1;
                                    ix3 += innerStride3;
                                }

                                ix1 += outerStride1;
                                ix3 += outerStride3;
                            }

                            if (counters.LongLength > 0)
                            {
                                //Basically a ripple carry adder
                                long p = counters.LongLength - 1;
                                while (++counters[p] == limits[p] && p > 0)
                                {
                                    counters[p] = 0;
                                    p--;
                                }
                            }
                        }
                    }
                }
            }
        }

        /// <summary>
        /// Unsafe implementation of applying a unary operation
        /// </summary>
        /// <typeparam name="C">The type of operation to perform</typeparam>
        /// <param name="op">The operation instance</param>
        /// <param name="scalar">The input scalar argument</param>
        /// <param name="out">The output target</param>
        internal static void UFunc_Op_Inner_Unary_Scalar_Flush_UInt16_TypedImpl<C>(NumCIL.UInt16.Acos op, System.UInt16 scalar, NdArray<System.UInt16> @out)
            where C : IUnaryOp<System.UInt16>
        {
            unsafe
            {
                using (var f2 = new Pinner(@out.DataAccessor))
                {
                    var d2 = (System.UInt16*)f2.ptr;

                    if (@out.Shape.Dimensions.Length == 1)
                    {
                        long totalOps = @out.Shape.Dimensions[0].Length;
                        long ix2 = @out.Shape.Offset;
                        long stride2 = @out.Shape.Dimensions[0].Stride;

                        for (long i = 0; i < totalOps; i++)
                        {
                            d2[ix2] = (System.UInt16)(Math.Acos(scalar));
                            ix2 += stride2;
                        }
                    }
                    else if (@out.Shape.Dimensions.Length == 2)
                    {
                        long opsOuter = @out.Shape.Dimensions[0].Length;
                        long opsInner = @out.Shape.Dimensions[1].Length;

                        long ix2 = @out.Shape.Offset;
                        long outerStride2 = @out.Shape.Dimensions[0].Stride;
                        long innerStride2 = @out.Shape.Dimensions[1].Stride;
                        outerStride2 -= innerStride2 * @out.Shape.Dimensions[1].Length;

                        for (long i = 0; i < opsOuter; i++)
                        {
                            for (long j = 0; j < opsInner; j++)
                            {
                                d2[ix2] = (System.UInt16)(Math.Acos(scalar));
                                ix2 += innerStride2;
                            }

                            ix2 += outerStride2;
                        }
                    }
                    else
                    {
                        long n = @out.Shape.Dimensions.LongLength - 3;
                        long[] limits = @out.Shape.Dimensions.Where(x => n-- > 0).Select(x => x.Length).ToArray();
                        long[] counters = new long[limits.LongLength];

                        long totalOps = limits.LongLength == 0 ? 1 : limits.Aggregate<long>((a, b) => a * b);

                        //This chunck of variables are used to prevent repeated calculations of offsets
                        long dimIndex0 = 0 + limits.LongLength;
                        long dimIndex1 = 1 + limits.LongLength;
                        long dimIndex2 = 2 + limits.LongLength;

                        long opsOuter = @out.Shape.Dimensions[0 + limits.LongLength].Length;
                        long opsInner = @out.Shape.Dimensions[1 + limits.LongLength].Length;
                        long opsInnerInner = @out.Shape.Dimensions[2 + limits.LongLength].Length;

                        long outerStride3 = @out.Shape.Dimensions[dimIndex0].Stride;
                        long innerStride3 = @out.Shape.Dimensions[dimIndex1].Stride;
                        long innerInnerStride3 = @out.Shape.Dimensions[dimIndex2].Stride;
                        outerStride3 -= innerStride3 * @out.Shape.Dimensions[dimIndex1].Length;
                        innerStride3 -= innerInnerStride3 * @out.Shape.Dimensions[dimIndex2].Length;

                        for (long outer = 0; outer < totalOps; outer++)
                        {
                            //Get the array offset for the first element in the outer dimension
                            long ix3 = @out.Shape[counters];

                            for (long i = 0; i < opsOuter; i++)
                            {
                                for (long j = 0; j < opsInner; j++)
                                {
                                    for (long k = 0; k < opsInnerInner; k++)
                                    {
                                        d2[ix3] = (System.UInt16)(Math.Acos(scalar));
                                        ix3 += innerInnerStride3;
                                    }

                                    ix3 += innerStride3;
                                }

                                ix3 += outerStride3;
                            }

                            if (counters.LongLength > 0)
                            {
                                //Basically a ripple carry adder
                                long p = counters.LongLength - 1;
                                while (++counters[p] == limits[p] && p > 0)
                                {
                                    counters[p] = 0;
                                    p--;
                                }
                            }
                        }
                    }
                }
            }
        }
        /// <summary>
        /// Unsafe implementation of applying a unary operation
        /// </summary>
        /// <typeparam name="C">The type of operation to perform</typeparam>
        /// <param name="op">The operation instance</param>
        /// <param name="in1">The input argument</param>
        /// <param name="out">The output target</param>
        internal static void UFunc_Op_Inner_Unary_Flush_Int32_TypedImpl<C>(NumCIL.Int32.Acos op, NdArray<System.Int32> in1, NdArray<System.Int32> @out)
            where C : IUnaryOp<System.Int32>
        {
            unsafe
            {
                using (var f1 = new Pinner(in1.DataAccessor))
                using (var f2 = new Pinner(@out.DataAccessor))
                {
                    var d1 = (System.Int32*)f1.ptr;
                    var d2 = (System.Int32*)f2.ptr;

                    if (@out.Shape.Dimensions.Length == 1)
                    {
                        long totalOps = @out.Shape.Dimensions[0].Length;

                        long ix1 = in1.Shape.Offset;
                        long ix2 = @out.Shape.Offset;

                        long stride1 = in1.Shape.Dimensions[0].Stride;
                        long stride2 = @out.Shape.Dimensions[0].Stride;


                        if (stride1 == stride2 && ix1 == ix2)
                        {
                            //Best case, all are equal, just keep a single counter
                            for (long i = 0; i < totalOps; i++)
                            {
                                d2[ix1] = (System.Int32)(Math.Acos(d1[ix1]));
                                ix1 += stride1;
                            }
                        }
                        else
                        {
                            for (long i = 0; i < totalOps; i++)
                            {
                                d2[ix2] = (System.Int32)(Math.Acos(d1[ix1]));
                                ix1 += stride1;
                                ix2 += stride2;
                            }
                        }
                    }
                    else if (@out.Shape.Dimensions.Length == 2)
                    {
                        long opsOuter = @out.Shape.Dimensions[0].Length;
                        long opsInner = @out.Shape.Dimensions[1].Length;

                        long ix1 = in1.Shape.Offset;
                        long ix2 = @out.Shape.Offset;

                        long outerStride1 = in1.Shape.Dimensions[0].Stride;
                        long outerStride2 = @out.Shape.Dimensions[0].Stride;

                        long innerStride1 = in1.Shape.Dimensions[1].Stride;
                        long innerStride2 = @out.Shape.Dimensions[1].Stride;

                        outerStride1 -= innerStride1 * in1.Shape.Dimensions[1].Length;
                        outerStride2 -= innerStride2 * @out.Shape.Dimensions[1].Length;

                        for (long i = 0; i < opsOuter; i++)
                        {
                            for (long j = 0; j < opsInner; j++)
                            {
                                d2[ix2] = (System.Int32)(Math.Acos(d1[ix1]));
                                ix1 += innerStride1;
                                ix2 += innerStride2;
                            }

                            ix1 += outerStride1;
                            ix2 += outerStride2;
                        }
                    }
                    else
                    {
                        long n = in1.Shape.Dimensions.LongLength - 3;
                        long[] limits = in1.Shape.Dimensions.Where(x => n-- > 0).Select(x => x.Length).ToArray();
                        long[] counters = new long[limits.LongLength];

                        long totalOps = limits.LongLength == 0 ? 1 : limits.Aggregate<long>((a, b) => a * b);

                        //This chunck of variables are used to prevent repeated calculations of offsets
                        long dimIndex0 = 0 + limits.LongLength;
                        long dimIndex1 = 1 + limits.LongLength;
                        long dimIndex2 = 2 + limits.LongLength;

                        long opsOuter = @out.Shape.Dimensions[0 + limits.LongLength].Length;
                        long opsInner = @out.Shape.Dimensions[1 + limits.LongLength].Length;
                        long opsInnerInner = @out.Shape.Dimensions[2 + limits.LongLength].Length;

                        long outerStride1 = in1.Shape.Dimensions[dimIndex0].Stride;
                        long outerStride3 = @out.Shape.Dimensions[dimIndex0].Stride;

                        long innerStride1 = in1.Shape.Dimensions[dimIndex1].Stride;
                        long innerStride3 = @out.Shape.Dimensions[dimIndex1].Stride;

                        long innerInnerStride1 = in1.Shape.Dimensions[dimIndex2].Stride;
                        long innerInnerStride3 = @out.Shape.Dimensions[dimIndex2].Stride;

                        outerStride1 -= innerStride1 * in1.Shape.Dimensions[dimIndex1].Length;
                        outerStride3 -= innerStride3 * @out.Shape.Dimensions[dimIndex1].Length;

                        innerStride1 -= innerInnerStride1 * in1.Shape.Dimensions[dimIndex2].Length;
                        innerStride3 -= innerInnerStride3 * @out.Shape.Dimensions[dimIndex2].Length;

                        for (long outer = 0; outer < totalOps; outer++)
                        {
                            //Get the array offset for the first element in the outer dimension
                            long ix1 = in1.Shape[counters];
                            long ix3 = @out.Shape[counters];


                            for (long i = 0; i < opsOuter; i++)
                            {
                                for (long j = 0; j < opsInner; j++)
                                {
                                    for (long k = 0; k < opsInnerInner; k++)
                                    {
                                        d2[ix3] = (System.Int32)(Math.Acos(d1[ix1]));
                                        ix1 += innerInnerStride1;
                                        ix3 += innerInnerStride3;
                                    }

                                    ix1 += innerStride1;
                                    ix3 += innerStride3;
                                }

                                ix1 += outerStride1;
                                ix3 += outerStride3;
                            }

                            if (counters.LongLength > 0)
                            {
                                //Basically a ripple carry adder
                                long p = counters.LongLength - 1;
                                while (++counters[p] == limits[p] && p > 0)
                                {
                                    counters[p] = 0;
                                    p--;
                                }
                            }
                        }
                    }
                }
            }
        }

        /// <summary>
        /// Unsafe implementation of applying a unary operation
        /// </summary>
        /// <typeparam name="C">The type of operation to perform</typeparam>
        /// <param name="op">The operation instance</param>
        /// <param name="scalar">The input scalar argument</param>
        /// <param name="out">The output target</param>
        internal static void UFunc_Op_Inner_Unary_Scalar_Flush_Int32_TypedImpl<C>(NumCIL.Int32.Acos op, System.Int32 scalar, NdArray<System.Int32> @out)
            where C : IUnaryOp<System.Int32>
        {
            unsafe
            {
                using (var f2 = new Pinner(@out.DataAccessor))
                {
                    var d2 = (System.Int32*)f2.ptr;

                    if (@out.Shape.Dimensions.Length == 1)
                    {
                        long totalOps = @out.Shape.Dimensions[0].Length;
                        long ix2 = @out.Shape.Offset;
                        long stride2 = @out.Shape.Dimensions[0].Stride;

                        for (long i = 0; i < totalOps; i++)
                        {
                            d2[ix2] = (System.Int32)(Math.Acos(scalar));
                            ix2 += stride2;
                        }
                    }
                    else if (@out.Shape.Dimensions.Length == 2)
                    {
                        long opsOuter = @out.Shape.Dimensions[0].Length;
                        long opsInner = @out.Shape.Dimensions[1].Length;

                        long ix2 = @out.Shape.Offset;
                        long outerStride2 = @out.Shape.Dimensions[0].Stride;
                        long innerStride2 = @out.Shape.Dimensions[1].Stride;
                        outerStride2 -= innerStride2 * @out.Shape.Dimensions[1].Length;

                        for (long i = 0; i < opsOuter; i++)
                        {
                            for (long j = 0; j < opsInner; j++)
                            {
                                d2[ix2] = (System.Int32)(Math.Acos(scalar));
                                ix2 += innerStride2;
                            }

                            ix2 += outerStride2;
                        }
                    }
                    else
                    {
                        long n = @out.Shape.Dimensions.LongLength - 3;
                        long[] limits = @out.Shape.Dimensions.Where(x => n-- > 0).Select(x => x.Length).ToArray();
                        long[] counters = new long[limits.LongLength];

                        long totalOps = limits.LongLength == 0 ? 1 : limits.Aggregate<long>((a, b) => a * b);

                        //This chunck of variables are used to prevent repeated calculations of offsets
                        long dimIndex0 = 0 + limits.LongLength;
                        long dimIndex1 = 1 + limits.LongLength;
                        long dimIndex2 = 2 + limits.LongLength;

                        long opsOuter = @out.Shape.Dimensions[0 + limits.LongLength].Length;
                        long opsInner = @out.Shape.Dimensions[1 + limits.LongLength].Length;
                        long opsInnerInner = @out.Shape.Dimensions[2 + limits.LongLength].Length;

                        long outerStride3 = @out.Shape.Dimensions[dimIndex0].Stride;
                        long innerStride3 = @out.Shape.Dimensions[dimIndex1].Stride;
                        long innerInnerStride3 = @out.Shape.Dimensions[dimIndex2].Stride;
                        outerStride3 -= innerStride3 * @out.Shape.Dimensions[dimIndex1].Length;
                        innerStride3 -= innerInnerStride3 * @out.Shape.Dimensions[dimIndex2].Length;

                        for (long outer = 0; outer < totalOps; outer++)
                        {
                            //Get the array offset for the first element in the outer dimension
                            long ix3 = @out.Shape[counters];

                            for (long i = 0; i < opsOuter; i++)
                            {
                                for (long j = 0; j < opsInner; j++)
                                {
                                    for (long k = 0; k < opsInnerInner; k++)
                                    {
                                        d2[ix3] = (System.Int32)(Math.Acos(scalar));
                                        ix3 += innerInnerStride3;
                                    }

                                    ix3 += innerStride3;
                                }

                                ix3 += outerStride3;
                            }

                            if (counters.LongLength > 0)
                            {
                                //Basically a ripple carry adder
                                long p = counters.LongLength - 1;
                                while (++counters[p] == limits[p] && p > 0)
                                {
                                    counters[p] = 0;
                                    p--;
                                }
                            }
                        }
                    }
                }
            }
        }
        /// <summary>
        /// Unsafe implementation of applying a unary operation
        /// </summary>
        /// <typeparam name="C">The type of operation to perform</typeparam>
        /// <param name="op">The operation instance</param>
        /// <param name="in1">The input argument</param>
        /// <param name="out">The output target</param>
        internal static void UFunc_Op_Inner_Unary_Flush_UInt32_TypedImpl<C>(NumCIL.UInt32.Acos op, NdArray<System.UInt32> in1, NdArray<System.UInt32> @out)
            where C : IUnaryOp<System.UInt32>
        {
            unsafe
            {
                using (var f1 = new Pinner(in1.DataAccessor))
                using (var f2 = new Pinner(@out.DataAccessor))
                {
                    var d1 = (System.UInt32*)f1.ptr;
                    var d2 = (System.UInt32*)f2.ptr;

                    if (@out.Shape.Dimensions.Length == 1)
                    {
                        long totalOps = @out.Shape.Dimensions[0].Length;

                        long ix1 = in1.Shape.Offset;
                        long ix2 = @out.Shape.Offset;

                        long stride1 = in1.Shape.Dimensions[0].Stride;
                        long stride2 = @out.Shape.Dimensions[0].Stride;


                        if (stride1 == stride2 && ix1 == ix2)
                        {
                            //Best case, all are equal, just keep a single counter
                            for (long i = 0; i < totalOps; i++)
                            {
                                d2[ix1] = (System.UInt32)(Math.Acos(d1[ix1]));
                                ix1 += stride1;
                            }
                        }
                        else
                        {
                            for (long i = 0; i < totalOps; i++)
                            {
                                d2[ix2] = (System.UInt32)(Math.Acos(d1[ix1]));
                                ix1 += stride1;
                                ix2 += stride2;
                            }
                        }
                    }
                    else if (@out.Shape.Dimensions.Length == 2)
                    {
                        long opsOuter = @out.Shape.Dimensions[0].Length;
                        long opsInner = @out.Shape.Dimensions[1].Length;

                        long ix1 = in1.Shape.Offset;
                        long ix2 = @out.Shape.Offset;

                        long outerStride1 = in1.Shape.Dimensions[0].Stride;
                        long outerStride2 = @out.Shape.Dimensions[0].Stride;

                        long innerStride1 = in1.Shape.Dimensions[1].Stride;
                        long innerStride2 = @out.Shape.Dimensions[1].Stride;

                        outerStride1 -= innerStride1 * in1.Shape.Dimensions[1].Length;
                        outerStride2 -= innerStride2 * @out.Shape.Dimensions[1].Length;

                        for (long i = 0; i < opsOuter; i++)
                        {
                            for (long j = 0; j < opsInner; j++)
                            {
                                d2[ix2] = (System.UInt32)(Math.Acos(d1[ix1]));
                                ix1 += innerStride1;
                                ix2 += innerStride2;
                            }

                            ix1 += outerStride1;
                            ix2 += outerStride2;
                        }
                    }
                    else
                    {
                        long n = in1.Shape.Dimensions.LongLength - 3;
                        long[] limits = in1.Shape.Dimensions.Where(x => n-- > 0).Select(x => x.Length).ToArray();
                        long[] counters = new long[limits.LongLength];

                        long totalOps = limits.LongLength == 0 ? 1 : limits.Aggregate<long>((a, b) => a * b);

                        //This chunck of variables are used to prevent repeated calculations of offsets
                        long dimIndex0 = 0 + limits.LongLength;
                        long dimIndex1 = 1 + limits.LongLength;
                        long dimIndex2 = 2 + limits.LongLength;

                        long opsOuter = @out.Shape.Dimensions[0 + limits.LongLength].Length;
                        long opsInner = @out.Shape.Dimensions[1 + limits.LongLength].Length;
                        long opsInnerInner = @out.Shape.Dimensions[2 + limits.LongLength].Length;

                        long outerStride1 = in1.Shape.Dimensions[dimIndex0].Stride;
                        long outerStride3 = @out.Shape.Dimensions[dimIndex0].Stride;

                        long innerStride1 = in1.Shape.Dimensions[dimIndex1].Stride;
                        long innerStride3 = @out.Shape.Dimensions[dimIndex1].Stride;

                        long innerInnerStride1 = in1.Shape.Dimensions[dimIndex2].Stride;
                        long innerInnerStride3 = @out.Shape.Dimensions[dimIndex2].Stride;

                        outerStride1 -= innerStride1 * in1.Shape.Dimensions[dimIndex1].Length;
                        outerStride3 -= innerStride3 * @out.Shape.Dimensions[dimIndex1].Length;

                        innerStride1 -= innerInnerStride1 * in1.Shape.Dimensions[dimIndex2].Length;
                        innerStride3 -= innerInnerStride3 * @out.Shape.Dimensions[dimIndex2].Length;

                        for (long outer = 0; outer < totalOps; outer++)
                        {
                            //Get the array offset for the first element in the outer dimension
                            long ix1 = in1.Shape[counters];
                            long ix3 = @out.Shape[counters];


                            for (long i = 0; i < opsOuter; i++)
                            {
                                for (long j = 0; j < opsInner; j++)
                                {
                                    for (long k = 0; k < opsInnerInner; k++)
                                    {
                                        d2[ix3] = (System.UInt32)(Math.Acos(d1[ix1]));
                                        ix1 += innerInnerStride1;
                                        ix3 += innerInnerStride3;
                                    }

                                    ix1 += innerStride1;
                                    ix3 += innerStride3;
                                }

                                ix1 += outerStride1;
                                ix3 += outerStride3;
                            }

                            if (counters.LongLength > 0)
                            {
                                //Basically a ripple carry adder
                                long p = counters.LongLength - 1;
                                while (++counters[p] == limits[p] && p > 0)
                                {
                                    counters[p] = 0;
                                    p--;
                                }
                            }
                        }
                    }
                }
            }
        }

        /// <summary>
        /// Unsafe implementation of applying a unary operation
        /// </summary>
        /// <typeparam name="C">The type of operation to perform</typeparam>
        /// <param name="op">The operation instance</param>
        /// <param name="scalar">The input scalar argument</param>
        /// <param name="out">The output target</param>
        internal static void UFunc_Op_Inner_Unary_Scalar_Flush_UInt32_TypedImpl<C>(NumCIL.UInt32.Acos op, System.UInt32 scalar, NdArray<System.UInt32> @out)
            where C : IUnaryOp<System.UInt32>
        {
            unsafe
            {
                using (var f2 = new Pinner(@out.DataAccessor))
                {
                    var d2 = (System.UInt32*)f2.ptr;

                    if (@out.Shape.Dimensions.Length == 1)
                    {
                        long totalOps = @out.Shape.Dimensions[0].Length;
                        long ix2 = @out.Shape.Offset;
                        long stride2 = @out.Shape.Dimensions[0].Stride;

                        for (long i = 0; i < totalOps; i++)
                        {
                            d2[ix2] = (System.UInt32)(Math.Acos(scalar));
                            ix2 += stride2;
                        }
                    }
                    else if (@out.Shape.Dimensions.Length == 2)
                    {
                        long opsOuter = @out.Shape.Dimensions[0].Length;
                        long opsInner = @out.Shape.Dimensions[1].Length;

                        long ix2 = @out.Shape.Offset;
                        long outerStride2 = @out.Shape.Dimensions[0].Stride;
                        long innerStride2 = @out.Shape.Dimensions[1].Stride;
                        outerStride2 -= innerStride2 * @out.Shape.Dimensions[1].Length;

                        for (long i = 0; i < opsOuter; i++)
                        {
                            for (long j = 0; j < opsInner; j++)
                            {
                                d2[ix2] = (System.UInt32)(Math.Acos(scalar));
                                ix2 += innerStride2;
                            }

                            ix2 += outerStride2;
                        }
                    }
                    else
                    {
                        long n = @out.Shape.Dimensions.LongLength - 3;
                        long[] limits = @out.Shape.Dimensions.Where(x => n-- > 0).Select(x => x.Length).ToArray();
                        long[] counters = new long[limits.LongLength];

                        long totalOps = limits.LongLength == 0 ? 1 : limits.Aggregate<long>((a, b) => a * b);

                        //This chunck of variables are used to prevent repeated calculations of offsets
                        long dimIndex0 = 0 + limits.LongLength;
                        long dimIndex1 = 1 + limits.LongLength;
                        long dimIndex2 = 2 + limits.LongLength;

                        long opsOuter = @out.Shape.Dimensions[0 + limits.LongLength].Length;
                        long opsInner = @out.Shape.Dimensions[1 + limits.LongLength].Length;
                        long opsInnerInner = @out.Shape.Dimensions[2 + limits.LongLength].Length;

                        long outerStride3 = @out.Shape.Dimensions[dimIndex0].Stride;
                        long innerStride3 = @out.Shape.Dimensions[dimIndex1].Stride;
                        long innerInnerStride3 = @out.Shape.Dimensions[dimIndex2].Stride;
                        outerStride3 -= innerStride3 * @out.Shape.Dimensions[dimIndex1].Length;
                        innerStride3 -= innerInnerStride3 * @out.Shape.Dimensions[dimIndex2].Length;

                        for (long outer = 0; outer < totalOps; outer++)
                        {
                            //Get the array offset for the first element in the outer dimension
                            long ix3 = @out.Shape[counters];

                            for (long i = 0; i < opsOuter; i++)
                            {
                                for (long j = 0; j < opsInner; j++)
                                {
                                    for (long k = 0; k < opsInnerInner; k++)
                                    {
                                        d2[ix3] = (System.UInt32)(Math.Acos(scalar));
                                        ix3 += innerInnerStride3;
                                    }

                                    ix3 += innerStride3;
                                }

                                ix3 += outerStride3;
                            }

                            if (counters.LongLength > 0)
                            {
                                //Basically a ripple carry adder
                                long p = counters.LongLength - 1;
                                while (++counters[p] == limits[p] && p > 0)
                                {
                                    counters[p] = 0;
                                    p--;
                                }
                            }
                        }
                    }
                }
            }
        }
        /// <summary>
        /// Unsafe implementation of applying a unary operation
        /// </summary>
        /// <typeparam name="C">The type of operation to perform</typeparam>
        /// <param name="op">The operation instance</param>
        /// <param name="in1">The input argument</param>
        /// <param name="out">The output target</param>
        internal static void UFunc_Op_Inner_Unary_Flush_Int64_TypedImpl<C>(NumCIL.Int64.Acos op, NdArray<System.Int64> in1, NdArray<System.Int64> @out)
            where C : IUnaryOp<System.Int64>
        {
            unsafe
            {
                using (var f1 = new Pinner(in1.DataAccessor))
                using (var f2 = new Pinner(@out.DataAccessor))
                {
                    var d1 = (System.Int64*)f1.ptr;
                    var d2 = (System.Int64*)f2.ptr;

                    if (@out.Shape.Dimensions.Length == 1)
                    {
                        long totalOps = @out.Shape.Dimensions[0].Length;

                        long ix1 = in1.Shape.Offset;
                        long ix2 = @out.Shape.Offset;

                        long stride1 = in1.Shape.Dimensions[0].Stride;
                        long stride2 = @out.Shape.Dimensions[0].Stride;


                        if (stride1 == stride2 && ix1 == ix2)
                        {
                            //Best case, all are equal, just keep a single counter
                            for (long i = 0; i < totalOps; i++)
                            {
                                d2[ix1] = (System.Int64)(Math.Acos(d1[ix1]));
                                ix1 += stride1;
                            }
                        }
                        else
                        {
                            for (long i = 0; i < totalOps; i++)
                            {
                                d2[ix2] = (System.Int64)(Math.Acos(d1[ix1]));
                                ix1 += stride1;
                                ix2 += stride2;
                            }
                        }
                    }
                    else if (@out.Shape.Dimensions.Length == 2)
                    {
                        long opsOuter = @out.Shape.Dimensions[0].Length;
                        long opsInner = @out.Shape.Dimensions[1].Length;

                        long ix1 = in1.Shape.Offset;
                        long ix2 = @out.Shape.Offset;

                        long outerStride1 = in1.Shape.Dimensions[0].Stride;
                        long outerStride2 = @out.Shape.Dimensions[0].Stride;

                        long innerStride1 = in1.Shape.Dimensions[1].Stride;
                        long innerStride2 = @out.Shape.Dimensions[1].Stride;

                        outerStride1 -= innerStride1 * in1.Shape.Dimensions[1].Length;
                        outerStride2 -= innerStride2 * @out.Shape.Dimensions[1].Length;

                        for (long i = 0; i < opsOuter; i++)
                        {
                            for (long j = 0; j < opsInner; j++)
                            {
                                d2[ix2] = (System.Int64)(Math.Acos(d1[ix1]));
                                ix1 += innerStride1;
                                ix2 += innerStride2;
                            }

                            ix1 += outerStride1;
                            ix2 += outerStride2;
                        }
                    }
                    else
                    {
                        long n = in1.Shape.Dimensions.LongLength - 3;
                        long[] limits = in1.Shape.Dimensions.Where(x => n-- > 0).Select(x => x.Length).ToArray();
                        long[] counters = new long[limits.LongLength];

                        long totalOps = limits.LongLength == 0 ? 1 : limits.Aggregate<long>((a, b) => a * b);

                        //This chunck of variables are used to prevent repeated calculations of offsets
                        long dimIndex0 = 0 + limits.LongLength;
                        long dimIndex1 = 1 + limits.LongLength;
                        long dimIndex2 = 2 + limits.LongLength;

                        long opsOuter = @out.Shape.Dimensions[0 + limits.LongLength].Length;
                        long opsInner = @out.Shape.Dimensions[1 + limits.LongLength].Length;
                        long opsInnerInner = @out.Shape.Dimensions[2 + limits.LongLength].Length;

                        long outerStride1 = in1.Shape.Dimensions[dimIndex0].Stride;
                        long outerStride3 = @out.Shape.Dimensions[dimIndex0].Stride;

                        long innerStride1 = in1.Shape.Dimensions[dimIndex1].Stride;
                        long innerStride3 = @out.Shape.Dimensions[dimIndex1].Stride;

                        long innerInnerStride1 = in1.Shape.Dimensions[dimIndex2].Stride;
                        long innerInnerStride3 = @out.Shape.Dimensions[dimIndex2].Stride;

                        outerStride1 -= innerStride1 * in1.Shape.Dimensions[dimIndex1].Length;
                        outerStride3 -= innerStride3 * @out.Shape.Dimensions[dimIndex1].Length;

                        innerStride1 -= innerInnerStride1 * in1.Shape.Dimensions[dimIndex2].Length;
                        innerStride3 -= innerInnerStride3 * @out.Shape.Dimensions[dimIndex2].Length;

                        for (long outer = 0; outer < totalOps; outer++)
                        {
                            //Get the array offset for the first element in the outer dimension
                            long ix1 = in1.Shape[counters];
                            long ix3 = @out.Shape[counters];


                            for (long i = 0; i < opsOuter; i++)
                            {
                                for (long j = 0; j < opsInner; j++)
                                {
                                    for (long k = 0; k < opsInnerInner; k++)
                                    {
                                        d2[ix3] = (System.Int64)(Math.Acos(d1[ix1]));
                                        ix1 += innerInnerStride1;
                                        ix3 += innerInnerStride3;
                                    }

                                    ix1 += innerStride1;
                                    ix3 += innerStride3;
                                }

                                ix1 += outerStride1;
                                ix3 += outerStride3;
                            }

                            if (counters.LongLength > 0)
                            {
                                //Basically a ripple carry adder
                                long p = counters.LongLength - 1;
                                while (++counters[p] == limits[p] && p > 0)
                                {
                                    counters[p] = 0;
                                    p--;
                                }
                            }
                        }
                    }
                }
            }
        }

        /// <summary>
        /// Unsafe implementation of applying a unary operation
        /// </summary>
        /// <typeparam name="C">The type of operation to perform</typeparam>
        /// <param name="op">The operation instance</param>
        /// <param name="scalar">The input scalar argument</param>
        /// <param name="out">The output target</param>
        internal static void UFunc_Op_Inner_Unary_Scalar_Flush_Int64_TypedImpl<C>(NumCIL.Int64.Acos op, System.Int64 scalar, NdArray<System.Int64> @out)
            where C : IUnaryOp<System.Int64>
        {
            unsafe
            {
                using (var f2 = new Pinner(@out.DataAccessor))
                {
                    var d2 = (System.Int64*)f2.ptr;

                    if (@out.Shape.Dimensions.Length == 1)
                    {
                        long totalOps = @out.Shape.Dimensions[0].Length;
                        long ix2 = @out.Shape.Offset;
                        long stride2 = @out.Shape.Dimensions[0].Stride;

                        for (long i = 0; i < totalOps; i++)
                        {
                            d2[ix2] = (System.Int64)(Math.Acos(scalar));
                            ix2 += stride2;
                        }
                    }
                    else if (@out.Shape.Dimensions.Length == 2)
                    {
                        long opsOuter = @out.Shape.Dimensions[0].Length;
                        long opsInner = @out.Shape.Dimensions[1].Length;

                        long ix2 = @out.Shape.Offset;
                        long outerStride2 = @out.Shape.Dimensions[0].Stride;
                        long innerStride2 = @out.Shape.Dimensions[1].Stride;
                        outerStride2 -= innerStride2 * @out.Shape.Dimensions[1].Length;

                        for (long i = 0; i < opsOuter; i++)
                        {
                            for (long j = 0; j < opsInner; j++)
                            {
                                d2[ix2] = (System.Int64)(Math.Acos(scalar));
                                ix2 += innerStride2;
                            }

                            ix2 += outerStride2;
                        }
                    }
                    else
                    {
                        long n = @out.Shape.Dimensions.LongLength - 3;
                        long[] limits = @out.Shape.Dimensions.Where(x => n-- > 0).Select(x => x.Length).ToArray();
                        long[] counters = new long[limits.LongLength];

                        long totalOps = limits.LongLength == 0 ? 1 : limits.Aggregate<long>((a, b) => a * b);

                        //This chunck of variables are used to prevent repeated calculations of offsets
                        long dimIndex0 = 0 + limits.LongLength;
                        long dimIndex1 = 1 + limits.LongLength;
                        long dimIndex2 = 2 + limits.LongLength;

                        long opsOuter = @out.Shape.Dimensions[0 + limits.LongLength].Length;
                        long opsInner = @out.Shape.Dimensions[1 + limits.LongLength].Length;
                        long opsInnerInner = @out.Shape.Dimensions[2 + limits.LongLength].Length;

                        long outerStride3 = @out.Shape.Dimensions[dimIndex0].Stride;
                        long innerStride3 = @out.Shape.Dimensions[dimIndex1].Stride;
                        long innerInnerStride3 = @out.Shape.Dimensions[dimIndex2].Stride;
                        outerStride3 -= innerStride3 * @out.Shape.Dimensions[dimIndex1].Length;
                        innerStride3 -= innerInnerStride3 * @out.Shape.Dimensions[dimIndex2].Length;

                        for (long outer = 0; outer < totalOps; outer++)
                        {
                            //Get the array offset for the first element in the outer dimension
                            long ix3 = @out.Shape[counters];

                            for (long i = 0; i < opsOuter; i++)
                            {
                                for (long j = 0; j < opsInner; j++)
                                {
                                    for (long k = 0; k < opsInnerInner; k++)
                                    {
                                        d2[ix3] = (System.Int64)(Math.Acos(scalar));
                                        ix3 += innerInnerStride3;
                                    }

                                    ix3 += innerStride3;
                                }

                                ix3 += outerStride3;
                            }

                            if (counters.LongLength > 0)
                            {
                                //Basically a ripple carry adder
                                long p = counters.LongLength - 1;
                                while (++counters[p] == limits[p] && p > 0)
                                {
                                    counters[p] = 0;
                                    p--;
                                }
                            }
                        }
                    }
                }
            }
        }
        /// <summary>
        /// Unsafe implementation of applying a unary operation
        /// </summary>
        /// <typeparam name="C">The type of operation to perform</typeparam>
        /// <param name="op">The operation instance</param>
        /// <param name="in1">The input argument</param>
        /// <param name="out">The output target</param>
        internal static void UFunc_Op_Inner_Unary_Flush_UInt64_TypedImpl<C>(NumCIL.UInt64.Acos op, NdArray<System.UInt64> in1, NdArray<System.UInt64> @out)
            where C : IUnaryOp<System.UInt64>
        {
            unsafe
            {
                using (var f1 = new Pinner(in1.DataAccessor))
                using (var f2 = new Pinner(@out.DataAccessor))
                {
                    var d1 = (System.UInt64*)f1.ptr;
                    var d2 = (System.UInt64*)f2.ptr;

                    if (@out.Shape.Dimensions.Length == 1)
                    {
                        long totalOps = @out.Shape.Dimensions[0].Length;

                        long ix1 = in1.Shape.Offset;
                        long ix2 = @out.Shape.Offset;

                        long stride1 = in1.Shape.Dimensions[0].Stride;
                        long stride2 = @out.Shape.Dimensions[0].Stride;


                        if (stride1 == stride2 && ix1 == ix2)
                        {
                            //Best case, all are equal, just keep a single counter
                            for (long i = 0; i < totalOps; i++)
                            {
                                d2[ix1] = (System.UInt64)(Math.Acos(d1[ix1]));
                                ix1 += stride1;
                            }
                        }
                        else
                        {
                            for (long i = 0; i < totalOps; i++)
                            {
                                d2[ix2] = (System.UInt64)(Math.Acos(d1[ix1]));
                                ix1 += stride1;
                                ix2 += stride2;
                            }
                        }
                    }
                    else if (@out.Shape.Dimensions.Length == 2)
                    {
                        long opsOuter = @out.Shape.Dimensions[0].Length;
                        long opsInner = @out.Shape.Dimensions[1].Length;

                        long ix1 = in1.Shape.Offset;
                        long ix2 = @out.Shape.Offset;

                        long outerStride1 = in1.Shape.Dimensions[0].Stride;
                        long outerStride2 = @out.Shape.Dimensions[0].Stride;

                        long innerStride1 = in1.Shape.Dimensions[1].Stride;
                        long innerStride2 = @out.Shape.Dimensions[1].Stride;

                        outerStride1 -= innerStride1 * in1.Shape.Dimensions[1].Length;
                        outerStride2 -= innerStride2 * @out.Shape.Dimensions[1].Length;

                        for (long i = 0; i < opsOuter; i++)
                        {
                            for (long j = 0; j < opsInner; j++)
                            {
                                d2[ix2] = (System.UInt64)(Math.Acos(d1[ix1]));
                                ix1 += innerStride1;
                                ix2 += innerStride2;
                            }

                            ix1 += outerStride1;
                            ix2 += outerStride2;
                        }
                    }
                    else
                    {
                        long n = in1.Shape.Dimensions.LongLength - 3;
                        long[] limits = in1.Shape.Dimensions.Where(x => n-- > 0).Select(x => x.Length).ToArray();
                        long[] counters = new long[limits.LongLength];

                        long totalOps = limits.LongLength == 0 ? 1 : limits.Aggregate<long>((a, b) => a * b);

                        //This chunck of variables are used to prevent repeated calculations of offsets
                        long dimIndex0 = 0 + limits.LongLength;
                        long dimIndex1 = 1 + limits.LongLength;
                        long dimIndex2 = 2 + limits.LongLength;

                        long opsOuter = @out.Shape.Dimensions[0 + limits.LongLength].Length;
                        long opsInner = @out.Shape.Dimensions[1 + limits.LongLength].Length;
                        long opsInnerInner = @out.Shape.Dimensions[2 + limits.LongLength].Length;

                        long outerStride1 = in1.Shape.Dimensions[dimIndex0].Stride;
                        long outerStride3 = @out.Shape.Dimensions[dimIndex0].Stride;

                        long innerStride1 = in1.Shape.Dimensions[dimIndex1].Stride;
                        long innerStride3 = @out.Shape.Dimensions[dimIndex1].Stride;

                        long innerInnerStride1 = in1.Shape.Dimensions[dimIndex2].Stride;
                        long innerInnerStride3 = @out.Shape.Dimensions[dimIndex2].Stride;

                        outerStride1 -= innerStride1 * in1.Shape.Dimensions[dimIndex1].Length;
                        outerStride3 -= innerStride3 * @out.Shape.Dimensions[dimIndex1].Length;

                        innerStride1 -= innerInnerStride1 * in1.Shape.Dimensions[dimIndex2].Length;
                        innerStride3 -= innerInnerStride3 * @out.Shape.Dimensions[dimIndex2].Length;

                        for (long outer = 0; outer < totalOps; outer++)
                        {
                            //Get the array offset for the first element in the outer dimension
                            long ix1 = in1.Shape[counters];
                            long ix3 = @out.Shape[counters];


                            for (long i = 0; i < opsOuter; i++)
                            {
                                for (long j = 0; j < opsInner; j++)
                                {
                                    for (long k = 0; k < opsInnerInner; k++)
                                    {
                                        d2[ix3] = (System.UInt64)(Math.Acos(d1[ix1]));
                                        ix1 += innerInnerStride1;
                                        ix3 += innerInnerStride3;
                                    }

                                    ix1 += innerStride1;
                                    ix3 += innerStride3;
                                }

                                ix1 += outerStride1;
                                ix3 += outerStride3;
                            }

                            if (counters.LongLength > 0)
                            {
                                //Basically a ripple carry adder
                                long p = counters.LongLength - 1;
                                while (++counters[p] == limits[p] && p > 0)
                                {
                                    counters[p] = 0;
                                    p--;
                                }
                            }
                        }
                    }
                }
            }
        }

        /// <summary>
        /// Unsafe implementation of applying a unary operation
        /// </summary>
        /// <typeparam name="C">The type of operation to perform</typeparam>
        /// <param name="op">The operation instance</param>
        /// <param name="scalar">The input scalar argument</param>
        /// <param name="out">The output target</param>
        internal static void UFunc_Op_Inner_Unary_Scalar_Flush_UInt64_TypedImpl<C>(NumCIL.UInt64.Acos op, System.UInt64 scalar, NdArray<System.UInt64> @out)
            where C : IUnaryOp<System.UInt64>
        {
            unsafe
            {
                using (var f2 = new Pinner(@out.DataAccessor))
                {
                    var d2 = (System.UInt64*)f2.ptr;

                    if (@out.Shape.Dimensions.Length == 1)
                    {
                        long totalOps = @out.Shape.Dimensions[0].Length;
                        long ix2 = @out.Shape.Offset;
                        long stride2 = @out.Shape.Dimensions[0].Stride;

                        for (long i = 0; i < totalOps; i++)
                        {
                            d2[ix2] = (System.UInt64)(Math.Acos(scalar));
                            ix2 += stride2;
                        }
                    }
                    else if (@out.Shape.Dimensions.Length == 2)
                    {
                        long opsOuter = @out.Shape.Dimensions[0].Length;
                        long opsInner = @out.Shape.Dimensions[1].Length;

                        long ix2 = @out.Shape.Offset;
                        long outerStride2 = @out.Shape.Dimensions[0].Stride;
                        long innerStride2 = @out.Shape.Dimensions[1].Stride;
                        outerStride2 -= innerStride2 * @out.Shape.Dimensions[1].Length;

                        for (long i = 0; i < opsOuter; i++)
                        {
                            for (long j = 0; j < opsInner; j++)
                            {
                                d2[ix2] = (System.UInt64)(Math.Acos(scalar));
                                ix2 += innerStride2;
                            }

                            ix2 += outerStride2;
                        }
                    }
                    else
                    {
                        long n = @out.Shape.Dimensions.LongLength - 3;
                        long[] limits = @out.Shape.Dimensions.Where(x => n-- > 0).Select(x => x.Length).ToArray();
                        long[] counters = new long[limits.LongLength];

                        long totalOps = limits.LongLength == 0 ? 1 : limits.Aggregate<long>((a, b) => a * b);

                        //This chunck of variables are used to prevent repeated calculations of offsets
                        long dimIndex0 = 0 + limits.LongLength;
                        long dimIndex1 = 1 + limits.LongLength;
                        long dimIndex2 = 2 + limits.LongLength;

                        long opsOuter = @out.Shape.Dimensions[0 + limits.LongLength].Length;
                        long opsInner = @out.Shape.Dimensions[1 + limits.LongLength].Length;
                        long opsInnerInner = @out.Shape.Dimensions[2 + limits.LongLength].Length;

                        long outerStride3 = @out.Shape.Dimensions[dimIndex0].Stride;
                        long innerStride3 = @out.Shape.Dimensions[dimIndex1].Stride;
                        long innerInnerStride3 = @out.Shape.Dimensions[dimIndex2].Stride;
                        outerStride3 -= innerStride3 * @out.Shape.Dimensions[dimIndex1].Length;
                        innerStride3 -= innerInnerStride3 * @out.Shape.Dimensions[dimIndex2].Length;

                        for (long outer = 0; outer < totalOps; outer++)
                        {
                            //Get the array offset for the first element in the outer dimension
                            long ix3 = @out.Shape[counters];

                            for (long i = 0; i < opsOuter; i++)
                            {
                                for (long j = 0; j < opsInner; j++)
                                {
                                    for (long k = 0; k < opsInnerInner; k++)
                                    {
                                        d2[ix3] = (System.UInt64)(Math.Acos(scalar));
                                        ix3 += innerInnerStride3;
                                    }

                                    ix3 += innerStride3;
                                }

                                ix3 += outerStride3;
                            }

                            if (counters.LongLength > 0)
                            {
                                //Basically a ripple carry adder
                                long p = counters.LongLength - 1;
                                while (++counters[p] == limits[p] && p > 0)
                                {
                                    counters[p] = 0;
                                    p--;
                                }
                            }
                        }
                    }
                }
            }
        }
        /// <summary>
        /// Unsafe implementation of applying a unary operation
        /// </summary>
        /// <typeparam name="C">The type of operation to perform</typeparam>
        /// <param name="op">The operation instance</param>
        /// <param name="in1">The input argument</param>
        /// <param name="out">The output target</param>
        internal static void UFunc_Op_Inner_Unary_Flush_Single_TypedImpl<C>(NumCIL.Float.Acos op, NdArray<System.Single> in1, NdArray<System.Single> @out)
            where C : IUnaryOp<System.Single>
        {
            unsafe
            {
                using (var f1 = new Pinner(in1.DataAccessor))
                using (var f2 = new Pinner(@out.DataAccessor))
                {
                    var d1 = (System.Single*)f1.ptr;
                    var d2 = (System.Single*)f2.ptr;

                    if (@out.Shape.Dimensions.Length == 1)
                    {
                        long totalOps = @out.Shape.Dimensions[0].Length;

                        long ix1 = in1.Shape.Offset;
                        long ix2 = @out.Shape.Offset;

                        long stride1 = in1.Shape.Dimensions[0].Stride;
                        long stride2 = @out.Shape.Dimensions[0].Stride;


                        if (stride1 == stride2 && ix1 == ix2)
                        {
                            //Best case, all are equal, just keep a single counter
                            for (long i = 0; i < totalOps; i++)
                            {
                                d2[ix1] = (System.Single)(Math.Acos(d1[ix1]));
                                ix1 += stride1;
                            }
                        }
                        else
                        {
                            for (long i = 0; i < totalOps; i++)
                            {
                                d2[ix2] = (System.Single)(Math.Acos(d1[ix1]));
                                ix1 += stride1;
                                ix2 += stride2;
                            }
                        }
                    }
                    else if (@out.Shape.Dimensions.Length == 2)
                    {
                        long opsOuter = @out.Shape.Dimensions[0].Length;
                        long opsInner = @out.Shape.Dimensions[1].Length;

                        long ix1 = in1.Shape.Offset;
                        long ix2 = @out.Shape.Offset;

                        long outerStride1 = in1.Shape.Dimensions[0].Stride;
                        long outerStride2 = @out.Shape.Dimensions[0].Stride;

                        long innerStride1 = in1.Shape.Dimensions[1].Stride;
                        long innerStride2 = @out.Shape.Dimensions[1].Stride;

                        outerStride1 -= innerStride1 * in1.Shape.Dimensions[1].Length;
                        outerStride2 -= innerStride2 * @out.Shape.Dimensions[1].Length;

                        for (long i = 0; i < opsOuter; i++)
                        {
                            for (long j = 0; j < opsInner; j++)
                            {
                                d2[ix2] = (System.Single)(Math.Acos(d1[ix1]));
                                ix1 += innerStride1;
                                ix2 += innerStride2;
                            }

                            ix1 += outerStride1;
                            ix2 += outerStride2;
                        }
                    }
                    else
                    {
                        long n = in1.Shape.Dimensions.LongLength - 3;
                        long[] limits = in1.Shape.Dimensions.Where(x => n-- > 0).Select(x => x.Length).ToArray();
                        long[] counters = new long[limits.LongLength];

                        long totalOps = limits.LongLength == 0 ? 1 : limits.Aggregate<long>((a, b) => a * b);

                        //This chunck of variables are used to prevent repeated calculations of offsets
                        long dimIndex0 = 0 + limits.LongLength;
                        long dimIndex1 = 1 + limits.LongLength;
                        long dimIndex2 = 2 + limits.LongLength;

                        long opsOuter = @out.Shape.Dimensions[0 + limits.LongLength].Length;
                        long opsInner = @out.Shape.Dimensions[1 + limits.LongLength].Length;
                        long opsInnerInner = @out.Shape.Dimensions[2 + limits.LongLength].Length;

                        long outerStride1 = in1.Shape.Dimensions[dimIndex0].Stride;
                        long outerStride3 = @out.Shape.Dimensions[dimIndex0].Stride;

                        long innerStride1 = in1.Shape.Dimensions[dimIndex1].Stride;
                        long innerStride3 = @out.Shape.Dimensions[dimIndex1].Stride;

                        long innerInnerStride1 = in1.Shape.Dimensions[dimIndex2].Stride;
                        long innerInnerStride3 = @out.Shape.Dimensions[dimIndex2].Stride;

                        outerStride1 -= innerStride1 * in1.Shape.Dimensions[dimIndex1].Length;
                        outerStride3 -= innerStride3 * @out.Shape.Dimensions[dimIndex1].Length;

                        innerStride1 -= innerInnerStride1 * in1.Shape.Dimensions[dimIndex2].Length;
                        innerStride3 -= innerInnerStride3 * @out.Shape.Dimensions[dimIndex2].Length;

                        for (long outer = 0; outer < totalOps; outer++)
                        {
                            //Get the array offset for the first element in the outer dimension
                            long ix1 = in1.Shape[counters];
                            long ix3 = @out.Shape[counters];


                            for (long i = 0; i < opsOuter; i++)
                            {
                                for (long j = 0; j < opsInner; j++)
                                {
                                    for (long k = 0; k < opsInnerInner; k++)
                                    {
                                        d2[ix3] = (System.Single)(Math.Acos(d1[ix1]));
                                        ix1 += innerInnerStride1;
                                        ix3 += innerInnerStride3;
                                    }

                                    ix1 += innerStride1;
                                    ix3 += innerStride3;
                                }

                                ix1 += outerStride1;
                                ix3 += outerStride3;
                            }

                            if (counters.LongLength > 0)
                            {
                                //Basically a ripple carry adder
                                long p = counters.LongLength - 1;
                                while (++counters[p] == limits[p] && p > 0)
                                {
                                    counters[p] = 0;
                                    p--;
                                }
                            }
                        }
                    }
                }
            }
        }

        /// <summary>
        /// Unsafe implementation of applying a unary operation
        /// </summary>
        /// <typeparam name="C">The type of operation to perform</typeparam>
        /// <param name="op">The operation instance</param>
        /// <param name="scalar">The input scalar argument</param>
        /// <param name="out">The output target</param>
        internal static void UFunc_Op_Inner_Unary_Scalar_Flush_Single_TypedImpl<C>(NumCIL.Float.Acos op, System.Single scalar, NdArray<System.Single> @out)
            where C : IUnaryOp<System.Single>
        {
            unsafe
            {
                using (var f2 = new Pinner(@out.DataAccessor))
                {
                    var d2 = (System.Single*)f2.ptr;

                    if (@out.Shape.Dimensions.Length == 1)
                    {
                        long totalOps = @out.Shape.Dimensions[0].Length;
                        long ix2 = @out.Shape.Offset;
                        long stride2 = @out.Shape.Dimensions[0].Stride;

                        for (long i = 0; i < totalOps; i++)
                        {
                            d2[ix2] = (System.Single)(Math.Acos(scalar));
                            ix2 += stride2;
                        }
                    }
                    else if (@out.Shape.Dimensions.Length == 2)
                    {
                        long opsOuter = @out.Shape.Dimensions[0].Length;
                        long opsInner = @out.Shape.Dimensions[1].Length;

                        long ix2 = @out.Shape.Offset;
                        long outerStride2 = @out.Shape.Dimensions[0].Stride;
                        long innerStride2 = @out.Shape.Dimensions[1].Stride;
                        outerStride2 -= innerStride2 * @out.Shape.Dimensions[1].Length;

                        for (long i = 0; i < opsOuter; i++)
                        {
                            for (long j = 0; j < opsInner; j++)
                            {
                                d2[ix2] = (System.Single)(Math.Acos(scalar));
                                ix2 += innerStride2;
                            }

                            ix2 += outerStride2;
                        }
                    }
                    else
                    {
                        long n = @out.Shape.Dimensions.LongLength - 3;
                        long[] limits = @out.Shape.Dimensions.Where(x => n-- > 0).Select(x => x.Length).ToArray();
                        long[] counters = new long[limits.LongLength];

                        long totalOps = limits.LongLength == 0 ? 1 : limits.Aggregate<long>((a, b) => a * b);

                        //This chunck of variables are used to prevent repeated calculations of offsets
                        long dimIndex0 = 0 + limits.LongLength;
                        long dimIndex1 = 1 + limits.LongLength;
                        long dimIndex2 = 2 + limits.LongLength;

                        long opsOuter = @out.Shape.Dimensions[0 + limits.LongLength].Length;
                        long opsInner = @out.Shape.Dimensions[1 + limits.LongLength].Length;
                        long opsInnerInner = @out.Shape.Dimensions[2 + limits.LongLength].Length;

                        long outerStride3 = @out.Shape.Dimensions[dimIndex0].Stride;
                        long innerStride3 = @out.Shape.Dimensions[dimIndex1].Stride;
                        long innerInnerStride3 = @out.Shape.Dimensions[dimIndex2].Stride;
                        outerStride3 -= innerStride3 * @out.Shape.Dimensions[dimIndex1].Length;
                        innerStride3 -= innerInnerStride3 * @out.Shape.Dimensions[dimIndex2].Length;

                        for (long outer = 0; outer < totalOps; outer++)
                        {
                            //Get the array offset for the first element in the outer dimension
                            long ix3 = @out.Shape[counters];

                            for (long i = 0; i < opsOuter; i++)
                            {
                                for (long j = 0; j < opsInner; j++)
                                {
                                    for (long k = 0; k < opsInnerInner; k++)
                                    {
                                        d2[ix3] = (System.Single)(Math.Acos(scalar));
                                        ix3 += innerInnerStride3;
                                    }

                                    ix3 += innerStride3;
                                }

                                ix3 += outerStride3;
                            }

                            if (counters.LongLength > 0)
                            {
                                //Basically a ripple carry adder
                                long p = counters.LongLength - 1;
                                while (++counters[p] == limits[p] && p > 0)
                                {
                                    counters[p] = 0;
                                    p--;
                                }
                            }
                        }
                    }
                }
            }
        }
        /// <summary>
        /// Unsafe implementation of applying a unary operation
        /// </summary>
        /// <typeparam name="C">The type of operation to perform</typeparam>
        /// <param name="op">The operation instance</param>
        /// <param name="in1">The input argument</param>
        /// <param name="out">The output target</param>
        internal static void UFunc_Op_Inner_Unary_Flush_Double_TypedImpl<C>(NumCIL.Double.Acos op, NdArray<System.Double> in1, NdArray<System.Double> @out)
            where C : IUnaryOp<System.Double>
        {
            unsafe
            {
                using (var f1 = new Pinner(in1.DataAccessor))
                using (var f2 = new Pinner(@out.DataAccessor))
                {
                    var d1 = (System.Double*)f1.ptr;
                    var d2 = (System.Double*)f2.ptr;

                    if (@out.Shape.Dimensions.Length == 1)
                    {
                        long totalOps = @out.Shape.Dimensions[0].Length;

                        long ix1 = in1.Shape.Offset;
                        long ix2 = @out.Shape.Offset;

                        long stride1 = in1.Shape.Dimensions[0].Stride;
                        long stride2 = @out.Shape.Dimensions[0].Stride;


                        if (stride1 == stride2 && ix1 == ix2)
                        {
                            //Best case, all are equal, just keep a single counter
                            for (long i = 0; i < totalOps; i++)
                            {
                                d2[ix1] = (System.Double)(Math.Acos(d1[ix1]));
                                ix1 += stride1;
                            }
                        }
                        else
                        {
                            for (long i = 0; i < totalOps; i++)
                            {
                                d2[ix2] = (System.Double)(Math.Acos(d1[ix1]));
                                ix1 += stride1;
                                ix2 += stride2;
                            }
                        }
                    }
                    else if (@out.Shape.Dimensions.Length == 2)
                    {
                        long opsOuter = @out.Shape.Dimensions[0].Length;
                        long opsInner = @out.Shape.Dimensions[1].Length;

                        long ix1 = in1.Shape.Offset;
                        long ix2 = @out.Shape.Offset;

                        long outerStride1 = in1.Shape.Dimensions[0].Stride;
                        long outerStride2 = @out.Shape.Dimensions[0].Stride;

                        long innerStride1 = in1.Shape.Dimensions[1].Stride;
                        long innerStride2 = @out.Shape.Dimensions[1].Stride;

                        outerStride1 -= innerStride1 * in1.Shape.Dimensions[1].Length;
                        outerStride2 -= innerStride2 * @out.Shape.Dimensions[1].Length;

                        for (long i = 0; i < opsOuter; i++)
                        {
                            for (long j = 0; j < opsInner; j++)
                            {
                                d2[ix2] = (System.Double)(Math.Acos(d1[ix1]));
                                ix1 += innerStride1;
                                ix2 += innerStride2;
                            }

                            ix1 += outerStride1;
                            ix2 += outerStride2;
                        }
                    }
                    else
                    {
                        long n = in1.Shape.Dimensions.LongLength - 3;
                        long[] limits = in1.Shape.Dimensions.Where(x => n-- > 0).Select(x => x.Length).ToArray();
                        long[] counters = new long[limits.LongLength];

                        long totalOps = limits.LongLength == 0 ? 1 : limits.Aggregate<long>((a, b) => a * b);

                        //This chunck of variables are used to prevent repeated calculations of offsets
                        long dimIndex0 = 0 + limits.LongLength;
                        long dimIndex1 = 1 + limits.LongLength;
                        long dimIndex2 = 2 + limits.LongLength;

                        long opsOuter = @out.Shape.Dimensions[0 + limits.LongLength].Length;
                        long opsInner = @out.Shape.Dimensions[1 + limits.LongLength].Length;
                        long opsInnerInner = @out.Shape.Dimensions[2 + limits.LongLength].Length;

                        long outerStride1 = in1.Shape.Dimensions[dimIndex0].Stride;
                        long outerStride3 = @out.Shape.Dimensions[dimIndex0].Stride;

                        long innerStride1 = in1.Shape.Dimensions[dimIndex1].Stride;
                        long innerStride3 = @out.Shape.Dimensions[dimIndex1].Stride;

                        long innerInnerStride1 = in1.Shape.Dimensions[dimIndex2].Stride;
                        long innerInnerStride3 = @out.Shape.Dimensions[dimIndex2].Stride;

                        outerStride1 -= innerStride1 * in1.Shape.Dimensions[dimIndex1].Length;
                        outerStride3 -= innerStride3 * @out.Shape.Dimensions[dimIndex1].Length;

                        innerStride1 -= innerInnerStride1 * in1.Shape.Dimensions[dimIndex2].Length;
                        innerStride3 -= innerInnerStride3 * @out.Shape.Dimensions[dimIndex2].Length;

                        for (long outer = 0; outer < totalOps; outer++)
                        {
                            //Get the array offset for the first element in the outer dimension
                            long ix1 = in1.Shape[counters];
                            long ix3 = @out.Shape[counters];


                            for (long i = 0; i < opsOuter; i++)
                            {
                                for (long j = 0; j < opsInner; j++)
                                {
                                    for (long k = 0; k < opsInnerInner; k++)
                                    {
                                        d2[ix3] = (System.Double)(Math.Acos(d1[ix1]));
                                        ix1 += innerInnerStride1;
                                        ix3 += innerInnerStride3;
                                    }

                                    ix1 += innerStride1;
                                    ix3 += innerStride3;
                                }

                                ix1 += outerStride1;
                                ix3 += outerStride3;
                            }

                            if (counters.LongLength > 0)
                            {
                                //Basically a ripple carry adder
                                long p = counters.LongLength - 1;
                                while (++counters[p] == limits[p] && p > 0)
                                {
                                    counters[p] = 0;
                                    p--;
                                }
                            }
                        }
                    }
                }
            }
        }

        /// <summary>
        /// Unsafe implementation of applying a unary operation
        /// </summary>
        /// <typeparam name="C">The type of operation to perform</typeparam>
        /// <param name="op">The operation instance</param>
        /// <param name="scalar">The input scalar argument</param>
        /// <param name="out">The output target</param>
        internal static void UFunc_Op_Inner_Unary_Scalar_Flush_Double_TypedImpl<C>(NumCIL.Double.Acos op, System.Double scalar, NdArray<System.Double> @out)
            where C : IUnaryOp<System.Double>
        {
            unsafe
            {
                using (var f2 = new Pinner(@out.DataAccessor))
                {
                    var d2 = (System.Double*)f2.ptr;

                    if (@out.Shape.Dimensions.Length == 1)
                    {
                        long totalOps = @out.Shape.Dimensions[0].Length;
                        long ix2 = @out.Shape.Offset;
                        long stride2 = @out.Shape.Dimensions[0].Stride;

                        for (long i = 0; i < totalOps; i++)
                        {
                            d2[ix2] = (System.Double)(Math.Acos(scalar));
                            ix2 += stride2;
                        }
                    }
                    else if (@out.Shape.Dimensions.Length == 2)
                    {
                        long opsOuter = @out.Shape.Dimensions[0].Length;
                        long opsInner = @out.Shape.Dimensions[1].Length;

                        long ix2 = @out.Shape.Offset;
                        long outerStride2 = @out.Shape.Dimensions[0].Stride;
                        long innerStride2 = @out.Shape.Dimensions[1].Stride;
                        outerStride2 -= innerStride2 * @out.Shape.Dimensions[1].Length;

                        for (long i = 0; i < opsOuter; i++)
                        {
                            for (long j = 0; j < opsInner; j++)
                            {
                                d2[ix2] = (System.Double)(Math.Acos(scalar));
                                ix2 += innerStride2;
                            }

                            ix2 += outerStride2;
                        }
                    }
                    else
                    {
                        long n = @out.Shape.Dimensions.LongLength - 3;
                        long[] limits = @out.Shape.Dimensions.Where(x => n-- > 0).Select(x => x.Length).ToArray();
                        long[] counters = new long[limits.LongLength];

                        long totalOps = limits.LongLength == 0 ? 1 : limits.Aggregate<long>((a, b) => a * b);

                        //This chunck of variables are used to prevent repeated calculations of offsets
                        long dimIndex0 = 0 + limits.LongLength;
                        long dimIndex1 = 1 + limits.LongLength;
                        long dimIndex2 = 2 + limits.LongLength;

                        long opsOuter = @out.Shape.Dimensions[0 + limits.LongLength].Length;
                        long opsInner = @out.Shape.Dimensions[1 + limits.LongLength].Length;
                        long opsInnerInner = @out.Shape.Dimensions[2 + limits.LongLength].Length;

                        long outerStride3 = @out.Shape.Dimensions[dimIndex0].Stride;
                        long innerStride3 = @out.Shape.Dimensions[dimIndex1].Stride;
                        long innerInnerStride3 = @out.Shape.Dimensions[dimIndex2].Stride;
                        outerStride3 -= innerStride3 * @out.Shape.Dimensions[dimIndex1].Length;
                        innerStride3 -= innerInnerStride3 * @out.Shape.Dimensions[dimIndex2].Length;

                        for (long outer = 0; outer < totalOps; outer++)
                        {
                            //Get the array offset for the first element in the outer dimension
                            long ix3 = @out.Shape[counters];

                            for (long i = 0; i < opsOuter; i++)
                            {
                                for (long j = 0; j < opsInner; j++)
                                {
                                    for (long k = 0; k < opsInnerInner; k++)
                                    {
                                        d2[ix3] = (System.Double)(Math.Acos(scalar));
                                        ix3 += innerInnerStride3;
                                    }

                                    ix3 += innerStride3;
                                }

                                ix3 += outerStride3;
                            }

                            if (counters.LongLength > 0)
                            {
                                //Basically a ripple carry adder
                                long p = counters.LongLength - 1;
                                while (++counters[p] == limits[p] && p > 0)
                                {
                                    counters[p] = 0;
                                    p--;
                                }
                            }
                        }
                    }
                }
            }
        }
        /// <summary>
        /// Unsafe implementation of applying a unary operation
        /// </summary>
        /// <typeparam name="C">The type of operation to perform</typeparam>
        /// <param name="op">The operation instance</param>
        /// <param name="in1">The input argument</param>
        /// <param name="out">The output target</param>
        internal static void UFunc_Op_Inner_Unary_Flush_SByte_TypedImpl<C>(NumCIL.Int8.Atan op, NdArray<System.SByte> in1, NdArray<System.SByte> @out)
            where C : IUnaryOp<System.SByte>
        {
            unsafe
            {
                using (var f1 = new Pinner(in1.DataAccessor))
                using (var f2 = new Pinner(@out.DataAccessor))
                {
                    var d1 = (System.SByte*)f1.ptr;
                    var d2 = (System.SByte*)f2.ptr;

                    if (@out.Shape.Dimensions.Length == 1)
                    {
                        long totalOps = @out.Shape.Dimensions[0].Length;

                        long ix1 = in1.Shape.Offset;
                        long ix2 = @out.Shape.Offset;

                        long stride1 = in1.Shape.Dimensions[0].Stride;
                        long stride2 = @out.Shape.Dimensions[0].Stride;


                        if (stride1 == stride2 && ix1 == ix2)
                        {
                            //Best case, all are equal, just keep a single counter
                            for (long i = 0; i < totalOps; i++)
                            {
                                d2[ix1] = (System.SByte)(Math.Atan(d1[ix1]));
                                ix1 += stride1;
                            }
                        }
                        else
                        {
                            for (long i = 0; i < totalOps; i++)
                            {
                                d2[ix2] = (System.SByte)(Math.Atan(d1[ix1]));
                                ix1 += stride1;
                                ix2 += stride2;
                            }
                        }
                    }
                    else if (@out.Shape.Dimensions.Length == 2)
                    {
                        long opsOuter = @out.Shape.Dimensions[0].Length;
                        long opsInner = @out.Shape.Dimensions[1].Length;

                        long ix1 = in1.Shape.Offset;
                        long ix2 = @out.Shape.Offset;

                        long outerStride1 = in1.Shape.Dimensions[0].Stride;
                        long outerStride2 = @out.Shape.Dimensions[0].Stride;

                        long innerStride1 = in1.Shape.Dimensions[1].Stride;
                        long innerStride2 = @out.Shape.Dimensions[1].Stride;

                        outerStride1 -= innerStride1 * in1.Shape.Dimensions[1].Length;
                        outerStride2 -= innerStride2 * @out.Shape.Dimensions[1].Length;

                        for (long i = 0; i < opsOuter; i++)
                        {
                            for (long j = 0; j < opsInner; j++)
                            {
                                d2[ix2] = (System.SByte)(Math.Atan(d1[ix1]));
                                ix1 += innerStride1;
                                ix2 += innerStride2;
                            }

                            ix1 += outerStride1;
                            ix2 += outerStride2;
                        }
                    }
                    else
                    {
                        long n = in1.Shape.Dimensions.LongLength - 3;
                        long[] limits = in1.Shape.Dimensions.Where(x => n-- > 0).Select(x => x.Length).ToArray();
                        long[] counters = new long[limits.LongLength];

                        long totalOps = limits.LongLength == 0 ? 1 : limits.Aggregate<long>((a, b) => a * b);

                        //This chunck of variables are used to prevent repeated calculations of offsets
                        long dimIndex0 = 0 + limits.LongLength;
                        long dimIndex1 = 1 + limits.LongLength;
                        long dimIndex2 = 2 + limits.LongLength;

                        long opsOuter = @out.Shape.Dimensions[0 + limits.LongLength].Length;
                        long opsInner = @out.Shape.Dimensions[1 + limits.LongLength].Length;
                        long opsInnerInner = @out.Shape.Dimensions[2 + limits.LongLength].Length;

                        long outerStride1 = in1.Shape.Dimensions[dimIndex0].Stride;
                        long outerStride3 = @out.Shape.Dimensions[dimIndex0].Stride;

                        long innerStride1 = in1.Shape.Dimensions[dimIndex1].Stride;
                        long innerStride3 = @out.Shape.Dimensions[dimIndex1].Stride;

                        long innerInnerStride1 = in1.Shape.Dimensions[dimIndex2].Stride;
                        long innerInnerStride3 = @out.Shape.Dimensions[dimIndex2].Stride;

                        outerStride1 -= innerStride1 * in1.Shape.Dimensions[dimIndex1].Length;
                        outerStride3 -= innerStride3 * @out.Shape.Dimensions[dimIndex1].Length;

                        innerStride1 -= innerInnerStride1 * in1.Shape.Dimensions[dimIndex2].Length;
                        innerStride3 -= innerInnerStride3 * @out.Shape.Dimensions[dimIndex2].Length;

                        for (long outer = 0; outer < totalOps; outer++)
                        {
                            //Get the array offset for the first element in the outer dimension
                            long ix1 = in1.Shape[counters];
                            long ix3 = @out.Shape[counters];


                            for (long i = 0; i < opsOuter; i++)
                            {
                                for (long j = 0; j < opsInner; j++)
                                {
                                    for (long k = 0; k < opsInnerInner; k++)
                                    {
                                        d2[ix3] = (System.SByte)(Math.Atan(d1[ix1]));
                                        ix1 += innerInnerStride1;
                                        ix3 += innerInnerStride3;
                                    }

                                    ix1 += innerStride1;
                                    ix3 += innerStride3;
                                }

                                ix1 += outerStride1;
                                ix3 += outerStride3;
                            }

                            if (counters.LongLength > 0)
                            {
                                //Basically a ripple carry adder
                                long p = counters.LongLength - 1;
                                while (++counters[p] == limits[p] && p > 0)
                                {
                                    counters[p] = 0;
                                    p--;
                                }
                            }
                        }
                    }
                }
            }
        }

        /// <summary>
        /// Unsafe implementation of applying a unary operation
        /// </summary>
        /// <typeparam name="C">The type of operation to perform</typeparam>
        /// <param name="op">The operation instance</param>
        /// <param name="scalar">The input scalar argument</param>
        /// <param name="out">The output target</param>
        internal static void UFunc_Op_Inner_Unary_Scalar_Flush_SByte_TypedImpl<C>(NumCIL.Int8.Atan op, System.SByte scalar, NdArray<System.SByte> @out)
            where C : IUnaryOp<System.SByte>
        {
            unsafe
            {
                using (var f2 = new Pinner(@out.DataAccessor))
                {
                    var d2 = (System.SByte*)f2.ptr;

                    if (@out.Shape.Dimensions.Length == 1)
                    {
                        long totalOps = @out.Shape.Dimensions[0].Length;
                        long ix2 = @out.Shape.Offset;
                        long stride2 = @out.Shape.Dimensions[0].Stride;

                        for (long i = 0; i < totalOps; i++)
                        {
                            d2[ix2] = (System.SByte)(Math.Atan(scalar));
                            ix2 += stride2;
                        }
                    }
                    else if (@out.Shape.Dimensions.Length == 2)
                    {
                        long opsOuter = @out.Shape.Dimensions[0].Length;
                        long opsInner = @out.Shape.Dimensions[1].Length;

                        long ix2 = @out.Shape.Offset;
                        long outerStride2 = @out.Shape.Dimensions[0].Stride;
                        long innerStride2 = @out.Shape.Dimensions[1].Stride;
                        outerStride2 -= innerStride2 * @out.Shape.Dimensions[1].Length;

                        for (long i = 0; i < opsOuter; i++)
                        {
                            for (long j = 0; j < opsInner; j++)
                            {
                                d2[ix2] = (System.SByte)(Math.Atan(scalar));
                                ix2 += innerStride2;
                            }

                            ix2 += outerStride2;
                        }
                    }
                    else
                    {
                        long n = @out.Shape.Dimensions.LongLength - 3;
                        long[] limits = @out.Shape.Dimensions.Where(x => n-- > 0).Select(x => x.Length).ToArray();
                        long[] counters = new long[limits.LongLength];

                        long totalOps = limits.LongLength == 0 ? 1 : limits.Aggregate<long>((a, b) => a * b);

                        //This chunck of variables are used to prevent repeated calculations of offsets
                        long dimIndex0 = 0 + limits.LongLength;
                        long dimIndex1 = 1 + limits.LongLength;
                        long dimIndex2 = 2 + limits.LongLength;

                        long opsOuter = @out.Shape.Dimensions[0 + limits.LongLength].Length;
                        long opsInner = @out.Shape.Dimensions[1 + limits.LongLength].Length;
                        long opsInnerInner = @out.Shape.Dimensions[2 + limits.LongLength].Length;

                        long outerStride3 = @out.Shape.Dimensions[dimIndex0].Stride;
                        long innerStride3 = @out.Shape.Dimensions[dimIndex1].Stride;
                        long innerInnerStride3 = @out.Shape.Dimensions[dimIndex2].Stride;
                        outerStride3 -= innerStride3 * @out.Shape.Dimensions[dimIndex1].Length;
                        innerStride3 -= innerInnerStride3 * @out.Shape.Dimensions[dimIndex2].Length;

                        for (long outer = 0; outer < totalOps; outer++)
                        {
                            //Get the array offset for the first element in the outer dimension
                            long ix3 = @out.Shape[counters];

                            for (long i = 0; i < opsOuter; i++)
                            {
                                for (long j = 0; j < opsInner; j++)
                                {
                                    for (long k = 0; k < opsInnerInner; k++)
                                    {
                                        d2[ix3] = (System.SByte)(Math.Atan(scalar));
                                        ix3 += innerInnerStride3;
                                    }

                                    ix3 += innerStride3;
                                }

                                ix3 += outerStride3;
                            }

                            if (counters.LongLength > 0)
                            {
                                //Basically a ripple carry adder
                                long p = counters.LongLength - 1;
                                while (++counters[p] == limits[p] && p > 0)
                                {
                                    counters[p] = 0;
                                    p--;
                                }
                            }
                        }
                    }
                }
            }
        }
        /// <summary>
        /// Unsafe implementation of applying a unary operation
        /// </summary>
        /// <typeparam name="C">The type of operation to perform</typeparam>
        /// <param name="op">The operation instance</param>
        /// <param name="in1">The input argument</param>
        /// <param name="out">The output target</param>
        internal static void UFunc_Op_Inner_Unary_Flush_Byte_TypedImpl<C>(NumCIL.UInt8.Atan op, NdArray<System.Byte> in1, NdArray<System.Byte> @out)
            where C : IUnaryOp<System.Byte>
        {
            unsafe
            {
                using (var f1 = new Pinner(in1.DataAccessor))
                using (var f2 = new Pinner(@out.DataAccessor))
                {
                    var d1 = (System.Byte*)f1.ptr;
                    var d2 = (System.Byte*)f2.ptr;

                    if (@out.Shape.Dimensions.Length == 1)
                    {
                        long totalOps = @out.Shape.Dimensions[0].Length;

                        long ix1 = in1.Shape.Offset;
                        long ix2 = @out.Shape.Offset;

                        long stride1 = in1.Shape.Dimensions[0].Stride;
                        long stride2 = @out.Shape.Dimensions[0].Stride;


                        if (stride1 == stride2 && ix1 == ix2)
                        {
                            //Best case, all are equal, just keep a single counter
                            for (long i = 0; i < totalOps; i++)
                            {
                                d2[ix1] = (System.Byte)(Math.Atan(d1[ix1]));
                                ix1 += stride1;
                            }
                        }
                        else
                        {
                            for (long i = 0; i < totalOps; i++)
                            {
                                d2[ix2] = (System.Byte)(Math.Atan(d1[ix1]));
                                ix1 += stride1;
                                ix2 += stride2;
                            }
                        }
                    }
                    else if (@out.Shape.Dimensions.Length == 2)
                    {
                        long opsOuter = @out.Shape.Dimensions[0].Length;
                        long opsInner = @out.Shape.Dimensions[1].Length;

                        long ix1 = in1.Shape.Offset;
                        long ix2 = @out.Shape.Offset;

                        long outerStride1 = in1.Shape.Dimensions[0].Stride;
                        long outerStride2 = @out.Shape.Dimensions[0].Stride;

                        long innerStride1 = in1.Shape.Dimensions[1].Stride;
                        long innerStride2 = @out.Shape.Dimensions[1].Stride;

                        outerStride1 -= innerStride1 * in1.Shape.Dimensions[1].Length;
                        outerStride2 -= innerStride2 * @out.Shape.Dimensions[1].Length;

                        for (long i = 0; i < opsOuter; i++)
                        {
                            for (long j = 0; j < opsInner; j++)
                            {
                                d2[ix2] = (System.Byte)(Math.Atan(d1[ix1]));
                                ix1 += innerStride1;
                                ix2 += innerStride2;
                            }

                            ix1 += outerStride1;
                            ix2 += outerStride2;
                        }
                    }
                    else
                    {
                        long n = in1.Shape.Dimensions.LongLength - 3;
                        long[] limits = in1.Shape.Dimensions.Where(x => n-- > 0).Select(x => x.Length).ToArray();
                        long[] counters = new long[limits.LongLength];

                        long totalOps = limits.LongLength == 0 ? 1 : limits.Aggregate<long>((a, b) => a * b);

                        //This chunck of variables are used to prevent repeated calculations of offsets
                        long dimIndex0 = 0 + limits.LongLength;
                        long dimIndex1 = 1 + limits.LongLength;
                        long dimIndex2 = 2 + limits.LongLength;

                        long opsOuter = @out.Shape.Dimensions[0 + limits.LongLength].Length;
                        long opsInner = @out.Shape.Dimensions[1 + limits.LongLength].Length;
                        long opsInnerInner = @out.Shape.Dimensions[2 + limits.LongLength].Length;

                        long outerStride1 = in1.Shape.Dimensions[dimIndex0].Stride;
                        long outerStride3 = @out.Shape.Dimensions[dimIndex0].Stride;

                        long innerStride1 = in1.Shape.Dimensions[dimIndex1].Stride;
                        long innerStride3 = @out.Shape.Dimensions[dimIndex1].Stride;

                        long innerInnerStride1 = in1.Shape.Dimensions[dimIndex2].Stride;
                        long innerInnerStride3 = @out.Shape.Dimensions[dimIndex2].Stride;

                        outerStride1 -= innerStride1 * in1.Shape.Dimensions[dimIndex1].Length;
                        outerStride3 -= innerStride3 * @out.Shape.Dimensions[dimIndex1].Length;

                        innerStride1 -= innerInnerStride1 * in1.Shape.Dimensions[dimIndex2].Length;
                        innerStride3 -= innerInnerStride3 * @out.Shape.Dimensions[dimIndex2].Length;

                        for (long outer = 0; outer < totalOps; outer++)
                        {
                            //Get the array offset for the first element in the outer dimension
                            long ix1 = in1.Shape[counters];
                            long ix3 = @out.Shape[counters];


                            for (long i = 0; i < opsOuter; i++)
                            {
                                for (long j = 0; j < opsInner; j++)
                                {
                                    for (long k = 0; k < opsInnerInner; k++)
                                    {
                                        d2[ix3] = (System.Byte)(Math.Atan(d1[ix1]));
                                        ix1 += innerInnerStride1;
                                        ix3 += innerInnerStride3;
                                    }

                                    ix1 += innerStride1;
                                    ix3 += innerStride3;
                                }

                                ix1 += outerStride1;
                                ix3 += outerStride3;
                            }

                            if (counters.LongLength > 0)
                            {
                                //Basically a ripple carry adder
                                long p = counters.LongLength - 1;
                                while (++counters[p] == limits[p] && p > 0)
                                {
                                    counters[p] = 0;
                                    p--;
                                }
                            }
                        }
                    }
                }
            }
        }

        /// <summary>
        /// Unsafe implementation of applying a unary operation
        /// </summary>
        /// <typeparam name="C">The type of operation to perform</typeparam>
        /// <param name="op">The operation instance</param>
        /// <param name="scalar">The input scalar argument</param>
        /// <param name="out">The output target</param>
        internal static void UFunc_Op_Inner_Unary_Scalar_Flush_Byte_TypedImpl<C>(NumCIL.UInt8.Atan op, System.Byte scalar, NdArray<System.Byte> @out)
            where C : IUnaryOp<System.Byte>
        {
            unsafe
            {
                using (var f2 = new Pinner(@out.DataAccessor))
                {
                    var d2 = (System.Byte*)f2.ptr;

                    if (@out.Shape.Dimensions.Length == 1)
                    {
                        long totalOps = @out.Shape.Dimensions[0].Length;
                        long ix2 = @out.Shape.Offset;
                        long stride2 = @out.Shape.Dimensions[0].Stride;

                        for (long i = 0; i < totalOps; i++)
                        {
                            d2[ix2] = (System.Byte)(Math.Atan(scalar));
                            ix2 += stride2;
                        }
                    }
                    else if (@out.Shape.Dimensions.Length == 2)
                    {
                        long opsOuter = @out.Shape.Dimensions[0].Length;
                        long opsInner = @out.Shape.Dimensions[1].Length;

                        long ix2 = @out.Shape.Offset;
                        long outerStride2 = @out.Shape.Dimensions[0].Stride;
                        long innerStride2 = @out.Shape.Dimensions[1].Stride;
                        outerStride2 -= innerStride2 * @out.Shape.Dimensions[1].Length;

                        for (long i = 0; i < opsOuter; i++)
                        {
                            for (long j = 0; j < opsInner; j++)
                            {
                                d2[ix2] = (System.Byte)(Math.Atan(scalar));
                                ix2 += innerStride2;
                            }

                            ix2 += outerStride2;
                        }
                    }
                    else
                    {
                        long n = @out.Shape.Dimensions.LongLength - 3;
                        long[] limits = @out.Shape.Dimensions.Where(x => n-- > 0).Select(x => x.Length).ToArray();
                        long[] counters = new long[limits.LongLength];

                        long totalOps = limits.LongLength == 0 ? 1 : limits.Aggregate<long>((a, b) => a * b);

                        //This chunck of variables are used to prevent repeated calculations of offsets
                        long dimIndex0 = 0 + limits.LongLength;
                        long dimIndex1 = 1 + limits.LongLength;
                        long dimIndex2 = 2 + limits.LongLength;

                        long opsOuter = @out.Shape.Dimensions[0 + limits.LongLength].Length;
                        long opsInner = @out.Shape.Dimensions[1 + limits.LongLength].Length;
                        long opsInnerInner = @out.Shape.Dimensions[2 + limits.LongLength].Length;

                        long outerStride3 = @out.Shape.Dimensions[dimIndex0].Stride;
                        long innerStride3 = @out.Shape.Dimensions[dimIndex1].Stride;
                        long innerInnerStride3 = @out.Shape.Dimensions[dimIndex2].Stride;
                        outerStride3 -= innerStride3 * @out.Shape.Dimensions[dimIndex1].Length;
                        innerStride3 -= innerInnerStride3 * @out.Shape.Dimensions[dimIndex2].Length;

                        for (long outer = 0; outer < totalOps; outer++)
                        {
                            //Get the array offset for the first element in the outer dimension
                            long ix3 = @out.Shape[counters];

                            for (long i = 0; i < opsOuter; i++)
                            {
                                for (long j = 0; j < opsInner; j++)
                                {
                                    for (long k = 0; k < opsInnerInner; k++)
                                    {
                                        d2[ix3] = (System.Byte)(Math.Atan(scalar));
                                        ix3 += innerInnerStride3;
                                    }

                                    ix3 += innerStride3;
                                }

                                ix3 += outerStride3;
                            }

                            if (counters.LongLength > 0)
                            {
                                //Basically a ripple carry adder
                                long p = counters.LongLength - 1;
                                while (++counters[p] == limits[p] && p > 0)
                                {
                                    counters[p] = 0;
                                    p--;
                                }
                            }
                        }
                    }
                }
            }
        }
        /// <summary>
        /// Unsafe implementation of applying a unary operation
        /// </summary>
        /// <typeparam name="C">The type of operation to perform</typeparam>
        /// <param name="op">The operation instance</param>
        /// <param name="in1">The input argument</param>
        /// <param name="out">The output target</param>
        internal static void UFunc_Op_Inner_Unary_Flush_Int16_TypedImpl<C>(NumCIL.Int16.Atan op, NdArray<System.Int16> in1, NdArray<System.Int16> @out)
            where C : IUnaryOp<System.Int16>
        {
            unsafe
            {
                using (var f1 = new Pinner(in1.DataAccessor))
                using (var f2 = new Pinner(@out.DataAccessor))
                {
                    var d1 = (System.Int16*)f1.ptr;
                    var d2 = (System.Int16*)f2.ptr;

                    if (@out.Shape.Dimensions.Length == 1)
                    {
                        long totalOps = @out.Shape.Dimensions[0].Length;

                        long ix1 = in1.Shape.Offset;
                        long ix2 = @out.Shape.Offset;

                        long stride1 = in1.Shape.Dimensions[0].Stride;
                        long stride2 = @out.Shape.Dimensions[0].Stride;


                        if (stride1 == stride2 && ix1 == ix2)
                        {
                            //Best case, all are equal, just keep a single counter
                            for (long i = 0; i < totalOps; i++)
                            {
                                d2[ix1] = (System.Int16)(Math.Atan(d1[ix1]));
                                ix1 += stride1;
                            }
                        }
                        else
                        {
                            for (long i = 0; i < totalOps; i++)
                            {
                                d2[ix2] = (System.Int16)(Math.Atan(d1[ix1]));
                                ix1 += stride1;
                                ix2 += stride2;
                            }
                        }
                    }
                    else if (@out.Shape.Dimensions.Length == 2)
                    {
                        long opsOuter = @out.Shape.Dimensions[0].Length;
                        long opsInner = @out.Shape.Dimensions[1].Length;

                        long ix1 = in1.Shape.Offset;
                        long ix2 = @out.Shape.Offset;

                        long outerStride1 = in1.Shape.Dimensions[0].Stride;
                        long outerStride2 = @out.Shape.Dimensions[0].Stride;

                        long innerStride1 = in1.Shape.Dimensions[1].Stride;
                        long innerStride2 = @out.Shape.Dimensions[1].Stride;

                        outerStride1 -= innerStride1 * in1.Shape.Dimensions[1].Length;
                        outerStride2 -= innerStride2 * @out.Shape.Dimensions[1].Length;

                        for (long i = 0; i < opsOuter; i++)
                        {
                            for (long j = 0; j < opsInner; j++)
                            {
                                d2[ix2] = (System.Int16)(Math.Atan(d1[ix1]));
                                ix1 += innerStride1;
                                ix2 += innerStride2;
                            }

                            ix1 += outerStride1;
                            ix2 += outerStride2;
                        }
                    }
                    else
                    {
                        long n = in1.Shape.Dimensions.LongLength - 3;
                        long[] limits = in1.Shape.Dimensions.Where(x => n-- > 0).Select(x => x.Length).ToArray();
                        long[] counters = new long[limits.LongLength];

                        long totalOps = limits.LongLength == 0 ? 1 : limits.Aggregate<long>((a, b) => a * b);

                        //This chunck of variables are used to prevent repeated calculations of offsets
                        long dimIndex0 = 0 + limits.LongLength;
                        long dimIndex1 = 1 + limits.LongLength;
                        long dimIndex2 = 2 + limits.LongLength;

                        long opsOuter = @out.Shape.Dimensions[0 + limits.LongLength].Length;
                        long opsInner = @out.Shape.Dimensions[1 + limits.LongLength].Length;
                        long opsInnerInner = @out.Shape.Dimensions[2 + limits.LongLength].Length;

                        long outerStride1 = in1.Shape.Dimensions[dimIndex0].Stride;
                        long outerStride3 = @out.Shape.Dimensions[dimIndex0].Stride;

                        long innerStride1 = in1.Shape.Dimensions[dimIndex1].Stride;
                        long innerStride3 = @out.Shape.Dimensions[dimIndex1].Stride;

                        long innerInnerStride1 = in1.Shape.Dimensions[dimIndex2].Stride;
                        long innerInnerStride3 = @out.Shape.Dimensions[dimIndex2].Stride;

                        outerStride1 -= innerStride1 * in1.Shape.Dimensions[dimIndex1].Length;
                        outerStride3 -= innerStride3 * @out.Shape.Dimensions[dimIndex1].Length;

                        innerStride1 -= innerInnerStride1 * in1.Shape.Dimensions[dimIndex2].Length;
                        innerStride3 -= innerInnerStride3 * @out.Shape.Dimensions[dimIndex2].Length;

                        for (long outer = 0; outer < totalOps; outer++)
                        {
                            //Get the array offset for the first element in the outer dimension
                            long ix1 = in1.Shape[counters];
                            long ix3 = @out.Shape[counters];


                            for (long i = 0; i < opsOuter; i++)
                            {
                                for (long j = 0; j < opsInner; j++)
                                {
                                    for (long k = 0; k < opsInnerInner; k++)
                                    {
                                        d2[ix3] = (System.Int16)(Math.Atan(d1[ix1]));
                                        ix1 += innerInnerStride1;
                                        ix3 += innerInnerStride3;
                                    }

                                    ix1 += innerStride1;
                                    ix3 += innerStride3;
                                }

                                ix1 += outerStride1;
                                ix3 += outerStride3;
                            }

                            if (counters.LongLength > 0)
                            {
                                //Basically a ripple carry adder
                                long p = counters.LongLength - 1;
                                while (++counters[p] == limits[p] && p > 0)
                                {
                                    counters[p] = 0;
                                    p--;
                                }
                            }
                        }
                    }
                }
            }
        }

        /// <summary>
        /// Unsafe implementation of applying a unary operation
        /// </summary>
        /// <typeparam name="C">The type of operation to perform</typeparam>
        /// <param name="op">The operation instance</param>
        /// <param name="scalar">The input scalar argument</param>
        /// <param name="out">The output target</param>
        internal static void UFunc_Op_Inner_Unary_Scalar_Flush_Int16_TypedImpl<C>(NumCIL.Int16.Atan op, System.Int16 scalar, NdArray<System.Int16> @out)
            where C : IUnaryOp<System.Int16>
        {
            unsafe
            {
                using (var f2 = new Pinner(@out.DataAccessor))
                {
                    var d2 = (System.Int16*)f2.ptr;

                    if (@out.Shape.Dimensions.Length == 1)
                    {
                        long totalOps = @out.Shape.Dimensions[0].Length;
                        long ix2 = @out.Shape.Offset;
                        long stride2 = @out.Shape.Dimensions[0].Stride;

                        for (long i = 0; i < totalOps; i++)
                        {
                            d2[ix2] = (System.Int16)(Math.Atan(scalar));
                            ix2 += stride2;
                        }
                    }
                    else if (@out.Shape.Dimensions.Length == 2)
                    {
                        long opsOuter = @out.Shape.Dimensions[0].Length;
                        long opsInner = @out.Shape.Dimensions[1].Length;

                        long ix2 = @out.Shape.Offset;
                        long outerStride2 = @out.Shape.Dimensions[0].Stride;
                        long innerStride2 = @out.Shape.Dimensions[1].Stride;
                        outerStride2 -= innerStride2 * @out.Shape.Dimensions[1].Length;

                        for (long i = 0; i < opsOuter; i++)
                        {
                            for (long j = 0; j < opsInner; j++)
                            {
                                d2[ix2] = (System.Int16)(Math.Atan(scalar));
                                ix2 += innerStride2;
                            }

                            ix2 += outerStride2;
                        }
                    }
                    else
                    {
                        long n = @out.Shape.Dimensions.LongLength - 3;
                        long[] limits = @out.Shape.Dimensions.Where(x => n-- > 0).Select(x => x.Length).ToArray();
                        long[] counters = new long[limits.LongLength];

                        long totalOps = limits.LongLength == 0 ? 1 : limits.Aggregate<long>((a, b) => a * b);

                        //This chunck of variables are used to prevent repeated calculations of offsets
                        long dimIndex0 = 0 + limits.LongLength;
                        long dimIndex1 = 1 + limits.LongLength;
                        long dimIndex2 = 2 + limits.LongLength;

                        long opsOuter = @out.Shape.Dimensions[0 + limits.LongLength].Length;
                        long opsInner = @out.Shape.Dimensions[1 + limits.LongLength].Length;
                        long opsInnerInner = @out.Shape.Dimensions[2 + limits.LongLength].Length;

                        long outerStride3 = @out.Shape.Dimensions[dimIndex0].Stride;
                        long innerStride3 = @out.Shape.Dimensions[dimIndex1].Stride;
                        long innerInnerStride3 = @out.Shape.Dimensions[dimIndex2].Stride;
                        outerStride3 -= innerStride3 * @out.Shape.Dimensions[dimIndex1].Length;
                        innerStride3 -= innerInnerStride3 * @out.Shape.Dimensions[dimIndex2].Length;

                        for (long outer = 0; outer < totalOps; outer++)
                        {
                            //Get the array offset for the first element in the outer dimension
                            long ix3 = @out.Shape[counters];

                            for (long i = 0; i < opsOuter; i++)
                            {
                                for (long j = 0; j < opsInner; j++)
                                {
                                    for (long k = 0; k < opsInnerInner; k++)
                                    {
                                        d2[ix3] = (System.Int16)(Math.Atan(scalar));
                                        ix3 += innerInnerStride3;
                                    }

                                    ix3 += innerStride3;
                                }

                                ix3 += outerStride3;
                            }

                            if (counters.LongLength > 0)
                            {
                                //Basically a ripple carry adder
                                long p = counters.LongLength - 1;
                                while (++counters[p] == limits[p] && p > 0)
                                {
                                    counters[p] = 0;
                                    p--;
                                }
                            }
                        }
                    }
                }
            }
        }
        /// <summary>
        /// Unsafe implementation of applying a unary operation
        /// </summary>
        /// <typeparam name="C">The type of operation to perform</typeparam>
        /// <param name="op">The operation instance</param>
        /// <param name="in1">The input argument</param>
        /// <param name="out">The output target</param>
        internal static void UFunc_Op_Inner_Unary_Flush_UInt16_TypedImpl<C>(NumCIL.UInt16.Atan op, NdArray<System.UInt16> in1, NdArray<System.UInt16> @out)
            where C : IUnaryOp<System.UInt16>
        {
            unsafe
            {
                using (var f1 = new Pinner(in1.DataAccessor))
                using (var f2 = new Pinner(@out.DataAccessor))
                {
                    var d1 = (System.UInt16*)f1.ptr;
                    var d2 = (System.UInt16*)f2.ptr;

                    if (@out.Shape.Dimensions.Length == 1)
                    {
                        long totalOps = @out.Shape.Dimensions[0].Length;

                        long ix1 = in1.Shape.Offset;
                        long ix2 = @out.Shape.Offset;

                        long stride1 = in1.Shape.Dimensions[0].Stride;
                        long stride2 = @out.Shape.Dimensions[0].Stride;


                        if (stride1 == stride2 && ix1 == ix2)
                        {
                            //Best case, all are equal, just keep a single counter
                            for (long i = 0; i < totalOps; i++)
                            {
                                d2[ix1] = (System.UInt16)(Math.Atan(d1[ix1]));
                                ix1 += stride1;
                            }
                        }
                        else
                        {
                            for (long i = 0; i < totalOps; i++)
                            {
                                d2[ix2] = (System.UInt16)(Math.Atan(d1[ix1]));
                                ix1 += stride1;
                                ix2 += stride2;
                            }
                        }
                    }
                    else if (@out.Shape.Dimensions.Length == 2)
                    {
                        long opsOuter = @out.Shape.Dimensions[0].Length;
                        long opsInner = @out.Shape.Dimensions[1].Length;

                        long ix1 = in1.Shape.Offset;
                        long ix2 = @out.Shape.Offset;

                        long outerStride1 = in1.Shape.Dimensions[0].Stride;
                        long outerStride2 = @out.Shape.Dimensions[0].Stride;

                        long innerStride1 = in1.Shape.Dimensions[1].Stride;
                        long innerStride2 = @out.Shape.Dimensions[1].Stride;

                        outerStride1 -= innerStride1 * in1.Shape.Dimensions[1].Length;
                        outerStride2 -= innerStride2 * @out.Shape.Dimensions[1].Length;

                        for (long i = 0; i < opsOuter; i++)
                        {
                            for (long j = 0; j < opsInner; j++)
                            {
                                d2[ix2] = (System.UInt16)(Math.Atan(d1[ix1]));
                                ix1 += innerStride1;
                                ix2 += innerStride2;
                            }

                            ix1 += outerStride1;
                            ix2 += outerStride2;
                        }
                    }
                    else
                    {
                        long n = in1.Shape.Dimensions.LongLength - 3;
                        long[] limits = in1.Shape.Dimensions.Where(x => n-- > 0).Select(x => x.Length).ToArray();
                        long[] counters = new long[limits.LongLength];

                        long totalOps = limits.LongLength == 0 ? 1 : limits.Aggregate<long>((a, b) => a * b);

                        //This chunck of variables are used to prevent repeated calculations of offsets
                        long dimIndex0 = 0 + limits.LongLength;
                        long dimIndex1 = 1 + limits.LongLength;
                        long dimIndex2 = 2 + limits.LongLength;

                        long opsOuter = @out.Shape.Dimensions[0 + limits.LongLength].Length;
                        long opsInner = @out.Shape.Dimensions[1 + limits.LongLength].Length;
                        long opsInnerInner = @out.Shape.Dimensions[2 + limits.LongLength].Length;

                        long outerStride1 = in1.Shape.Dimensions[dimIndex0].Stride;
                        long outerStride3 = @out.Shape.Dimensions[dimIndex0].Stride;

                        long innerStride1 = in1.Shape.Dimensions[dimIndex1].Stride;
                        long innerStride3 = @out.Shape.Dimensions[dimIndex1].Stride;

                        long innerInnerStride1 = in1.Shape.Dimensions[dimIndex2].Stride;
                        long innerInnerStride3 = @out.Shape.Dimensions[dimIndex2].Stride;

                        outerStride1 -= innerStride1 * in1.Shape.Dimensions[dimIndex1].Length;
                        outerStride3 -= innerStride3 * @out.Shape.Dimensions[dimIndex1].Length;

                        innerStride1 -= innerInnerStride1 * in1.Shape.Dimensions[dimIndex2].Length;
                        innerStride3 -= innerInnerStride3 * @out.Shape.Dimensions[dimIndex2].Length;

                        for (long outer = 0; outer < totalOps; outer++)
                        {
                            //Get the array offset for the first element in the outer dimension
                            long ix1 = in1.Shape[counters];
                            long ix3 = @out.Shape[counters];


                            for (long i = 0; i < opsOuter; i++)
                            {
                                for (long j = 0; j < opsInner; j++)
                                {
                                    for (long k = 0; k < opsInnerInner; k++)
                                    {
                                        d2[ix3] = (System.UInt16)(Math.Atan(d1[ix1]));
                                        ix1 += innerInnerStride1;
                                        ix3 += innerInnerStride3;
                                    }

                                    ix1 += innerStride1;
                                    ix3 += innerStride3;
                                }

                                ix1 += outerStride1;
                                ix3 += outerStride3;
                            }

                            if (counters.LongLength > 0)
                            {
                                //Basically a ripple carry adder
                                long p = counters.LongLength - 1;
                                while (++counters[p] == limits[p] && p > 0)
                                {
                                    counters[p] = 0;
                                    p--;
                                }
                            }
                        }
                    }
                }
            }
        }

        /// <summary>
        /// Unsafe implementation of applying a unary operation
        /// </summary>
        /// <typeparam name="C">The type of operation to perform</typeparam>
        /// <param name="op">The operation instance</param>
        /// <param name="scalar">The input scalar argument</param>
        /// <param name="out">The output target</param>
        internal static void UFunc_Op_Inner_Unary_Scalar_Flush_UInt16_TypedImpl<C>(NumCIL.UInt16.Atan op, System.UInt16 scalar, NdArray<System.UInt16> @out)
            where C : IUnaryOp<System.UInt16>
        {
            unsafe
            {
                using (var f2 = new Pinner(@out.DataAccessor))
                {
                    var d2 = (System.UInt16*)f2.ptr;

                    if (@out.Shape.Dimensions.Length == 1)
                    {
                        long totalOps = @out.Shape.Dimensions[0].Length;
                        long ix2 = @out.Shape.Offset;
                        long stride2 = @out.Shape.Dimensions[0].Stride;

                        for (long i = 0; i < totalOps; i++)
                        {
                            d2[ix2] = (System.UInt16)(Math.Atan(scalar));
                            ix2 += stride2;
                        }
                    }
                    else if (@out.Shape.Dimensions.Length == 2)
                    {
                        long opsOuter = @out.Shape.Dimensions[0].Length;
                        long opsInner = @out.Shape.Dimensions[1].Length;

                        long ix2 = @out.Shape.Offset;
                        long outerStride2 = @out.Shape.Dimensions[0].Stride;
                        long innerStride2 = @out.Shape.Dimensions[1].Stride;
                        outerStride2 -= innerStride2 * @out.Shape.Dimensions[1].Length;

                        for (long i = 0; i < opsOuter; i++)
                        {
                            for (long j = 0; j < opsInner; j++)
                            {
                                d2[ix2] = (System.UInt16)(Math.Atan(scalar));
                                ix2 += innerStride2;
                            }

                            ix2 += outerStride2;
                        }
                    }
                    else
                    {
                        long n = @out.Shape.Dimensions.LongLength - 3;
                        long[] limits = @out.Shape.Dimensions.Where(x => n-- > 0).Select(x => x.Length).ToArray();
                        long[] counters = new long[limits.LongLength];

                        long totalOps = limits.LongLength == 0 ? 1 : limits.Aggregate<long>((a, b) => a * b);

                        //This chunck of variables are used to prevent repeated calculations of offsets
                        long dimIndex0 = 0 + limits.LongLength;
                        long dimIndex1 = 1 + limits.LongLength;
                        long dimIndex2 = 2 + limits.LongLength;

                        long opsOuter = @out.Shape.Dimensions[0 + limits.LongLength].Length;
                        long opsInner = @out.Shape.Dimensions[1 + limits.LongLength].Length;
                        long opsInnerInner = @out.Shape.Dimensions[2 + limits.LongLength].Length;

                        long outerStride3 = @out.Shape.Dimensions[dimIndex0].Stride;
                        long innerStride3 = @out.Shape.Dimensions[dimIndex1].Stride;
                        long innerInnerStride3 = @out.Shape.Dimensions[dimIndex2].Stride;
                        outerStride3 -= innerStride3 * @out.Shape.Dimensions[dimIndex1].Length;
                        innerStride3 -= innerInnerStride3 * @out.Shape.Dimensions[dimIndex2].Length;

                        for (long outer = 0; outer < totalOps; outer++)
                        {
                            //Get the array offset for the first element in the outer dimension
                            long ix3 = @out.Shape[counters];

                            for (long i = 0; i < opsOuter; i++)
                            {
                                for (long j = 0; j < opsInner; j++)
                                {
                                    for (long k = 0; k < opsInnerInner; k++)
                                    {
                                        d2[ix3] = (System.UInt16)(Math.Atan(scalar));
                                        ix3 += innerInnerStride3;
                                    }

                                    ix3 += innerStride3;
                                }

                                ix3 += outerStride3;
                            }

                            if (counters.LongLength > 0)
                            {
                                //Basically a ripple carry adder
                                long p = counters.LongLength - 1;
                                while (++counters[p] == limits[p] && p > 0)
                                {
                                    counters[p] = 0;
                                    p--;
                                }
                            }
                        }
                    }
                }
            }
        }
        /// <summary>
        /// Unsafe implementation of applying a unary operation
        /// </summary>
        /// <typeparam name="C">The type of operation to perform</typeparam>
        /// <param name="op">The operation instance</param>
        /// <param name="in1">The input argument</param>
        /// <param name="out">The output target</param>
        internal static void UFunc_Op_Inner_Unary_Flush_Int32_TypedImpl<C>(NumCIL.Int32.Atan op, NdArray<System.Int32> in1, NdArray<System.Int32> @out)
            where C : IUnaryOp<System.Int32>
        {
            unsafe
            {
                using (var f1 = new Pinner(in1.DataAccessor))
                using (var f2 = new Pinner(@out.DataAccessor))
                {
                    var d1 = (System.Int32*)f1.ptr;
                    var d2 = (System.Int32*)f2.ptr;

                    if (@out.Shape.Dimensions.Length == 1)
                    {
                        long totalOps = @out.Shape.Dimensions[0].Length;

                        long ix1 = in1.Shape.Offset;
                        long ix2 = @out.Shape.Offset;

                        long stride1 = in1.Shape.Dimensions[0].Stride;
                        long stride2 = @out.Shape.Dimensions[0].Stride;


                        if (stride1 == stride2 && ix1 == ix2)
                        {
                            //Best case, all are equal, just keep a single counter
                            for (long i = 0; i < totalOps; i++)
                            {
                                d2[ix1] = (System.Int32)(Math.Atan(d1[ix1]));
                                ix1 += stride1;
                            }
                        }
                        else
                        {
                            for (long i = 0; i < totalOps; i++)
                            {
                                d2[ix2] = (System.Int32)(Math.Atan(d1[ix1]));
                                ix1 += stride1;
                                ix2 += stride2;
                            }
                        }
                    }
                    else if (@out.Shape.Dimensions.Length == 2)
                    {
                        long opsOuter = @out.Shape.Dimensions[0].Length;
                        long opsInner = @out.Shape.Dimensions[1].Length;

                        long ix1 = in1.Shape.Offset;
                        long ix2 = @out.Shape.Offset;

                        long outerStride1 = in1.Shape.Dimensions[0].Stride;
                        long outerStride2 = @out.Shape.Dimensions[0].Stride;

                        long innerStride1 = in1.Shape.Dimensions[1].Stride;
                        long innerStride2 = @out.Shape.Dimensions[1].Stride;

                        outerStride1 -= innerStride1 * in1.Shape.Dimensions[1].Length;
                        outerStride2 -= innerStride2 * @out.Shape.Dimensions[1].Length;

                        for (long i = 0; i < opsOuter; i++)
                        {
                            for (long j = 0; j < opsInner; j++)
                            {
                                d2[ix2] = (System.Int32)(Math.Atan(d1[ix1]));
                                ix1 += innerStride1;
                                ix2 += innerStride2;
                            }

                            ix1 += outerStride1;
                            ix2 += outerStride2;
                        }
                    }
                    else
                    {
                        long n = in1.Shape.Dimensions.LongLength - 3;
                        long[] limits = in1.Shape.Dimensions.Where(x => n-- > 0).Select(x => x.Length).ToArray();
                        long[] counters = new long[limits.LongLength];

                        long totalOps = limits.LongLength == 0 ? 1 : limits.Aggregate<long>((a, b) => a * b);

                        //This chunck of variables are used to prevent repeated calculations of offsets
                        long dimIndex0 = 0 + limits.LongLength;
                        long dimIndex1 = 1 + limits.LongLength;
                        long dimIndex2 = 2 + limits.LongLength;

                        long opsOuter = @out.Shape.Dimensions[0 + limits.LongLength].Length;
                        long opsInner = @out.Shape.Dimensions[1 + limits.LongLength].Length;
                        long opsInnerInner = @out.Shape.Dimensions[2 + limits.LongLength].Length;

                        long outerStride1 = in1.Shape.Dimensions[dimIndex0].Stride;
                        long outerStride3 = @out.Shape.Dimensions[dimIndex0].Stride;

                        long innerStride1 = in1.Shape.Dimensions[dimIndex1].Stride;
                        long innerStride3 = @out.Shape.Dimensions[dimIndex1].Stride;

                        long innerInnerStride1 = in1.Shape.Dimensions[dimIndex2].Stride;
                        long innerInnerStride3 = @out.Shape.Dimensions[dimIndex2].Stride;

                        outerStride1 -= innerStride1 * in1.Shape.Dimensions[dimIndex1].Length;
                        outerStride3 -= innerStride3 * @out.Shape.Dimensions[dimIndex1].Length;

                        innerStride1 -= innerInnerStride1 * in1.Shape.Dimensions[dimIndex2].Length;
                        innerStride3 -= innerInnerStride3 * @out.Shape.Dimensions[dimIndex2].Length;

                        for (long outer = 0; outer < totalOps; outer++)
                        {
                            //Get the array offset for the first element in the outer dimension
                            long ix1 = in1.Shape[counters];
                            long ix3 = @out.Shape[counters];


                            for (long i = 0; i < opsOuter; i++)
                            {
                                for (long j = 0; j < opsInner; j++)
                                {
                                    for (long k = 0; k < opsInnerInner; k++)
                                    {
                                        d2[ix3] = (System.Int32)(Math.Atan(d1[ix1]));
                                        ix1 += innerInnerStride1;
                                        ix3 += innerInnerStride3;
                                    }

                                    ix1 += innerStride1;
                                    ix3 += innerStride3;
                                }

                                ix1 += outerStride1;
                                ix3 += outerStride3;
                            }

                            if (counters.LongLength > 0)
                            {
                                //Basically a ripple carry adder
                                long p = counters.LongLength - 1;
                                while (++counters[p] == limits[p] && p > 0)
                                {
                                    counters[p] = 0;
                                    p--;
                                }
                            }
                        }
                    }
                }
            }
        }

        /// <summary>
        /// Unsafe implementation of applying a unary operation
        /// </summary>
        /// <typeparam name="C">The type of operation to perform</typeparam>
        /// <param name="op">The operation instance</param>
        /// <param name="scalar">The input scalar argument</param>
        /// <param name="out">The output target</param>
        internal static void UFunc_Op_Inner_Unary_Scalar_Flush_Int32_TypedImpl<C>(NumCIL.Int32.Atan op, System.Int32 scalar, NdArray<System.Int32> @out)
            where C : IUnaryOp<System.Int32>
        {
            unsafe
            {
                using (var f2 = new Pinner(@out.DataAccessor))
                {
                    var d2 = (System.Int32*)f2.ptr;

                    if (@out.Shape.Dimensions.Length == 1)
                    {
                        long totalOps = @out.Shape.Dimensions[0].Length;
                        long ix2 = @out.Shape.Offset;
                        long stride2 = @out.Shape.Dimensions[0].Stride;

                        for (long i = 0; i < totalOps; i++)
                        {
                            d2[ix2] = (System.Int32)(Math.Atan(scalar));
                            ix2 += stride2;
                        }
                    }
                    else if (@out.Shape.Dimensions.Length == 2)
                    {
                        long opsOuter = @out.Shape.Dimensions[0].Length;
                        long opsInner = @out.Shape.Dimensions[1].Length;

                        long ix2 = @out.Shape.Offset;
                        long outerStride2 = @out.Shape.Dimensions[0].Stride;
                        long innerStride2 = @out.Shape.Dimensions[1].Stride;
                        outerStride2 -= innerStride2 * @out.Shape.Dimensions[1].Length;

                        for (long i = 0; i < opsOuter; i++)
                        {
                            for (long j = 0; j < opsInner; j++)
                            {
                                d2[ix2] = (System.Int32)(Math.Atan(scalar));
                                ix2 += innerStride2;
                            }

                            ix2 += outerStride2;
                        }
                    }
                    else
                    {
                        long n = @out.Shape.Dimensions.LongLength - 3;
                        long[] limits = @out.Shape.Dimensions.Where(x => n-- > 0).Select(x => x.Length).ToArray();
                        long[] counters = new long[limits.LongLength];

                        long totalOps = limits.LongLength == 0 ? 1 : limits.Aggregate<long>((a, b) => a * b);

                        //This chunck of variables are used to prevent repeated calculations of offsets
                        long dimIndex0 = 0 + limits.LongLength;
                        long dimIndex1 = 1 + limits.LongLength;
                        long dimIndex2 = 2 + limits.LongLength;

                        long opsOuter = @out.Shape.Dimensions[0 + limits.LongLength].Length;
                        long opsInner = @out.Shape.Dimensions[1 + limits.LongLength].Length;
                        long opsInnerInner = @out.Shape.Dimensions[2 + limits.LongLength].Length;

                        long outerStride3 = @out.Shape.Dimensions[dimIndex0].Stride;
                        long innerStride3 = @out.Shape.Dimensions[dimIndex1].Stride;
                        long innerInnerStride3 = @out.Shape.Dimensions[dimIndex2].Stride;
                        outerStride3 -= innerStride3 * @out.Shape.Dimensions[dimIndex1].Length;
                        innerStride3 -= innerInnerStride3 * @out.Shape.Dimensions[dimIndex2].Length;

                        for (long outer = 0; outer < totalOps; outer++)
                        {
                            //Get the array offset for the first element in the outer dimension
                            long ix3 = @out.Shape[counters];

                            for (long i = 0; i < opsOuter; i++)
                            {
                                for (long j = 0; j < opsInner; j++)
                                {
                                    for (long k = 0; k < opsInnerInner; k++)
                                    {
                                        d2[ix3] = (System.Int32)(Math.Atan(scalar));
                                        ix3 += innerInnerStride3;
                                    }

                                    ix3 += innerStride3;
                                }

                                ix3 += outerStride3;
                            }

                            if (counters.LongLength > 0)
                            {
                                //Basically a ripple carry adder
                                long p = counters.LongLength - 1;
                                while (++counters[p] == limits[p] && p > 0)
                                {
                                    counters[p] = 0;
                                    p--;
                                }
                            }
                        }
                    }
                }
            }
        }
        /// <summary>
        /// Unsafe implementation of applying a unary operation
        /// </summary>
        /// <typeparam name="C">The type of operation to perform</typeparam>
        /// <param name="op">The operation instance</param>
        /// <param name="in1">The input argument</param>
        /// <param name="out">The output target</param>
        internal static void UFunc_Op_Inner_Unary_Flush_UInt32_TypedImpl<C>(NumCIL.UInt32.Atan op, NdArray<System.UInt32> in1, NdArray<System.UInt32> @out)
            where C : IUnaryOp<System.UInt32>
        {
            unsafe
            {
                using (var f1 = new Pinner(in1.DataAccessor))
                using (var f2 = new Pinner(@out.DataAccessor))
                {
                    var d1 = (System.UInt32*)f1.ptr;
                    var d2 = (System.UInt32*)f2.ptr;

                    if (@out.Shape.Dimensions.Length == 1)
                    {
                        long totalOps = @out.Shape.Dimensions[0].Length;

                        long ix1 = in1.Shape.Offset;
                        long ix2 = @out.Shape.Offset;

                        long stride1 = in1.Shape.Dimensions[0].Stride;
                        long stride2 = @out.Shape.Dimensions[0].Stride;


                        if (stride1 == stride2 && ix1 == ix2)
                        {
                            //Best case, all are equal, just keep a single counter
                            for (long i = 0; i < totalOps; i++)
                            {
                                d2[ix1] = (System.UInt32)(Math.Atan(d1[ix1]));
                                ix1 += stride1;
                            }
                        }
                        else
                        {
                            for (long i = 0; i < totalOps; i++)
                            {
                                d2[ix2] = (System.UInt32)(Math.Atan(d1[ix1]));
                                ix1 += stride1;
                                ix2 += stride2;
                            }
                        }
                    }
                    else if (@out.Shape.Dimensions.Length == 2)
                    {
                        long opsOuter = @out.Shape.Dimensions[0].Length;
                        long opsInner = @out.Shape.Dimensions[1].Length;

                        long ix1 = in1.Shape.Offset;
                        long ix2 = @out.Shape.Offset;

                        long outerStride1 = in1.Shape.Dimensions[0].Stride;
                        long outerStride2 = @out.Shape.Dimensions[0].Stride;

                        long innerStride1 = in1.Shape.Dimensions[1].Stride;
                        long innerStride2 = @out.Shape.Dimensions[1].Stride;

                        outerStride1 -= innerStride1 * in1.Shape.Dimensions[1].Length;
                        outerStride2 -= innerStride2 * @out.Shape.Dimensions[1].Length;

                        for (long i = 0; i < opsOuter; i++)
                        {
                            for (long j = 0; j < opsInner; j++)
                            {
                                d2[ix2] = (System.UInt32)(Math.Atan(d1[ix1]));
                                ix1 += innerStride1;
                                ix2 += innerStride2;
                            }

                            ix1 += outerStride1;
                            ix2 += outerStride2;
                        }
                    }
                    else
                    {
                        long n = in1.Shape.Dimensions.LongLength - 3;
                        long[] limits = in1.Shape.Dimensions.Where(x => n-- > 0).Select(x => x.Length).ToArray();
                        long[] counters = new long[limits.LongLength];

                        long totalOps = limits.LongLength == 0 ? 1 : limits.Aggregate<long>((a, b) => a * b);

                        //This chunck of variables are used to prevent repeated calculations of offsets
                        long dimIndex0 = 0 + limits.LongLength;
                        long dimIndex1 = 1 + limits.LongLength;
                        long dimIndex2 = 2 + limits.LongLength;

                        long opsOuter = @out.Shape.Dimensions[0 + limits.LongLength].Length;
                        long opsInner = @out.Shape.Dimensions[1 + limits.LongLength].Length;
                        long opsInnerInner = @out.Shape.Dimensions[2 + limits.LongLength].Length;

                        long outerStride1 = in1.Shape.Dimensions[dimIndex0].Stride;
                        long outerStride3 = @out.Shape.Dimensions[dimIndex0].Stride;

                        long innerStride1 = in1.Shape.Dimensions[dimIndex1].Stride;
                        long innerStride3 = @out.Shape.Dimensions[dimIndex1].Stride;

                        long innerInnerStride1 = in1.Shape.Dimensions[dimIndex2].Stride;
                        long innerInnerStride3 = @out.Shape.Dimensions[dimIndex2].Stride;

                        outerStride1 -= innerStride1 * in1.Shape.Dimensions[dimIndex1].Length;
                        outerStride3 -= innerStride3 * @out.Shape.Dimensions[dimIndex1].Length;

                        innerStride1 -= innerInnerStride1 * in1.Shape.Dimensions[dimIndex2].Length;
                        innerStride3 -= innerInnerStride3 * @out.Shape.Dimensions[dimIndex2].Length;

                        for (long outer = 0; outer < totalOps; outer++)
                        {
                            //Get the array offset for the first element in the outer dimension
                            long ix1 = in1.Shape[counters];
                            long ix3 = @out.Shape[counters];


                            for (long i = 0; i < opsOuter; i++)
                            {
                                for (long j = 0; j < opsInner; j++)
                                {
                                    for (long k = 0; k < opsInnerInner; k++)
                                    {
                                        d2[ix3] = (System.UInt32)(Math.Atan(d1[ix1]));
                                        ix1 += innerInnerStride1;
                                        ix3 += innerInnerStride3;
                                    }

                                    ix1 += innerStride1;
                                    ix3 += innerStride3;
                                }

                                ix1 += outerStride1;
                                ix3 += outerStride3;
                            }

                            if (counters.LongLength > 0)
                            {
                                //Basically a ripple carry adder
                                long p = counters.LongLength - 1;
                                while (++counters[p] == limits[p] && p > 0)
                                {
                                    counters[p] = 0;
                                    p--;
                                }
                            }
                        }
                    }
                }
            }
        }

        /// <summary>
        /// Unsafe implementation of applying a unary operation
        /// </summary>
        /// <typeparam name="C">The type of operation to perform</typeparam>
        /// <param name="op">The operation instance</param>
        /// <param name="scalar">The input scalar argument</param>
        /// <param name="out">The output target</param>
        internal static void UFunc_Op_Inner_Unary_Scalar_Flush_UInt32_TypedImpl<C>(NumCIL.UInt32.Atan op, System.UInt32 scalar, NdArray<System.UInt32> @out)
            where C : IUnaryOp<System.UInt32>
        {
            unsafe
            {
                using (var f2 = new Pinner(@out.DataAccessor))
                {
                    var d2 = (System.UInt32*)f2.ptr;

                    if (@out.Shape.Dimensions.Length == 1)
                    {
                        long totalOps = @out.Shape.Dimensions[0].Length;
                        long ix2 = @out.Shape.Offset;
                        long stride2 = @out.Shape.Dimensions[0].Stride;

                        for (long i = 0; i < totalOps; i++)
                        {
                            d2[ix2] = (System.UInt32)(Math.Atan(scalar));
                            ix2 += stride2;
                        }
                    }
                    else if (@out.Shape.Dimensions.Length == 2)
                    {
                        long opsOuter = @out.Shape.Dimensions[0].Length;
                        long opsInner = @out.Shape.Dimensions[1].Length;

                        long ix2 = @out.Shape.Offset;
                        long outerStride2 = @out.Shape.Dimensions[0].Stride;
                        long innerStride2 = @out.Shape.Dimensions[1].Stride;
                        outerStride2 -= innerStride2 * @out.Shape.Dimensions[1].Length;

                        for (long i = 0; i < opsOuter; i++)
                        {
                            for (long j = 0; j < opsInner; j++)
                            {
                                d2[ix2] = (System.UInt32)(Math.Atan(scalar));
                                ix2 += innerStride2;
                            }

                            ix2 += outerStride2;
                        }
                    }
                    else
                    {
                        long n = @out.Shape.Dimensions.LongLength - 3;
                        long[] limits = @out.Shape.Dimensions.Where(x => n-- > 0).Select(x => x.Length).ToArray();
                        long[] counters = new long[limits.LongLength];

                        long totalOps = limits.LongLength == 0 ? 1 : limits.Aggregate<long>((a, b) => a * b);

                        //This chunck of variables are used to prevent repeated calculations of offsets
                        long dimIndex0 = 0 + limits.LongLength;
                        long dimIndex1 = 1 + limits.LongLength;
                        long dimIndex2 = 2 + limits.LongLength;

                        long opsOuter = @out.Shape.Dimensions[0 + limits.LongLength].Length;
                        long opsInner = @out.Shape.Dimensions[1 + limits.LongLength].Length;
                        long opsInnerInner = @out.Shape.Dimensions[2 + limits.LongLength].Length;

                        long outerStride3 = @out.Shape.Dimensions[dimIndex0].Stride;
                        long innerStride3 = @out.Shape.Dimensions[dimIndex1].Stride;
                        long innerInnerStride3 = @out.Shape.Dimensions[dimIndex2].Stride;
                        outerStride3 -= innerStride3 * @out.Shape.Dimensions[dimIndex1].Length;
                        innerStride3 -= innerInnerStride3 * @out.Shape.Dimensions[dimIndex2].Length;

                        for (long outer = 0; outer < totalOps; outer++)
                        {
                            //Get the array offset for the first element in the outer dimension
                            long ix3 = @out.Shape[counters];

                            for (long i = 0; i < opsOuter; i++)
                            {
                                for (long j = 0; j < opsInner; j++)
                                {
                                    for (long k = 0; k < opsInnerInner; k++)
                                    {
                                        d2[ix3] = (System.UInt32)(Math.Atan(scalar));
                                        ix3 += innerInnerStride3;
                                    }

                                    ix3 += innerStride3;
                                }

                                ix3 += outerStride3;
                            }

                            if (counters.LongLength > 0)
                            {
                                //Basically a ripple carry adder
                                long p = counters.LongLength - 1;
                                while (++counters[p] == limits[p] && p > 0)
                                {
                                    counters[p] = 0;
                                    p--;
                                }
                            }
                        }
                    }
                }
            }
        }
        /// <summary>
        /// Unsafe implementation of applying a unary operation
        /// </summary>
        /// <typeparam name="C">The type of operation to perform</typeparam>
        /// <param name="op">The operation instance</param>
        /// <param name="in1">The input argument</param>
        /// <param name="out">The output target</param>
        internal static void UFunc_Op_Inner_Unary_Flush_Int64_TypedImpl<C>(NumCIL.Int64.Atan op, NdArray<System.Int64> in1, NdArray<System.Int64> @out)
            where C : IUnaryOp<System.Int64>
        {
            unsafe
            {
                using (var f1 = new Pinner(in1.DataAccessor))
                using (var f2 = new Pinner(@out.DataAccessor))
                {
                    var d1 = (System.Int64*)f1.ptr;
                    var d2 = (System.Int64*)f2.ptr;

                    if (@out.Shape.Dimensions.Length == 1)
                    {
                        long totalOps = @out.Shape.Dimensions[0].Length;

                        long ix1 = in1.Shape.Offset;
                        long ix2 = @out.Shape.Offset;

                        long stride1 = in1.Shape.Dimensions[0].Stride;
                        long stride2 = @out.Shape.Dimensions[0].Stride;


                        if (stride1 == stride2 && ix1 == ix2)
                        {
                            //Best case, all are equal, just keep a single counter
                            for (long i = 0; i < totalOps; i++)
                            {
                                d2[ix1] = (System.Int64)(Math.Atan(d1[ix1]));
                                ix1 += stride1;
                            }
                        }
                        else
                        {
                            for (long i = 0; i < totalOps; i++)
                            {
                                d2[ix2] = (System.Int64)(Math.Atan(d1[ix1]));
                                ix1 += stride1;
                                ix2 += stride2;
                            }
                        }
                    }
                    else if (@out.Shape.Dimensions.Length == 2)
                    {
                        long opsOuter = @out.Shape.Dimensions[0].Length;
                        long opsInner = @out.Shape.Dimensions[1].Length;

                        long ix1 = in1.Shape.Offset;
                        long ix2 = @out.Shape.Offset;

                        long outerStride1 = in1.Shape.Dimensions[0].Stride;
                        long outerStride2 = @out.Shape.Dimensions[0].Stride;

                        long innerStride1 = in1.Shape.Dimensions[1].Stride;
                        long innerStride2 = @out.Shape.Dimensions[1].Stride;

                        outerStride1 -= innerStride1 * in1.Shape.Dimensions[1].Length;
                        outerStride2 -= innerStride2 * @out.Shape.Dimensions[1].Length;

                        for (long i = 0; i < opsOuter; i++)
                        {
                            for (long j = 0; j < opsInner; j++)
                            {
                                d2[ix2] = (System.Int64)(Math.Atan(d1[ix1]));
                                ix1 += innerStride1;
                                ix2 += innerStride2;
                            }

                            ix1 += outerStride1;
                            ix2 += outerStride2;
                        }
                    }
                    else
                    {
                        long n = in1.Shape.Dimensions.LongLength - 3;
                        long[] limits = in1.Shape.Dimensions.Where(x => n-- > 0).Select(x => x.Length).ToArray();
                        long[] counters = new long[limits.LongLength];

                        long totalOps = limits.LongLength == 0 ? 1 : limits.Aggregate<long>((a, b) => a * b);

                        //This chunck of variables are used to prevent repeated calculations of offsets
                        long dimIndex0 = 0 + limits.LongLength;
                        long dimIndex1 = 1 + limits.LongLength;
                        long dimIndex2 = 2 + limits.LongLength;

                        long opsOuter = @out.Shape.Dimensions[0 + limits.LongLength].Length;
                        long opsInner = @out.Shape.Dimensions[1 + limits.LongLength].Length;
                        long opsInnerInner = @out.Shape.Dimensions[2 + limits.LongLength].Length;

                        long outerStride1 = in1.Shape.Dimensions[dimIndex0].Stride;
                        long outerStride3 = @out.Shape.Dimensions[dimIndex0].Stride;

                        long innerStride1 = in1.Shape.Dimensions[dimIndex1].Stride;
                        long innerStride3 = @out.Shape.Dimensions[dimIndex1].Stride;

                        long innerInnerStride1 = in1.Shape.Dimensions[dimIndex2].Stride;
                        long innerInnerStride3 = @out.Shape.Dimensions[dimIndex2].Stride;

                        outerStride1 -= innerStride1 * in1.Shape.Dimensions[dimIndex1].Length;
                        outerStride3 -= innerStride3 * @out.Shape.Dimensions[dimIndex1].Length;

                        innerStride1 -= innerInnerStride1 * in1.Shape.Dimensions[dimIndex2].Length;
                        innerStride3 -= innerInnerStride3 * @out.Shape.Dimensions[dimIndex2].Length;

                        for (long outer = 0; outer < totalOps; outer++)
                        {
                            //Get the array offset for the first element in the outer dimension
                            long ix1 = in1.Shape[counters];
                            long ix3 = @out.Shape[counters];


                            for (long i = 0; i < opsOuter; i++)
                            {
                                for (long j = 0; j < opsInner; j++)
                                {
                                    for (long k = 0; k < opsInnerInner; k++)
                                    {
                                        d2[ix3] = (System.Int64)(Math.Atan(d1[ix1]));
                                        ix1 += innerInnerStride1;
                                        ix3 += innerInnerStride3;
                                    }

                                    ix1 += innerStride1;
                                    ix3 += innerStride3;
                                }

                                ix1 += outerStride1;
                                ix3 += outerStride3;
                            }

                            if (counters.LongLength > 0)
                            {
                                //Basically a ripple carry adder
                                long p = counters.LongLength - 1;
                                while (++counters[p] == limits[p] && p > 0)
                                {
                                    counters[p] = 0;
                                    p--;
                                }
                            }
                        }
                    }
                }
            }
        }

        /// <summary>
        /// Unsafe implementation of applying a unary operation
        /// </summary>
        /// <typeparam name="C">The type of operation to perform</typeparam>
        /// <param name="op">The operation instance</param>
        /// <param name="scalar">The input scalar argument</param>
        /// <param name="out">The output target</param>
        internal static void UFunc_Op_Inner_Unary_Scalar_Flush_Int64_TypedImpl<C>(NumCIL.Int64.Atan op, System.Int64 scalar, NdArray<System.Int64> @out)
            where C : IUnaryOp<System.Int64>
        {
            unsafe
            {
                using (var f2 = new Pinner(@out.DataAccessor))
                {
                    var d2 = (System.Int64*)f2.ptr;

                    if (@out.Shape.Dimensions.Length == 1)
                    {
                        long totalOps = @out.Shape.Dimensions[0].Length;
                        long ix2 = @out.Shape.Offset;
                        long stride2 = @out.Shape.Dimensions[0].Stride;

                        for (long i = 0; i < totalOps; i++)
                        {
                            d2[ix2] = (System.Int64)(Math.Atan(scalar));
                            ix2 += stride2;
                        }
                    }
                    else if (@out.Shape.Dimensions.Length == 2)
                    {
                        long opsOuter = @out.Shape.Dimensions[0].Length;
                        long opsInner = @out.Shape.Dimensions[1].Length;

                        long ix2 = @out.Shape.Offset;
                        long outerStride2 = @out.Shape.Dimensions[0].Stride;
                        long innerStride2 = @out.Shape.Dimensions[1].Stride;
                        outerStride2 -= innerStride2 * @out.Shape.Dimensions[1].Length;

                        for (long i = 0; i < opsOuter; i++)
                        {
                            for (long j = 0; j < opsInner; j++)
                            {
                                d2[ix2] = (System.Int64)(Math.Atan(scalar));
                                ix2 += innerStride2;
                            }

                            ix2 += outerStride2;
                        }
                    }
                    else
                    {
                        long n = @out.Shape.Dimensions.LongLength - 3;
                        long[] limits = @out.Shape.Dimensions.Where(x => n-- > 0).Select(x => x.Length).ToArray();
                        long[] counters = new long[limits.LongLength];

                        long totalOps = limits.LongLength == 0 ? 1 : limits.Aggregate<long>((a, b) => a * b);

                        //This chunck of variables are used to prevent repeated calculations of offsets
                        long dimIndex0 = 0 + limits.LongLength;
                        long dimIndex1 = 1 + limits.LongLength;
                        long dimIndex2 = 2 + limits.LongLength;

                        long opsOuter = @out.Shape.Dimensions[0 + limits.LongLength].Length;
                        long opsInner = @out.Shape.Dimensions[1 + limits.LongLength].Length;
                        long opsInnerInner = @out.Shape.Dimensions[2 + limits.LongLength].Length;

                        long outerStride3 = @out.Shape.Dimensions[dimIndex0].Stride;
                        long innerStride3 = @out.Shape.Dimensions[dimIndex1].Stride;
                        long innerInnerStride3 = @out.Shape.Dimensions[dimIndex2].Stride;
                        outerStride3 -= innerStride3 * @out.Shape.Dimensions[dimIndex1].Length;
                        innerStride3 -= innerInnerStride3 * @out.Shape.Dimensions[dimIndex2].Length;

                        for (long outer = 0; outer < totalOps; outer++)
                        {
                            //Get the array offset for the first element in the outer dimension
                            long ix3 = @out.Shape[counters];

                            for (long i = 0; i < opsOuter; i++)
                            {
                                for (long j = 0; j < opsInner; j++)
                                {
                                    for (long k = 0; k < opsInnerInner; k++)
                                    {
                                        d2[ix3] = (System.Int64)(Math.Atan(scalar));
                                        ix3 += innerInnerStride3;
                                    }

                                    ix3 += innerStride3;
                                }

                                ix3 += outerStride3;
                            }

                            if (counters.LongLength > 0)
                            {
                                //Basically a ripple carry adder
                                long p = counters.LongLength - 1;
                                while (++counters[p] == limits[p] && p > 0)
                                {
                                    counters[p] = 0;
                                    p--;
                                }
                            }
                        }
                    }
                }
            }
        }
        /// <summary>
        /// Unsafe implementation of applying a unary operation
        /// </summary>
        /// <typeparam name="C">The type of operation to perform</typeparam>
        /// <param name="op">The operation instance</param>
        /// <param name="in1">The input argument</param>
        /// <param name="out">The output target</param>
        internal static void UFunc_Op_Inner_Unary_Flush_UInt64_TypedImpl<C>(NumCIL.UInt64.Atan op, NdArray<System.UInt64> in1, NdArray<System.UInt64> @out)
            where C : IUnaryOp<System.UInt64>
        {
            unsafe
            {
                using (var f1 = new Pinner(in1.DataAccessor))
                using (var f2 = new Pinner(@out.DataAccessor))
                {
                    var d1 = (System.UInt64*)f1.ptr;
                    var d2 = (System.UInt64*)f2.ptr;

                    if (@out.Shape.Dimensions.Length == 1)
                    {
                        long totalOps = @out.Shape.Dimensions[0].Length;

                        long ix1 = in1.Shape.Offset;
                        long ix2 = @out.Shape.Offset;

                        long stride1 = in1.Shape.Dimensions[0].Stride;
                        long stride2 = @out.Shape.Dimensions[0].Stride;


                        if (stride1 == stride2 && ix1 == ix2)
                        {
                            //Best case, all are equal, just keep a single counter
                            for (long i = 0; i < totalOps; i++)
                            {
                                d2[ix1] = (System.UInt64)(Math.Atan(d1[ix1]));
                                ix1 += stride1;
                            }
                        }
                        else
                        {
                            for (long i = 0; i < totalOps; i++)
                            {
                                d2[ix2] = (System.UInt64)(Math.Atan(d1[ix1]));
                                ix1 += stride1;
                                ix2 += stride2;
                            }
                        }
                    }
                    else if (@out.Shape.Dimensions.Length == 2)
                    {
                        long opsOuter = @out.Shape.Dimensions[0].Length;
                        long opsInner = @out.Shape.Dimensions[1].Length;

                        long ix1 = in1.Shape.Offset;
                        long ix2 = @out.Shape.Offset;

                        long outerStride1 = in1.Shape.Dimensions[0].Stride;
                        long outerStride2 = @out.Shape.Dimensions[0].Stride;

                        long innerStride1 = in1.Shape.Dimensions[1].Stride;
                        long innerStride2 = @out.Shape.Dimensions[1].Stride;

                        outerStride1 -= innerStride1 * in1.Shape.Dimensions[1].Length;
                        outerStride2 -= innerStride2 * @out.Shape.Dimensions[1].Length;

                        for (long i = 0; i < opsOuter; i++)
                        {
                            for (long j = 0; j < opsInner; j++)
                            {
                                d2[ix2] = (System.UInt64)(Math.Atan(d1[ix1]));
                                ix1 += innerStride1;
                                ix2 += innerStride2;
                            }

                            ix1 += outerStride1;
                            ix2 += outerStride2;
                        }
                    }
                    else
                    {
                        long n = in1.Shape.Dimensions.LongLength - 3;
                        long[] limits = in1.Shape.Dimensions.Where(x => n-- > 0).Select(x => x.Length).ToArray();
                        long[] counters = new long[limits.LongLength];

                        long totalOps = limits.LongLength == 0 ? 1 : limits.Aggregate<long>((a, b) => a * b);

                        //This chunck of variables are used to prevent repeated calculations of offsets
                        long dimIndex0 = 0 + limits.LongLength;
                        long dimIndex1 = 1 + limits.LongLength;
                        long dimIndex2 = 2 + limits.LongLength;

                        long opsOuter = @out.Shape.Dimensions[0 + limits.LongLength].Length;
                        long opsInner = @out.Shape.Dimensions[1 + limits.LongLength].Length;
                        long opsInnerInner = @out.Shape.Dimensions[2 + limits.LongLength].Length;

                        long outerStride1 = in1.Shape.Dimensions[dimIndex0].Stride;
                        long outerStride3 = @out.Shape.Dimensions[dimIndex0].Stride;

                        long innerStride1 = in1.Shape.Dimensions[dimIndex1].Stride;
                        long innerStride3 = @out.Shape.Dimensions[dimIndex1].Stride;

                        long innerInnerStride1 = in1.Shape.Dimensions[dimIndex2].Stride;
                        long innerInnerStride3 = @out.Shape.Dimensions[dimIndex2].Stride;

                        outerStride1 -= innerStride1 * in1.Shape.Dimensions[dimIndex1].Length;
                        outerStride3 -= innerStride3 * @out.Shape.Dimensions[dimIndex1].Length;

                        innerStride1 -= innerInnerStride1 * in1.Shape.Dimensions[dimIndex2].Length;
                        innerStride3 -= innerInnerStride3 * @out.Shape.Dimensions[dimIndex2].Length;

                        for (long outer = 0; outer < totalOps; outer++)
                        {
                            //Get the array offset for the first element in the outer dimension
                            long ix1 = in1.Shape[counters];
                            long ix3 = @out.Shape[counters];


                            for (long i = 0; i < opsOuter; i++)
                            {
                                for (long j = 0; j < opsInner; j++)
                                {
                                    for (long k = 0; k < opsInnerInner; k++)
                                    {
                                        d2[ix3] = (System.UInt64)(Math.Atan(d1[ix1]));
                                        ix1 += innerInnerStride1;
                                        ix3 += innerInnerStride3;
                                    }

                                    ix1 += innerStride1;
                                    ix3 += innerStride3;
                                }

                                ix1 += outerStride1;
                                ix3 += outerStride3;
                            }

                            if (counters.LongLength > 0)
                            {
                                //Basically a ripple carry adder
                                long p = counters.LongLength - 1;
                                while (++counters[p] == limits[p] && p > 0)
                                {
                                    counters[p] = 0;
                                    p--;
                                }
                            }
                        }
                    }
                }
            }
        }

        /// <summary>
        /// Unsafe implementation of applying a unary operation
        /// </summary>
        /// <typeparam name="C">The type of operation to perform</typeparam>
        /// <param name="op">The operation instance</param>
        /// <param name="scalar">The input scalar argument</param>
        /// <param name="out">The output target</param>
        internal static void UFunc_Op_Inner_Unary_Scalar_Flush_UInt64_TypedImpl<C>(NumCIL.UInt64.Atan op, System.UInt64 scalar, NdArray<System.UInt64> @out)
            where C : IUnaryOp<System.UInt64>
        {
            unsafe
            {
                using (var f2 = new Pinner(@out.DataAccessor))
                {
                    var d2 = (System.UInt64*)f2.ptr;

                    if (@out.Shape.Dimensions.Length == 1)
                    {
                        long totalOps = @out.Shape.Dimensions[0].Length;
                        long ix2 = @out.Shape.Offset;
                        long stride2 = @out.Shape.Dimensions[0].Stride;

                        for (long i = 0; i < totalOps; i++)
                        {
                            d2[ix2] = (System.UInt64)(Math.Atan(scalar));
                            ix2 += stride2;
                        }
                    }
                    else if (@out.Shape.Dimensions.Length == 2)
                    {
                        long opsOuter = @out.Shape.Dimensions[0].Length;
                        long opsInner = @out.Shape.Dimensions[1].Length;

                        long ix2 = @out.Shape.Offset;
                        long outerStride2 = @out.Shape.Dimensions[0].Stride;
                        long innerStride2 = @out.Shape.Dimensions[1].Stride;
                        outerStride2 -= innerStride2 * @out.Shape.Dimensions[1].Length;

                        for (long i = 0; i < opsOuter; i++)
                        {
                            for (long j = 0; j < opsInner; j++)
                            {
                                d2[ix2] = (System.UInt64)(Math.Atan(scalar));
                                ix2 += innerStride2;
                            }

                            ix2 += outerStride2;
                        }
                    }
                    else
                    {
                        long n = @out.Shape.Dimensions.LongLength - 3;
                        long[] limits = @out.Shape.Dimensions.Where(x => n-- > 0).Select(x => x.Length).ToArray();
                        long[] counters = new long[limits.LongLength];

                        long totalOps = limits.LongLength == 0 ? 1 : limits.Aggregate<long>((a, b) => a * b);

                        //This chunck of variables are used to prevent repeated calculations of offsets
                        long dimIndex0 = 0 + limits.LongLength;
                        long dimIndex1 = 1 + limits.LongLength;
                        long dimIndex2 = 2 + limits.LongLength;

                        long opsOuter = @out.Shape.Dimensions[0 + limits.LongLength].Length;
                        long opsInner = @out.Shape.Dimensions[1 + limits.LongLength].Length;
                        long opsInnerInner = @out.Shape.Dimensions[2 + limits.LongLength].Length;

                        long outerStride3 = @out.Shape.Dimensions[dimIndex0].Stride;
                        long innerStride3 = @out.Shape.Dimensions[dimIndex1].Stride;
                        long innerInnerStride3 = @out.Shape.Dimensions[dimIndex2].Stride;
                        outerStride3 -= innerStride3 * @out.Shape.Dimensions[dimIndex1].Length;
                        innerStride3 -= innerInnerStride3 * @out.Shape.Dimensions[dimIndex2].Length;

                        for (long outer = 0; outer < totalOps; outer++)
                        {
                            //Get the array offset for the first element in the outer dimension
                            long ix3 = @out.Shape[counters];

                            for (long i = 0; i < opsOuter; i++)
                            {
                                for (long j = 0; j < opsInner; j++)
                                {
                                    for (long k = 0; k < opsInnerInner; k++)
                                    {
                                        d2[ix3] = (System.UInt64)(Math.Atan(scalar));
                                        ix3 += innerInnerStride3;
                                    }

                                    ix3 += innerStride3;
                                }

                                ix3 += outerStride3;
                            }

                            if (counters.LongLength > 0)
                            {
                                //Basically a ripple carry adder
                                long p = counters.LongLength - 1;
                                while (++counters[p] == limits[p] && p > 0)
                                {
                                    counters[p] = 0;
                                    p--;
                                }
                            }
                        }
                    }
                }
            }
        }
        /// <summary>
        /// Unsafe implementation of applying a unary operation
        /// </summary>
        /// <typeparam name="C">The type of operation to perform</typeparam>
        /// <param name="op">The operation instance</param>
        /// <param name="in1">The input argument</param>
        /// <param name="out">The output target</param>
        internal static void UFunc_Op_Inner_Unary_Flush_Single_TypedImpl<C>(NumCIL.Float.Atan op, NdArray<System.Single> in1, NdArray<System.Single> @out)
            where C : IUnaryOp<System.Single>
        {
            unsafe
            {
                using (var f1 = new Pinner(in1.DataAccessor))
                using (var f2 = new Pinner(@out.DataAccessor))
                {
                    var d1 = (System.Single*)f1.ptr;
                    var d2 = (System.Single*)f2.ptr;

                    if (@out.Shape.Dimensions.Length == 1)
                    {
                        long totalOps = @out.Shape.Dimensions[0].Length;

                        long ix1 = in1.Shape.Offset;
                        long ix2 = @out.Shape.Offset;

                        long stride1 = in1.Shape.Dimensions[0].Stride;
                        long stride2 = @out.Shape.Dimensions[0].Stride;


                        if (stride1 == stride2 && ix1 == ix2)
                        {
                            //Best case, all are equal, just keep a single counter
                            for (long i = 0; i < totalOps; i++)
                            {
                                d2[ix1] = (System.Single)(Math.Atan(d1[ix1]));
                                ix1 += stride1;
                            }
                        }
                        else
                        {
                            for (long i = 0; i < totalOps; i++)
                            {
                                d2[ix2] = (System.Single)(Math.Atan(d1[ix1]));
                                ix1 += stride1;
                                ix2 += stride2;
                            }
                        }
                    }
                    else if (@out.Shape.Dimensions.Length == 2)
                    {
                        long opsOuter = @out.Shape.Dimensions[0].Length;
                        long opsInner = @out.Shape.Dimensions[1].Length;

                        long ix1 = in1.Shape.Offset;
                        long ix2 = @out.Shape.Offset;

                        long outerStride1 = in1.Shape.Dimensions[0].Stride;
                        long outerStride2 = @out.Shape.Dimensions[0].Stride;

                        long innerStride1 = in1.Shape.Dimensions[1].Stride;
                        long innerStride2 = @out.Shape.Dimensions[1].Stride;

                        outerStride1 -= innerStride1 * in1.Shape.Dimensions[1].Length;
                        outerStride2 -= innerStride2 * @out.Shape.Dimensions[1].Length;

                        for (long i = 0; i < opsOuter; i++)
                        {
                            for (long j = 0; j < opsInner; j++)
                            {
                                d2[ix2] = (System.Single)(Math.Atan(d1[ix1]));
                                ix1 += innerStride1;
                                ix2 += innerStride2;
                            }

                            ix1 += outerStride1;
                            ix2 += outerStride2;
                        }
                    }
                    else
                    {
                        long n = in1.Shape.Dimensions.LongLength - 3;
                        long[] limits = in1.Shape.Dimensions.Where(x => n-- > 0).Select(x => x.Length).ToArray();
                        long[] counters = new long[limits.LongLength];

                        long totalOps = limits.LongLength == 0 ? 1 : limits.Aggregate<long>((a, b) => a * b);

                        //This chunck of variables are used to prevent repeated calculations of offsets
                        long dimIndex0 = 0 + limits.LongLength;
                        long dimIndex1 = 1 + limits.LongLength;
                        long dimIndex2 = 2 + limits.LongLength;

                        long opsOuter = @out.Shape.Dimensions[0 + limits.LongLength].Length;
                        long opsInner = @out.Shape.Dimensions[1 + limits.LongLength].Length;
                        long opsInnerInner = @out.Shape.Dimensions[2 + limits.LongLength].Length;

                        long outerStride1 = in1.Shape.Dimensions[dimIndex0].Stride;
                        long outerStride3 = @out.Shape.Dimensions[dimIndex0].Stride;

                        long innerStride1 = in1.Shape.Dimensions[dimIndex1].Stride;
                        long innerStride3 = @out.Shape.Dimensions[dimIndex1].Stride;

                        long innerInnerStride1 = in1.Shape.Dimensions[dimIndex2].Stride;
                        long innerInnerStride3 = @out.Shape.Dimensions[dimIndex2].Stride;

                        outerStride1 -= innerStride1 * in1.Shape.Dimensions[dimIndex1].Length;
                        outerStride3 -= innerStride3 * @out.Shape.Dimensions[dimIndex1].Length;

                        innerStride1 -= innerInnerStride1 * in1.Shape.Dimensions[dimIndex2].Length;
                        innerStride3 -= innerInnerStride3 * @out.Shape.Dimensions[dimIndex2].Length;

                        for (long outer = 0; outer < totalOps; outer++)
                        {
                            //Get the array offset for the first element in the outer dimension
                            long ix1 = in1.Shape[counters];
                            long ix3 = @out.Shape[counters];


                            for (long i = 0; i < opsOuter; i++)
                            {
                                for (long j = 0; j < opsInner; j++)
                                {
                                    for (long k = 0; k < opsInnerInner; k++)
                                    {
                                        d2[ix3] = (System.Single)(Math.Atan(d1[ix1]));
                                        ix1 += innerInnerStride1;
                                        ix3 += innerInnerStride3;
                                    }

                                    ix1 += innerStride1;
                                    ix3 += innerStride3;
                                }

                                ix1 += outerStride1;
                                ix3 += outerStride3;
                            }

                            if (counters.LongLength > 0)
                            {
                                //Basically a ripple carry adder
                                long p = counters.LongLength - 1;
                                while (++counters[p] == limits[p] && p > 0)
                                {
                                    counters[p] = 0;
                                    p--;
                                }
                            }
                        }
                    }
                }
            }
        }

        /// <summary>
        /// Unsafe implementation of applying a unary operation
        /// </summary>
        /// <typeparam name="C">The type of operation to perform</typeparam>
        /// <param name="op">The operation instance</param>
        /// <param name="scalar">The input scalar argument</param>
        /// <param name="out">The output target</param>
        internal static void UFunc_Op_Inner_Unary_Scalar_Flush_Single_TypedImpl<C>(NumCIL.Float.Atan op, System.Single scalar, NdArray<System.Single> @out)
            where C : IUnaryOp<System.Single>
        {
            unsafe
            {
                using (var f2 = new Pinner(@out.DataAccessor))
                {
                    var d2 = (System.Single*)f2.ptr;

                    if (@out.Shape.Dimensions.Length == 1)
                    {
                        long totalOps = @out.Shape.Dimensions[0].Length;
                        long ix2 = @out.Shape.Offset;
                        long stride2 = @out.Shape.Dimensions[0].Stride;

                        for (long i = 0; i < totalOps; i++)
                        {
                            d2[ix2] = (System.Single)(Math.Atan(scalar));
                            ix2 += stride2;
                        }
                    }
                    else if (@out.Shape.Dimensions.Length == 2)
                    {
                        long opsOuter = @out.Shape.Dimensions[0].Length;
                        long opsInner = @out.Shape.Dimensions[1].Length;

                        long ix2 = @out.Shape.Offset;
                        long outerStride2 = @out.Shape.Dimensions[0].Stride;
                        long innerStride2 = @out.Shape.Dimensions[1].Stride;
                        outerStride2 -= innerStride2 * @out.Shape.Dimensions[1].Length;

                        for (long i = 0; i < opsOuter; i++)
                        {
                            for (long j = 0; j < opsInner; j++)
                            {
                                d2[ix2] = (System.Single)(Math.Atan(scalar));
                                ix2 += innerStride2;
                            }

                            ix2 += outerStride2;
                        }
                    }
                    else
                    {
                        long n = @out.Shape.Dimensions.LongLength - 3;
                        long[] limits = @out.Shape.Dimensions.Where(x => n-- > 0).Select(x => x.Length).ToArray();
                        long[] counters = new long[limits.LongLength];

                        long totalOps = limits.LongLength == 0 ? 1 : limits.Aggregate<long>((a, b) => a * b);

                        //This chunck of variables are used to prevent repeated calculations of offsets
                        long dimIndex0 = 0 + limits.LongLength;
                        long dimIndex1 = 1 + limits.LongLength;
                        long dimIndex2 = 2 + limits.LongLength;

                        long opsOuter = @out.Shape.Dimensions[0 + limits.LongLength].Length;
                        long opsInner = @out.Shape.Dimensions[1 + limits.LongLength].Length;
                        long opsInnerInner = @out.Shape.Dimensions[2 + limits.LongLength].Length;

                        long outerStride3 = @out.Shape.Dimensions[dimIndex0].Stride;
                        long innerStride3 = @out.Shape.Dimensions[dimIndex1].Stride;
                        long innerInnerStride3 = @out.Shape.Dimensions[dimIndex2].Stride;
                        outerStride3 -= innerStride3 * @out.Shape.Dimensions[dimIndex1].Length;
                        innerStride3 -= innerInnerStride3 * @out.Shape.Dimensions[dimIndex2].Length;

                        for (long outer = 0; outer < totalOps; outer++)
                        {
                            //Get the array offset for the first element in the outer dimension
                            long ix3 = @out.Shape[counters];

                            for (long i = 0; i < opsOuter; i++)
                            {
                                for (long j = 0; j < opsInner; j++)
                                {
                                    for (long k = 0; k < opsInnerInner; k++)
                                    {
                                        d2[ix3] = (System.Single)(Math.Atan(scalar));
                                        ix3 += innerInnerStride3;
                                    }

                                    ix3 += innerStride3;
                                }

                                ix3 += outerStride3;
                            }

                            if (counters.LongLength > 0)
                            {
                                //Basically a ripple carry adder
                                long p = counters.LongLength - 1;
                                while (++counters[p] == limits[p] && p > 0)
                                {
                                    counters[p] = 0;
                                    p--;
                                }
                            }
                        }
                    }
                }
            }
        }
        /// <summary>
        /// Unsafe implementation of applying a unary operation
        /// </summary>
        /// <typeparam name="C">The type of operation to perform</typeparam>
        /// <param name="op">The operation instance</param>
        /// <param name="in1">The input argument</param>
        /// <param name="out">The output target</param>
        internal static void UFunc_Op_Inner_Unary_Flush_Double_TypedImpl<C>(NumCIL.Double.Atan op, NdArray<System.Double> in1, NdArray<System.Double> @out)
            where C : IUnaryOp<System.Double>
        {
            unsafe
            {
                using (var f1 = new Pinner(in1.DataAccessor))
                using (var f2 = new Pinner(@out.DataAccessor))
                {
                    var d1 = (System.Double*)f1.ptr;
                    var d2 = (System.Double*)f2.ptr;

                    if (@out.Shape.Dimensions.Length == 1)
                    {
                        long totalOps = @out.Shape.Dimensions[0].Length;

                        long ix1 = in1.Shape.Offset;
                        long ix2 = @out.Shape.Offset;

                        long stride1 = in1.Shape.Dimensions[0].Stride;
                        long stride2 = @out.Shape.Dimensions[0].Stride;


                        if (stride1 == stride2 && ix1 == ix2)
                        {
                            //Best case, all are equal, just keep a single counter
                            for (long i = 0; i < totalOps; i++)
                            {
                                d2[ix1] = (System.Double)(Math.Atan(d1[ix1]));
                                ix1 += stride1;
                            }
                        }
                        else
                        {
                            for (long i = 0; i < totalOps; i++)
                            {
                                d2[ix2] = (System.Double)(Math.Atan(d1[ix1]));
                                ix1 += stride1;
                                ix2 += stride2;
                            }
                        }
                    }
                    else if (@out.Shape.Dimensions.Length == 2)
                    {
                        long opsOuter = @out.Shape.Dimensions[0].Length;
                        long opsInner = @out.Shape.Dimensions[1].Length;

                        long ix1 = in1.Shape.Offset;
                        long ix2 = @out.Shape.Offset;

                        long outerStride1 = in1.Shape.Dimensions[0].Stride;
                        long outerStride2 = @out.Shape.Dimensions[0].Stride;

                        long innerStride1 = in1.Shape.Dimensions[1].Stride;
                        long innerStride2 = @out.Shape.Dimensions[1].Stride;

                        outerStride1 -= innerStride1 * in1.Shape.Dimensions[1].Length;
                        outerStride2 -= innerStride2 * @out.Shape.Dimensions[1].Length;

                        for (long i = 0; i < opsOuter; i++)
                        {
                            for (long j = 0; j < opsInner; j++)
                            {
                                d2[ix2] = (System.Double)(Math.Atan(d1[ix1]));
                                ix1 += innerStride1;
                                ix2 += innerStride2;
                            }

                            ix1 += outerStride1;
                            ix2 += outerStride2;
                        }
                    }
                    else
                    {
                        long n = in1.Shape.Dimensions.LongLength - 3;
                        long[] limits = in1.Shape.Dimensions.Where(x => n-- > 0).Select(x => x.Length).ToArray();
                        long[] counters = new long[limits.LongLength];

                        long totalOps = limits.LongLength == 0 ? 1 : limits.Aggregate<long>((a, b) => a * b);

                        //This chunck of variables are used to prevent repeated calculations of offsets
                        long dimIndex0 = 0 + limits.LongLength;
                        long dimIndex1 = 1 + limits.LongLength;
                        long dimIndex2 = 2 + limits.LongLength;

                        long opsOuter = @out.Shape.Dimensions[0 + limits.LongLength].Length;
                        long opsInner = @out.Shape.Dimensions[1 + limits.LongLength].Length;
                        long opsInnerInner = @out.Shape.Dimensions[2 + limits.LongLength].Length;

                        long outerStride1 = in1.Shape.Dimensions[dimIndex0].Stride;
                        long outerStride3 = @out.Shape.Dimensions[dimIndex0].Stride;

                        long innerStride1 = in1.Shape.Dimensions[dimIndex1].Stride;
                        long innerStride3 = @out.Shape.Dimensions[dimIndex1].Stride;

                        long innerInnerStride1 = in1.Shape.Dimensions[dimIndex2].Stride;
                        long innerInnerStride3 = @out.Shape.Dimensions[dimIndex2].Stride;

                        outerStride1 -= innerStride1 * in1.Shape.Dimensions[dimIndex1].Length;
                        outerStride3 -= innerStride3 * @out.Shape.Dimensions[dimIndex1].Length;

                        innerStride1 -= innerInnerStride1 * in1.Shape.Dimensions[dimIndex2].Length;
                        innerStride3 -= innerInnerStride3 * @out.Shape.Dimensions[dimIndex2].Length;

                        for (long outer = 0; outer < totalOps; outer++)
                        {
                            //Get the array offset for the first element in the outer dimension
                            long ix1 = in1.Shape[counters];
                            long ix3 = @out.Shape[counters];


                            for (long i = 0; i < opsOuter; i++)
                            {
                                for (long j = 0; j < opsInner; j++)
                                {
                                    for (long k = 0; k < opsInnerInner; k++)
                                    {
                                        d2[ix3] = (System.Double)(Math.Atan(d1[ix1]));
                                        ix1 += innerInnerStride1;
                                        ix3 += innerInnerStride3;
                                    }

                                    ix1 += innerStride1;
                                    ix3 += innerStride3;
                                }

                                ix1 += outerStride1;
                                ix3 += outerStride3;
                            }

                            if (counters.LongLength > 0)
                            {
                                //Basically a ripple carry adder
                                long p = counters.LongLength - 1;
                                while (++counters[p] == limits[p] && p > 0)
                                {
                                    counters[p] = 0;
                                    p--;
                                }
                            }
                        }
                    }
                }
            }
        }

        /// <summary>
        /// Unsafe implementation of applying a unary operation
        /// </summary>
        /// <typeparam name="C">The type of operation to perform</typeparam>
        /// <param name="op">The operation instance</param>
        /// <param name="scalar">The input scalar argument</param>
        /// <param name="out">The output target</param>
        internal static void UFunc_Op_Inner_Unary_Scalar_Flush_Double_TypedImpl<C>(NumCIL.Double.Atan op, System.Double scalar, NdArray<System.Double> @out)
            where C : IUnaryOp<System.Double>
        {
            unsafe
            {
                using (var f2 = new Pinner(@out.DataAccessor))
                {
                    var d2 = (System.Double*)f2.ptr;

                    if (@out.Shape.Dimensions.Length == 1)
                    {
                        long totalOps = @out.Shape.Dimensions[0].Length;
                        long ix2 = @out.Shape.Offset;
                        long stride2 = @out.Shape.Dimensions[0].Stride;

                        for (long i = 0; i < totalOps; i++)
                        {
                            d2[ix2] = (System.Double)(Math.Atan(scalar));
                            ix2 += stride2;
                        }
                    }
                    else if (@out.Shape.Dimensions.Length == 2)
                    {
                        long opsOuter = @out.Shape.Dimensions[0].Length;
                        long opsInner = @out.Shape.Dimensions[1].Length;

                        long ix2 = @out.Shape.Offset;
                        long outerStride2 = @out.Shape.Dimensions[0].Stride;
                        long innerStride2 = @out.Shape.Dimensions[1].Stride;
                        outerStride2 -= innerStride2 * @out.Shape.Dimensions[1].Length;

                        for (long i = 0; i < opsOuter; i++)
                        {
                            for (long j = 0; j < opsInner; j++)
                            {
                                d2[ix2] = (System.Double)(Math.Atan(scalar));
                                ix2 += innerStride2;
                            }

                            ix2 += outerStride2;
                        }
                    }
                    else
                    {
                        long n = @out.Shape.Dimensions.LongLength - 3;
                        long[] limits = @out.Shape.Dimensions.Where(x => n-- > 0).Select(x => x.Length).ToArray();
                        long[] counters = new long[limits.LongLength];

                        long totalOps = limits.LongLength == 0 ? 1 : limits.Aggregate<long>((a, b) => a * b);

                        //This chunck of variables are used to prevent repeated calculations of offsets
                        long dimIndex0 = 0 + limits.LongLength;
                        long dimIndex1 = 1 + limits.LongLength;
                        long dimIndex2 = 2 + limits.LongLength;

                        long opsOuter = @out.Shape.Dimensions[0 + limits.LongLength].Length;
                        long opsInner = @out.Shape.Dimensions[1 + limits.LongLength].Length;
                        long opsInnerInner = @out.Shape.Dimensions[2 + limits.LongLength].Length;

                        long outerStride3 = @out.Shape.Dimensions[dimIndex0].Stride;
                        long innerStride3 = @out.Shape.Dimensions[dimIndex1].Stride;
                        long innerInnerStride3 = @out.Shape.Dimensions[dimIndex2].Stride;
                        outerStride3 -= innerStride3 * @out.Shape.Dimensions[dimIndex1].Length;
                        innerStride3 -= innerInnerStride3 * @out.Shape.Dimensions[dimIndex2].Length;

                        for (long outer = 0; outer < totalOps; outer++)
                        {
                            //Get the array offset for the first element in the outer dimension
                            long ix3 = @out.Shape[counters];

                            for (long i = 0; i < opsOuter; i++)
                            {
                                for (long j = 0; j < opsInner; j++)
                                {
                                    for (long k = 0; k < opsInnerInner; k++)
                                    {
                                        d2[ix3] = (System.Double)(Math.Atan(scalar));
                                        ix3 += innerInnerStride3;
                                    }

                                    ix3 += innerStride3;
                                }

                                ix3 += outerStride3;
                            }

                            if (counters.LongLength > 0)
                            {
                                //Basically a ripple carry adder
                                long p = counters.LongLength - 1;
                                while (++counters[p] == limits[p] && p > 0)
                                {
                                    counters[p] = 0;
                                    p--;
                                }
                            }
                        }
                    }
                }
            }
        }
        /// <summary>
        /// Unsafe implementation of applying a unary operation
        /// </summary>
        /// <typeparam name="C">The type of operation to perform</typeparam>
        /// <param name="op">The operation instance</param>
        /// <param name="in1">The input argument</param>
        /// <param name="out">The output target</param>
        internal static void UFunc_Op_Inner_Unary_Flush_SByte_TypedImpl<C>(NumCIL.Int8.Sinh op, NdArray<System.SByte> in1, NdArray<System.SByte> @out)
            where C : IUnaryOp<System.SByte>
        {
            unsafe
            {
                using (var f1 = new Pinner(in1.DataAccessor))
                using (var f2 = new Pinner(@out.DataAccessor))
                {
                    var d1 = (System.SByte*)f1.ptr;
                    var d2 = (System.SByte*)f2.ptr;

                    if (@out.Shape.Dimensions.Length == 1)
                    {
                        long totalOps = @out.Shape.Dimensions[0].Length;

                        long ix1 = in1.Shape.Offset;
                        long ix2 = @out.Shape.Offset;

                        long stride1 = in1.Shape.Dimensions[0].Stride;
                        long stride2 = @out.Shape.Dimensions[0].Stride;


                        if (stride1 == stride2 && ix1 == ix2)
                        {
                            //Best case, all are equal, just keep a single counter
                            for (long i = 0; i < totalOps; i++)
                            {
                                d2[ix1] = (System.SByte)(Math.Sinh(d1[ix1]));
                                ix1 += stride1;
                            }
                        }
                        else
                        {
                            for (long i = 0; i < totalOps; i++)
                            {
                                d2[ix2] = (System.SByte)(Math.Sinh(d1[ix1]));
                                ix1 += stride1;
                                ix2 += stride2;
                            }
                        }
                    }
                    else if (@out.Shape.Dimensions.Length == 2)
                    {
                        long opsOuter = @out.Shape.Dimensions[0].Length;
                        long opsInner = @out.Shape.Dimensions[1].Length;

                        long ix1 = in1.Shape.Offset;
                        long ix2 = @out.Shape.Offset;

                        long outerStride1 = in1.Shape.Dimensions[0].Stride;
                        long outerStride2 = @out.Shape.Dimensions[0].Stride;

                        long innerStride1 = in1.Shape.Dimensions[1].Stride;
                        long innerStride2 = @out.Shape.Dimensions[1].Stride;

                        outerStride1 -= innerStride1 * in1.Shape.Dimensions[1].Length;
                        outerStride2 -= innerStride2 * @out.Shape.Dimensions[1].Length;

                        for (long i = 0; i < opsOuter; i++)
                        {
                            for (long j = 0; j < opsInner; j++)
                            {
                                d2[ix2] = (System.SByte)(Math.Sinh(d1[ix1]));
                                ix1 += innerStride1;
                                ix2 += innerStride2;
                            }

                            ix1 += outerStride1;
                            ix2 += outerStride2;
                        }
                    }
                    else
                    {
                        long n = in1.Shape.Dimensions.LongLength - 3;
                        long[] limits = in1.Shape.Dimensions.Where(x => n-- > 0).Select(x => x.Length).ToArray();
                        long[] counters = new long[limits.LongLength];

                        long totalOps = limits.LongLength == 0 ? 1 : limits.Aggregate<long>((a, b) => a * b);

                        //This chunck of variables are used to prevent repeated calculations of offsets
                        long dimIndex0 = 0 + limits.LongLength;
                        long dimIndex1 = 1 + limits.LongLength;
                        long dimIndex2 = 2 + limits.LongLength;

                        long opsOuter = @out.Shape.Dimensions[0 + limits.LongLength].Length;
                        long opsInner = @out.Shape.Dimensions[1 + limits.LongLength].Length;
                        long opsInnerInner = @out.Shape.Dimensions[2 + limits.LongLength].Length;

                        long outerStride1 = in1.Shape.Dimensions[dimIndex0].Stride;
                        long outerStride3 = @out.Shape.Dimensions[dimIndex0].Stride;

                        long innerStride1 = in1.Shape.Dimensions[dimIndex1].Stride;
                        long innerStride3 = @out.Shape.Dimensions[dimIndex1].Stride;

                        long innerInnerStride1 = in1.Shape.Dimensions[dimIndex2].Stride;
                        long innerInnerStride3 = @out.Shape.Dimensions[dimIndex2].Stride;

                        outerStride1 -= innerStride1 * in1.Shape.Dimensions[dimIndex1].Length;
                        outerStride3 -= innerStride3 * @out.Shape.Dimensions[dimIndex1].Length;

                        innerStride1 -= innerInnerStride1 * in1.Shape.Dimensions[dimIndex2].Length;
                        innerStride3 -= innerInnerStride3 * @out.Shape.Dimensions[dimIndex2].Length;

                        for (long outer = 0; outer < totalOps; outer++)
                        {
                            //Get the array offset for the first element in the outer dimension
                            long ix1 = in1.Shape[counters];
                            long ix3 = @out.Shape[counters];


                            for (long i = 0; i < opsOuter; i++)
                            {
                                for (long j = 0; j < opsInner; j++)
                                {
                                    for (long k = 0; k < opsInnerInner; k++)
                                    {
                                        d2[ix3] = (System.SByte)(Math.Sinh(d1[ix1]));
                                        ix1 += innerInnerStride1;
                                        ix3 += innerInnerStride3;
                                    }

                                    ix1 += innerStride1;
                                    ix3 += innerStride3;
                                }

                                ix1 += outerStride1;
                                ix3 += outerStride3;
                            }

                            if (counters.LongLength > 0)
                            {
                                //Basically a ripple carry adder
                                long p = counters.LongLength - 1;
                                while (++counters[p] == limits[p] && p > 0)
                                {
                                    counters[p] = 0;
                                    p--;
                                }
                            }
                        }
                    }
                }
            }
        }

        /// <summary>
        /// Unsafe implementation of applying a unary operation
        /// </summary>
        /// <typeparam name="C">The type of operation to perform</typeparam>
        /// <param name="op">The operation instance</param>
        /// <param name="scalar">The input scalar argument</param>
        /// <param name="out">The output target</param>
        internal static void UFunc_Op_Inner_Unary_Scalar_Flush_SByte_TypedImpl<C>(NumCIL.Int8.Sinh op, System.SByte scalar, NdArray<System.SByte> @out)
            where C : IUnaryOp<System.SByte>
        {
            unsafe
            {
                using (var f2 = new Pinner(@out.DataAccessor))
                {
                    var d2 = (System.SByte*)f2.ptr;

                    if (@out.Shape.Dimensions.Length == 1)
                    {
                        long totalOps = @out.Shape.Dimensions[0].Length;
                        long ix2 = @out.Shape.Offset;
                        long stride2 = @out.Shape.Dimensions[0].Stride;

                        for (long i = 0; i < totalOps; i++)
                        {
                            d2[ix2] = (System.SByte)(Math.Sinh(scalar));
                            ix2 += stride2;
                        }
                    }
                    else if (@out.Shape.Dimensions.Length == 2)
                    {
                        long opsOuter = @out.Shape.Dimensions[0].Length;
                        long opsInner = @out.Shape.Dimensions[1].Length;

                        long ix2 = @out.Shape.Offset;
                        long outerStride2 = @out.Shape.Dimensions[0].Stride;
                        long innerStride2 = @out.Shape.Dimensions[1].Stride;
                        outerStride2 -= innerStride2 * @out.Shape.Dimensions[1].Length;

                        for (long i = 0; i < opsOuter; i++)
                        {
                            for (long j = 0; j < opsInner; j++)
                            {
                                d2[ix2] = (System.SByte)(Math.Sinh(scalar));
                                ix2 += innerStride2;
                            }

                            ix2 += outerStride2;
                        }
                    }
                    else
                    {
                        long n = @out.Shape.Dimensions.LongLength - 3;
                        long[] limits = @out.Shape.Dimensions.Where(x => n-- > 0).Select(x => x.Length).ToArray();
                        long[] counters = new long[limits.LongLength];

                        long totalOps = limits.LongLength == 0 ? 1 : limits.Aggregate<long>((a, b) => a * b);

                        //This chunck of variables are used to prevent repeated calculations of offsets
                        long dimIndex0 = 0 + limits.LongLength;
                        long dimIndex1 = 1 + limits.LongLength;
                        long dimIndex2 = 2 + limits.LongLength;

                        long opsOuter = @out.Shape.Dimensions[0 + limits.LongLength].Length;
                        long opsInner = @out.Shape.Dimensions[1 + limits.LongLength].Length;
                        long opsInnerInner = @out.Shape.Dimensions[2 + limits.LongLength].Length;

                        long outerStride3 = @out.Shape.Dimensions[dimIndex0].Stride;
                        long innerStride3 = @out.Shape.Dimensions[dimIndex1].Stride;
                        long innerInnerStride3 = @out.Shape.Dimensions[dimIndex2].Stride;
                        outerStride3 -= innerStride3 * @out.Shape.Dimensions[dimIndex1].Length;
                        innerStride3 -= innerInnerStride3 * @out.Shape.Dimensions[dimIndex2].Length;

                        for (long outer = 0; outer < totalOps; outer++)
                        {
                            //Get the array offset for the first element in the outer dimension
                            long ix3 = @out.Shape[counters];

                            for (long i = 0; i < opsOuter; i++)
                            {
                                for (long j = 0; j < opsInner; j++)
                                {
                                    for (long k = 0; k < opsInnerInner; k++)
                                    {
                                        d2[ix3] = (System.SByte)(Math.Sinh(scalar));
                                        ix3 += innerInnerStride3;
                                    }

                                    ix3 += innerStride3;
                                }

                                ix3 += outerStride3;
                            }

                            if (counters.LongLength > 0)
                            {
                                //Basically a ripple carry adder
                                long p = counters.LongLength - 1;
                                while (++counters[p] == limits[p] && p > 0)
                                {
                                    counters[p] = 0;
                                    p--;
                                }
                            }
                        }
                    }
                }
            }
        }
        /// <summary>
        /// Unsafe implementation of applying a unary operation
        /// </summary>
        /// <typeparam name="C">The type of operation to perform</typeparam>
        /// <param name="op">The operation instance</param>
        /// <param name="in1">The input argument</param>
        /// <param name="out">The output target</param>
        internal static void UFunc_Op_Inner_Unary_Flush_Byte_TypedImpl<C>(NumCIL.UInt8.Sinh op, NdArray<System.Byte> in1, NdArray<System.Byte> @out)
            where C : IUnaryOp<System.Byte>
        {
            unsafe
            {
                using (var f1 = new Pinner(in1.DataAccessor))
                using (var f2 = new Pinner(@out.DataAccessor))
                {
                    var d1 = (System.Byte*)f1.ptr;
                    var d2 = (System.Byte*)f2.ptr;

                    if (@out.Shape.Dimensions.Length == 1)
                    {
                        long totalOps = @out.Shape.Dimensions[0].Length;

                        long ix1 = in1.Shape.Offset;
                        long ix2 = @out.Shape.Offset;

                        long stride1 = in1.Shape.Dimensions[0].Stride;
                        long stride2 = @out.Shape.Dimensions[0].Stride;


                        if (stride1 == stride2 && ix1 == ix2)
                        {
                            //Best case, all are equal, just keep a single counter
                            for (long i = 0; i < totalOps; i++)
                            {
                                d2[ix1] = (System.Byte)(Math.Sinh(d1[ix1]));
                                ix1 += stride1;
                            }
                        }
                        else
                        {
                            for (long i = 0; i < totalOps; i++)
                            {
                                d2[ix2] = (System.Byte)(Math.Sinh(d1[ix1]));
                                ix1 += stride1;
                                ix2 += stride2;
                            }
                        }
                    }
                    else if (@out.Shape.Dimensions.Length == 2)
                    {
                        long opsOuter = @out.Shape.Dimensions[0].Length;
                        long opsInner = @out.Shape.Dimensions[1].Length;

                        long ix1 = in1.Shape.Offset;
                        long ix2 = @out.Shape.Offset;

                        long outerStride1 = in1.Shape.Dimensions[0].Stride;
                        long outerStride2 = @out.Shape.Dimensions[0].Stride;

                        long innerStride1 = in1.Shape.Dimensions[1].Stride;
                        long innerStride2 = @out.Shape.Dimensions[1].Stride;

                        outerStride1 -= innerStride1 * in1.Shape.Dimensions[1].Length;
                        outerStride2 -= innerStride2 * @out.Shape.Dimensions[1].Length;

                        for (long i = 0; i < opsOuter; i++)
                        {
                            for (long j = 0; j < opsInner; j++)
                            {
                                d2[ix2] = (System.Byte)(Math.Sinh(d1[ix1]));
                                ix1 += innerStride1;
                                ix2 += innerStride2;
                            }

                            ix1 += outerStride1;
                            ix2 += outerStride2;
                        }
                    }
                    else
                    {
                        long n = in1.Shape.Dimensions.LongLength - 3;
                        long[] limits = in1.Shape.Dimensions.Where(x => n-- > 0).Select(x => x.Length).ToArray();
                        long[] counters = new long[limits.LongLength];

                        long totalOps = limits.LongLength == 0 ? 1 : limits.Aggregate<long>((a, b) => a * b);

                        //This chunck of variables are used to prevent repeated calculations of offsets
                        long dimIndex0 = 0 + limits.LongLength;
                        long dimIndex1 = 1 + limits.LongLength;
                        long dimIndex2 = 2 + limits.LongLength;

                        long opsOuter = @out.Shape.Dimensions[0 + limits.LongLength].Length;
                        long opsInner = @out.Shape.Dimensions[1 + limits.LongLength].Length;
                        long opsInnerInner = @out.Shape.Dimensions[2 + limits.LongLength].Length;

                        long outerStride1 = in1.Shape.Dimensions[dimIndex0].Stride;
                        long outerStride3 = @out.Shape.Dimensions[dimIndex0].Stride;

                        long innerStride1 = in1.Shape.Dimensions[dimIndex1].Stride;
                        long innerStride3 = @out.Shape.Dimensions[dimIndex1].Stride;

                        long innerInnerStride1 = in1.Shape.Dimensions[dimIndex2].Stride;
                        long innerInnerStride3 = @out.Shape.Dimensions[dimIndex2].Stride;

                        outerStride1 -= innerStride1 * in1.Shape.Dimensions[dimIndex1].Length;
                        outerStride3 -= innerStride3 * @out.Shape.Dimensions[dimIndex1].Length;

                        innerStride1 -= innerInnerStride1 * in1.Shape.Dimensions[dimIndex2].Length;
                        innerStride3 -= innerInnerStride3 * @out.Shape.Dimensions[dimIndex2].Length;

                        for (long outer = 0; outer < totalOps; outer++)
                        {
                            //Get the array offset for the first element in the outer dimension
                            long ix1 = in1.Shape[counters];
                            long ix3 = @out.Shape[counters];


                            for (long i = 0; i < opsOuter; i++)
                            {
                                for (long j = 0; j < opsInner; j++)
                                {
                                    for (long k = 0; k < opsInnerInner; k++)
                                    {
                                        d2[ix3] = (System.Byte)(Math.Sinh(d1[ix1]));
                                        ix1 += innerInnerStride1;
                                        ix3 += innerInnerStride3;
                                    }

                                    ix1 += innerStride1;
                                    ix3 += innerStride3;
                                }

                                ix1 += outerStride1;
                                ix3 += outerStride3;
                            }

                            if (counters.LongLength > 0)
                            {
                                //Basically a ripple carry adder
                                long p = counters.LongLength - 1;
                                while (++counters[p] == limits[p] && p > 0)
                                {
                                    counters[p] = 0;
                                    p--;
                                }
                            }
                        }
                    }
                }
            }
        }

        /// <summary>
        /// Unsafe implementation of applying a unary operation
        /// </summary>
        /// <typeparam name="C">The type of operation to perform</typeparam>
        /// <param name="op">The operation instance</param>
        /// <param name="scalar">The input scalar argument</param>
        /// <param name="out">The output target</param>
        internal static void UFunc_Op_Inner_Unary_Scalar_Flush_Byte_TypedImpl<C>(NumCIL.UInt8.Sinh op, System.Byte scalar, NdArray<System.Byte> @out)
            where C : IUnaryOp<System.Byte>
        {
            unsafe
            {
                using (var f2 = new Pinner(@out.DataAccessor))
                {
                    var d2 = (System.Byte*)f2.ptr;

                    if (@out.Shape.Dimensions.Length == 1)
                    {
                        long totalOps = @out.Shape.Dimensions[0].Length;
                        long ix2 = @out.Shape.Offset;
                        long stride2 = @out.Shape.Dimensions[0].Stride;

                        for (long i = 0; i < totalOps; i++)
                        {
                            d2[ix2] = (System.Byte)(Math.Sinh(scalar));
                            ix2 += stride2;
                        }
                    }
                    else if (@out.Shape.Dimensions.Length == 2)
                    {
                        long opsOuter = @out.Shape.Dimensions[0].Length;
                        long opsInner = @out.Shape.Dimensions[1].Length;

                        long ix2 = @out.Shape.Offset;
                        long outerStride2 = @out.Shape.Dimensions[0].Stride;
                        long innerStride2 = @out.Shape.Dimensions[1].Stride;
                        outerStride2 -= innerStride2 * @out.Shape.Dimensions[1].Length;

                        for (long i = 0; i < opsOuter; i++)
                        {
                            for (long j = 0; j < opsInner; j++)
                            {
                                d2[ix2] = (System.Byte)(Math.Sinh(scalar));
                                ix2 += innerStride2;
                            }

                            ix2 += outerStride2;
                        }
                    }
                    else
                    {
                        long n = @out.Shape.Dimensions.LongLength - 3;
                        long[] limits = @out.Shape.Dimensions.Where(x => n-- > 0).Select(x => x.Length).ToArray();
                        long[] counters = new long[limits.LongLength];

                        long totalOps = limits.LongLength == 0 ? 1 : limits.Aggregate<long>((a, b) => a * b);

                        //This chunck of variables are used to prevent repeated calculations of offsets
                        long dimIndex0 = 0 + limits.LongLength;
                        long dimIndex1 = 1 + limits.LongLength;
                        long dimIndex2 = 2 + limits.LongLength;

                        long opsOuter = @out.Shape.Dimensions[0 + limits.LongLength].Length;
                        long opsInner = @out.Shape.Dimensions[1 + limits.LongLength].Length;
                        long opsInnerInner = @out.Shape.Dimensions[2 + limits.LongLength].Length;

                        long outerStride3 = @out.Shape.Dimensions[dimIndex0].Stride;
                        long innerStride3 = @out.Shape.Dimensions[dimIndex1].Stride;
                        long innerInnerStride3 = @out.Shape.Dimensions[dimIndex2].Stride;
                        outerStride3 -= innerStride3 * @out.Shape.Dimensions[dimIndex1].Length;
                        innerStride3 -= innerInnerStride3 * @out.Shape.Dimensions[dimIndex2].Length;

                        for (long outer = 0; outer < totalOps; outer++)
                        {
                            //Get the array offset for the first element in the outer dimension
                            long ix3 = @out.Shape[counters];

                            for (long i = 0; i < opsOuter; i++)
                            {
                                for (long j = 0; j < opsInner; j++)
                                {
                                    for (long k = 0; k < opsInnerInner; k++)
                                    {
                                        d2[ix3] = (System.Byte)(Math.Sinh(scalar));
                                        ix3 += innerInnerStride3;
                                    }

                                    ix3 += innerStride3;
                                }

                                ix3 += outerStride3;
                            }

                            if (counters.LongLength > 0)
                            {
                                //Basically a ripple carry adder
                                long p = counters.LongLength - 1;
                                while (++counters[p] == limits[p] && p > 0)
                                {
                                    counters[p] = 0;
                                    p--;
                                }
                            }
                        }
                    }
                }
            }
        }
        /// <summary>
        /// Unsafe implementation of applying a unary operation
        /// </summary>
        /// <typeparam name="C">The type of operation to perform</typeparam>
        /// <param name="op">The operation instance</param>
        /// <param name="in1">The input argument</param>
        /// <param name="out">The output target</param>
        internal static void UFunc_Op_Inner_Unary_Flush_Int16_TypedImpl<C>(NumCIL.Int16.Sinh op, NdArray<System.Int16> in1, NdArray<System.Int16> @out)
            where C : IUnaryOp<System.Int16>
        {
            unsafe
            {
                using (var f1 = new Pinner(in1.DataAccessor))
                using (var f2 = new Pinner(@out.DataAccessor))
                {
                    var d1 = (System.Int16*)f1.ptr;
                    var d2 = (System.Int16*)f2.ptr;

                    if (@out.Shape.Dimensions.Length == 1)
                    {
                        long totalOps = @out.Shape.Dimensions[0].Length;

                        long ix1 = in1.Shape.Offset;
                        long ix2 = @out.Shape.Offset;

                        long stride1 = in1.Shape.Dimensions[0].Stride;
                        long stride2 = @out.Shape.Dimensions[0].Stride;


                        if (stride1 == stride2 && ix1 == ix2)
                        {
                            //Best case, all are equal, just keep a single counter
                            for (long i = 0; i < totalOps; i++)
                            {
                                d2[ix1] = (System.Int16)(Math.Sinh(d1[ix1]));
                                ix1 += stride1;
                            }
                        }
                        else
                        {
                            for (long i = 0; i < totalOps; i++)
                            {
                                d2[ix2] = (System.Int16)(Math.Sinh(d1[ix1]));
                                ix1 += stride1;
                                ix2 += stride2;
                            }
                        }
                    }
                    else if (@out.Shape.Dimensions.Length == 2)
                    {
                        long opsOuter = @out.Shape.Dimensions[0].Length;
                        long opsInner = @out.Shape.Dimensions[1].Length;

                        long ix1 = in1.Shape.Offset;
                        long ix2 = @out.Shape.Offset;

                        long outerStride1 = in1.Shape.Dimensions[0].Stride;
                        long outerStride2 = @out.Shape.Dimensions[0].Stride;

                        long innerStride1 = in1.Shape.Dimensions[1].Stride;
                        long innerStride2 = @out.Shape.Dimensions[1].Stride;

                        outerStride1 -= innerStride1 * in1.Shape.Dimensions[1].Length;
                        outerStride2 -= innerStride2 * @out.Shape.Dimensions[1].Length;

                        for (long i = 0; i < opsOuter; i++)
                        {
                            for (long j = 0; j < opsInner; j++)
                            {
                                d2[ix2] = (System.Int16)(Math.Sinh(d1[ix1]));
                                ix1 += innerStride1;
                                ix2 += innerStride2;
                            }

                            ix1 += outerStride1;
                            ix2 += outerStride2;
                        }
                    }
                    else
                    {
                        long n = in1.Shape.Dimensions.LongLength - 3;
                        long[] limits = in1.Shape.Dimensions.Where(x => n-- > 0).Select(x => x.Length).ToArray();
                        long[] counters = new long[limits.LongLength];

                        long totalOps = limits.LongLength == 0 ? 1 : limits.Aggregate<long>((a, b) => a * b);

                        //This chunck of variables are used to prevent repeated calculations of offsets
                        long dimIndex0 = 0 + limits.LongLength;
                        long dimIndex1 = 1 + limits.LongLength;
                        long dimIndex2 = 2 + limits.LongLength;

                        long opsOuter = @out.Shape.Dimensions[0 + limits.LongLength].Length;
                        long opsInner = @out.Shape.Dimensions[1 + limits.LongLength].Length;
                        long opsInnerInner = @out.Shape.Dimensions[2 + limits.LongLength].Length;

                        long outerStride1 = in1.Shape.Dimensions[dimIndex0].Stride;
                        long outerStride3 = @out.Shape.Dimensions[dimIndex0].Stride;

                        long innerStride1 = in1.Shape.Dimensions[dimIndex1].Stride;
                        long innerStride3 = @out.Shape.Dimensions[dimIndex1].Stride;

                        long innerInnerStride1 = in1.Shape.Dimensions[dimIndex2].Stride;
                        long innerInnerStride3 = @out.Shape.Dimensions[dimIndex2].Stride;

                        outerStride1 -= innerStride1 * in1.Shape.Dimensions[dimIndex1].Length;
                        outerStride3 -= innerStride3 * @out.Shape.Dimensions[dimIndex1].Length;

                        innerStride1 -= innerInnerStride1 * in1.Shape.Dimensions[dimIndex2].Length;
                        innerStride3 -= innerInnerStride3 * @out.Shape.Dimensions[dimIndex2].Length;

                        for (long outer = 0; outer < totalOps; outer++)
                        {
                            //Get the array offset for the first element in the outer dimension
                            long ix1 = in1.Shape[counters];
                            long ix3 = @out.Shape[counters];


                            for (long i = 0; i < opsOuter; i++)
                            {
                                for (long j = 0; j < opsInner; j++)
                                {
                                    for (long k = 0; k < opsInnerInner; k++)
                                    {
                                        d2[ix3] = (System.Int16)(Math.Sinh(d1[ix1]));
                                        ix1 += innerInnerStride1;
                                        ix3 += innerInnerStride3;
                                    }

                                    ix1 += innerStride1;
                                    ix3 += innerStride3;
                                }

                                ix1 += outerStride1;
                                ix3 += outerStride3;
                            }

                            if (counters.LongLength > 0)
                            {
                                //Basically a ripple carry adder
                                long p = counters.LongLength - 1;
                                while (++counters[p] == limits[p] && p > 0)
                                {
                                    counters[p] = 0;
                                    p--;
                                }
                            }
                        }
                    }
                }
            }
        }

        /// <summary>
        /// Unsafe implementation of applying a unary operation
        /// </summary>
        /// <typeparam name="C">The type of operation to perform</typeparam>
        /// <param name="op">The operation instance</param>
        /// <param name="scalar">The input scalar argument</param>
        /// <param name="out">The output target</param>
        internal static void UFunc_Op_Inner_Unary_Scalar_Flush_Int16_TypedImpl<C>(NumCIL.Int16.Sinh op, System.Int16 scalar, NdArray<System.Int16> @out)
            where C : IUnaryOp<System.Int16>
        {
            unsafe
            {
                using (var f2 = new Pinner(@out.DataAccessor))
                {
                    var d2 = (System.Int16*)f2.ptr;

                    if (@out.Shape.Dimensions.Length == 1)
                    {
                        long totalOps = @out.Shape.Dimensions[0].Length;
                        long ix2 = @out.Shape.Offset;
                        long stride2 = @out.Shape.Dimensions[0].Stride;

                        for (long i = 0; i < totalOps; i++)
                        {
                            d2[ix2] = (System.Int16)(Math.Sinh(scalar));
                            ix2 += stride2;
                        }
                    }
                    else if (@out.Shape.Dimensions.Length == 2)
                    {
                        long opsOuter = @out.Shape.Dimensions[0].Length;
                        long opsInner = @out.Shape.Dimensions[1].Length;

                        long ix2 = @out.Shape.Offset;
                        long outerStride2 = @out.Shape.Dimensions[0].Stride;
                        long innerStride2 = @out.Shape.Dimensions[1].Stride;
                        outerStride2 -= innerStride2 * @out.Shape.Dimensions[1].Length;

                        for (long i = 0; i < opsOuter; i++)
                        {
                            for (long j = 0; j < opsInner; j++)
                            {
                                d2[ix2] = (System.Int16)(Math.Sinh(scalar));
                                ix2 += innerStride2;
                            }

                            ix2 += outerStride2;
                        }
                    }
                    else
                    {
                        long n = @out.Shape.Dimensions.LongLength - 3;
                        long[] limits = @out.Shape.Dimensions.Where(x => n-- > 0).Select(x => x.Length).ToArray();
                        long[] counters = new long[limits.LongLength];

                        long totalOps = limits.LongLength == 0 ? 1 : limits.Aggregate<long>((a, b) => a * b);

                        //This chunck of variables are used to prevent repeated calculations of offsets
                        long dimIndex0 = 0 + limits.LongLength;
                        long dimIndex1 = 1 + limits.LongLength;
                        long dimIndex2 = 2 + limits.LongLength;

                        long opsOuter = @out.Shape.Dimensions[0 + limits.LongLength].Length;
                        long opsInner = @out.Shape.Dimensions[1 + limits.LongLength].Length;
                        long opsInnerInner = @out.Shape.Dimensions[2 + limits.LongLength].Length;

                        long outerStride3 = @out.Shape.Dimensions[dimIndex0].Stride;
                        long innerStride3 = @out.Shape.Dimensions[dimIndex1].Stride;
                        long innerInnerStride3 = @out.Shape.Dimensions[dimIndex2].Stride;
                        outerStride3 -= innerStride3 * @out.Shape.Dimensions[dimIndex1].Length;
                        innerStride3 -= innerInnerStride3 * @out.Shape.Dimensions[dimIndex2].Length;

                        for (long outer = 0; outer < totalOps; outer++)
                        {
                            //Get the array offset for the first element in the outer dimension
                            long ix3 = @out.Shape[counters];

                            for (long i = 0; i < opsOuter; i++)
                            {
                                for (long j = 0; j < opsInner; j++)
                                {
                                    for (long k = 0; k < opsInnerInner; k++)
                                    {
                                        d2[ix3] = (System.Int16)(Math.Sinh(scalar));
                                        ix3 += innerInnerStride3;
                                    }

                                    ix3 += innerStride3;
                                }

                                ix3 += outerStride3;
                            }

                            if (counters.LongLength > 0)
                            {
                                //Basically a ripple carry adder
                                long p = counters.LongLength - 1;
                                while (++counters[p] == limits[p] && p > 0)
                                {
                                    counters[p] = 0;
                                    p--;
                                }
                            }
                        }
                    }
                }
            }
        }
        /// <summary>
        /// Unsafe implementation of applying a unary operation
        /// </summary>
        /// <typeparam name="C">The type of operation to perform</typeparam>
        /// <param name="op">The operation instance</param>
        /// <param name="in1">The input argument</param>
        /// <param name="out">The output target</param>
        internal static void UFunc_Op_Inner_Unary_Flush_UInt16_TypedImpl<C>(NumCIL.UInt16.Sinh op, NdArray<System.UInt16> in1, NdArray<System.UInt16> @out)
            where C : IUnaryOp<System.UInt16>
        {
            unsafe
            {
                using (var f1 = new Pinner(in1.DataAccessor))
                using (var f2 = new Pinner(@out.DataAccessor))
                {
                    var d1 = (System.UInt16*)f1.ptr;
                    var d2 = (System.UInt16*)f2.ptr;

                    if (@out.Shape.Dimensions.Length == 1)
                    {
                        long totalOps = @out.Shape.Dimensions[0].Length;

                        long ix1 = in1.Shape.Offset;
                        long ix2 = @out.Shape.Offset;

                        long stride1 = in1.Shape.Dimensions[0].Stride;
                        long stride2 = @out.Shape.Dimensions[0].Stride;


                        if (stride1 == stride2 && ix1 == ix2)
                        {
                            //Best case, all are equal, just keep a single counter
                            for (long i = 0; i < totalOps; i++)
                            {
                                d2[ix1] = (System.UInt16)(Math.Sinh(d1[ix1]));
                                ix1 += stride1;
                            }
                        }
                        else
                        {
                            for (long i = 0; i < totalOps; i++)
                            {
                                d2[ix2] = (System.UInt16)(Math.Sinh(d1[ix1]));
                                ix1 += stride1;
                                ix2 += stride2;
                            }
                        }
                    }
                    else if (@out.Shape.Dimensions.Length == 2)
                    {
                        long opsOuter = @out.Shape.Dimensions[0].Length;
                        long opsInner = @out.Shape.Dimensions[1].Length;

                        long ix1 = in1.Shape.Offset;
                        long ix2 = @out.Shape.Offset;

                        long outerStride1 = in1.Shape.Dimensions[0].Stride;
                        long outerStride2 = @out.Shape.Dimensions[0].Stride;

                        long innerStride1 = in1.Shape.Dimensions[1].Stride;
                        long innerStride2 = @out.Shape.Dimensions[1].Stride;

                        outerStride1 -= innerStride1 * in1.Shape.Dimensions[1].Length;
                        outerStride2 -= innerStride2 * @out.Shape.Dimensions[1].Length;

                        for (long i = 0; i < opsOuter; i++)
                        {
                            for (long j = 0; j < opsInner; j++)
                            {
                                d2[ix2] = (System.UInt16)(Math.Sinh(d1[ix1]));
                                ix1 += innerStride1;
                                ix2 += innerStride2;
                            }

                            ix1 += outerStride1;
                            ix2 += outerStride2;
                        }
                    }
                    else
                    {
                        long n = in1.Shape.Dimensions.LongLength - 3;
                        long[] limits = in1.Shape.Dimensions.Where(x => n-- > 0).Select(x => x.Length).ToArray();
                        long[] counters = new long[limits.LongLength];

                        long totalOps = limits.LongLength == 0 ? 1 : limits.Aggregate<long>((a, b) => a * b);

                        //This chunck of variables are used to prevent repeated calculations of offsets
                        long dimIndex0 = 0 + limits.LongLength;
                        long dimIndex1 = 1 + limits.LongLength;
                        long dimIndex2 = 2 + limits.LongLength;

                        long opsOuter = @out.Shape.Dimensions[0 + limits.LongLength].Length;
                        long opsInner = @out.Shape.Dimensions[1 + limits.LongLength].Length;
                        long opsInnerInner = @out.Shape.Dimensions[2 + limits.LongLength].Length;

                        long outerStride1 = in1.Shape.Dimensions[dimIndex0].Stride;
                        long outerStride3 = @out.Shape.Dimensions[dimIndex0].Stride;

                        long innerStride1 = in1.Shape.Dimensions[dimIndex1].Stride;
                        long innerStride3 = @out.Shape.Dimensions[dimIndex1].Stride;

                        long innerInnerStride1 = in1.Shape.Dimensions[dimIndex2].Stride;
                        long innerInnerStride3 = @out.Shape.Dimensions[dimIndex2].Stride;

                        outerStride1 -= innerStride1 * in1.Shape.Dimensions[dimIndex1].Length;
                        outerStride3 -= innerStride3 * @out.Shape.Dimensions[dimIndex1].Length;

                        innerStride1 -= innerInnerStride1 * in1.Shape.Dimensions[dimIndex2].Length;
                        innerStride3 -= innerInnerStride3 * @out.Shape.Dimensions[dimIndex2].Length;

                        for (long outer = 0; outer < totalOps; outer++)
                        {
                            //Get the array offset for the first element in the outer dimension
                            long ix1 = in1.Shape[counters];
                            long ix3 = @out.Shape[counters];


                            for (long i = 0; i < opsOuter; i++)
                            {
                                for (long j = 0; j < opsInner; j++)
                                {
                                    for (long k = 0; k < opsInnerInner; k++)
                                    {
                                        d2[ix3] = (System.UInt16)(Math.Sinh(d1[ix1]));
                                        ix1 += innerInnerStride1;
                                        ix3 += innerInnerStride3;
                                    }

                                    ix1 += innerStride1;
                                    ix3 += innerStride3;
                                }

                                ix1 += outerStride1;
                                ix3 += outerStride3;
                            }

                            if (counters.LongLength > 0)
                            {
                                //Basically a ripple carry adder
                                long p = counters.LongLength - 1;
                                while (++counters[p] == limits[p] && p > 0)
                                {
                                    counters[p] = 0;
                                    p--;
                                }
                            }
                        }
                    }
                }
            }
        }

        /// <summary>
        /// Unsafe implementation of applying a unary operation
        /// </summary>
        /// <typeparam name="C">The type of operation to perform</typeparam>
        /// <param name="op">The operation instance</param>
        /// <param name="scalar">The input scalar argument</param>
        /// <param name="out">The output target</param>
        internal static void UFunc_Op_Inner_Unary_Scalar_Flush_UInt16_TypedImpl<C>(NumCIL.UInt16.Sinh op, System.UInt16 scalar, NdArray<System.UInt16> @out)
            where C : IUnaryOp<System.UInt16>
        {
            unsafe
            {
                using (var f2 = new Pinner(@out.DataAccessor))
                {
                    var d2 = (System.UInt16*)f2.ptr;

                    if (@out.Shape.Dimensions.Length == 1)
                    {
                        long totalOps = @out.Shape.Dimensions[0].Length;
                        long ix2 = @out.Shape.Offset;
                        long stride2 = @out.Shape.Dimensions[0].Stride;

                        for (long i = 0; i < totalOps; i++)
                        {
                            d2[ix2] = (System.UInt16)(Math.Sinh(scalar));
                            ix2 += stride2;
                        }
                    }
                    else if (@out.Shape.Dimensions.Length == 2)
                    {
                        long opsOuter = @out.Shape.Dimensions[0].Length;
                        long opsInner = @out.Shape.Dimensions[1].Length;

                        long ix2 = @out.Shape.Offset;
                        long outerStride2 = @out.Shape.Dimensions[0].Stride;
                        long innerStride2 = @out.Shape.Dimensions[1].Stride;
                        outerStride2 -= innerStride2 * @out.Shape.Dimensions[1].Length;

                        for (long i = 0; i < opsOuter; i++)
                        {
                            for (long j = 0; j < opsInner; j++)
                            {
                                d2[ix2] = (System.UInt16)(Math.Sinh(scalar));
                                ix2 += innerStride2;
                            }

                            ix2 += outerStride2;
                        }
                    }
                    else
                    {
                        long n = @out.Shape.Dimensions.LongLength - 3;
                        long[] limits = @out.Shape.Dimensions.Where(x => n-- > 0).Select(x => x.Length).ToArray();
                        long[] counters = new long[limits.LongLength];

                        long totalOps = limits.LongLength == 0 ? 1 : limits.Aggregate<long>((a, b) => a * b);

                        //This chunck of variables are used to prevent repeated calculations of offsets
                        long dimIndex0 = 0 + limits.LongLength;
                        long dimIndex1 = 1 + limits.LongLength;
                        long dimIndex2 = 2 + limits.LongLength;

                        long opsOuter = @out.Shape.Dimensions[0 + limits.LongLength].Length;
                        long opsInner = @out.Shape.Dimensions[1 + limits.LongLength].Length;
                        long opsInnerInner = @out.Shape.Dimensions[2 + limits.LongLength].Length;

                        long outerStride3 = @out.Shape.Dimensions[dimIndex0].Stride;
                        long innerStride3 = @out.Shape.Dimensions[dimIndex1].Stride;
                        long innerInnerStride3 = @out.Shape.Dimensions[dimIndex2].Stride;
                        outerStride3 -= innerStride3 * @out.Shape.Dimensions[dimIndex1].Length;
                        innerStride3 -= innerInnerStride3 * @out.Shape.Dimensions[dimIndex2].Length;

                        for (long outer = 0; outer < totalOps; outer++)
                        {
                            //Get the array offset for the first element in the outer dimension
                            long ix3 = @out.Shape[counters];

                            for (long i = 0; i < opsOuter; i++)
                            {
                                for (long j = 0; j < opsInner; j++)
                                {
                                    for (long k = 0; k < opsInnerInner; k++)
                                    {
                                        d2[ix3] = (System.UInt16)(Math.Sinh(scalar));
                                        ix3 += innerInnerStride3;
                                    }

                                    ix3 += innerStride3;
                                }

                                ix3 += outerStride3;
                            }

                            if (counters.LongLength > 0)
                            {
                                //Basically a ripple carry adder
                                long p = counters.LongLength - 1;
                                while (++counters[p] == limits[p] && p > 0)
                                {
                                    counters[p] = 0;
                                    p--;
                                }
                            }
                        }
                    }
                }
            }
        }
        /// <summary>
        /// Unsafe implementation of applying a unary operation
        /// </summary>
        /// <typeparam name="C">The type of operation to perform</typeparam>
        /// <param name="op">The operation instance</param>
        /// <param name="in1">The input argument</param>
        /// <param name="out">The output target</param>
        internal static void UFunc_Op_Inner_Unary_Flush_Int32_TypedImpl<C>(NumCIL.Int32.Sinh op, NdArray<System.Int32> in1, NdArray<System.Int32> @out)
            where C : IUnaryOp<System.Int32>
        {
            unsafe
            {
                using (var f1 = new Pinner(in1.DataAccessor))
                using (var f2 = new Pinner(@out.DataAccessor))
                {
                    var d1 = (System.Int32*)f1.ptr;
                    var d2 = (System.Int32*)f2.ptr;

                    if (@out.Shape.Dimensions.Length == 1)
                    {
                        long totalOps = @out.Shape.Dimensions[0].Length;

                        long ix1 = in1.Shape.Offset;
                        long ix2 = @out.Shape.Offset;

                        long stride1 = in1.Shape.Dimensions[0].Stride;
                        long stride2 = @out.Shape.Dimensions[0].Stride;


                        if (stride1 == stride2 && ix1 == ix2)
                        {
                            //Best case, all are equal, just keep a single counter
                            for (long i = 0; i < totalOps; i++)
                            {
                                d2[ix1] = (System.Int32)(Math.Sinh(d1[ix1]));
                                ix1 += stride1;
                            }
                        }
                        else
                        {
                            for (long i = 0; i < totalOps; i++)
                            {
                                d2[ix2] = (System.Int32)(Math.Sinh(d1[ix1]));
                                ix1 += stride1;
                                ix2 += stride2;
                            }
                        }
                    }
                    else if (@out.Shape.Dimensions.Length == 2)
                    {
                        long opsOuter = @out.Shape.Dimensions[0].Length;
                        long opsInner = @out.Shape.Dimensions[1].Length;

                        long ix1 = in1.Shape.Offset;
                        long ix2 = @out.Shape.Offset;

                        long outerStride1 = in1.Shape.Dimensions[0].Stride;
                        long outerStride2 = @out.Shape.Dimensions[0].Stride;

                        long innerStride1 = in1.Shape.Dimensions[1].Stride;
                        long innerStride2 = @out.Shape.Dimensions[1].Stride;

                        outerStride1 -= innerStride1 * in1.Shape.Dimensions[1].Length;
                        outerStride2 -= innerStride2 * @out.Shape.Dimensions[1].Length;

                        for (long i = 0; i < opsOuter; i++)
                        {
                            for (long j = 0; j < opsInner; j++)
                            {
                                d2[ix2] = (System.Int32)(Math.Sinh(d1[ix1]));
                                ix1 += innerStride1;
                                ix2 += innerStride2;
                            }

                            ix1 += outerStride1;
                            ix2 += outerStride2;
                        }
                    }
                    else
                    {
                        long n = in1.Shape.Dimensions.LongLength - 3;
                        long[] limits = in1.Shape.Dimensions.Where(x => n-- > 0).Select(x => x.Length).ToArray();
                        long[] counters = new long[limits.LongLength];

                        long totalOps = limits.LongLength == 0 ? 1 : limits.Aggregate<long>((a, b) => a * b);

                        //This chunck of variables are used to prevent repeated calculations of offsets
                        long dimIndex0 = 0 + limits.LongLength;
                        long dimIndex1 = 1 + limits.LongLength;
                        long dimIndex2 = 2 + limits.LongLength;

                        long opsOuter = @out.Shape.Dimensions[0 + limits.LongLength].Length;
                        long opsInner = @out.Shape.Dimensions[1 + limits.LongLength].Length;
                        long opsInnerInner = @out.Shape.Dimensions[2 + limits.LongLength].Length;

                        long outerStride1 = in1.Shape.Dimensions[dimIndex0].Stride;
                        long outerStride3 = @out.Shape.Dimensions[dimIndex0].Stride;

                        long innerStride1 = in1.Shape.Dimensions[dimIndex1].Stride;
                        long innerStride3 = @out.Shape.Dimensions[dimIndex1].Stride;

                        long innerInnerStride1 = in1.Shape.Dimensions[dimIndex2].Stride;
                        long innerInnerStride3 = @out.Shape.Dimensions[dimIndex2].Stride;

                        outerStride1 -= innerStride1 * in1.Shape.Dimensions[dimIndex1].Length;
                        outerStride3 -= innerStride3 * @out.Shape.Dimensions[dimIndex1].Length;

                        innerStride1 -= innerInnerStride1 * in1.Shape.Dimensions[dimIndex2].Length;
                        innerStride3 -= innerInnerStride3 * @out.Shape.Dimensions[dimIndex2].Length;

                        for (long outer = 0; outer < totalOps; outer++)
                        {
                            //Get the array offset for the first element in the outer dimension
                            long ix1 = in1.Shape[counters];
                            long ix3 = @out.Shape[counters];


                            for (long i = 0; i < opsOuter; i++)
                            {
                                for (long j = 0; j < opsInner; j++)
                                {
                                    for (long k = 0; k < opsInnerInner; k++)
                                    {
                                        d2[ix3] = (System.Int32)(Math.Sinh(d1[ix1]));
                                        ix1 += innerInnerStride1;
                                        ix3 += innerInnerStride3;
                                    }

                                    ix1 += innerStride1;
                                    ix3 += innerStride3;
                                }

                                ix1 += outerStride1;
                                ix3 += outerStride3;
                            }

                            if (counters.LongLength > 0)
                            {
                                //Basically a ripple carry adder
                                long p = counters.LongLength - 1;
                                while (++counters[p] == limits[p] && p > 0)
                                {
                                    counters[p] = 0;
                                    p--;
                                }
                            }
                        }
                    }
                }
            }
        }

        /// <summary>
        /// Unsafe implementation of applying a unary operation
        /// </summary>
        /// <typeparam name="C">The type of operation to perform</typeparam>
        /// <param name="op">The operation instance</param>
        /// <param name="scalar">The input scalar argument</param>
        /// <param name="out">The output target</param>
        internal static void UFunc_Op_Inner_Unary_Scalar_Flush_Int32_TypedImpl<C>(NumCIL.Int32.Sinh op, System.Int32 scalar, NdArray<System.Int32> @out)
            where C : IUnaryOp<System.Int32>
        {
            unsafe
            {
                using (var f2 = new Pinner(@out.DataAccessor))
                {
                    var d2 = (System.Int32*)f2.ptr;

                    if (@out.Shape.Dimensions.Length == 1)
                    {
                        long totalOps = @out.Shape.Dimensions[0].Length;
                        long ix2 = @out.Shape.Offset;
                        long stride2 = @out.Shape.Dimensions[0].Stride;

                        for (long i = 0; i < totalOps; i++)
                        {
                            d2[ix2] = (System.Int32)(Math.Sinh(scalar));
                            ix2 += stride2;
                        }
                    }
                    else if (@out.Shape.Dimensions.Length == 2)
                    {
                        long opsOuter = @out.Shape.Dimensions[0].Length;
                        long opsInner = @out.Shape.Dimensions[1].Length;

                        long ix2 = @out.Shape.Offset;
                        long outerStride2 = @out.Shape.Dimensions[0].Stride;
                        long innerStride2 = @out.Shape.Dimensions[1].Stride;
                        outerStride2 -= innerStride2 * @out.Shape.Dimensions[1].Length;

                        for (long i = 0; i < opsOuter; i++)
                        {
                            for (long j = 0; j < opsInner; j++)
                            {
                                d2[ix2] = (System.Int32)(Math.Sinh(scalar));
                                ix2 += innerStride2;
                            }

                            ix2 += outerStride2;
                        }
                    }
                    else
                    {
                        long n = @out.Shape.Dimensions.LongLength - 3;
                        long[] limits = @out.Shape.Dimensions.Where(x => n-- > 0).Select(x => x.Length).ToArray();
                        long[] counters = new long[limits.LongLength];

                        long totalOps = limits.LongLength == 0 ? 1 : limits.Aggregate<long>((a, b) => a * b);

                        //This chunck of variables are used to prevent repeated calculations of offsets
                        long dimIndex0 = 0 + limits.LongLength;
                        long dimIndex1 = 1 + limits.LongLength;
                        long dimIndex2 = 2 + limits.LongLength;

                        long opsOuter = @out.Shape.Dimensions[0 + limits.LongLength].Length;
                        long opsInner = @out.Shape.Dimensions[1 + limits.LongLength].Length;
                        long opsInnerInner = @out.Shape.Dimensions[2 + limits.LongLength].Length;

                        long outerStride3 = @out.Shape.Dimensions[dimIndex0].Stride;
                        long innerStride3 = @out.Shape.Dimensions[dimIndex1].Stride;
                        long innerInnerStride3 = @out.Shape.Dimensions[dimIndex2].Stride;
                        outerStride3 -= innerStride3 * @out.Shape.Dimensions[dimIndex1].Length;
                        innerStride3 -= innerInnerStride3 * @out.Shape.Dimensions[dimIndex2].Length;

                        for (long outer = 0; outer < totalOps; outer++)
                        {
                            //Get the array offset for the first element in the outer dimension
                            long ix3 = @out.Shape[counters];

                            for (long i = 0; i < opsOuter; i++)
                            {
                                for (long j = 0; j < opsInner; j++)
                                {
                                    for (long k = 0; k < opsInnerInner; k++)
                                    {
                                        d2[ix3] = (System.Int32)(Math.Sinh(scalar));
                                        ix3 += innerInnerStride3;
                                    }

                                    ix3 += innerStride3;
                                }

                                ix3 += outerStride3;
                            }

                            if (counters.LongLength > 0)
                            {
                                //Basically a ripple carry adder
                                long p = counters.LongLength - 1;
                                while (++counters[p] == limits[p] && p > 0)
                                {
                                    counters[p] = 0;
                                    p--;
                                }
                            }
                        }
                    }
                }
            }
        }
        /// <summary>
        /// Unsafe implementation of applying a unary operation
        /// </summary>
        /// <typeparam name="C">The type of operation to perform</typeparam>
        /// <param name="op">The operation instance</param>
        /// <param name="in1">The input argument</param>
        /// <param name="out">The output target</param>
        internal static void UFunc_Op_Inner_Unary_Flush_UInt32_TypedImpl<C>(NumCIL.UInt32.Sinh op, NdArray<System.UInt32> in1, NdArray<System.UInt32> @out)
            where C : IUnaryOp<System.UInt32>
        {
            unsafe
            {
                using (var f1 = new Pinner(in1.DataAccessor))
                using (var f2 = new Pinner(@out.DataAccessor))
                {
                    var d1 = (System.UInt32*)f1.ptr;
                    var d2 = (System.UInt32*)f2.ptr;

                    if (@out.Shape.Dimensions.Length == 1)
                    {
                        long totalOps = @out.Shape.Dimensions[0].Length;

                        long ix1 = in1.Shape.Offset;
                        long ix2 = @out.Shape.Offset;

                        long stride1 = in1.Shape.Dimensions[0].Stride;
                        long stride2 = @out.Shape.Dimensions[0].Stride;


                        if (stride1 == stride2 && ix1 == ix2)
                        {
                            //Best case, all are equal, just keep a single counter
                            for (long i = 0; i < totalOps; i++)
                            {
                                d2[ix1] = (System.UInt32)(Math.Sinh(d1[ix1]));
                                ix1 += stride1;
                            }
                        }
                        else
                        {
                            for (long i = 0; i < totalOps; i++)
                            {
                                d2[ix2] = (System.UInt32)(Math.Sinh(d1[ix1]));
                                ix1 += stride1;
                                ix2 += stride2;
                            }
                        }
                    }
                    else if (@out.Shape.Dimensions.Length == 2)
                    {
                        long opsOuter = @out.Shape.Dimensions[0].Length;
                        long opsInner = @out.Shape.Dimensions[1].Length;

                        long ix1 = in1.Shape.Offset;
                        long ix2 = @out.Shape.Offset;

                        long outerStride1 = in1.Shape.Dimensions[0].Stride;
                        long outerStride2 = @out.Shape.Dimensions[0].Stride;

                        long innerStride1 = in1.Shape.Dimensions[1].Stride;
                        long innerStride2 = @out.Shape.Dimensions[1].Stride;

                        outerStride1 -= innerStride1 * in1.Shape.Dimensions[1].Length;
                        outerStride2 -= innerStride2 * @out.Shape.Dimensions[1].Length;

                        for (long i = 0; i < opsOuter; i++)
                        {
                            for (long j = 0; j < opsInner; j++)
                            {
                                d2[ix2] = (System.UInt32)(Math.Sinh(d1[ix1]));
                                ix1 += innerStride1;
                                ix2 += innerStride2;
                            }

                            ix1 += outerStride1;
                            ix2 += outerStride2;
                        }
                    }
                    else
                    {
                        long n = in1.Shape.Dimensions.LongLength - 3;
                        long[] limits = in1.Shape.Dimensions.Where(x => n-- > 0).Select(x => x.Length).ToArray();
                        long[] counters = new long[limits.LongLength];

                        long totalOps = limits.LongLength == 0 ? 1 : limits.Aggregate<long>((a, b) => a * b);

                        //This chunck of variables are used to prevent repeated calculations of offsets
                        long dimIndex0 = 0 + limits.LongLength;
                        long dimIndex1 = 1 + limits.LongLength;
                        long dimIndex2 = 2 + limits.LongLength;

                        long opsOuter = @out.Shape.Dimensions[0 + limits.LongLength].Length;
                        long opsInner = @out.Shape.Dimensions[1 + limits.LongLength].Length;
                        long opsInnerInner = @out.Shape.Dimensions[2 + limits.LongLength].Length;

                        long outerStride1 = in1.Shape.Dimensions[dimIndex0].Stride;
                        long outerStride3 = @out.Shape.Dimensions[dimIndex0].Stride;

                        long innerStride1 = in1.Shape.Dimensions[dimIndex1].Stride;
                        long innerStride3 = @out.Shape.Dimensions[dimIndex1].Stride;

                        long innerInnerStride1 = in1.Shape.Dimensions[dimIndex2].Stride;
                        long innerInnerStride3 = @out.Shape.Dimensions[dimIndex2].Stride;

                        outerStride1 -= innerStride1 * in1.Shape.Dimensions[dimIndex1].Length;
                        outerStride3 -= innerStride3 * @out.Shape.Dimensions[dimIndex1].Length;

                        innerStride1 -= innerInnerStride1 * in1.Shape.Dimensions[dimIndex2].Length;
                        innerStride3 -= innerInnerStride3 * @out.Shape.Dimensions[dimIndex2].Length;

                        for (long outer = 0; outer < totalOps; outer++)
                        {
                            //Get the array offset for the first element in the outer dimension
                            long ix1 = in1.Shape[counters];
                            long ix3 = @out.Shape[counters];


                            for (long i = 0; i < opsOuter; i++)
                            {
                                for (long j = 0; j < opsInner; j++)
                                {
                                    for (long k = 0; k < opsInnerInner; k++)
                                    {
                                        d2[ix3] = (System.UInt32)(Math.Sinh(d1[ix1]));
                                        ix1 += innerInnerStride1;
                                        ix3 += innerInnerStride3;
                                    }

                                    ix1 += innerStride1;
                                    ix3 += innerStride3;
                                }

                                ix1 += outerStride1;
                                ix3 += outerStride3;
                            }

                            if (counters.LongLength > 0)
                            {
                                //Basically a ripple carry adder
                                long p = counters.LongLength - 1;
                                while (++counters[p] == limits[p] && p > 0)
                                {
                                    counters[p] = 0;
                                    p--;
                                }
                            }
                        }
                    }
                }
            }
        }

        /// <summary>
        /// Unsafe implementation of applying a unary operation
        /// </summary>
        /// <typeparam name="C">The type of operation to perform</typeparam>
        /// <param name="op">The operation instance</param>
        /// <param name="scalar">The input scalar argument</param>
        /// <param name="out">The output target</param>
        internal static void UFunc_Op_Inner_Unary_Scalar_Flush_UInt32_TypedImpl<C>(NumCIL.UInt32.Sinh op, System.UInt32 scalar, NdArray<System.UInt32> @out)
            where C : IUnaryOp<System.UInt32>
        {
            unsafe
            {
                using (var f2 = new Pinner(@out.DataAccessor))
                {
                    var d2 = (System.UInt32*)f2.ptr;

                    if (@out.Shape.Dimensions.Length == 1)
                    {
                        long totalOps = @out.Shape.Dimensions[0].Length;
                        long ix2 = @out.Shape.Offset;
                        long stride2 = @out.Shape.Dimensions[0].Stride;

                        for (long i = 0; i < totalOps; i++)
                        {
                            d2[ix2] = (System.UInt32)(Math.Sinh(scalar));
                            ix2 += stride2;
                        }
                    }
                    else if (@out.Shape.Dimensions.Length == 2)
                    {
                        long opsOuter = @out.Shape.Dimensions[0].Length;
                        long opsInner = @out.Shape.Dimensions[1].Length;

                        long ix2 = @out.Shape.Offset;
                        long outerStride2 = @out.Shape.Dimensions[0].Stride;
                        long innerStride2 = @out.Shape.Dimensions[1].Stride;
                        outerStride2 -= innerStride2 * @out.Shape.Dimensions[1].Length;

                        for (long i = 0; i < opsOuter; i++)
                        {
                            for (long j = 0; j < opsInner; j++)
                            {
                                d2[ix2] = (System.UInt32)(Math.Sinh(scalar));
                                ix2 += innerStride2;
                            }

                            ix2 += outerStride2;
                        }
                    }
                    else
                    {
                        long n = @out.Shape.Dimensions.LongLength - 3;
                        long[] limits = @out.Shape.Dimensions.Where(x => n-- > 0).Select(x => x.Length).ToArray();
                        long[] counters = new long[limits.LongLength];

                        long totalOps = limits.LongLength == 0 ? 1 : limits.Aggregate<long>((a, b) => a * b);

                        //This chunck of variables are used to prevent repeated calculations of offsets
                        long dimIndex0 = 0 + limits.LongLength;
                        long dimIndex1 = 1 + limits.LongLength;
                        long dimIndex2 = 2 + limits.LongLength;

                        long opsOuter = @out.Shape.Dimensions[0 + limits.LongLength].Length;
                        long opsInner = @out.Shape.Dimensions[1 + limits.LongLength].Length;
                        long opsInnerInner = @out.Shape.Dimensions[2 + limits.LongLength].Length;

                        long outerStride3 = @out.Shape.Dimensions[dimIndex0].Stride;
                        long innerStride3 = @out.Shape.Dimensions[dimIndex1].Stride;
                        long innerInnerStride3 = @out.Shape.Dimensions[dimIndex2].Stride;
                        outerStride3 -= innerStride3 * @out.Shape.Dimensions[dimIndex1].Length;
                        innerStride3 -= innerInnerStride3 * @out.Shape.Dimensions[dimIndex2].Length;

                        for (long outer = 0; outer < totalOps; outer++)
                        {
                            //Get the array offset for the first element in the outer dimension
                            long ix3 = @out.Shape[counters];

                            for (long i = 0; i < opsOuter; i++)
                            {
                                for (long j = 0; j < opsInner; j++)
                                {
                                    for (long k = 0; k < opsInnerInner; k++)
                                    {
                                        d2[ix3] = (System.UInt32)(Math.Sinh(scalar));
                                        ix3 += innerInnerStride3;
                                    }

                                    ix3 += innerStride3;
                                }

                                ix3 += outerStride3;
                            }

                            if (counters.LongLength > 0)
                            {
                                //Basically a ripple carry adder
                                long p = counters.LongLength - 1;
                                while (++counters[p] == limits[p] && p > 0)
                                {
                                    counters[p] = 0;
                                    p--;
                                }
                            }
                        }
                    }
                }
            }
        }
        /// <summary>
        /// Unsafe implementation of applying a unary operation
        /// </summary>
        /// <typeparam name="C">The type of operation to perform</typeparam>
        /// <param name="op">The operation instance</param>
        /// <param name="in1">The input argument</param>
        /// <param name="out">The output target</param>
        internal static void UFunc_Op_Inner_Unary_Flush_Int64_TypedImpl<C>(NumCIL.Int64.Sinh op, NdArray<System.Int64> in1, NdArray<System.Int64> @out)
            where C : IUnaryOp<System.Int64>
        {
            unsafe
            {
                using (var f1 = new Pinner(in1.DataAccessor))
                using (var f2 = new Pinner(@out.DataAccessor))
                {
                    var d1 = (System.Int64*)f1.ptr;
                    var d2 = (System.Int64*)f2.ptr;

                    if (@out.Shape.Dimensions.Length == 1)
                    {
                        long totalOps = @out.Shape.Dimensions[0].Length;

                        long ix1 = in1.Shape.Offset;
                        long ix2 = @out.Shape.Offset;

                        long stride1 = in1.Shape.Dimensions[0].Stride;
                        long stride2 = @out.Shape.Dimensions[0].Stride;


                        if (stride1 == stride2 && ix1 == ix2)
                        {
                            //Best case, all are equal, just keep a single counter
                            for (long i = 0; i < totalOps; i++)
                            {
                                d2[ix1] = (System.Int64)(Math.Sinh(d1[ix1]));
                                ix1 += stride1;
                            }
                        }
                        else
                        {
                            for (long i = 0; i < totalOps; i++)
                            {
                                d2[ix2] = (System.Int64)(Math.Sinh(d1[ix1]));
                                ix1 += stride1;
                                ix2 += stride2;
                            }
                        }
                    }
                    else if (@out.Shape.Dimensions.Length == 2)
                    {
                        long opsOuter = @out.Shape.Dimensions[0].Length;
                        long opsInner = @out.Shape.Dimensions[1].Length;

                        long ix1 = in1.Shape.Offset;
                        long ix2 = @out.Shape.Offset;

                        long outerStride1 = in1.Shape.Dimensions[0].Stride;
                        long outerStride2 = @out.Shape.Dimensions[0].Stride;

                        long innerStride1 = in1.Shape.Dimensions[1].Stride;
                        long innerStride2 = @out.Shape.Dimensions[1].Stride;

                        outerStride1 -= innerStride1 * in1.Shape.Dimensions[1].Length;
                        outerStride2 -= innerStride2 * @out.Shape.Dimensions[1].Length;

                        for (long i = 0; i < opsOuter; i++)
                        {
                            for (long j = 0; j < opsInner; j++)
                            {
                                d2[ix2] = (System.Int64)(Math.Sinh(d1[ix1]));
                                ix1 += innerStride1;
                                ix2 += innerStride2;
                            }

                            ix1 += outerStride1;
                            ix2 += outerStride2;
                        }
                    }
                    else
                    {
                        long n = in1.Shape.Dimensions.LongLength - 3;
                        long[] limits = in1.Shape.Dimensions.Where(x => n-- > 0).Select(x => x.Length).ToArray();
                        long[] counters = new long[limits.LongLength];

                        long totalOps = limits.LongLength == 0 ? 1 : limits.Aggregate<long>((a, b) => a * b);

                        //This chunck of variables are used to prevent repeated calculations of offsets
                        long dimIndex0 = 0 + limits.LongLength;
                        long dimIndex1 = 1 + limits.LongLength;
                        long dimIndex2 = 2 + limits.LongLength;

                        long opsOuter = @out.Shape.Dimensions[0 + limits.LongLength].Length;
                        long opsInner = @out.Shape.Dimensions[1 + limits.LongLength].Length;
                        long opsInnerInner = @out.Shape.Dimensions[2 + limits.LongLength].Length;

                        long outerStride1 = in1.Shape.Dimensions[dimIndex0].Stride;
                        long outerStride3 = @out.Shape.Dimensions[dimIndex0].Stride;

                        long innerStride1 = in1.Shape.Dimensions[dimIndex1].Stride;
                        long innerStride3 = @out.Shape.Dimensions[dimIndex1].Stride;

                        long innerInnerStride1 = in1.Shape.Dimensions[dimIndex2].Stride;
                        long innerInnerStride3 = @out.Shape.Dimensions[dimIndex2].Stride;

                        outerStride1 -= innerStride1 * in1.Shape.Dimensions[dimIndex1].Length;
                        outerStride3 -= innerStride3 * @out.Shape.Dimensions[dimIndex1].Length;

                        innerStride1 -= innerInnerStride1 * in1.Shape.Dimensions[dimIndex2].Length;
                        innerStride3 -= innerInnerStride3 * @out.Shape.Dimensions[dimIndex2].Length;

                        for (long outer = 0; outer < totalOps; outer++)
                        {
                            //Get the array offset for the first element in the outer dimension
                            long ix1 = in1.Shape[counters];
                            long ix3 = @out.Shape[counters];


                            for (long i = 0; i < opsOuter; i++)
                            {
                                for (long j = 0; j < opsInner; j++)
                                {
                                    for (long k = 0; k < opsInnerInner; k++)
                                    {
                                        d2[ix3] = (System.Int64)(Math.Sinh(d1[ix1]));
                                        ix1 += innerInnerStride1;
                                        ix3 += innerInnerStride3;
                                    }

                                    ix1 += innerStride1;
                                    ix3 += innerStride3;
                                }

                                ix1 += outerStride1;
                                ix3 += outerStride3;
                            }

                            if (counters.LongLength > 0)
                            {
                                //Basically a ripple carry adder
                                long p = counters.LongLength - 1;
                                while (++counters[p] == limits[p] && p > 0)
                                {
                                    counters[p] = 0;
                                    p--;
                                }
                            }
                        }
                    }
                }
            }
        }

        /// <summary>
        /// Unsafe implementation of applying a unary operation
        /// </summary>
        /// <typeparam name="C">The type of operation to perform</typeparam>
        /// <param name="op">The operation instance</param>
        /// <param name="scalar">The input scalar argument</param>
        /// <param name="out">The output target</param>
        internal static void UFunc_Op_Inner_Unary_Scalar_Flush_Int64_TypedImpl<C>(NumCIL.Int64.Sinh op, System.Int64 scalar, NdArray<System.Int64> @out)
            where C : IUnaryOp<System.Int64>
        {
            unsafe
            {
                using (var f2 = new Pinner(@out.DataAccessor))
                {
                    var d2 = (System.Int64*)f2.ptr;

                    if (@out.Shape.Dimensions.Length == 1)
                    {
                        long totalOps = @out.Shape.Dimensions[0].Length;
                        long ix2 = @out.Shape.Offset;
                        long stride2 = @out.Shape.Dimensions[0].Stride;

                        for (long i = 0; i < totalOps; i++)
                        {
                            d2[ix2] = (System.Int64)(Math.Sinh(scalar));
                            ix2 += stride2;
                        }
                    }
                    else if (@out.Shape.Dimensions.Length == 2)
                    {
                        long opsOuter = @out.Shape.Dimensions[0].Length;
                        long opsInner = @out.Shape.Dimensions[1].Length;

                        long ix2 = @out.Shape.Offset;
                        long outerStride2 = @out.Shape.Dimensions[0].Stride;
                        long innerStride2 = @out.Shape.Dimensions[1].Stride;
                        outerStride2 -= innerStride2 * @out.Shape.Dimensions[1].Length;

                        for (long i = 0; i < opsOuter; i++)
                        {
                            for (long j = 0; j < opsInner; j++)
                            {
                                d2[ix2] = (System.Int64)(Math.Sinh(scalar));
                                ix2 += innerStride2;
                            }

                            ix2 += outerStride2;
                        }
                    }
                    else
                    {
                        long n = @out.Shape.Dimensions.LongLength - 3;
                        long[] limits = @out.Shape.Dimensions.Where(x => n-- > 0).Select(x => x.Length).ToArray();
                        long[] counters = new long[limits.LongLength];

                        long totalOps = limits.LongLength == 0 ? 1 : limits.Aggregate<long>((a, b) => a * b);

                        //This chunck of variables are used to prevent repeated calculations of offsets
                        long dimIndex0 = 0 + limits.LongLength;
                        long dimIndex1 = 1 + limits.LongLength;
                        long dimIndex2 = 2 + limits.LongLength;

                        long opsOuter = @out.Shape.Dimensions[0 + limits.LongLength].Length;
                        long opsInner = @out.Shape.Dimensions[1 + limits.LongLength].Length;
                        long opsInnerInner = @out.Shape.Dimensions[2 + limits.LongLength].Length;

                        long outerStride3 = @out.Shape.Dimensions[dimIndex0].Stride;
                        long innerStride3 = @out.Shape.Dimensions[dimIndex1].Stride;
                        long innerInnerStride3 = @out.Shape.Dimensions[dimIndex2].Stride;
                        outerStride3 -= innerStride3 * @out.Shape.Dimensions[dimIndex1].Length;
                        innerStride3 -= innerInnerStride3 * @out.Shape.Dimensions[dimIndex2].Length;

                        for (long outer = 0; outer < totalOps; outer++)
                        {
                            //Get the array offset for the first element in the outer dimension
                            long ix3 = @out.Shape[counters];

                            for (long i = 0; i < opsOuter; i++)
                            {
                                for (long j = 0; j < opsInner; j++)
                                {
                                    for (long k = 0; k < opsInnerInner; k++)
                                    {
                                        d2[ix3] = (System.Int64)(Math.Sinh(scalar));
                                        ix3 += innerInnerStride3;
                                    }

                                    ix3 += innerStride3;
                                }

                                ix3 += outerStride3;
                            }

                            if (counters.LongLength > 0)
                            {
                                //Basically a ripple carry adder
                                long p = counters.LongLength - 1;
                                while (++counters[p] == limits[p] && p > 0)
                                {
                                    counters[p] = 0;
                                    p--;
                                }
                            }
                        }
                    }
                }
            }
        }
        /// <summary>
        /// Unsafe implementation of applying a unary operation
        /// </summary>
        /// <typeparam name="C">The type of operation to perform</typeparam>
        /// <param name="op">The operation instance</param>
        /// <param name="in1">The input argument</param>
        /// <param name="out">The output target</param>
        internal static void UFunc_Op_Inner_Unary_Flush_UInt64_TypedImpl<C>(NumCIL.UInt64.Sinh op, NdArray<System.UInt64> in1, NdArray<System.UInt64> @out)
            where C : IUnaryOp<System.UInt64>
        {
            unsafe
            {
                using (var f1 = new Pinner(in1.DataAccessor))
                using (var f2 = new Pinner(@out.DataAccessor))
                {
                    var d1 = (System.UInt64*)f1.ptr;
                    var d2 = (System.UInt64*)f2.ptr;

                    if (@out.Shape.Dimensions.Length == 1)
                    {
                        long totalOps = @out.Shape.Dimensions[0].Length;

                        long ix1 = in1.Shape.Offset;
                        long ix2 = @out.Shape.Offset;

                        long stride1 = in1.Shape.Dimensions[0].Stride;
                        long stride2 = @out.Shape.Dimensions[0].Stride;


                        if (stride1 == stride2 && ix1 == ix2)
                        {
                            //Best case, all are equal, just keep a single counter
                            for (long i = 0; i < totalOps; i++)
                            {
                                d2[ix1] = (System.UInt64)(Math.Sinh(d1[ix1]));
                                ix1 += stride1;
                            }
                        }
                        else
                        {
                            for (long i = 0; i < totalOps; i++)
                            {
                                d2[ix2] = (System.UInt64)(Math.Sinh(d1[ix1]));
                                ix1 += stride1;
                                ix2 += stride2;
                            }
                        }
                    }
                    else if (@out.Shape.Dimensions.Length == 2)
                    {
                        long opsOuter = @out.Shape.Dimensions[0].Length;
                        long opsInner = @out.Shape.Dimensions[1].Length;

                        long ix1 = in1.Shape.Offset;
                        long ix2 = @out.Shape.Offset;

                        long outerStride1 = in1.Shape.Dimensions[0].Stride;
                        long outerStride2 = @out.Shape.Dimensions[0].Stride;

                        long innerStride1 = in1.Shape.Dimensions[1].Stride;
                        long innerStride2 = @out.Shape.Dimensions[1].Stride;

                        outerStride1 -= innerStride1 * in1.Shape.Dimensions[1].Length;
                        outerStride2 -= innerStride2 * @out.Shape.Dimensions[1].Length;

                        for (long i = 0; i < opsOuter; i++)
                        {
                            for (long j = 0; j < opsInner; j++)
                            {
                                d2[ix2] = (System.UInt64)(Math.Sinh(d1[ix1]));
                                ix1 += innerStride1;
                                ix2 += innerStride2;
                            }

                            ix1 += outerStride1;
                            ix2 += outerStride2;
                        }
                    }
                    else
                    {
                        long n = in1.Shape.Dimensions.LongLength - 3;
                        long[] limits = in1.Shape.Dimensions.Where(x => n-- > 0).Select(x => x.Length).ToArray();
                        long[] counters = new long[limits.LongLength];

                        long totalOps = limits.LongLength == 0 ? 1 : limits.Aggregate<long>((a, b) => a * b);

                        //This chunck of variables are used to prevent repeated calculations of offsets
                        long dimIndex0 = 0 + limits.LongLength;
                        long dimIndex1 = 1 + limits.LongLength;
                        long dimIndex2 = 2 + limits.LongLength;

                        long opsOuter = @out.Shape.Dimensions[0 + limits.LongLength].Length;
                        long opsInner = @out.Shape.Dimensions[1 + limits.LongLength].Length;
                        long opsInnerInner = @out.Shape.Dimensions[2 + limits.LongLength].Length;

                        long outerStride1 = in1.Shape.Dimensions[dimIndex0].Stride;
                        long outerStride3 = @out.Shape.Dimensions[dimIndex0].Stride;

                        long innerStride1 = in1.Shape.Dimensions[dimIndex1].Stride;
                        long innerStride3 = @out.Shape.Dimensions[dimIndex1].Stride;

                        long innerInnerStride1 = in1.Shape.Dimensions[dimIndex2].Stride;
                        long innerInnerStride3 = @out.Shape.Dimensions[dimIndex2].Stride;

                        outerStride1 -= innerStride1 * in1.Shape.Dimensions[dimIndex1].Length;
                        outerStride3 -= innerStride3 * @out.Shape.Dimensions[dimIndex1].Length;

                        innerStride1 -= innerInnerStride1 * in1.Shape.Dimensions[dimIndex2].Length;
                        innerStride3 -= innerInnerStride3 * @out.Shape.Dimensions[dimIndex2].Length;

                        for (long outer = 0; outer < totalOps; outer++)
                        {
                            //Get the array offset for the first element in the outer dimension
                            long ix1 = in1.Shape[counters];
                            long ix3 = @out.Shape[counters];


                            for (long i = 0; i < opsOuter; i++)
                            {
                                for (long j = 0; j < opsInner; j++)
                                {
                                    for (long k = 0; k < opsInnerInner; k++)
                                    {
                                        d2[ix3] = (System.UInt64)(Math.Sinh(d1[ix1]));
                                        ix1 += innerInnerStride1;
                                        ix3 += innerInnerStride3;
                                    }

                                    ix1 += innerStride1;
                                    ix3 += innerStride3;
                                }

                                ix1 += outerStride1;
                                ix3 += outerStride3;
                            }

                            if (counters.LongLength > 0)
                            {
                                //Basically a ripple carry adder
                                long p = counters.LongLength - 1;
                                while (++counters[p] == limits[p] && p > 0)
                                {
                                    counters[p] = 0;
                                    p--;
                                }
                            }
                        }
                    }
                }
            }
        }

        /// <summary>
        /// Unsafe implementation of applying a unary operation
        /// </summary>
        /// <typeparam name="C">The type of operation to perform</typeparam>
        /// <param name="op">The operation instance</param>
        /// <param name="scalar">The input scalar argument</param>
        /// <param name="out">The output target</param>
        internal static void UFunc_Op_Inner_Unary_Scalar_Flush_UInt64_TypedImpl<C>(NumCIL.UInt64.Sinh op, System.UInt64 scalar, NdArray<System.UInt64> @out)
            where C : IUnaryOp<System.UInt64>
        {
            unsafe
            {
                using (var f2 = new Pinner(@out.DataAccessor))
                {
                    var d2 = (System.UInt64*)f2.ptr;

                    if (@out.Shape.Dimensions.Length == 1)
                    {
                        long totalOps = @out.Shape.Dimensions[0].Length;
                        long ix2 = @out.Shape.Offset;
                        long stride2 = @out.Shape.Dimensions[0].Stride;

                        for (long i = 0; i < totalOps; i++)
                        {
                            d2[ix2] = (System.UInt64)(Math.Sinh(scalar));
                            ix2 += stride2;
                        }
                    }
                    else if (@out.Shape.Dimensions.Length == 2)
                    {
                        long opsOuter = @out.Shape.Dimensions[0].Length;
                        long opsInner = @out.Shape.Dimensions[1].Length;

                        long ix2 = @out.Shape.Offset;
                        long outerStride2 = @out.Shape.Dimensions[0].Stride;
                        long innerStride2 = @out.Shape.Dimensions[1].Stride;
                        outerStride2 -= innerStride2 * @out.Shape.Dimensions[1].Length;

                        for (long i = 0; i < opsOuter; i++)
                        {
                            for (long j = 0; j < opsInner; j++)
                            {
                                d2[ix2] = (System.UInt64)(Math.Sinh(scalar));
                                ix2 += innerStride2;
                            }

                            ix2 += outerStride2;
                        }
                    }
                    else
                    {
                        long n = @out.Shape.Dimensions.LongLength - 3;
                        long[] limits = @out.Shape.Dimensions.Where(x => n-- > 0).Select(x => x.Length).ToArray();
                        long[] counters = new long[limits.LongLength];

                        long totalOps = limits.LongLength == 0 ? 1 : limits.Aggregate<long>((a, b) => a * b);

                        //This chunck of variables are used to prevent repeated calculations of offsets
                        long dimIndex0 = 0 + limits.LongLength;
                        long dimIndex1 = 1 + limits.LongLength;
                        long dimIndex2 = 2 + limits.LongLength;

                        long opsOuter = @out.Shape.Dimensions[0 + limits.LongLength].Length;
                        long opsInner = @out.Shape.Dimensions[1 + limits.LongLength].Length;
                        long opsInnerInner = @out.Shape.Dimensions[2 + limits.LongLength].Length;

                        long outerStride3 = @out.Shape.Dimensions[dimIndex0].Stride;
                        long innerStride3 = @out.Shape.Dimensions[dimIndex1].Stride;
                        long innerInnerStride3 = @out.Shape.Dimensions[dimIndex2].Stride;
                        outerStride3 -= innerStride3 * @out.Shape.Dimensions[dimIndex1].Length;
                        innerStride3 -= innerInnerStride3 * @out.Shape.Dimensions[dimIndex2].Length;

                        for (long outer = 0; outer < totalOps; outer++)
                        {
                            //Get the array offset for the first element in the outer dimension
                            long ix3 = @out.Shape[counters];

                            for (long i = 0; i < opsOuter; i++)
                            {
                                for (long j = 0; j < opsInner; j++)
                                {
                                    for (long k = 0; k < opsInnerInner; k++)
                                    {
                                        d2[ix3] = (System.UInt64)(Math.Sinh(scalar));
                                        ix3 += innerInnerStride3;
                                    }

                                    ix3 += innerStride3;
                                }

                                ix3 += outerStride3;
                            }

                            if (counters.LongLength > 0)
                            {
                                //Basically a ripple carry adder
                                long p = counters.LongLength - 1;
                                while (++counters[p] == limits[p] && p > 0)
                                {
                                    counters[p] = 0;
                                    p--;
                                }
                            }
                        }
                    }
                }
            }
        }
        /// <summary>
        /// Unsafe implementation of applying a unary operation
        /// </summary>
        /// <typeparam name="C">The type of operation to perform</typeparam>
        /// <param name="op">The operation instance</param>
        /// <param name="in1">The input argument</param>
        /// <param name="out">The output target</param>
        internal static void UFunc_Op_Inner_Unary_Flush_Single_TypedImpl<C>(NumCIL.Float.Sinh op, NdArray<System.Single> in1, NdArray<System.Single> @out)
            where C : IUnaryOp<System.Single>
        {
            unsafe
            {
                using (var f1 = new Pinner(in1.DataAccessor))
                using (var f2 = new Pinner(@out.DataAccessor))
                {
                    var d1 = (System.Single*)f1.ptr;
                    var d2 = (System.Single*)f2.ptr;

                    if (@out.Shape.Dimensions.Length == 1)
                    {
                        long totalOps = @out.Shape.Dimensions[0].Length;

                        long ix1 = in1.Shape.Offset;
                        long ix2 = @out.Shape.Offset;

                        long stride1 = in1.Shape.Dimensions[0].Stride;
                        long stride2 = @out.Shape.Dimensions[0].Stride;


                        if (stride1 == stride2 && ix1 == ix2)
                        {
                            //Best case, all are equal, just keep a single counter
                            for (long i = 0; i < totalOps; i++)
                            {
                                d2[ix1] = (System.Single)(Math.Sinh(d1[ix1]));
                                ix1 += stride1;
                            }
                        }
                        else
                        {
                            for (long i = 0; i < totalOps; i++)
                            {
                                d2[ix2] = (System.Single)(Math.Sinh(d1[ix1]));
                                ix1 += stride1;
                                ix2 += stride2;
                            }
                        }
                    }
                    else if (@out.Shape.Dimensions.Length == 2)
                    {
                        long opsOuter = @out.Shape.Dimensions[0].Length;
                        long opsInner = @out.Shape.Dimensions[1].Length;

                        long ix1 = in1.Shape.Offset;
                        long ix2 = @out.Shape.Offset;

                        long outerStride1 = in1.Shape.Dimensions[0].Stride;
                        long outerStride2 = @out.Shape.Dimensions[0].Stride;

                        long innerStride1 = in1.Shape.Dimensions[1].Stride;
                        long innerStride2 = @out.Shape.Dimensions[1].Stride;

                        outerStride1 -= innerStride1 * in1.Shape.Dimensions[1].Length;
                        outerStride2 -= innerStride2 * @out.Shape.Dimensions[1].Length;

                        for (long i = 0; i < opsOuter; i++)
                        {
                            for (long j = 0; j < opsInner; j++)
                            {
                                d2[ix2] = (System.Single)(Math.Sinh(d1[ix1]));
                                ix1 += innerStride1;
                                ix2 += innerStride2;
                            }

                            ix1 += outerStride1;
                            ix2 += outerStride2;
                        }
                    }
                    else
                    {
                        long n = in1.Shape.Dimensions.LongLength - 3;
                        long[] limits = in1.Shape.Dimensions.Where(x => n-- > 0).Select(x => x.Length).ToArray();
                        long[] counters = new long[limits.LongLength];

                        long totalOps = limits.LongLength == 0 ? 1 : limits.Aggregate<long>((a, b) => a * b);

                        //This chunck of variables are used to prevent repeated calculations of offsets
                        long dimIndex0 = 0 + limits.LongLength;
                        long dimIndex1 = 1 + limits.LongLength;
                        long dimIndex2 = 2 + limits.LongLength;

                        long opsOuter = @out.Shape.Dimensions[0 + limits.LongLength].Length;
                        long opsInner = @out.Shape.Dimensions[1 + limits.LongLength].Length;
                        long opsInnerInner = @out.Shape.Dimensions[2 + limits.LongLength].Length;

                        long outerStride1 = in1.Shape.Dimensions[dimIndex0].Stride;
                        long outerStride3 = @out.Shape.Dimensions[dimIndex0].Stride;

                        long innerStride1 = in1.Shape.Dimensions[dimIndex1].Stride;
                        long innerStride3 = @out.Shape.Dimensions[dimIndex1].Stride;

                        long innerInnerStride1 = in1.Shape.Dimensions[dimIndex2].Stride;
                        long innerInnerStride3 = @out.Shape.Dimensions[dimIndex2].Stride;

                        outerStride1 -= innerStride1 * in1.Shape.Dimensions[dimIndex1].Length;
                        outerStride3 -= innerStride3 * @out.Shape.Dimensions[dimIndex1].Length;

                        innerStride1 -= innerInnerStride1 * in1.Shape.Dimensions[dimIndex2].Length;
                        innerStride3 -= innerInnerStride3 * @out.Shape.Dimensions[dimIndex2].Length;

                        for (long outer = 0; outer < totalOps; outer++)
                        {
                            //Get the array offset for the first element in the outer dimension
                            long ix1 = in1.Shape[counters];
                            long ix3 = @out.Shape[counters];


                            for (long i = 0; i < opsOuter; i++)
                            {
                                for (long j = 0; j < opsInner; j++)
                                {
                                    for (long k = 0; k < opsInnerInner; k++)
                                    {
                                        d2[ix3] = (System.Single)(Math.Sinh(d1[ix1]));
                                        ix1 += innerInnerStride1;
                                        ix3 += innerInnerStride3;
                                    }

                                    ix1 += innerStride1;
                                    ix3 += innerStride3;
                                }

                                ix1 += outerStride1;
                                ix3 += outerStride3;
                            }

                            if (counters.LongLength > 0)
                            {
                                //Basically a ripple carry adder
                                long p = counters.LongLength - 1;
                                while (++counters[p] == limits[p] && p > 0)
                                {
                                    counters[p] = 0;
                                    p--;
                                }
                            }
                        }
                    }
                }
            }
        }

        /// <summary>
        /// Unsafe implementation of applying a unary operation
        /// </summary>
        /// <typeparam name="C">The type of operation to perform</typeparam>
        /// <param name="op">The operation instance</param>
        /// <param name="scalar">The input scalar argument</param>
        /// <param name="out">The output target</param>
        internal static void UFunc_Op_Inner_Unary_Scalar_Flush_Single_TypedImpl<C>(NumCIL.Float.Sinh op, System.Single scalar, NdArray<System.Single> @out)
            where C : IUnaryOp<System.Single>
        {
            unsafe
            {
                using (var f2 = new Pinner(@out.DataAccessor))
                {
                    var d2 = (System.Single*)f2.ptr;

                    if (@out.Shape.Dimensions.Length == 1)
                    {
                        long totalOps = @out.Shape.Dimensions[0].Length;
                        long ix2 = @out.Shape.Offset;
                        long stride2 = @out.Shape.Dimensions[0].Stride;

                        for (long i = 0; i < totalOps; i++)
                        {
                            d2[ix2] = (System.Single)(Math.Sinh(scalar));
                            ix2 += stride2;
                        }
                    }
                    else if (@out.Shape.Dimensions.Length == 2)
                    {
                        long opsOuter = @out.Shape.Dimensions[0].Length;
                        long opsInner = @out.Shape.Dimensions[1].Length;

                        long ix2 = @out.Shape.Offset;
                        long outerStride2 = @out.Shape.Dimensions[0].Stride;
                        long innerStride2 = @out.Shape.Dimensions[1].Stride;
                        outerStride2 -= innerStride2 * @out.Shape.Dimensions[1].Length;

                        for (long i = 0; i < opsOuter; i++)
                        {
                            for (long j = 0; j < opsInner; j++)
                            {
                                d2[ix2] = (System.Single)(Math.Sinh(scalar));
                                ix2 += innerStride2;
                            }

                            ix2 += outerStride2;
                        }
                    }
                    else
                    {
                        long n = @out.Shape.Dimensions.LongLength - 3;
                        long[] limits = @out.Shape.Dimensions.Where(x => n-- > 0).Select(x => x.Length).ToArray();
                        long[] counters = new long[limits.LongLength];

                        long totalOps = limits.LongLength == 0 ? 1 : limits.Aggregate<long>((a, b) => a * b);

                        //This chunck of variables are used to prevent repeated calculations of offsets
                        long dimIndex0 = 0 + limits.LongLength;
                        long dimIndex1 = 1 + limits.LongLength;
                        long dimIndex2 = 2 + limits.LongLength;

                        long opsOuter = @out.Shape.Dimensions[0 + limits.LongLength].Length;
                        long opsInner = @out.Shape.Dimensions[1 + limits.LongLength].Length;
                        long opsInnerInner = @out.Shape.Dimensions[2 + limits.LongLength].Length;

                        long outerStride3 = @out.Shape.Dimensions[dimIndex0].Stride;
                        long innerStride3 = @out.Shape.Dimensions[dimIndex1].Stride;
                        long innerInnerStride3 = @out.Shape.Dimensions[dimIndex2].Stride;
                        outerStride3 -= innerStride3 * @out.Shape.Dimensions[dimIndex1].Length;
                        innerStride3 -= innerInnerStride3 * @out.Shape.Dimensions[dimIndex2].Length;

                        for (long outer = 0; outer < totalOps; outer++)
                        {
                            //Get the array offset for the first element in the outer dimension
                            long ix3 = @out.Shape[counters];

                            for (long i = 0; i < opsOuter; i++)
                            {
                                for (long j = 0; j < opsInner; j++)
                                {
                                    for (long k = 0; k < opsInnerInner; k++)
                                    {
                                        d2[ix3] = (System.Single)(Math.Sinh(scalar));
                                        ix3 += innerInnerStride3;
                                    }

                                    ix3 += innerStride3;
                                }

                                ix3 += outerStride3;
                            }

                            if (counters.LongLength > 0)
                            {
                                //Basically a ripple carry adder
                                long p = counters.LongLength - 1;
                                while (++counters[p] == limits[p] && p > 0)
                                {
                                    counters[p] = 0;
                                    p--;
                                }
                            }
                        }
                    }
                }
            }
        }
        /// <summary>
        /// Unsafe implementation of applying a unary operation
        /// </summary>
        /// <typeparam name="C">The type of operation to perform</typeparam>
        /// <param name="op">The operation instance</param>
        /// <param name="in1">The input argument</param>
        /// <param name="out">The output target</param>
        internal static void UFunc_Op_Inner_Unary_Flush_Double_TypedImpl<C>(NumCIL.Double.Sinh op, NdArray<System.Double> in1, NdArray<System.Double> @out)
            where C : IUnaryOp<System.Double>
        {
            unsafe
            {
                using (var f1 = new Pinner(in1.DataAccessor))
                using (var f2 = new Pinner(@out.DataAccessor))
                {
                    var d1 = (System.Double*)f1.ptr;
                    var d2 = (System.Double*)f2.ptr;

                    if (@out.Shape.Dimensions.Length == 1)
                    {
                        long totalOps = @out.Shape.Dimensions[0].Length;

                        long ix1 = in1.Shape.Offset;
                        long ix2 = @out.Shape.Offset;

                        long stride1 = in1.Shape.Dimensions[0].Stride;
                        long stride2 = @out.Shape.Dimensions[0].Stride;


                        if (stride1 == stride2 && ix1 == ix2)
                        {
                            //Best case, all are equal, just keep a single counter
                            for (long i = 0; i < totalOps; i++)
                            {
                                d2[ix1] = (System.Double)(Math.Sinh(d1[ix1]));
                                ix1 += stride1;
                            }
                        }
                        else
                        {
                            for (long i = 0; i < totalOps; i++)
                            {
                                d2[ix2] = (System.Double)(Math.Sinh(d1[ix1]));
                                ix1 += stride1;
                                ix2 += stride2;
                            }
                        }
                    }
                    else if (@out.Shape.Dimensions.Length == 2)
                    {
                        long opsOuter = @out.Shape.Dimensions[0].Length;
                        long opsInner = @out.Shape.Dimensions[1].Length;

                        long ix1 = in1.Shape.Offset;
                        long ix2 = @out.Shape.Offset;

                        long outerStride1 = in1.Shape.Dimensions[0].Stride;
                        long outerStride2 = @out.Shape.Dimensions[0].Stride;

                        long innerStride1 = in1.Shape.Dimensions[1].Stride;
                        long innerStride2 = @out.Shape.Dimensions[1].Stride;

                        outerStride1 -= innerStride1 * in1.Shape.Dimensions[1].Length;
                        outerStride2 -= innerStride2 * @out.Shape.Dimensions[1].Length;

                        for (long i = 0; i < opsOuter; i++)
                        {
                            for (long j = 0; j < opsInner; j++)
                            {
                                d2[ix2] = (System.Double)(Math.Sinh(d1[ix1]));
                                ix1 += innerStride1;
                                ix2 += innerStride2;
                            }

                            ix1 += outerStride1;
                            ix2 += outerStride2;
                        }
                    }
                    else
                    {
                        long n = in1.Shape.Dimensions.LongLength - 3;
                        long[] limits = in1.Shape.Dimensions.Where(x => n-- > 0).Select(x => x.Length).ToArray();
                        long[] counters = new long[limits.LongLength];

                        long totalOps = limits.LongLength == 0 ? 1 : limits.Aggregate<long>((a, b) => a * b);

                        //This chunck of variables are used to prevent repeated calculations of offsets
                        long dimIndex0 = 0 + limits.LongLength;
                        long dimIndex1 = 1 + limits.LongLength;
                        long dimIndex2 = 2 + limits.LongLength;

                        long opsOuter = @out.Shape.Dimensions[0 + limits.LongLength].Length;
                        long opsInner = @out.Shape.Dimensions[1 + limits.LongLength].Length;
                        long opsInnerInner = @out.Shape.Dimensions[2 + limits.LongLength].Length;

                        long outerStride1 = in1.Shape.Dimensions[dimIndex0].Stride;
                        long outerStride3 = @out.Shape.Dimensions[dimIndex0].Stride;

                        long innerStride1 = in1.Shape.Dimensions[dimIndex1].Stride;
                        long innerStride3 = @out.Shape.Dimensions[dimIndex1].Stride;

                        long innerInnerStride1 = in1.Shape.Dimensions[dimIndex2].Stride;
                        long innerInnerStride3 = @out.Shape.Dimensions[dimIndex2].Stride;

                        outerStride1 -= innerStride1 * in1.Shape.Dimensions[dimIndex1].Length;
                        outerStride3 -= innerStride3 * @out.Shape.Dimensions[dimIndex1].Length;

                        innerStride1 -= innerInnerStride1 * in1.Shape.Dimensions[dimIndex2].Length;
                        innerStride3 -= innerInnerStride3 * @out.Shape.Dimensions[dimIndex2].Length;

                        for (long outer = 0; outer < totalOps; outer++)
                        {
                            //Get the array offset for the first element in the outer dimension
                            long ix1 = in1.Shape[counters];
                            long ix3 = @out.Shape[counters];


                            for (long i = 0; i < opsOuter; i++)
                            {
                                for (long j = 0; j < opsInner; j++)
                                {
                                    for (long k = 0; k < opsInnerInner; k++)
                                    {
                                        d2[ix3] = (System.Double)(Math.Sinh(d1[ix1]));
                                        ix1 += innerInnerStride1;
                                        ix3 += innerInnerStride3;
                                    }

                                    ix1 += innerStride1;
                                    ix3 += innerStride3;
                                }

                                ix1 += outerStride1;
                                ix3 += outerStride3;
                            }

                            if (counters.LongLength > 0)
                            {
                                //Basically a ripple carry adder
                                long p = counters.LongLength - 1;
                                while (++counters[p] == limits[p] && p > 0)
                                {
                                    counters[p] = 0;
                                    p--;
                                }
                            }
                        }
                    }
                }
            }
        }

        /// <summary>
        /// Unsafe implementation of applying a unary operation
        /// </summary>
        /// <typeparam name="C">The type of operation to perform</typeparam>
        /// <param name="op">The operation instance</param>
        /// <param name="scalar">The input scalar argument</param>
        /// <param name="out">The output target</param>
        internal static void UFunc_Op_Inner_Unary_Scalar_Flush_Double_TypedImpl<C>(NumCIL.Double.Sinh op, System.Double scalar, NdArray<System.Double> @out)
            where C : IUnaryOp<System.Double>
        {
            unsafe
            {
                using (var f2 = new Pinner(@out.DataAccessor))
                {
                    var d2 = (System.Double*)f2.ptr;

                    if (@out.Shape.Dimensions.Length == 1)
                    {
                        long totalOps = @out.Shape.Dimensions[0].Length;
                        long ix2 = @out.Shape.Offset;
                        long stride2 = @out.Shape.Dimensions[0].Stride;

                        for (long i = 0; i < totalOps; i++)
                        {
                            d2[ix2] = (System.Double)(Math.Sinh(scalar));
                            ix2 += stride2;
                        }
                    }
                    else if (@out.Shape.Dimensions.Length == 2)
                    {
                        long opsOuter = @out.Shape.Dimensions[0].Length;
                        long opsInner = @out.Shape.Dimensions[1].Length;

                        long ix2 = @out.Shape.Offset;
                        long outerStride2 = @out.Shape.Dimensions[0].Stride;
                        long innerStride2 = @out.Shape.Dimensions[1].Stride;
                        outerStride2 -= innerStride2 * @out.Shape.Dimensions[1].Length;

                        for (long i = 0; i < opsOuter; i++)
                        {
                            for (long j = 0; j < opsInner; j++)
                            {
                                d2[ix2] = (System.Double)(Math.Sinh(scalar));
                                ix2 += innerStride2;
                            }

                            ix2 += outerStride2;
                        }
                    }
                    else
                    {
                        long n = @out.Shape.Dimensions.LongLength - 3;
                        long[] limits = @out.Shape.Dimensions.Where(x => n-- > 0).Select(x => x.Length).ToArray();
                        long[] counters = new long[limits.LongLength];

                        long totalOps = limits.LongLength == 0 ? 1 : limits.Aggregate<long>((a, b) => a * b);

                        //This chunck of variables are used to prevent repeated calculations of offsets
                        long dimIndex0 = 0 + limits.LongLength;
                        long dimIndex1 = 1 + limits.LongLength;
                        long dimIndex2 = 2 + limits.LongLength;

                        long opsOuter = @out.Shape.Dimensions[0 + limits.LongLength].Length;
                        long opsInner = @out.Shape.Dimensions[1 + limits.LongLength].Length;
                        long opsInnerInner = @out.Shape.Dimensions[2 + limits.LongLength].Length;

                        long outerStride3 = @out.Shape.Dimensions[dimIndex0].Stride;
                        long innerStride3 = @out.Shape.Dimensions[dimIndex1].Stride;
                        long innerInnerStride3 = @out.Shape.Dimensions[dimIndex2].Stride;
                        outerStride3 -= innerStride3 * @out.Shape.Dimensions[dimIndex1].Length;
                        innerStride3 -= innerInnerStride3 * @out.Shape.Dimensions[dimIndex2].Length;

                        for (long outer = 0; outer < totalOps; outer++)
                        {
                            //Get the array offset for the first element in the outer dimension
                            long ix3 = @out.Shape[counters];

                            for (long i = 0; i < opsOuter; i++)
                            {
                                for (long j = 0; j < opsInner; j++)
                                {
                                    for (long k = 0; k < opsInnerInner; k++)
                                    {
                                        d2[ix3] = (System.Double)(Math.Sinh(scalar));
                                        ix3 += innerInnerStride3;
                                    }

                                    ix3 += innerStride3;
                                }

                                ix3 += outerStride3;
                            }

                            if (counters.LongLength > 0)
                            {
                                //Basically a ripple carry adder
                                long p = counters.LongLength - 1;
                                while (++counters[p] == limits[p] && p > 0)
                                {
                                    counters[p] = 0;
                                    p--;
                                }
                            }
                        }
                    }
                }
            }
        }
        /// <summary>
        /// Unsafe implementation of applying a unary operation
        /// </summary>
        /// <typeparam name="C">The type of operation to perform</typeparam>
        /// <param name="op">The operation instance</param>
        /// <param name="in1">The input argument</param>
        /// <param name="out">The output target</param>
        internal static void UFunc_Op_Inner_Unary_Flush_SByte_TypedImpl<C>(NumCIL.Int8.Cosh op, NdArray<System.SByte> in1, NdArray<System.SByte> @out)
            where C : IUnaryOp<System.SByte>
        {
            unsafe
            {
                using (var f1 = new Pinner(in1.DataAccessor))
                using (var f2 = new Pinner(@out.DataAccessor))
                {
                    var d1 = (System.SByte*)f1.ptr;
                    var d2 = (System.SByte*)f2.ptr;

                    if (@out.Shape.Dimensions.Length == 1)
                    {
                        long totalOps = @out.Shape.Dimensions[0].Length;

                        long ix1 = in1.Shape.Offset;
                        long ix2 = @out.Shape.Offset;

                        long stride1 = in1.Shape.Dimensions[0].Stride;
                        long stride2 = @out.Shape.Dimensions[0].Stride;


                        if (stride1 == stride2 && ix1 == ix2)
                        {
                            //Best case, all are equal, just keep a single counter
                            for (long i = 0; i < totalOps; i++)
                            {
                                d2[ix1] = (System.SByte)(Math.Cosh(d1[ix1]));
                                ix1 += stride1;
                            }
                        }
                        else
                        {
                            for (long i = 0; i < totalOps; i++)
                            {
                                d2[ix2] = (System.SByte)(Math.Cosh(d1[ix1]));
                                ix1 += stride1;
                                ix2 += stride2;
                            }
                        }
                    }
                    else if (@out.Shape.Dimensions.Length == 2)
                    {
                        long opsOuter = @out.Shape.Dimensions[0].Length;
                        long opsInner = @out.Shape.Dimensions[1].Length;

                        long ix1 = in1.Shape.Offset;
                        long ix2 = @out.Shape.Offset;

                        long outerStride1 = in1.Shape.Dimensions[0].Stride;
                        long outerStride2 = @out.Shape.Dimensions[0].Stride;

                        long innerStride1 = in1.Shape.Dimensions[1].Stride;
                        long innerStride2 = @out.Shape.Dimensions[1].Stride;

                        outerStride1 -= innerStride1 * in1.Shape.Dimensions[1].Length;
                        outerStride2 -= innerStride2 * @out.Shape.Dimensions[1].Length;

                        for (long i = 0; i < opsOuter; i++)
                        {
                            for (long j = 0; j < opsInner; j++)
                            {
                                d2[ix2] = (System.SByte)(Math.Cosh(d1[ix1]));
                                ix1 += innerStride1;
                                ix2 += innerStride2;
                            }

                            ix1 += outerStride1;
                            ix2 += outerStride2;
                        }
                    }
                    else
                    {
                        long n = in1.Shape.Dimensions.LongLength - 3;
                        long[] limits = in1.Shape.Dimensions.Where(x => n-- > 0).Select(x => x.Length).ToArray();
                        long[] counters = new long[limits.LongLength];

                        long totalOps = limits.LongLength == 0 ? 1 : limits.Aggregate<long>((a, b) => a * b);

                        //This chunck of variables are used to prevent repeated calculations of offsets
                        long dimIndex0 = 0 + limits.LongLength;
                        long dimIndex1 = 1 + limits.LongLength;
                        long dimIndex2 = 2 + limits.LongLength;

                        long opsOuter = @out.Shape.Dimensions[0 + limits.LongLength].Length;
                        long opsInner = @out.Shape.Dimensions[1 + limits.LongLength].Length;
                        long opsInnerInner = @out.Shape.Dimensions[2 + limits.LongLength].Length;

                        long outerStride1 = in1.Shape.Dimensions[dimIndex0].Stride;
                        long outerStride3 = @out.Shape.Dimensions[dimIndex0].Stride;

                        long innerStride1 = in1.Shape.Dimensions[dimIndex1].Stride;
                        long innerStride3 = @out.Shape.Dimensions[dimIndex1].Stride;

                        long innerInnerStride1 = in1.Shape.Dimensions[dimIndex2].Stride;
                        long innerInnerStride3 = @out.Shape.Dimensions[dimIndex2].Stride;

                        outerStride1 -= innerStride1 * in1.Shape.Dimensions[dimIndex1].Length;
                        outerStride3 -= innerStride3 * @out.Shape.Dimensions[dimIndex1].Length;

                        innerStride1 -= innerInnerStride1 * in1.Shape.Dimensions[dimIndex2].Length;
                        innerStride3 -= innerInnerStride3 * @out.Shape.Dimensions[dimIndex2].Length;

                        for (long outer = 0; outer < totalOps; outer++)
                        {
                            //Get the array offset for the first element in the outer dimension
                            long ix1 = in1.Shape[counters];
                            long ix3 = @out.Shape[counters];


                            for (long i = 0; i < opsOuter; i++)
                            {
                                for (long j = 0; j < opsInner; j++)
                                {
                                    for (long k = 0; k < opsInnerInner; k++)
                                    {
                                        d2[ix3] = (System.SByte)(Math.Cosh(d1[ix1]));
                                        ix1 += innerInnerStride1;
                                        ix3 += innerInnerStride3;
                                    }

                                    ix1 += innerStride1;
                                    ix3 += innerStride3;
                                }

                                ix1 += outerStride1;
                                ix3 += outerStride3;
                            }

                            if (counters.LongLength > 0)
                            {
                                //Basically a ripple carry adder
                                long p = counters.LongLength - 1;
                                while (++counters[p] == limits[p] && p > 0)
                                {
                                    counters[p] = 0;
                                    p--;
                                }
                            }
                        }
                    }
                }
            }
        }

        /// <summary>
        /// Unsafe implementation of applying a unary operation
        /// </summary>
        /// <typeparam name="C">The type of operation to perform</typeparam>
        /// <param name="op">The operation instance</param>
        /// <param name="scalar">The input scalar argument</param>
        /// <param name="out">The output target</param>
        internal static void UFunc_Op_Inner_Unary_Scalar_Flush_SByte_TypedImpl<C>(NumCIL.Int8.Cosh op, System.SByte scalar, NdArray<System.SByte> @out)
            where C : IUnaryOp<System.SByte>
        {
            unsafe
            {
                using (var f2 = new Pinner(@out.DataAccessor))
                {
                    var d2 = (System.SByte*)f2.ptr;

                    if (@out.Shape.Dimensions.Length == 1)
                    {
                        long totalOps = @out.Shape.Dimensions[0].Length;
                        long ix2 = @out.Shape.Offset;
                        long stride2 = @out.Shape.Dimensions[0].Stride;

                        for (long i = 0; i < totalOps; i++)
                        {
                            d2[ix2] = (System.SByte)(Math.Cosh(scalar));
                            ix2 += stride2;
                        }
                    }
                    else if (@out.Shape.Dimensions.Length == 2)
                    {
                        long opsOuter = @out.Shape.Dimensions[0].Length;
                        long opsInner = @out.Shape.Dimensions[1].Length;

                        long ix2 = @out.Shape.Offset;
                        long outerStride2 = @out.Shape.Dimensions[0].Stride;
                        long innerStride2 = @out.Shape.Dimensions[1].Stride;
                        outerStride2 -= innerStride2 * @out.Shape.Dimensions[1].Length;

                        for (long i = 0; i < opsOuter; i++)
                        {
                            for (long j = 0; j < opsInner; j++)
                            {
                                d2[ix2] = (System.SByte)(Math.Cosh(scalar));
                                ix2 += innerStride2;
                            }

                            ix2 += outerStride2;
                        }
                    }
                    else
                    {
                        long n = @out.Shape.Dimensions.LongLength - 3;
                        long[] limits = @out.Shape.Dimensions.Where(x => n-- > 0).Select(x => x.Length).ToArray();
                        long[] counters = new long[limits.LongLength];

                        long totalOps = limits.LongLength == 0 ? 1 : limits.Aggregate<long>((a, b) => a * b);

                        //This chunck of variables are used to prevent repeated calculations of offsets
                        long dimIndex0 = 0 + limits.LongLength;
                        long dimIndex1 = 1 + limits.LongLength;
                        long dimIndex2 = 2 + limits.LongLength;

                        long opsOuter = @out.Shape.Dimensions[0 + limits.LongLength].Length;
                        long opsInner = @out.Shape.Dimensions[1 + limits.LongLength].Length;
                        long opsInnerInner = @out.Shape.Dimensions[2 + limits.LongLength].Length;

                        long outerStride3 = @out.Shape.Dimensions[dimIndex0].Stride;
                        long innerStride3 = @out.Shape.Dimensions[dimIndex1].Stride;
                        long innerInnerStride3 = @out.Shape.Dimensions[dimIndex2].Stride;
                        outerStride3 -= innerStride3 * @out.Shape.Dimensions[dimIndex1].Length;
                        innerStride3 -= innerInnerStride3 * @out.Shape.Dimensions[dimIndex2].Length;

                        for (long outer = 0; outer < totalOps; outer++)
                        {
                            //Get the array offset for the first element in the outer dimension
                            long ix3 = @out.Shape[counters];

                            for (long i = 0; i < opsOuter; i++)
                            {
                                for (long j = 0; j < opsInner; j++)
                                {
                                    for (long k = 0; k < opsInnerInner; k++)
                                    {
                                        d2[ix3] = (System.SByte)(Math.Cosh(scalar));
                                        ix3 += innerInnerStride3;
                                    }

                                    ix3 += innerStride3;
                                }

                                ix3 += outerStride3;
                            }

                            if (counters.LongLength > 0)
                            {
                                //Basically a ripple carry adder
                                long p = counters.LongLength - 1;
                                while (++counters[p] == limits[p] && p > 0)
                                {
                                    counters[p] = 0;
                                    p--;
                                }
                            }
                        }
                    }
                }
            }
        }
        /// <summary>
        /// Unsafe implementation of applying a unary operation
        /// </summary>
        /// <typeparam name="C">The type of operation to perform</typeparam>
        /// <param name="op">The operation instance</param>
        /// <param name="in1">The input argument</param>
        /// <param name="out">The output target</param>
        internal static void UFunc_Op_Inner_Unary_Flush_Byte_TypedImpl<C>(NumCIL.UInt8.Cosh op, NdArray<System.Byte> in1, NdArray<System.Byte> @out)
            where C : IUnaryOp<System.Byte>
        {
            unsafe
            {
                using (var f1 = new Pinner(in1.DataAccessor))
                using (var f2 = new Pinner(@out.DataAccessor))
                {
                    var d1 = (System.Byte*)f1.ptr;
                    var d2 = (System.Byte*)f2.ptr;

                    if (@out.Shape.Dimensions.Length == 1)
                    {
                        long totalOps = @out.Shape.Dimensions[0].Length;

                        long ix1 = in1.Shape.Offset;
                        long ix2 = @out.Shape.Offset;

                        long stride1 = in1.Shape.Dimensions[0].Stride;
                        long stride2 = @out.Shape.Dimensions[0].Stride;


                        if (stride1 == stride2 && ix1 == ix2)
                        {
                            //Best case, all are equal, just keep a single counter
                            for (long i = 0; i < totalOps; i++)
                            {
                                d2[ix1] = (System.Byte)(Math.Cosh(d1[ix1]));
                                ix1 += stride1;
                            }
                        }
                        else
                        {
                            for (long i = 0; i < totalOps; i++)
                            {
                                d2[ix2] = (System.Byte)(Math.Cosh(d1[ix1]));
                                ix1 += stride1;
                                ix2 += stride2;
                            }
                        }
                    }
                    else if (@out.Shape.Dimensions.Length == 2)
                    {
                        long opsOuter = @out.Shape.Dimensions[0].Length;
                        long opsInner = @out.Shape.Dimensions[1].Length;

                        long ix1 = in1.Shape.Offset;
                        long ix2 = @out.Shape.Offset;

                        long outerStride1 = in1.Shape.Dimensions[0].Stride;
                        long outerStride2 = @out.Shape.Dimensions[0].Stride;

                        long innerStride1 = in1.Shape.Dimensions[1].Stride;
                        long innerStride2 = @out.Shape.Dimensions[1].Stride;

                        outerStride1 -= innerStride1 * in1.Shape.Dimensions[1].Length;
                        outerStride2 -= innerStride2 * @out.Shape.Dimensions[1].Length;

                        for (long i = 0; i < opsOuter; i++)
                        {
                            for (long j = 0; j < opsInner; j++)
                            {
                                d2[ix2] = (System.Byte)(Math.Cosh(d1[ix1]));
                                ix1 += innerStride1;
                                ix2 += innerStride2;
                            }

                            ix1 += outerStride1;
                            ix2 += outerStride2;
                        }
                    }
                    else
                    {
                        long n = in1.Shape.Dimensions.LongLength - 3;
                        long[] limits = in1.Shape.Dimensions.Where(x => n-- > 0).Select(x => x.Length).ToArray();
                        long[] counters = new long[limits.LongLength];

                        long totalOps = limits.LongLength == 0 ? 1 : limits.Aggregate<long>((a, b) => a * b);

                        //This chunck of variables are used to prevent repeated calculations of offsets
                        long dimIndex0 = 0 + limits.LongLength;
                        long dimIndex1 = 1 + limits.LongLength;
                        long dimIndex2 = 2 + limits.LongLength;

                        long opsOuter = @out.Shape.Dimensions[0 + limits.LongLength].Length;
                        long opsInner = @out.Shape.Dimensions[1 + limits.LongLength].Length;
                        long opsInnerInner = @out.Shape.Dimensions[2 + limits.LongLength].Length;

                        long outerStride1 = in1.Shape.Dimensions[dimIndex0].Stride;
                        long outerStride3 = @out.Shape.Dimensions[dimIndex0].Stride;

                        long innerStride1 = in1.Shape.Dimensions[dimIndex1].Stride;
                        long innerStride3 = @out.Shape.Dimensions[dimIndex1].Stride;

                        long innerInnerStride1 = in1.Shape.Dimensions[dimIndex2].Stride;
                        long innerInnerStride3 = @out.Shape.Dimensions[dimIndex2].Stride;

                        outerStride1 -= innerStride1 * in1.Shape.Dimensions[dimIndex1].Length;
                        outerStride3 -= innerStride3 * @out.Shape.Dimensions[dimIndex1].Length;

                        innerStride1 -= innerInnerStride1 * in1.Shape.Dimensions[dimIndex2].Length;
                        innerStride3 -= innerInnerStride3 * @out.Shape.Dimensions[dimIndex2].Length;

                        for (long outer = 0; outer < totalOps; outer++)
                        {
                            //Get the array offset for the first element in the outer dimension
                            long ix1 = in1.Shape[counters];
                            long ix3 = @out.Shape[counters];


                            for (long i = 0; i < opsOuter; i++)
                            {
                                for (long j = 0; j < opsInner; j++)
                                {
                                    for (long k = 0; k < opsInnerInner; k++)
                                    {
                                        d2[ix3] = (System.Byte)(Math.Cosh(d1[ix1]));
                                        ix1 += innerInnerStride1;
                                        ix3 += innerInnerStride3;
                                    }

                                    ix1 += innerStride1;
                                    ix3 += innerStride3;
                                }

                                ix1 += outerStride1;
                                ix3 += outerStride3;
                            }

                            if (counters.LongLength > 0)
                            {
                                //Basically a ripple carry adder
                                long p = counters.LongLength - 1;
                                while (++counters[p] == limits[p] && p > 0)
                                {
                                    counters[p] = 0;
                                    p--;
                                }
                            }
                        }
                    }
                }
            }
        }

        /// <summary>
        /// Unsafe implementation of applying a unary operation
        /// </summary>
        /// <typeparam name="C">The type of operation to perform</typeparam>
        /// <param name="op">The operation instance</param>
        /// <param name="scalar">The input scalar argument</param>
        /// <param name="out">The output target</param>
        internal static void UFunc_Op_Inner_Unary_Scalar_Flush_Byte_TypedImpl<C>(NumCIL.UInt8.Cosh op, System.Byte scalar, NdArray<System.Byte> @out)
            where C : IUnaryOp<System.Byte>
        {
            unsafe
            {
                using (var f2 = new Pinner(@out.DataAccessor))
                {
                    var d2 = (System.Byte*)f2.ptr;

                    if (@out.Shape.Dimensions.Length == 1)
                    {
                        long totalOps = @out.Shape.Dimensions[0].Length;
                        long ix2 = @out.Shape.Offset;
                        long stride2 = @out.Shape.Dimensions[0].Stride;

                        for (long i = 0; i < totalOps; i++)
                        {
                            d2[ix2] = (System.Byte)(Math.Cosh(scalar));
                            ix2 += stride2;
                        }
                    }
                    else if (@out.Shape.Dimensions.Length == 2)
                    {
                        long opsOuter = @out.Shape.Dimensions[0].Length;
                        long opsInner = @out.Shape.Dimensions[1].Length;

                        long ix2 = @out.Shape.Offset;
                        long outerStride2 = @out.Shape.Dimensions[0].Stride;
                        long innerStride2 = @out.Shape.Dimensions[1].Stride;
                        outerStride2 -= innerStride2 * @out.Shape.Dimensions[1].Length;

                        for (long i = 0; i < opsOuter; i++)
                        {
                            for (long j = 0; j < opsInner; j++)
                            {
                                d2[ix2] = (System.Byte)(Math.Cosh(scalar));
                                ix2 += innerStride2;
                            }

                            ix2 += outerStride2;
                        }
                    }
                    else
                    {
                        long n = @out.Shape.Dimensions.LongLength - 3;
                        long[] limits = @out.Shape.Dimensions.Where(x => n-- > 0).Select(x => x.Length).ToArray();
                        long[] counters = new long[limits.LongLength];

                        long totalOps = limits.LongLength == 0 ? 1 : limits.Aggregate<long>((a, b) => a * b);

                        //This chunck of variables are used to prevent repeated calculations of offsets
                        long dimIndex0 = 0 + limits.LongLength;
                        long dimIndex1 = 1 + limits.LongLength;
                        long dimIndex2 = 2 + limits.LongLength;

                        long opsOuter = @out.Shape.Dimensions[0 + limits.LongLength].Length;
                        long opsInner = @out.Shape.Dimensions[1 + limits.LongLength].Length;
                        long opsInnerInner = @out.Shape.Dimensions[2 + limits.LongLength].Length;

                        long outerStride3 = @out.Shape.Dimensions[dimIndex0].Stride;
                        long innerStride3 = @out.Shape.Dimensions[dimIndex1].Stride;
                        long innerInnerStride3 = @out.Shape.Dimensions[dimIndex2].Stride;
                        outerStride3 -= innerStride3 * @out.Shape.Dimensions[dimIndex1].Length;
                        innerStride3 -= innerInnerStride3 * @out.Shape.Dimensions[dimIndex2].Length;

                        for (long outer = 0; outer < totalOps; outer++)
                        {
                            //Get the array offset for the first element in the outer dimension
                            long ix3 = @out.Shape[counters];

                            for (long i = 0; i < opsOuter; i++)
                            {
                                for (long j = 0; j < opsInner; j++)
                                {
                                    for (long k = 0; k < opsInnerInner; k++)
                                    {
                                        d2[ix3] = (System.Byte)(Math.Cosh(scalar));
                                        ix3 += innerInnerStride3;
                                    }

                                    ix3 += innerStride3;
                                }

                                ix3 += outerStride3;
                            }

                            if (counters.LongLength > 0)
                            {
                                //Basically a ripple carry adder
                                long p = counters.LongLength - 1;
                                while (++counters[p] == limits[p] && p > 0)
                                {
                                    counters[p] = 0;
                                    p--;
                                }
                            }
                        }
                    }
                }
            }
        }
        /// <summary>
        /// Unsafe implementation of applying a unary operation
        /// </summary>
        /// <typeparam name="C">The type of operation to perform</typeparam>
        /// <param name="op">The operation instance</param>
        /// <param name="in1">The input argument</param>
        /// <param name="out">The output target</param>
        internal static void UFunc_Op_Inner_Unary_Flush_Int16_TypedImpl<C>(NumCIL.Int16.Cosh op, NdArray<System.Int16> in1, NdArray<System.Int16> @out)
            where C : IUnaryOp<System.Int16>
        {
            unsafe
            {
                using (var f1 = new Pinner(in1.DataAccessor))
                using (var f2 = new Pinner(@out.DataAccessor))
                {
                    var d1 = (System.Int16*)f1.ptr;
                    var d2 = (System.Int16*)f2.ptr;

                    if (@out.Shape.Dimensions.Length == 1)
                    {
                        long totalOps = @out.Shape.Dimensions[0].Length;

                        long ix1 = in1.Shape.Offset;
                        long ix2 = @out.Shape.Offset;

                        long stride1 = in1.Shape.Dimensions[0].Stride;
                        long stride2 = @out.Shape.Dimensions[0].Stride;


                        if (stride1 == stride2 && ix1 == ix2)
                        {
                            //Best case, all are equal, just keep a single counter
                            for (long i = 0; i < totalOps; i++)
                            {
                                d2[ix1] = (System.Int16)(Math.Cosh(d1[ix1]));
                                ix1 += stride1;
                            }
                        }
                        else
                        {
                            for (long i = 0; i < totalOps; i++)
                            {
                                d2[ix2] = (System.Int16)(Math.Cosh(d1[ix1]));
                                ix1 += stride1;
                                ix2 += stride2;
                            }
                        }
                    }
                    else if (@out.Shape.Dimensions.Length == 2)
                    {
                        long opsOuter = @out.Shape.Dimensions[0].Length;
                        long opsInner = @out.Shape.Dimensions[1].Length;

                        long ix1 = in1.Shape.Offset;
                        long ix2 = @out.Shape.Offset;

                        long outerStride1 = in1.Shape.Dimensions[0].Stride;
                        long outerStride2 = @out.Shape.Dimensions[0].Stride;

                        long innerStride1 = in1.Shape.Dimensions[1].Stride;
                        long innerStride2 = @out.Shape.Dimensions[1].Stride;

                        outerStride1 -= innerStride1 * in1.Shape.Dimensions[1].Length;
                        outerStride2 -= innerStride2 * @out.Shape.Dimensions[1].Length;

                        for (long i = 0; i < opsOuter; i++)
                        {
                            for (long j = 0; j < opsInner; j++)
                            {
                                d2[ix2] = (System.Int16)(Math.Cosh(d1[ix1]));
                                ix1 += innerStride1;
                                ix2 += innerStride2;
                            }

                            ix1 += outerStride1;
                            ix2 += outerStride2;
                        }
                    }
                    else
                    {
                        long n = in1.Shape.Dimensions.LongLength - 3;
                        long[] limits = in1.Shape.Dimensions.Where(x => n-- > 0).Select(x => x.Length).ToArray();
                        long[] counters = new long[limits.LongLength];

                        long totalOps = limits.LongLength == 0 ? 1 : limits.Aggregate<long>((a, b) => a * b);

                        //This chunck of variables are used to prevent repeated calculations of offsets
                        long dimIndex0 = 0 + limits.LongLength;
                        long dimIndex1 = 1 + limits.LongLength;
                        long dimIndex2 = 2 + limits.LongLength;

                        long opsOuter = @out.Shape.Dimensions[0 + limits.LongLength].Length;
                        long opsInner = @out.Shape.Dimensions[1 + limits.LongLength].Length;
                        long opsInnerInner = @out.Shape.Dimensions[2 + limits.LongLength].Length;

                        long outerStride1 = in1.Shape.Dimensions[dimIndex0].Stride;
                        long outerStride3 = @out.Shape.Dimensions[dimIndex0].Stride;

                        long innerStride1 = in1.Shape.Dimensions[dimIndex1].Stride;
                        long innerStride3 = @out.Shape.Dimensions[dimIndex1].Stride;

                        long innerInnerStride1 = in1.Shape.Dimensions[dimIndex2].Stride;
                        long innerInnerStride3 = @out.Shape.Dimensions[dimIndex2].Stride;

                        outerStride1 -= innerStride1 * in1.Shape.Dimensions[dimIndex1].Length;
                        outerStride3 -= innerStride3 * @out.Shape.Dimensions[dimIndex1].Length;

                        innerStride1 -= innerInnerStride1 * in1.Shape.Dimensions[dimIndex2].Length;
                        innerStride3 -= innerInnerStride3 * @out.Shape.Dimensions[dimIndex2].Length;

                        for (long outer = 0; outer < totalOps; outer++)
                        {
                            //Get the array offset for the first element in the outer dimension
                            long ix1 = in1.Shape[counters];
                            long ix3 = @out.Shape[counters];


                            for (long i = 0; i < opsOuter; i++)
                            {
                                for (long j = 0; j < opsInner; j++)
                                {
                                    for (long k = 0; k < opsInnerInner; k++)
                                    {
                                        d2[ix3] = (System.Int16)(Math.Cosh(d1[ix1]));
                                        ix1 += innerInnerStride1;
                                        ix3 += innerInnerStride3;
                                    }

                                    ix1 += innerStride1;
                                    ix3 += innerStride3;
                                }

                                ix1 += outerStride1;
                                ix3 += outerStride3;
                            }

                            if (counters.LongLength > 0)
                            {
                                //Basically a ripple carry adder
                                long p = counters.LongLength - 1;
                                while (++counters[p] == limits[p] && p > 0)
                                {
                                    counters[p] = 0;
                                    p--;
                                }
                            }
                        }
                    }
                }
            }
        }

        /// <summary>
        /// Unsafe implementation of applying a unary operation
        /// </summary>
        /// <typeparam name="C">The type of operation to perform</typeparam>
        /// <param name="op">The operation instance</param>
        /// <param name="scalar">The input scalar argument</param>
        /// <param name="out">The output target</param>
        internal static void UFunc_Op_Inner_Unary_Scalar_Flush_Int16_TypedImpl<C>(NumCIL.Int16.Cosh op, System.Int16 scalar, NdArray<System.Int16> @out)
            where C : IUnaryOp<System.Int16>
        {
            unsafe
            {
                using (var f2 = new Pinner(@out.DataAccessor))
                {
                    var d2 = (System.Int16*)f2.ptr;

                    if (@out.Shape.Dimensions.Length == 1)
                    {
                        long totalOps = @out.Shape.Dimensions[0].Length;
                        long ix2 = @out.Shape.Offset;
                        long stride2 = @out.Shape.Dimensions[0].Stride;

                        for (long i = 0; i < totalOps; i++)
                        {
                            d2[ix2] = (System.Int16)(Math.Cosh(scalar));
                            ix2 += stride2;
                        }
                    }
                    else if (@out.Shape.Dimensions.Length == 2)
                    {
                        long opsOuter = @out.Shape.Dimensions[0].Length;
                        long opsInner = @out.Shape.Dimensions[1].Length;

                        long ix2 = @out.Shape.Offset;
                        long outerStride2 = @out.Shape.Dimensions[0].Stride;
                        long innerStride2 = @out.Shape.Dimensions[1].Stride;
                        outerStride2 -= innerStride2 * @out.Shape.Dimensions[1].Length;

                        for (long i = 0; i < opsOuter; i++)
                        {
                            for (long j = 0; j < opsInner; j++)
                            {
                                d2[ix2] = (System.Int16)(Math.Cosh(scalar));
                                ix2 += innerStride2;
                            }

                            ix2 += outerStride2;
                        }
                    }
                    else
                    {
                        long n = @out.Shape.Dimensions.LongLength - 3;
                        long[] limits = @out.Shape.Dimensions.Where(x => n-- > 0).Select(x => x.Length).ToArray();
                        long[] counters = new long[limits.LongLength];

                        long totalOps = limits.LongLength == 0 ? 1 : limits.Aggregate<long>((a, b) => a * b);

                        //This chunck of variables are used to prevent repeated calculations of offsets
                        long dimIndex0 = 0 + limits.LongLength;
                        long dimIndex1 = 1 + limits.LongLength;
                        long dimIndex2 = 2 + limits.LongLength;

                        long opsOuter = @out.Shape.Dimensions[0 + limits.LongLength].Length;
                        long opsInner = @out.Shape.Dimensions[1 + limits.LongLength].Length;
                        long opsInnerInner = @out.Shape.Dimensions[2 + limits.LongLength].Length;

                        long outerStride3 = @out.Shape.Dimensions[dimIndex0].Stride;
                        long innerStride3 = @out.Shape.Dimensions[dimIndex1].Stride;
                        long innerInnerStride3 = @out.Shape.Dimensions[dimIndex2].Stride;
                        outerStride3 -= innerStride3 * @out.Shape.Dimensions[dimIndex1].Length;
                        innerStride3 -= innerInnerStride3 * @out.Shape.Dimensions[dimIndex2].Length;

                        for (long outer = 0; outer < totalOps; outer++)
                        {
                            //Get the array offset for the first element in the outer dimension
                            long ix3 = @out.Shape[counters];

                            for (long i = 0; i < opsOuter; i++)
                            {
                                for (long j = 0; j < opsInner; j++)
                                {
                                    for (long k = 0; k < opsInnerInner; k++)
                                    {
                                        d2[ix3] = (System.Int16)(Math.Cosh(scalar));
                                        ix3 += innerInnerStride3;
                                    }

                                    ix3 += innerStride3;
                                }

                                ix3 += outerStride3;
                            }

                            if (counters.LongLength > 0)
                            {
                                //Basically a ripple carry adder
                                long p = counters.LongLength - 1;
                                while (++counters[p] == limits[p] && p > 0)
                                {
                                    counters[p] = 0;
                                    p--;
                                }
                            }
                        }
                    }
                }
            }
        }
        /// <summary>
        /// Unsafe implementation of applying a unary operation
        /// </summary>
        /// <typeparam name="C">The type of operation to perform</typeparam>
        /// <param name="op">The operation instance</param>
        /// <param name="in1">The input argument</param>
        /// <param name="out">The output target</param>
        internal static void UFunc_Op_Inner_Unary_Flush_UInt16_TypedImpl<C>(NumCIL.UInt16.Cosh op, NdArray<System.UInt16> in1, NdArray<System.UInt16> @out)
            where C : IUnaryOp<System.UInt16>
        {
            unsafe
            {
                using (var f1 = new Pinner(in1.DataAccessor))
                using (var f2 = new Pinner(@out.DataAccessor))
                {
                    var d1 = (System.UInt16*)f1.ptr;
                    var d2 = (System.UInt16*)f2.ptr;

                    if (@out.Shape.Dimensions.Length == 1)
                    {
                        long totalOps = @out.Shape.Dimensions[0].Length;

                        long ix1 = in1.Shape.Offset;
                        long ix2 = @out.Shape.Offset;

                        long stride1 = in1.Shape.Dimensions[0].Stride;
                        long stride2 = @out.Shape.Dimensions[0].Stride;


                        if (stride1 == stride2 && ix1 == ix2)
                        {
                            //Best case, all are equal, just keep a single counter
                            for (long i = 0; i < totalOps; i++)
                            {
                                d2[ix1] = (System.UInt16)(Math.Cosh(d1[ix1]));
                                ix1 += stride1;
                            }
                        }
                        else
                        {
                            for (long i = 0; i < totalOps; i++)
                            {
                                d2[ix2] = (System.UInt16)(Math.Cosh(d1[ix1]));
                                ix1 += stride1;
                                ix2 += stride2;
                            }
                        }
                    }
                    else if (@out.Shape.Dimensions.Length == 2)
                    {
                        long opsOuter = @out.Shape.Dimensions[0].Length;
                        long opsInner = @out.Shape.Dimensions[1].Length;

                        long ix1 = in1.Shape.Offset;
                        long ix2 = @out.Shape.Offset;

                        long outerStride1 = in1.Shape.Dimensions[0].Stride;
                        long outerStride2 = @out.Shape.Dimensions[0].Stride;

                        long innerStride1 = in1.Shape.Dimensions[1].Stride;
                        long innerStride2 = @out.Shape.Dimensions[1].Stride;

                        outerStride1 -= innerStride1 * in1.Shape.Dimensions[1].Length;
                        outerStride2 -= innerStride2 * @out.Shape.Dimensions[1].Length;

                        for (long i = 0; i < opsOuter; i++)
                        {
                            for (long j = 0; j < opsInner; j++)
                            {
                                d2[ix2] = (System.UInt16)(Math.Cosh(d1[ix1]));
                                ix1 += innerStride1;
                                ix2 += innerStride2;
                            }

                            ix1 += outerStride1;
                            ix2 += outerStride2;
                        }
                    }
                    else
                    {
                        long n = in1.Shape.Dimensions.LongLength - 3;
                        long[] limits = in1.Shape.Dimensions.Where(x => n-- > 0).Select(x => x.Length).ToArray();
                        long[] counters = new long[limits.LongLength];

                        long totalOps = limits.LongLength == 0 ? 1 : limits.Aggregate<long>((a, b) => a * b);

                        //This chunck of variables are used to prevent repeated calculations of offsets
                        long dimIndex0 = 0 + limits.LongLength;
                        long dimIndex1 = 1 + limits.LongLength;
                        long dimIndex2 = 2 + limits.LongLength;

                        long opsOuter = @out.Shape.Dimensions[0 + limits.LongLength].Length;
                        long opsInner = @out.Shape.Dimensions[1 + limits.LongLength].Length;
                        long opsInnerInner = @out.Shape.Dimensions[2 + limits.LongLength].Length;

                        long outerStride1 = in1.Shape.Dimensions[dimIndex0].Stride;
                        long outerStride3 = @out.Shape.Dimensions[dimIndex0].Stride;

                        long innerStride1 = in1.Shape.Dimensions[dimIndex1].Stride;
                        long innerStride3 = @out.Shape.Dimensions[dimIndex1].Stride;

                        long innerInnerStride1 = in1.Shape.Dimensions[dimIndex2].Stride;
                        long innerInnerStride3 = @out.Shape.Dimensions[dimIndex2].Stride;

                        outerStride1 -= innerStride1 * in1.Shape.Dimensions[dimIndex1].Length;
                        outerStride3 -= innerStride3 * @out.Shape.Dimensions[dimIndex1].Length;

                        innerStride1 -= innerInnerStride1 * in1.Shape.Dimensions[dimIndex2].Length;
                        innerStride3 -= innerInnerStride3 * @out.Shape.Dimensions[dimIndex2].Length;

                        for (long outer = 0; outer < totalOps; outer++)
                        {
                            //Get the array offset for the first element in the outer dimension
                            long ix1 = in1.Shape[counters];
                            long ix3 = @out.Shape[counters];


                            for (long i = 0; i < opsOuter; i++)
                            {
                                for (long j = 0; j < opsInner; j++)
                                {
                                    for (long k = 0; k < opsInnerInner; k++)
                                    {
                                        d2[ix3] = (System.UInt16)(Math.Cosh(d1[ix1]));
                                        ix1 += innerInnerStride1;
                                        ix3 += innerInnerStride3;
                                    }

                                    ix1 += innerStride1;
                                    ix3 += innerStride3;
                                }

                                ix1 += outerStride1;
                                ix3 += outerStride3;
                            }

                            if (counters.LongLength > 0)
                            {
                                //Basically a ripple carry adder
                                long p = counters.LongLength - 1;
                                while (++counters[p] == limits[p] && p > 0)
                                {
                                    counters[p] = 0;
                                    p--;
                                }
                            }
                        }
                    }
                }
            }
        }

        /// <summary>
        /// Unsafe implementation of applying a unary operation
        /// </summary>
        /// <typeparam name="C">The type of operation to perform</typeparam>
        /// <param name="op">The operation instance</param>
        /// <param name="scalar">The input scalar argument</param>
        /// <param name="out">The output target</param>
        internal static void UFunc_Op_Inner_Unary_Scalar_Flush_UInt16_TypedImpl<C>(NumCIL.UInt16.Cosh op, System.UInt16 scalar, NdArray<System.UInt16> @out)
            where C : IUnaryOp<System.UInt16>
        {
            unsafe
            {
                using (var f2 = new Pinner(@out.DataAccessor))
                {
                    var d2 = (System.UInt16*)f2.ptr;

                    if (@out.Shape.Dimensions.Length == 1)
                    {
                        long totalOps = @out.Shape.Dimensions[0].Length;
                        long ix2 = @out.Shape.Offset;
                        long stride2 = @out.Shape.Dimensions[0].Stride;

                        for (long i = 0; i < totalOps; i++)
                        {
                            d2[ix2] = (System.UInt16)(Math.Cosh(scalar));
                            ix2 += stride2;
                        }
                    }
                    else if (@out.Shape.Dimensions.Length == 2)
                    {
                        long opsOuter = @out.Shape.Dimensions[0].Length;
                        long opsInner = @out.Shape.Dimensions[1].Length;

                        long ix2 = @out.Shape.Offset;
                        long outerStride2 = @out.Shape.Dimensions[0].Stride;
                        long innerStride2 = @out.Shape.Dimensions[1].Stride;
                        outerStride2 -= innerStride2 * @out.Shape.Dimensions[1].Length;

                        for (long i = 0; i < opsOuter; i++)
                        {
                            for (long j = 0; j < opsInner; j++)
                            {
                                d2[ix2] = (System.UInt16)(Math.Cosh(scalar));
                                ix2 += innerStride2;
                            }

                            ix2 += outerStride2;
                        }
                    }
                    else
                    {
                        long n = @out.Shape.Dimensions.LongLength - 3;
                        long[] limits = @out.Shape.Dimensions.Where(x => n-- > 0).Select(x => x.Length).ToArray();
                        long[] counters = new long[limits.LongLength];

                        long totalOps = limits.LongLength == 0 ? 1 : limits.Aggregate<long>((a, b) => a * b);

                        //This chunck of variables are used to prevent repeated calculations of offsets
                        long dimIndex0 = 0 + limits.LongLength;
                        long dimIndex1 = 1 + limits.LongLength;
                        long dimIndex2 = 2 + limits.LongLength;

                        long opsOuter = @out.Shape.Dimensions[0 + limits.LongLength].Length;
                        long opsInner = @out.Shape.Dimensions[1 + limits.LongLength].Length;
                        long opsInnerInner = @out.Shape.Dimensions[2 + limits.LongLength].Length;

                        long outerStride3 = @out.Shape.Dimensions[dimIndex0].Stride;
                        long innerStride3 = @out.Shape.Dimensions[dimIndex1].Stride;
                        long innerInnerStride3 = @out.Shape.Dimensions[dimIndex2].Stride;
                        outerStride3 -= innerStride3 * @out.Shape.Dimensions[dimIndex1].Length;
                        innerStride3 -= innerInnerStride3 * @out.Shape.Dimensions[dimIndex2].Length;

                        for (long outer = 0; outer < totalOps; outer++)
                        {
                            //Get the array offset for the first element in the outer dimension
                            long ix3 = @out.Shape[counters];

                            for (long i = 0; i < opsOuter; i++)
                            {
                                for (long j = 0; j < opsInner; j++)
                                {
                                    for (long k = 0; k < opsInnerInner; k++)
                                    {
                                        d2[ix3] = (System.UInt16)(Math.Cosh(scalar));
                                        ix3 += innerInnerStride3;
                                    }

                                    ix3 += innerStride3;
                                }

                                ix3 += outerStride3;
                            }

                            if (counters.LongLength > 0)
                            {
                                //Basically a ripple carry adder
                                long p = counters.LongLength - 1;
                                while (++counters[p] == limits[p] && p > 0)
                                {
                                    counters[p] = 0;
                                    p--;
                                }
                            }
                        }
                    }
                }
            }
        }
        /// <summary>
        /// Unsafe implementation of applying a unary operation
        /// </summary>
        /// <typeparam name="C">The type of operation to perform</typeparam>
        /// <param name="op">The operation instance</param>
        /// <param name="in1">The input argument</param>
        /// <param name="out">The output target</param>
        internal static void UFunc_Op_Inner_Unary_Flush_Int32_TypedImpl<C>(NumCIL.Int32.Cosh op, NdArray<System.Int32> in1, NdArray<System.Int32> @out)
            where C : IUnaryOp<System.Int32>
        {
            unsafe
            {
                using (var f1 = new Pinner(in1.DataAccessor))
                using (var f2 = new Pinner(@out.DataAccessor))
                {
                    var d1 = (System.Int32*)f1.ptr;
                    var d2 = (System.Int32*)f2.ptr;

                    if (@out.Shape.Dimensions.Length == 1)
                    {
                        long totalOps = @out.Shape.Dimensions[0].Length;

                        long ix1 = in1.Shape.Offset;
                        long ix2 = @out.Shape.Offset;

                        long stride1 = in1.Shape.Dimensions[0].Stride;
                        long stride2 = @out.Shape.Dimensions[0].Stride;


                        if (stride1 == stride2 && ix1 == ix2)
                        {
                            //Best case, all are equal, just keep a single counter
                            for (long i = 0; i < totalOps; i++)
                            {
                                d2[ix1] = (System.Int32)(Math.Cosh(d1[ix1]));
                                ix1 += stride1;
                            }
                        }
                        else
                        {
                            for (long i = 0; i < totalOps; i++)
                            {
                                d2[ix2] = (System.Int32)(Math.Cosh(d1[ix1]));
                                ix1 += stride1;
                                ix2 += stride2;
                            }
                        }
                    }
                    else if (@out.Shape.Dimensions.Length == 2)
                    {
                        long opsOuter = @out.Shape.Dimensions[0].Length;
                        long opsInner = @out.Shape.Dimensions[1].Length;

                        long ix1 = in1.Shape.Offset;
                        long ix2 = @out.Shape.Offset;

                        long outerStride1 = in1.Shape.Dimensions[0].Stride;
                        long outerStride2 = @out.Shape.Dimensions[0].Stride;

                        long innerStride1 = in1.Shape.Dimensions[1].Stride;
                        long innerStride2 = @out.Shape.Dimensions[1].Stride;

                        outerStride1 -= innerStride1 * in1.Shape.Dimensions[1].Length;
                        outerStride2 -= innerStride2 * @out.Shape.Dimensions[1].Length;

                        for (long i = 0; i < opsOuter; i++)
                        {
                            for (long j = 0; j < opsInner; j++)
                            {
                                d2[ix2] = (System.Int32)(Math.Cosh(d1[ix1]));
                                ix1 += innerStride1;
                                ix2 += innerStride2;
                            }

                            ix1 += outerStride1;
                            ix2 += outerStride2;
                        }
                    }
                    else
                    {
                        long n = in1.Shape.Dimensions.LongLength - 3;
                        long[] limits = in1.Shape.Dimensions.Where(x => n-- > 0).Select(x => x.Length).ToArray();
                        long[] counters = new long[limits.LongLength];

                        long totalOps = limits.LongLength == 0 ? 1 : limits.Aggregate<long>((a, b) => a * b);

                        //This chunck of variables are used to prevent repeated calculations of offsets
                        long dimIndex0 = 0 + limits.LongLength;
                        long dimIndex1 = 1 + limits.LongLength;
                        long dimIndex2 = 2 + limits.LongLength;

                        long opsOuter = @out.Shape.Dimensions[0 + limits.LongLength].Length;
                        long opsInner = @out.Shape.Dimensions[1 + limits.LongLength].Length;
                        long opsInnerInner = @out.Shape.Dimensions[2 + limits.LongLength].Length;

                        long outerStride1 = in1.Shape.Dimensions[dimIndex0].Stride;
                        long outerStride3 = @out.Shape.Dimensions[dimIndex0].Stride;

                        long innerStride1 = in1.Shape.Dimensions[dimIndex1].Stride;
                        long innerStride3 = @out.Shape.Dimensions[dimIndex1].Stride;

                        long innerInnerStride1 = in1.Shape.Dimensions[dimIndex2].Stride;
                        long innerInnerStride3 = @out.Shape.Dimensions[dimIndex2].Stride;

                        outerStride1 -= innerStride1 * in1.Shape.Dimensions[dimIndex1].Length;
                        outerStride3 -= innerStride3 * @out.Shape.Dimensions[dimIndex1].Length;

                        innerStride1 -= innerInnerStride1 * in1.Shape.Dimensions[dimIndex2].Length;
                        innerStride3 -= innerInnerStride3 * @out.Shape.Dimensions[dimIndex2].Length;

                        for (long outer = 0; outer < totalOps; outer++)
                        {
                            //Get the array offset for the first element in the outer dimension
                            long ix1 = in1.Shape[counters];
                            long ix3 = @out.Shape[counters];


                            for (long i = 0; i < opsOuter; i++)
                            {
                                for (long j = 0; j < opsInner; j++)
                                {
                                    for (long k = 0; k < opsInnerInner; k++)
                                    {
                                        d2[ix3] = (System.Int32)(Math.Cosh(d1[ix1]));
                                        ix1 += innerInnerStride1;
                                        ix3 += innerInnerStride3;
                                    }

                                    ix1 += innerStride1;
                                    ix3 += innerStride3;
                                }

                                ix1 += outerStride1;
                                ix3 += outerStride3;
                            }

                            if (counters.LongLength > 0)
                            {
                                //Basically a ripple carry adder
                                long p = counters.LongLength - 1;
                                while (++counters[p] == limits[p] && p > 0)
                                {
                                    counters[p] = 0;
                                    p--;
                                }
                            }
                        }
                    }
                }
            }
        }

        /// <summary>
        /// Unsafe implementation of applying a unary operation
        /// </summary>
        /// <typeparam name="C">The type of operation to perform</typeparam>
        /// <param name="op">The operation instance</param>
        /// <param name="scalar">The input scalar argument</param>
        /// <param name="out">The output target</param>
        internal static void UFunc_Op_Inner_Unary_Scalar_Flush_Int32_TypedImpl<C>(NumCIL.Int32.Cosh op, System.Int32 scalar, NdArray<System.Int32> @out)
            where C : IUnaryOp<System.Int32>
        {
            unsafe
            {
                using (var f2 = new Pinner(@out.DataAccessor))
                {
                    var d2 = (System.Int32*)f2.ptr;

                    if (@out.Shape.Dimensions.Length == 1)
                    {
                        long totalOps = @out.Shape.Dimensions[0].Length;
                        long ix2 = @out.Shape.Offset;
                        long stride2 = @out.Shape.Dimensions[0].Stride;

                        for (long i = 0; i < totalOps; i++)
                        {
                            d2[ix2] = (System.Int32)(Math.Cosh(scalar));
                            ix2 += stride2;
                        }
                    }
                    else if (@out.Shape.Dimensions.Length == 2)
                    {
                        long opsOuter = @out.Shape.Dimensions[0].Length;
                        long opsInner = @out.Shape.Dimensions[1].Length;

                        long ix2 = @out.Shape.Offset;
                        long outerStride2 = @out.Shape.Dimensions[0].Stride;
                        long innerStride2 = @out.Shape.Dimensions[1].Stride;
                        outerStride2 -= innerStride2 * @out.Shape.Dimensions[1].Length;

                        for (long i = 0; i < opsOuter; i++)
                        {
                            for (long j = 0; j < opsInner; j++)
                            {
                                d2[ix2] = (System.Int32)(Math.Cosh(scalar));
                                ix2 += innerStride2;
                            }

                            ix2 += outerStride2;
                        }
                    }
                    else
                    {
                        long n = @out.Shape.Dimensions.LongLength - 3;
                        long[] limits = @out.Shape.Dimensions.Where(x => n-- > 0).Select(x => x.Length).ToArray();
                        long[] counters = new long[limits.LongLength];

                        long totalOps = limits.LongLength == 0 ? 1 : limits.Aggregate<long>((a, b) => a * b);

                        //This chunck of variables are used to prevent repeated calculations of offsets
                        long dimIndex0 = 0 + limits.LongLength;
                        long dimIndex1 = 1 + limits.LongLength;
                        long dimIndex2 = 2 + limits.LongLength;

                        long opsOuter = @out.Shape.Dimensions[0 + limits.LongLength].Length;
                        long opsInner = @out.Shape.Dimensions[1 + limits.LongLength].Length;
                        long opsInnerInner = @out.Shape.Dimensions[2 + limits.LongLength].Length;

                        long outerStride3 = @out.Shape.Dimensions[dimIndex0].Stride;
                        long innerStride3 = @out.Shape.Dimensions[dimIndex1].Stride;
                        long innerInnerStride3 = @out.Shape.Dimensions[dimIndex2].Stride;
                        outerStride3 -= innerStride3 * @out.Shape.Dimensions[dimIndex1].Length;
                        innerStride3 -= innerInnerStride3 * @out.Shape.Dimensions[dimIndex2].Length;

                        for (long outer = 0; outer < totalOps; outer++)
                        {
                            //Get the array offset for the first element in the outer dimension
                            long ix3 = @out.Shape[counters];

                            for (long i = 0; i < opsOuter; i++)
                            {
                                for (long j = 0; j < opsInner; j++)
                                {
                                    for (long k = 0; k < opsInnerInner; k++)
                                    {
                                        d2[ix3] = (System.Int32)(Math.Cosh(scalar));
                                        ix3 += innerInnerStride3;
                                    }

                                    ix3 += innerStride3;
                                }

                                ix3 += outerStride3;
                            }

                            if (counters.LongLength > 0)
                            {
                                //Basically a ripple carry adder
                                long p = counters.LongLength - 1;
                                while (++counters[p] == limits[p] && p > 0)
                                {
                                    counters[p] = 0;
                                    p--;
                                }
                            }
                        }
                    }
                }
            }
        }
        /// <summary>
        /// Unsafe implementation of applying a unary operation
        /// </summary>
        /// <typeparam name="C">The type of operation to perform</typeparam>
        /// <param name="op">The operation instance</param>
        /// <param name="in1">The input argument</param>
        /// <param name="out">The output target</param>
        internal static void UFunc_Op_Inner_Unary_Flush_UInt32_TypedImpl<C>(NumCIL.UInt32.Cosh op, NdArray<System.UInt32> in1, NdArray<System.UInt32> @out)
            where C : IUnaryOp<System.UInt32>
        {
            unsafe
            {
                using (var f1 = new Pinner(in1.DataAccessor))
                using (var f2 = new Pinner(@out.DataAccessor))
                {
                    var d1 = (System.UInt32*)f1.ptr;
                    var d2 = (System.UInt32*)f2.ptr;

                    if (@out.Shape.Dimensions.Length == 1)
                    {
                        long totalOps = @out.Shape.Dimensions[0].Length;

                        long ix1 = in1.Shape.Offset;
                        long ix2 = @out.Shape.Offset;

                        long stride1 = in1.Shape.Dimensions[0].Stride;
                        long stride2 = @out.Shape.Dimensions[0].Stride;


                        if (stride1 == stride2 && ix1 == ix2)
                        {
                            //Best case, all are equal, just keep a single counter
                            for (long i = 0; i < totalOps; i++)
                            {
                                d2[ix1] = (System.UInt32)(Math.Cosh(d1[ix1]));
                                ix1 += stride1;
                            }
                        }
                        else
                        {
                            for (long i = 0; i < totalOps; i++)
                            {
                                d2[ix2] = (System.UInt32)(Math.Cosh(d1[ix1]));
                                ix1 += stride1;
                                ix2 += stride2;
                            }
                        }
                    }
                    else if (@out.Shape.Dimensions.Length == 2)
                    {
                        long opsOuter = @out.Shape.Dimensions[0].Length;
                        long opsInner = @out.Shape.Dimensions[1].Length;

                        long ix1 = in1.Shape.Offset;
                        long ix2 = @out.Shape.Offset;

                        long outerStride1 = in1.Shape.Dimensions[0].Stride;
                        long outerStride2 = @out.Shape.Dimensions[0].Stride;

                        long innerStride1 = in1.Shape.Dimensions[1].Stride;
                        long innerStride2 = @out.Shape.Dimensions[1].Stride;

                        outerStride1 -= innerStride1 * in1.Shape.Dimensions[1].Length;
                        outerStride2 -= innerStride2 * @out.Shape.Dimensions[1].Length;

                        for (long i = 0; i < opsOuter; i++)
                        {
                            for (long j = 0; j < opsInner; j++)
                            {
                                d2[ix2] = (System.UInt32)(Math.Cosh(d1[ix1]));
                                ix1 += innerStride1;
                                ix2 += innerStride2;
                            }

                            ix1 += outerStride1;
                            ix2 += outerStride2;
                        }
                    }
                    else
                    {
                        long n = in1.Shape.Dimensions.LongLength - 3;
                        long[] limits = in1.Shape.Dimensions.Where(x => n-- > 0).Select(x => x.Length).ToArray();
                        long[] counters = new long[limits.LongLength];

                        long totalOps = limits.LongLength == 0 ? 1 : limits.Aggregate<long>((a, b) => a * b);

                        //This chunck of variables are used to prevent repeated calculations of offsets
                        long dimIndex0 = 0 + limits.LongLength;
                        long dimIndex1 = 1 + limits.LongLength;
                        long dimIndex2 = 2 + limits.LongLength;

                        long opsOuter = @out.Shape.Dimensions[0 + limits.LongLength].Length;
                        long opsInner = @out.Shape.Dimensions[1 + limits.LongLength].Length;
                        long opsInnerInner = @out.Shape.Dimensions[2 + limits.LongLength].Length;

                        long outerStride1 = in1.Shape.Dimensions[dimIndex0].Stride;
                        long outerStride3 = @out.Shape.Dimensions[dimIndex0].Stride;

                        long innerStride1 = in1.Shape.Dimensions[dimIndex1].Stride;
                        long innerStride3 = @out.Shape.Dimensions[dimIndex1].Stride;

                        long innerInnerStride1 = in1.Shape.Dimensions[dimIndex2].Stride;
                        long innerInnerStride3 = @out.Shape.Dimensions[dimIndex2].Stride;

                        outerStride1 -= innerStride1 * in1.Shape.Dimensions[dimIndex1].Length;
                        outerStride3 -= innerStride3 * @out.Shape.Dimensions[dimIndex1].Length;

                        innerStride1 -= innerInnerStride1 * in1.Shape.Dimensions[dimIndex2].Length;
                        innerStride3 -= innerInnerStride3 * @out.Shape.Dimensions[dimIndex2].Length;

                        for (long outer = 0; outer < totalOps; outer++)
                        {
                            //Get the array offset for the first element in the outer dimension
                            long ix1 = in1.Shape[counters];
                            long ix3 = @out.Shape[counters];


                            for (long i = 0; i < opsOuter; i++)
                            {
                                for (long j = 0; j < opsInner; j++)
                                {
                                    for (long k = 0; k < opsInnerInner; k++)
                                    {
                                        d2[ix3] = (System.UInt32)(Math.Cosh(d1[ix1]));
                                        ix1 += innerInnerStride1;
                                        ix3 += innerInnerStride3;
                                    }

                                    ix1 += innerStride1;
                                    ix3 += innerStride3;
                                }

                                ix1 += outerStride1;
                                ix3 += outerStride3;
                            }

                            if (counters.LongLength > 0)
                            {
                                //Basically a ripple carry adder
                                long p = counters.LongLength - 1;
                                while (++counters[p] == limits[p] && p > 0)
                                {
                                    counters[p] = 0;
                                    p--;
                                }
                            }
                        }
                    }
                }
            }
        }

        /// <summary>
        /// Unsafe implementation of applying a unary operation
        /// </summary>
        /// <typeparam name="C">The type of operation to perform</typeparam>
        /// <param name="op">The operation instance</param>
        /// <param name="scalar">The input scalar argument</param>
        /// <param name="out">The output target</param>
        internal static void UFunc_Op_Inner_Unary_Scalar_Flush_UInt32_TypedImpl<C>(NumCIL.UInt32.Cosh op, System.UInt32 scalar, NdArray<System.UInt32> @out)
            where C : IUnaryOp<System.UInt32>
        {
            unsafe
            {
                using (var f2 = new Pinner(@out.DataAccessor))
                {
                    var d2 = (System.UInt32*)f2.ptr;

                    if (@out.Shape.Dimensions.Length == 1)
                    {
                        long totalOps = @out.Shape.Dimensions[0].Length;
                        long ix2 = @out.Shape.Offset;
                        long stride2 = @out.Shape.Dimensions[0].Stride;

                        for (long i = 0; i < totalOps; i++)
                        {
                            d2[ix2] = (System.UInt32)(Math.Cosh(scalar));
                            ix2 += stride2;
                        }
                    }
                    else if (@out.Shape.Dimensions.Length == 2)
                    {
                        long opsOuter = @out.Shape.Dimensions[0].Length;
                        long opsInner = @out.Shape.Dimensions[1].Length;

                        long ix2 = @out.Shape.Offset;
                        long outerStride2 = @out.Shape.Dimensions[0].Stride;
                        long innerStride2 = @out.Shape.Dimensions[1].Stride;
                        outerStride2 -= innerStride2 * @out.Shape.Dimensions[1].Length;

                        for (long i = 0; i < opsOuter; i++)
                        {
                            for (long j = 0; j < opsInner; j++)
                            {
                                d2[ix2] = (System.UInt32)(Math.Cosh(scalar));
                                ix2 += innerStride2;
                            }

                            ix2 += outerStride2;
                        }
                    }
                    else
                    {
                        long n = @out.Shape.Dimensions.LongLength - 3;
                        long[] limits = @out.Shape.Dimensions.Where(x => n-- > 0).Select(x => x.Length).ToArray();
                        long[] counters = new long[limits.LongLength];

                        long totalOps = limits.LongLength == 0 ? 1 : limits.Aggregate<long>((a, b) => a * b);

                        //This chunck of variables are used to prevent repeated calculations of offsets
                        long dimIndex0 = 0 + limits.LongLength;
                        long dimIndex1 = 1 + limits.LongLength;
                        long dimIndex2 = 2 + limits.LongLength;

                        long opsOuter = @out.Shape.Dimensions[0 + limits.LongLength].Length;
                        long opsInner = @out.Shape.Dimensions[1 + limits.LongLength].Length;
                        long opsInnerInner = @out.Shape.Dimensions[2 + limits.LongLength].Length;

                        long outerStride3 = @out.Shape.Dimensions[dimIndex0].Stride;
                        long innerStride3 = @out.Shape.Dimensions[dimIndex1].Stride;
                        long innerInnerStride3 = @out.Shape.Dimensions[dimIndex2].Stride;
                        outerStride3 -= innerStride3 * @out.Shape.Dimensions[dimIndex1].Length;
                        innerStride3 -= innerInnerStride3 * @out.Shape.Dimensions[dimIndex2].Length;

                        for (long outer = 0; outer < totalOps; outer++)
                        {
                            //Get the array offset for the first element in the outer dimension
                            long ix3 = @out.Shape[counters];

                            for (long i = 0; i < opsOuter; i++)
                            {
                                for (long j = 0; j < opsInner; j++)
                                {
                                    for (long k = 0; k < opsInnerInner; k++)
                                    {
                                        d2[ix3] = (System.UInt32)(Math.Cosh(scalar));
                                        ix3 += innerInnerStride3;
                                    }

                                    ix3 += innerStride3;
                                }

                                ix3 += outerStride3;
                            }

                            if (counters.LongLength > 0)
                            {
                                //Basically a ripple carry adder
                                long p = counters.LongLength - 1;
                                while (++counters[p] == limits[p] && p > 0)
                                {
                                    counters[p] = 0;
                                    p--;
                                }
                            }
                        }
                    }
                }
            }
        }
        /// <summary>
        /// Unsafe implementation of applying a unary operation
        /// </summary>
        /// <typeparam name="C">The type of operation to perform</typeparam>
        /// <param name="op">The operation instance</param>
        /// <param name="in1">The input argument</param>
        /// <param name="out">The output target</param>
        internal static void UFunc_Op_Inner_Unary_Flush_Int64_TypedImpl<C>(NumCIL.Int64.Cosh op, NdArray<System.Int64> in1, NdArray<System.Int64> @out)
            where C : IUnaryOp<System.Int64>
        {
            unsafe
            {
                using (var f1 = new Pinner(in1.DataAccessor))
                using (var f2 = new Pinner(@out.DataAccessor))
                {
                    var d1 = (System.Int64*)f1.ptr;
                    var d2 = (System.Int64*)f2.ptr;

                    if (@out.Shape.Dimensions.Length == 1)
                    {
                        long totalOps = @out.Shape.Dimensions[0].Length;

                        long ix1 = in1.Shape.Offset;
                        long ix2 = @out.Shape.Offset;

                        long stride1 = in1.Shape.Dimensions[0].Stride;
                        long stride2 = @out.Shape.Dimensions[0].Stride;


                        if (stride1 == stride2 && ix1 == ix2)
                        {
                            //Best case, all are equal, just keep a single counter
                            for (long i = 0; i < totalOps; i++)
                            {
                                d2[ix1] = (System.Int64)(Math.Cosh(d1[ix1]));
                                ix1 += stride1;
                            }
                        }
                        else
                        {
                            for (long i = 0; i < totalOps; i++)
                            {
                                d2[ix2] = (System.Int64)(Math.Cosh(d1[ix1]));
                                ix1 += stride1;
                                ix2 += stride2;
                            }
                        }
                    }
                    else if (@out.Shape.Dimensions.Length == 2)
                    {
                        long opsOuter = @out.Shape.Dimensions[0].Length;
                        long opsInner = @out.Shape.Dimensions[1].Length;

                        long ix1 = in1.Shape.Offset;
                        long ix2 = @out.Shape.Offset;

                        long outerStride1 = in1.Shape.Dimensions[0].Stride;
                        long outerStride2 = @out.Shape.Dimensions[0].Stride;

                        long innerStride1 = in1.Shape.Dimensions[1].Stride;
                        long innerStride2 = @out.Shape.Dimensions[1].Stride;

                        outerStride1 -= innerStride1 * in1.Shape.Dimensions[1].Length;
                        outerStride2 -= innerStride2 * @out.Shape.Dimensions[1].Length;

                        for (long i = 0; i < opsOuter; i++)
                        {
                            for (long j = 0; j < opsInner; j++)
                            {
                                d2[ix2] = (System.Int64)(Math.Cosh(d1[ix1]));
                                ix1 += innerStride1;
                                ix2 += innerStride2;
                            }

                            ix1 += outerStride1;
                            ix2 += outerStride2;
                        }
                    }
                    else
                    {
                        long n = in1.Shape.Dimensions.LongLength - 3;
                        long[] limits = in1.Shape.Dimensions.Where(x => n-- > 0).Select(x => x.Length).ToArray();
                        long[] counters = new long[limits.LongLength];

                        long totalOps = limits.LongLength == 0 ? 1 : limits.Aggregate<long>((a, b) => a * b);

                        //This chunck of variables are used to prevent repeated calculations of offsets
                        long dimIndex0 = 0 + limits.LongLength;
                        long dimIndex1 = 1 + limits.LongLength;
                        long dimIndex2 = 2 + limits.LongLength;

                        long opsOuter = @out.Shape.Dimensions[0 + limits.LongLength].Length;
                        long opsInner = @out.Shape.Dimensions[1 + limits.LongLength].Length;
                        long opsInnerInner = @out.Shape.Dimensions[2 + limits.LongLength].Length;

                        long outerStride1 = in1.Shape.Dimensions[dimIndex0].Stride;
                        long outerStride3 = @out.Shape.Dimensions[dimIndex0].Stride;

                        long innerStride1 = in1.Shape.Dimensions[dimIndex1].Stride;
                        long innerStride3 = @out.Shape.Dimensions[dimIndex1].Stride;

                        long innerInnerStride1 = in1.Shape.Dimensions[dimIndex2].Stride;
                        long innerInnerStride3 = @out.Shape.Dimensions[dimIndex2].Stride;

                        outerStride1 -= innerStride1 * in1.Shape.Dimensions[dimIndex1].Length;
                        outerStride3 -= innerStride3 * @out.Shape.Dimensions[dimIndex1].Length;

                        innerStride1 -= innerInnerStride1 * in1.Shape.Dimensions[dimIndex2].Length;
                        innerStride3 -= innerInnerStride3 * @out.Shape.Dimensions[dimIndex2].Length;

                        for (long outer = 0; outer < totalOps; outer++)
                        {
                            //Get the array offset for the first element in the outer dimension
                            long ix1 = in1.Shape[counters];
                            long ix3 = @out.Shape[counters];


                            for (long i = 0; i < opsOuter; i++)
                            {
                                for (long j = 0; j < opsInner; j++)
                                {
                                    for (long k = 0; k < opsInnerInner; k++)
                                    {
                                        d2[ix3] = (System.Int64)(Math.Cosh(d1[ix1]));
                                        ix1 += innerInnerStride1;
                                        ix3 += innerInnerStride3;
                                    }

                                    ix1 += innerStride1;
                                    ix3 += innerStride3;
                                }

                                ix1 += outerStride1;
                                ix3 += outerStride3;
                            }

                            if (counters.LongLength > 0)
                            {
                                //Basically a ripple carry adder
                                long p = counters.LongLength - 1;
                                while (++counters[p] == limits[p] && p > 0)
                                {
                                    counters[p] = 0;
                                    p--;
                                }
                            }
                        }
                    }
                }
            }
        }

        /// <summary>
        /// Unsafe implementation of applying a unary operation
        /// </summary>
        /// <typeparam name="C">The type of operation to perform</typeparam>
        /// <param name="op">The operation instance</param>
        /// <param name="scalar">The input scalar argument</param>
        /// <param name="out">The output target</param>
        internal static void UFunc_Op_Inner_Unary_Scalar_Flush_Int64_TypedImpl<C>(NumCIL.Int64.Cosh op, System.Int64 scalar, NdArray<System.Int64> @out)
            where C : IUnaryOp<System.Int64>
        {
            unsafe
            {
                using (var f2 = new Pinner(@out.DataAccessor))
                {
                    var d2 = (System.Int64*)f2.ptr;

                    if (@out.Shape.Dimensions.Length == 1)
                    {
                        long totalOps = @out.Shape.Dimensions[0].Length;
                        long ix2 = @out.Shape.Offset;
                        long stride2 = @out.Shape.Dimensions[0].Stride;

                        for (long i = 0; i < totalOps; i++)
                        {
                            d2[ix2] = (System.Int64)(Math.Cosh(scalar));
                            ix2 += stride2;
                        }
                    }
                    else if (@out.Shape.Dimensions.Length == 2)
                    {
                        long opsOuter = @out.Shape.Dimensions[0].Length;
                        long opsInner = @out.Shape.Dimensions[1].Length;

                        long ix2 = @out.Shape.Offset;
                        long outerStride2 = @out.Shape.Dimensions[0].Stride;
                        long innerStride2 = @out.Shape.Dimensions[1].Stride;
                        outerStride2 -= innerStride2 * @out.Shape.Dimensions[1].Length;

                        for (long i = 0; i < opsOuter; i++)
                        {
                            for (long j = 0; j < opsInner; j++)
                            {
                                d2[ix2] = (System.Int64)(Math.Cosh(scalar));
                                ix2 += innerStride2;
                            }

                            ix2 += outerStride2;
                        }
                    }
                    else
                    {
                        long n = @out.Shape.Dimensions.LongLength - 3;
                        long[] limits = @out.Shape.Dimensions.Where(x => n-- > 0).Select(x => x.Length).ToArray();
                        long[] counters = new long[limits.LongLength];

                        long totalOps = limits.LongLength == 0 ? 1 : limits.Aggregate<long>((a, b) => a * b);

                        //This chunck of variables are used to prevent repeated calculations of offsets
                        long dimIndex0 = 0 + limits.LongLength;
                        long dimIndex1 = 1 + limits.LongLength;
                        long dimIndex2 = 2 + limits.LongLength;

                        long opsOuter = @out.Shape.Dimensions[0 + limits.LongLength].Length;
                        long opsInner = @out.Shape.Dimensions[1 + limits.LongLength].Length;
                        long opsInnerInner = @out.Shape.Dimensions[2 + limits.LongLength].Length;

                        long outerStride3 = @out.Shape.Dimensions[dimIndex0].Stride;
                        long innerStride3 = @out.Shape.Dimensions[dimIndex1].Stride;
                        long innerInnerStride3 = @out.Shape.Dimensions[dimIndex2].Stride;
                        outerStride3 -= innerStride3 * @out.Shape.Dimensions[dimIndex1].Length;
                        innerStride3 -= innerInnerStride3 * @out.Shape.Dimensions[dimIndex2].Length;

                        for (long outer = 0; outer < totalOps; outer++)
                        {
                            //Get the array offset for the first element in the outer dimension
                            long ix3 = @out.Shape[counters];

                            for (long i = 0; i < opsOuter; i++)
                            {
                                for (long j = 0; j < opsInner; j++)
                                {
                                    for (long k = 0; k < opsInnerInner; k++)
                                    {
                                        d2[ix3] = (System.Int64)(Math.Cosh(scalar));
                                        ix3 += innerInnerStride3;
                                    }

                                    ix3 += innerStride3;
                                }

                                ix3 += outerStride3;
                            }

                            if (counters.LongLength > 0)
                            {
                                //Basically a ripple carry adder
                                long p = counters.LongLength - 1;
                                while (++counters[p] == limits[p] && p > 0)
                                {
                                    counters[p] = 0;
                                    p--;
                                }
                            }
                        }
                    }
                }
            }
        }
        /// <summary>
        /// Unsafe implementation of applying a unary operation
        /// </summary>
        /// <typeparam name="C">The type of operation to perform</typeparam>
        /// <param name="op">The operation instance</param>
        /// <param name="in1">The input argument</param>
        /// <param name="out">The output target</param>
        internal static void UFunc_Op_Inner_Unary_Flush_UInt64_TypedImpl<C>(NumCIL.UInt64.Cosh op, NdArray<System.UInt64> in1, NdArray<System.UInt64> @out)
            where C : IUnaryOp<System.UInt64>
        {
            unsafe
            {
                using (var f1 = new Pinner(in1.DataAccessor))
                using (var f2 = new Pinner(@out.DataAccessor))
                {
                    var d1 = (System.UInt64*)f1.ptr;
                    var d2 = (System.UInt64*)f2.ptr;

                    if (@out.Shape.Dimensions.Length == 1)
                    {
                        long totalOps = @out.Shape.Dimensions[0].Length;

                        long ix1 = in1.Shape.Offset;
                        long ix2 = @out.Shape.Offset;

                        long stride1 = in1.Shape.Dimensions[0].Stride;
                        long stride2 = @out.Shape.Dimensions[0].Stride;


                        if (stride1 == stride2 && ix1 == ix2)
                        {
                            //Best case, all are equal, just keep a single counter
                            for (long i = 0; i < totalOps; i++)
                            {
                                d2[ix1] = (System.UInt64)(Math.Cosh(d1[ix1]));
                                ix1 += stride1;
                            }
                        }
                        else
                        {
                            for (long i = 0; i < totalOps; i++)
                            {
                                d2[ix2] = (System.UInt64)(Math.Cosh(d1[ix1]));
                                ix1 += stride1;
                                ix2 += stride2;
                            }
                        }
                    }
                    else if (@out.Shape.Dimensions.Length == 2)
                    {
                        long opsOuter = @out.Shape.Dimensions[0].Length;
                        long opsInner = @out.Shape.Dimensions[1].Length;

                        long ix1 = in1.Shape.Offset;
                        long ix2 = @out.Shape.Offset;

                        long outerStride1 = in1.Shape.Dimensions[0].Stride;
                        long outerStride2 = @out.Shape.Dimensions[0].Stride;

                        long innerStride1 = in1.Shape.Dimensions[1].Stride;
                        long innerStride2 = @out.Shape.Dimensions[1].Stride;

                        outerStride1 -= innerStride1 * in1.Shape.Dimensions[1].Length;
                        outerStride2 -= innerStride2 * @out.Shape.Dimensions[1].Length;

                        for (long i = 0; i < opsOuter; i++)
                        {
                            for (long j = 0; j < opsInner; j++)
                            {
                                d2[ix2] = (System.UInt64)(Math.Cosh(d1[ix1]));
                                ix1 += innerStride1;
                                ix2 += innerStride2;
                            }

                            ix1 += outerStride1;
                            ix2 += outerStride2;
                        }
                    }
                    else
                    {
                        long n = in1.Shape.Dimensions.LongLength - 3;
                        long[] limits = in1.Shape.Dimensions.Where(x => n-- > 0).Select(x => x.Length).ToArray();
                        long[] counters = new long[limits.LongLength];

                        long totalOps = limits.LongLength == 0 ? 1 : limits.Aggregate<long>((a, b) => a * b);

                        //This chunck of variables are used to prevent repeated calculations of offsets
                        long dimIndex0 = 0 + limits.LongLength;
                        long dimIndex1 = 1 + limits.LongLength;
                        long dimIndex2 = 2 + limits.LongLength;

                        long opsOuter = @out.Shape.Dimensions[0 + limits.LongLength].Length;
                        long opsInner = @out.Shape.Dimensions[1 + limits.LongLength].Length;
                        long opsInnerInner = @out.Shape.Dimensions[2 + limits.LongLength].Length;

                        long outerStride1 = in1.Shape.Dimensions[dimIndex0].Stride;
                        long outerStride3 = @out.Shape.Dimensions[dimIndex0].Stride;

                        long innerStride1 = in1.Shape.Dimensions[dimIndex1].Stride;
                        long innerStride3 = @out.Shape.Dimensions[dimIndex1].Stride;

                        long innerInnerStride1 = in1.Shape.Dimensions[dimIndex2].Stride;
                        long innerInnerStride3 = @out.Shape.Dimensions[dimIndex2].Stride;

                        outerStride1 -= innerStride1 * in1.Shape.Dimensions[dimIndex1].Length;
                        outerStride3 -= innerStride3 * @out.Shape.Dimensions[dimIndex1].Length;

                        innerStride1 -= innerInnerStride1 * in1.Shape.Dimensions[dimIndex2].Length;
                        innerStride3 -= innerInnerStride3 * @out.Shape.Dimensions[dimIndex2].Length;

                        for (long outer = 0; outer < totalOps; outer++)
                        {
                            //Get the array offset for the first element in the outer dimension
                            long ix1 = in1.Shape[counters];
                            long ix3 = @out.Shape[counters];


                            for (long i = 0; i < opsOuter; i++)
                            {
                                for (long j = 0; j < opsInner; j++)
                                {
                                    for (long k = 0; k < opsInnerInner; k++)
                                    {
                                        d2[ix3] = (System.UInt64)(Math.Cosh(d1[ix1]));
                                        ix1 += innerInnerStride1;
                                        ix3 += innerInnerStride3;
                                    }

                                    ix1 += innerStride1;
                                    ix3 += innerStride3;
                                }

                                ix1 += outerStride1;
                                ix3 += outerStride3;
                            }

                            if (counters.LongLength > 0)
                            {
                                //Basically a ripple carry adder
                                long p = counters.LongLength - 1;
                                while (++counters[p] == limits[p] && p > 0)
                                {
                                    counters[p] = 0;
                                    p--;
                                }
                            }
                        }
                    }
                }
            }
        }

        /// <summary>
        /// Unsafe implementation of applying a unary operation
        /// </summary>
        /// <typeparam name="C">The type of operation to perform</typeparam>
        /// <param name="op">The operation instance</param>
        /// <param name="scalar">The input scalar argument</param>
        /// <param name="out">The output target</param>
        internal static void UFunc_Op_Inner_Unary_Scalar_Flush_UInt64_TypedImpl<C>(NumCIL.UInt64.Cosh op, System.UInt64 scalar, NdArray<System.UInt64> @out)
            where C : IUnaryOp<System.UInt64>
        {
            unsafe
            {
                using (var f2 = new Pinner(@out.DataAccessor))
                {
                    var d2 = (System.UInt64*)f2.ptr;

                    if (@out.Shape.Dimensions.Length == 1)
                    {
                        long totalOps = @out.Shape.Dimensions[0].Length;
                        long ix2 = @out.Shape.Offset;
                        long stride2 = @out.Shape.Dimensions[0].Stride;

                        for (long i = 0; i < totalOps; i++)
                        {
                            d2[ix2] = (System.UInt64)(Math.Cosh(scalar));
                            ix2 += stride2;
                        }
                    }
                    else if (@out.Shape.Dimensions.Length == 2)
                    {
                        long opsOuter = @out.Shape.Dimensions[0].Length;
                        long opsInner = @out.Shape.Dimensions[1].Length;

                        long ix2 = @out.Shape.Offset;
                        long outerStride2 = @out.Shape.Dimensions[0].Stride;
                        long innerStride2 = @out.Shape.Dimensions[1].Stride;
                        outerStride2 -= innerStride2 * @out.Shape.Dimensions[1].Length;

                        for (long i = 0; i < opsOuter; i++)
                        {
                            for (long j = 0; j < opsInner; j++)
                            {
                                d2[ix2] = (System.UInt64)(Math.Cosh(scalar));
                                ix2 += innerStride2;
                            }

                            ix2 += outerStride2;
                        }
                    }
                    else
                    {
                        long n = @out.Shape.Dimensions.LongLength - 3;
                        long[] limits = @out.Shape.Dimensions.Where(x => n-- > 0).Select(x => x.Length).ToArray();
                        long[] counters = new long[limits.LongLength];

                        long totalOps = limits.LongLength == 0 ? 1 : limits.Aggregate<long>((a, b) => a * b);

                        //This chunck of variables are used to prevent repeated calculations of offsets
                        long dimIndex0 = 0 + limits.LongLength;
                        long dimIndex1 = 1 + limits.LongLength;
                        long dimIndex2 = 2 + limits.LongLength;

                        long opsOuter = @out.Shape.Dimensions[0 + limits.LongLength].Length;
                        long opsInner = @out.Shape.Dimensions[1 + limits.LongLength].Length;
                        long opsInnerInner = @out.Shape.Dimensions[2 + limits.LongLength].Length;

                        long outerStride3 = @out.Shape.Dimensions[dimIndex0].Stride;
                        long innerStride3 = @out.Shape.Dimensions[dimIndex1].Stride;
                        long innerInnerStride3 = @out.Shape.Dimensions[dimIndex2].Stride;
                        outerStride3 -= innerStride3 * @out.Shape.Dimensions[dimIndex1].Length;
                        innerStride3 -= innerInnerStride3 * @out.Shape.Dimensions[dimIndex2].Length;

                        for (long outer = 0; outer < totalOps; outer++)
                        {
                            //Get the array offset for the first element in the outer dimension
                            long ix3 = @out.Shape[counters];

                            for (long i = 0; i < opsOuter; i++)
                            {
                                for (long j = 0; j < opsInner; j++)
                                {
                                    for (long k = 0; k < opsInnerInner; k++)
                                    {
                                        d2[ix3] = (System.UInt64)(Math.Cosh(scalar));
                                        ix3 += innerInnerStride3;
                                    }

                                    ix3 += innerStride3;
                                }

                                ix3 += outerStride3;
                            }

                            if (counters.LongLength > 0)
                            {
                                //Basically a ripple carry adder
                                long p = counters.LongLength - 1;
                                while (++counters[p] == limits[p] && p > 0)
                                {
                                    counters[p] = 0;
                                    p--;
                                }
                            }
                        }
                    }
                }
            }
        }
        /// <summary>
        /// Unsafe implementation of applying a unary operation
        /// </summary>
        /// <typeparam name="C">The type of operation to perform</typeparam>
        /// <param name="op">The operation instance</param>
        /// <param name="in1">The input argument</param>
        /// <param name="out">The output target</param>
        internal static void UFunc_Op_Inner_Unary_Flush_Single_TypedImpl<C>(NumCIL.Float.Cosh op, NdArray<System.Single> in1, NdArray<System.Single> @out)
            where C : IUnaryOp<System.Single>
        {
            unsafe
            {
                using (var f1 = new Pinner(in1.DataAccessor))
                using (var f2 = new Pinner(@out.DataAccessor))
                {
                    var d1 = (System.Single*)f1.ptr;
                    var d2 = (System.Single*)f2.ptr;

                    if (@out.Shape.Dimensions.Length == 1)
                    {
                        long totalOps = @out.Shape.Dimensions[0].Length;

                        long ix1 = in1.Shape.Offset;
                        long ix2 = @out.Shape.Offset;

                        long stride1 = in1.Shape.Dimensions[0].Stride;
                        long stride2 = @out.Shape.Dimensions[0].Stride;


                        if (stride1 == stride2 && ix1 == ix2)
                        {
                            //Best case, all are equal, just keep a single counter
                            for (long i = 0; i < totalOps; i++)
                            {
                                d2[ix1] = (System.Single)(Math.Cosh(d1[ix1]));
                                ix1 += stride1;
                            }
                        }
                        else
                        {
                            for (long i = 0; i < totalOps; i++)
                            {
                                d2[ix2] = (System.Single)(Math.Cosh(d1[ix1]));
                                ix1 += stride1;
                                ix2 += stride2;
                            }
                        }
                    }
                    else if (@out.Shape.Dimensions.Length == 2)
                    {
                        long opsOuter = @out.Shape.Dimensions[0].Length;
                        long opsInner = @out.Shape.Dimensions[1].Length;

                        long ix1 = in1.Shape.Offset;
                        long ix2 = @out.Shape.Offset;

                        long outerStride1 = in1.Shape.Dimensions[0].Stride;
                        long outerStride2 = @out.Shape.Dimensions[0].Stride;

                        long innerStride1 = in1.Shape.Dimensions[1].Stride;
                        long innerStride2 = @out.Shape.Dimensions[1].Stride;

                        outerStride1 -= innerStride1 * in1.Shape.Dimensions[1].Length;
                        outerStride2 -= innerStride2 * @out.Shape.Dimensions[1].Length;

                        for (long i = 0; i < opsOuter; i++)
                        {
                            for (long j = 0; j < opsInner; j++)
                            {
                                d2[ix2] = (System.Single)(Math.Cosh(d1[ix1]));
                                ix1 += innerStride1;
                                ix2 += innerStride2;
                            }

                            ix1 += outerStride1;
                            ix2 += outerStride2;
                        }
                    }
                    else
                    {
                        long n = in1.Shape.Dimensions.LongLength - 3;
                        long[] limits = in1.Shape.Dimensions.Where(x => n-- > 0).Select(x => x.Length).ToArray();
                        long[] counters = new long[limits.LongLength];

                        long totalOps = limits.LongLength == 0 ? 1 : limits.Aggregate<long>((a, b) => a * b);

                        //This chunck of variables are used to prevent repeated calculations of offsets
                        long dimIndex0 = 0 + limits.LongLength;
                        long dimIndex1 = 1 + limits.LongLength;
                        long dimIndex2 = 2 + limits.LongLength;

                        long opsOuter = @out.Shape.Dimensions[0 + limits.LongLength].Length;
                        long opsInner = @out.Shape.Dimensions[1 + limits.LongLength].Length;
                        long opsInnerInner = @out.Shape.Dimensions[2 + limits.LongLength].Length;

                        long outerStride1 = in1.Shape.Dimensions[dimIndex0].Stride;
                        long outerStride3 = @out.Shape.Dimensions[dimIndex0].Stride;

                        long innerStride1 = in1.Shape.Dimensions[dimIndex1].Stride;
                        long innerStride3 = @out.Shape.Dimensions[dimIndex1].Stride;

                        long innerInnerStride1 = in1.Shape.Dimensions[dimIndex2].Stride;
                        long innerInnerStride3 = @out.Shape.Dimensions[dimIndex2].Stride;

                        outerStride1 -= innerStride1 * in1.Shape.Dimensions[dimIndex1].Length;
                        outerStride3 -= innerStride3 * @out.Shape.Dimensions[dimIndex1].Length;

                        innerStride1 -= innerInnerStride1 * in1.Shape.Dimensions[dimIndex2].Length;
                        innerStride3 -= innerInnerStride3 * @out.Shape.Dimensions[dimIndex2].Length;

                        for (long outer = 0; outer < totalOps; outer++)
                        {
                            //Get the array offset for the first element in the outer dimension
                            long ix1 = in1.Shape[counters];
                            long ix3 = @out.Shape[counters];


                            for (long i = 0; i < opsOuter; i++)
                            {
                                for (long j = 0; j < opsInner; j++)
                                {
                                    for (long k = 0; k < opsInnerInner; k++)
                                    {
                                        d2[ix3] = (System.Single)(Math.Cosh(d1[ix1]));
                                        ix1 += innerInnerStride1;
                                        ix3 += innerInnerStride3;
                                    }

                                    ix1 += innerStride1;
                                    ix3 += innerStride3;
                                }

                                ix1 += outerStride1;
                                ix3 += outerStride3;
                            }

                            if (counters.LongLength > 0)
                            {
                                //Basically a ripple carry adder
                                long p = counters.LongLength - 1;
                                while (++counters[p] == limits[p] && p > 0)
                                {
                                    counters[p] = 0;
                                    p--;
                                }
                            }
                        }
                    }
                }
            }
        }

        /// <summary>
        /// Unsafe implementation of applying a unary operation
        /// </summary>
        /// <typeparam name="C">The type of operation to perform</typeparam>
        /// <param name="op">The operation instance</param>
        /// <param name="scalar">The input scalar argument</param>
        /// <param name="out">The output target</param>
        internal static void UFunc_Op_Inner_Unary_Scalar_Flush_Single_TypedImpl<C>(NumCIL.Float.Cosh op, System.Single scalar, NdArray<System.Single> @out)
            where C : IUnaryOp<System.Single>
        {
            unsafe
            {
                using (var f2 = new Pinner(@out.DataAccessor))
                {
                    var d2 = (System.Single*)f2.ptr;

                    if (@out.Shape.Dimensions.Length == 1)
                    {
                        long totalOps = @out.Shape.Dimensions[0].Length;
                        long ix2 = @out.Shape.Offset;
                        long stride2 = @out.Shape.Dimensions[0].Stride;

                        for (long i = 0; i < totalOps; i++)
                        {
                            d2[ix2] = (System.Single)(Math.Cosh(scalar));
                            ix2 += stride2;
                        }
                    }
                    else if (@out.Shape.Dimensions.Length == 2)
                    {
                        long opsOuter = @out.Shape.Dimensions[0].Length;
                        long opsInner = @out.Shape.Dimensions[1].Length;

                        long ix2 = @out.Shape.Offset;
                        long outerStride2 = @out.Shape.Dimensions[0].Stride;
                        long innerStride2 = @out.Shape.Dimensions[1].Stride;
                        outerStride2 -= innerStride2 * @out.Shape.Dimensions[1].Length;

                        for (long i = 0; i < opsOuter; i++)
                        {
                            for (long j = 0; j < opsInner; j++)
                            {
                                d2[ix2] = (System.Single)(Math.Cosh(scalar));
                                ix2 += innerStride2;
                            }

                            ix2 += outerStride2;
                        }
                    }
                    else
                    {
                        long n = @out.Shape.Dimensions.LongLength - 3;
                        long[] limits = @out.Shape.Dimensions.Where(x => n-- > 0).Select(x => x.Length).ToArray();
                        long[] counters = new long[limits.LongLength];

                        long totalOps = limits.LongLength == 0 ? 1 : limits.Aggregate<long>((a, b) => a * b);

                        //This chunck of variables are used to prevent repeated calculations of offsets
                        long dimIndex0 = 0 + limits.LongLength;
                        long dimIndex1 = 1 + limits.LongLength;
                        long dimIndex2 = 2 + limits.LongLength;

                        long opsOuter = @out.Shape.Dimensions[0 + limits.LongLength].Length;
                        long opsInner = @out.Shape.Dimensions[1 + limits.LongLength].Length;
                        long opsInnerInner = @out.Shape.Dimensions[2 + limits.LongLength].Length;

                        long outerStride3 = @out.Shape.Dimensions[dimIndex0].Stride;
                        long innerStride3 = @out.Shape.Dimensions[dimIndex1].Stride;
                        long innerInnerStride3 = @out.Shape.Dimensions[dimIndex2].Stride;
                        outerStride3 -= innerStride3 * @out.Shape.Dimensions[dimIndex1].Length;
                        innerStride3 -= innerInnerStride3 * @out.Shape.Dimensions[dimIndex2].Length;

                        for (long outer = 0; outer < totalOps; outer++)
                        {
                            //Get the array offset for the first element in the outer dimension
                            long ix3 = @out.Shape[counters];

                            for (long i = 0; i < opsOuter; i++)
                            {
                                for (long j = 0; j < opsInner; j++)
                                {
                                    for (long k = 0; k < opsInnerInner; k++)
                                    {
                                        d2[ix3] = (System.Single)(Math.Cosh(scalar));
                                        ix3 += innerInnerStride3;
                                    }

                                    ix3 += innerStride3;
                                }

                                ix3 += outerStride3;
                            }

                            if (counters.LongLength > 0)
                            {
                                //Basically a ripple carry adder
                                long p = counters.LongLength - 1;
                                while (++counters[p] == limits[p] && p > 0)
                                {
                                    counters[p] = 0;
                                    p--;
                                }
                            }
                        }
                    }
                }
            }
        }
        /// <summary>
        /// Unsafe implementation of applying a unary operation
        /// </summary>
        /// <typeparam name="C">The type of operation to perform</typeparam>
        /// <param name="op">The operation instance</param>
        /// <param name="in1">The input argument</param>
        /// <param name="out">The output target</param>
        internal static void UFunc_Op_Inner_Unary_Flush_Double_TypedImpl<C>(NumCIL.Double.Cosh op, NdArray<System.Double> in1, NdArray<System.Double> @out)
            where C : IUnaryOp<System.Double>
        {
            unsafe
            {
                using (var f1 = new Pinner(in1.DataAccessor))
                using (var f2 = new Pinner(@out.DataAccessor))
                {
                    var d1 = (System.Double*)f1.ptr;
                    var d2 = (System.Double*)f2.ptr;

                    if (@out.Shape.Dimensions.Length == 1)
                    {
                        long totalOps = @out.Shape.Dimensions[0].Length;

                        long ix1 = in1.Shape.Offset;
                        long ix2 = @out.Shape.Offset;

                        long stride1 = in1.Shape.Dimensions[0].Stride;
                        long stride2 = @out.Shape.Dimensions[0].Stride;


                        if (stride1 == stride2 && ix1 == ix2)
                        {
                            //Best case, all are equal, just keep a single counter
                            for (long i = 0; i < totalOps; i++)
                            {
                                d2[ix1] = (System.Double)(Math.Cosh(d1[ix1]));
                                ix1 += stride1;
                            }
                        }
                        else
                        {
                            for (long i = 0; i < totalOps; i++)
                            {
                                d2[ix2] = (System.Double)(Math.Cosh(d1[ix1]));
                                ix1 += stride1;
                                ix2 += stride2;
                            }
                        }
                    }
                    else if (@out.Shape.Dimensions.Length == 2)
                    {
                        long opsOuter = @out.Shape.Dimensions[0].Length;
                        long opsInner = @out.Shape.Dimensions[1].Length;

                        long ix1 = in1.Shape.Offset;
                        long ix2 = @out.Shape.Offset;

                        long outerStride1 = in1.Shape.Dimensions[0].Stride;
                        long outerStride2 = @out.Shape.Dimensions[0].Stride;

                        long innerStride1 = in1.Shape.Dimensions[1].Stride;
                        long innerStride2 = @out.Shape.Dimensions[1].Stride;

                        outerStride1 -= innerStride1 * in1.Shape.Dimensions[1].Length;
                        outerStride2 -= innerStride2 * @out.Shape.Dimensions[1].Length;

                        for (long i = 0; i < opsOuter; i++)
                        {
                            for (long j = 0; j < opsInner; j++)
                            {
                                d2[ix2] = (System.Double)(Math.Cosh(d1[ix1]));
                                ix1 += innerStride1;
                                ix2 += innerStride2;
                            }

                            ix1 += outerStride1;
                            ix2 += outerStride2;
                        }
                    }
                    else
                    {
                        long n = in1.Shape.Dimensions.LongLength - 3;
                        long[] limits = in1.Shape.Dimensions.Where(x => n-- > 0).Select(x => x.Length).ToArray();
                        long[] counters = new long[limits.LongLength];

                        long totalOps = limits.LongLength == 0 ? 1 : limits.Aggregate<long>((a, b) => a * b);

                        //This chunck of variables are used to prevent repeated calculations of offsets
                        long dimIndex0 = 0 + limits.LongLength;
                        long dimIndex1 = 1 + limits.LongLength;
                        long dimIndex2 = 2 + limits.LongLength;

                        long opsOuter = @out.Shape.Dimensions[0 + limits.LongLength].Length;
                        long opsInner = @out.Shape.Dimensions[1 + limits.LongLength].Length;
                        long opsInnerInner = @out.Shape.Dimensions[2 + limits.LongLength].Length;

                        long outerStride1 = in1.Shape.Dimensions[dimIndex0].Stride;
                        long outerStride3 = @out.Shape.Dimensions[dimIndex0].Stride;

                        long innerStride1 = in1.Shape.Dimensions[dimIndex1].Stride;
                        long innerStride3 = @out.Shape.Dimensions[dimIndex1].Stride;

                        long innerInnerStride1 = in1.Shape.Dimensions[dimIndex2].Stride;
                        long innerInnerStride3 = @out.Shape.Dimensions[dimIndex2].Stride;

                        outerStride1 -= innerStride1 * in1.Shape.Dimensions[dimIndex1].Length;
                        outerStride3 -= innerStride3 * @out.Shape.Dimensions[dimIndex1].Length;

                        innerStride1 -= innerInnerStride1 * in1.Shape.Dimensions[dimIndex2].Length;
                        innerStride3 -= innerInnerStride3 * @out.Shape.Dimensions[dimIndex2].Length;

                        for (long outer = 0; outer < totalOps; outer++)
                        {
                            //Get the array offset for the first element in the outer dimension
                            long ix1 = in1.Shape[counters];
                            long ix3 = @out.Shape[counters];


                            for (long i = 0; i < opsOuter; i++)
                            {
                                for (long j = 0; j < opsInner; j++)
                                {
                                    for (long k = 0; k < opsInnerInner; k++)
                                    {
                                        d2[ix3] = (System.Double)(Math.Cosh(d1[ix1]));
                                        ix1 += innerInnerStride1;
                                        ix3 += innerInnerStride3;
                                    }

                                    ix1 += innerStride1;
                                    ix3 += innerStride3;
                                }

                                ix1 += outerStride1;
                                ix3 += outerStride3;
                            }

                            if (counters.LongLength > 0)
                            {
                                //Basically a ripple carry adder
                                long p = counters.LongLength - 1;
                                while (++counters[p] == limits[p] && p > 0)
                                {
                                    counters[p] = 0;
                                    p--;
                                }
                            }
                        }
                    }
                }
            }
        }

        /// <summary>
        /// Unsafe implementation of applying a unary operation
        /// </summary>
        /// <typeparam name="C">The type of operation to perform</typeparam>
        /// <param name="op">The operation instance</param>
        /// <param name="scalar">The input scalar argument</param>
        /// <param name="out">The output target</param>
        internal static void UFunc_Op_Inner_Unary_Scalar_Flush_Double_TypedImpl<C>(NumCIL.Double.Cosh op, System.Double scalar, NdArray<System.Double> @out)
            where C : IUnaryOp<System.Double>
        {
            unsafe
            {
                using (var f2 = new Pinner(@out.DataAccessor))
                {
                    var d2 = (System.Double*)f2.ptr;

                    if (@out.Shape.Dimensions.Length == 1)
                    {
                        long totalOps = @out.Shape.Dimensions[0].Length;
                        long ix2 = @out.Shape.Offset;
                        long stride2 = @out.Shape.Dimensions[0].Stride;

                        for (long i = 0; i < totalOps; i++)
                        {
                            d2[ix2] = (System.Double)(Math.Cosh(scalar));
                            ix2 += stride2;
                        }
                    }
                    else if (@out.Shape.Dimensions.Length == 2)
                    {
                        long opsOuter = @out.Shape.Dimensions[0].Length;
                        long opsInner = @out.Shape.Dimensions[1].Length;

                        long ix2 = @out.Shape.Offset;
                        long outerStride2 = @out.Shape.Dimensions[0].Stride;
                        long innerStride2 = @out.Shape.Dimensions[1].Stride;
                        outerStride2 -= innerStride2 * @out.Shape.Dimensions[1].Length;

                        for (long i = 0; i < opsOuter; i++)
                        {
                            for (long j = 0; j < opsInner; j++)
                            {
                                d2[ix2] = (System.Double)(Math.Cosh(scalar));
                                ix2 += innerStride2;
                            }

                            ix2 += outerStride2;
                        }
                    }
                    else
                    {
                        long n = @out.Shape.Dimensions.LongLength - 3;
                        long[] limits = @out.Shape.Dimensions.Where(x => n-- > 0).Select(x => x.Length).ToArray();
                        long[] counters = new long[limits.LongLength];

                        long totalOps = limits.LongLength == 0 ? 1 : limits.Aggregate<long>((a, b) => a * b);

                        //This chunck of variables are used to prevent repeated calculations of offsets
                        long dimIndex0 = 0 + limits.LongLength;
                        long dimIndex1 = 1 + limits.LongLength;
                        long dimIndex2 = 2 + limits.LongLength;

                        long opsOuter = @out.Shape.Dimensions[0 + limits.LongLength].Length;
                        long opsInner = @out.Shape.Dimensions[1 + limits.LongLength].Length;
                        long opsInnerInner = @out.Shape.Dimensions[2 + limits.LongLength].Length;

                        long outerStride3 = @out.Shape.Dimensions[dimIndex0].Stride;
                        long innerStride3 = @out.Shape.Dimensions[dimIndex1].Stride;
                        long innerInnerStride3 = @out.Shape.Dimensions[dimIndex2].Stride;
                        outerStride3 -= innerStride3 * @out.Shape.Dimensions[dimIndex1].Length;
                        innerStride3 -= innerInnerStride3 * @out.Shape.Dimensions[dimIndex2].Length;

                        for (long outer = 0; outer < totalOps; outer++)
                        {
                            //Get the array offset for the first element in the outer dimension
                            long ix3 = @out.Shape[counters];

                            for (long i = 0; i < opsOuter; i++)
                            {
                                for (long j = 0; j < opsInner; j++)
                                {
                                    for (long k = 0; k < opsInnerInner; k++)
                                    {
                                        d2[ix3] = (System.Double)(Math.Cosh(scalar));
                                        ix3 += innerInnerStride3;
                                    }

                                    ix3 += innerStride3;
                                }

                                ix3 += outerStride3;
                            }

                            if (counters.LongLength > 0)
                            {
                                //Basically a ripple carry adder
                                long p = counters.LongLength - 1;
                                while (++counters[p] == limits[p] && p > 0)
                                {
                                    counters[p] = 0;
                                    p--;
                                }
                            }
                        }
                    }
                }
            }
        }
        /// <summary>
        /// Unsafe implementation of applying a unary operation
        /// </summary>
        /// <typeparam name="C">The type of operation to perform</typeparam>
        /// <param name="op">The operation instance</param>
        /// <param name="in1">The input argument</param>
        /// <param name="out">The output target</param>
        internal static void UFunc_Op_Inner_Unary_Flush_SByte_TypedImpl<C>(NumCIL.Int8.Tanh op, NdArray<System.SByte> in1, NdArray<System.SByte> @out)
            where C : IUnaryOp<System.SByte>
        {
            unsafe
            {
                using (var f1 = new Pinner(in1.DataAccessor))
                using (var f2 = new Pinner(@out.DataAccessor))
                {
                    var d1 = (System.SByte*)f1.ptr;
                    var d2 = (System.SByte*)f2.ptr;

                    if (@out.Shape.Dimensions.Length == 1)
                    {
                        long totalOps = @out.Shape.Dimensions[0].Length;

                        long ix1 = in1.Shape.Offset;
                        long ix2 = @out.Shape.Offset;

                        long stride1 = in1.Shape.Dimensions[0].Stride;
                        long stride2 = @out.Shape.Dimensions[0].Stride;


                        if (stride1 == stride2 && ix1 == ix2)
                        {
                            //Best case, all are equal, just keep a single counter
                            for (long i = 0; i < totalOps; i++)
                            {
                                d2[ix1] = (System.SByte)(Math.Tanh(d1[ix1]));
                                ix1 += stride1;
                            }
                        }
                        else
                        {
                            for (long i = 0; i < totalOps; i++)
                            {
                                d2[ix2] = (System.SByte)(Math.Tanh(d1[ix1]));
                                ix1 += stride1;
                                ix2 += stride2;
                            }
                        }
                    }
                    else if (@out.Shape.Dimensions.Length == 2)
                    {
                        long opsOuter = @out.Shape.Dimensions[0].Length;
                        long opsInner = @out.Shape.Dimensions[1].Length;

                        long ix1 = in1.Shape.Offset;
                        long ix2 = @out.Shape.Offset;

                        long outerStride1 = in1.Shape.Dimensions[0].Stride;
                        long outerStride2 = @out.Shape.Dimensions[0].Stride;

                        long innerStride1 = in1.Shape.Dimensions[1].Stride;
                        long innerStride2 = @out.Shape.Dimensions[1].Stride;

                        outerStride1 -= innerStride1 * in1.Shape.Dimensions[1].Length;
                        outerStride2 -= innerStride2 * @out.Shape.Dimensions[1].Length;

                        for (long i = 0; i < opsOuter; i++)
                        {
                            for (long j = 0; j < opsInner; j++)
                            {
                                d2[ix2] = (System.SByte)(Math.Tanh(d1[ix1]));
                                ix1 += innerStride1;
                                ix2 += innerStride2;
                            }

                            ix1 += outerStride1;
                            ix2 += outerStride2;
                        }
                    }
                    else
                    {
                        long n = in1.Shape.Dimensions.LongLength - 3;
                        long[] limits = in1.Shape.Dimensions.Where(x => n-- > 0).Select(x => x.Length).ToArray();
                        long[] counters = new long[limits.LongLength];

                        long totalOps = limits.LongLength == 0 ? 1 : limits.Aggregate<long>((a, b) => a * b);

                        //This chunck of variables are used to prevent repeated calculations of offsets
                        long dimIndex0 = 0 + limits.LongLength;
                        long dimIndex1 = 1 + limits.LongLength;
                        long dimIndex2 = 2 + limits.LongLength;

                        long opsOuter = @out.Shape.Dimensions[0 + limits.LongLength].Length;
                        long opsInner = @out.Shape.Dimensions[1 + limits.LongLength].Length;
                        long opsInnerInner = @out.Shape.Dimensions[2 + limits.LongLength].Length;

                        long outerStride1 = in1.Shape.Dimensions[dimIndex0].Stride;
                        long outerStride3 = @out.Shape.Dimensions[dimIndex0].Stride;

                        long innerStride1 = in1.Shape.Dimensions[dimIndex1].Stride;
                        long innerStride3 = @out.Shape.Dimensions[dimIndex1].Stride;

                        long innerInnerStride1 = in1.Shape.Dimensions[dimIndex2].Stride;
                        long innerInnerStride3 = @out.Shape.Dimensions[dimIndex2].Stride;

                        outerStride1 -= innerStride1 * in1.Shape.Dimensions[dimIndex1].Length;
                        outerStride3 -= innerStride3 * @out.Shape.Dimensions[dimIndex1].Length;

                        innerStride1 -= innerInnerStride1 * in1.Shape.Dimensions[dimIndex2].Length;
                        innerStride3 -= innerInnerStride3 * @out.Shape.Dimensions[dimIndex2].Length;

                        for (long outer = 0; outer < totalOps; outer++)
                        {
                            //Get the array offset for the first element in the outer dimension
                            long ix1 = in1.Shape[counters];
                            long ix3 = @out.Shape[counters];


                            for (long i = 0; i < opsOuter; i++)
                            {
                                for (long j = 0; j < opsInner; j++)
                                {
                                    for (long k = 0; k < opsInnerInner; k++)
                                    {
                                        d2[ix3] = (System.SByte)(Math.Tanh(d1[ix1]));
                                        ix1 += innerInnerStride1;
                                        ix3 += innerInnerStride3;
                                    }

                                    ix1 += innerStride1;
                                    ix3 += innerStride3;
                                }

                                ix1 += outerStride1;
                                ix3 += outerStride3;
                            }

                            if (counters.LongLength > 0)
                            {
                                //Basically a ripple carry adder
                                long p = counters.LongLength - 1;
                                while (++counters[p] == limits[p] && p > 0)
                                {
                                    counters[p] = 0;
                                    p--;
                                }
                            }
                        }
                    }
                }
            }
        }

        /// <summary>
        /// Unsafe implementation of applying a unary operation
        /// </summary>
        /// <typeparam name="C">The type of operation to perform</typeparam>
        /// <param name="op">The operation instance</param>
        /// <param name="scalar">The input scalar argument</param>
        /// <param name="out">The output target</param>
        internal static void UFunc_Op_Inner_Unary_Scalar_Flush_SByte_TypedImpl<C>(NumCIL.Int8.Tanh op, System.SByte scalar, NdArray<System.SByte> @out)
            where C : IUnaryOp<System.SByte>
        {
            unsafe
            {
                using (var f2 = new Pinner(@out.DataAccessor))
                {
                    var d2 = (System.SByte*)f2.ptr;

                    if (@out.Shape.Dimensions.Length == 1)
                    {
                        long totalOps = @out.Shape.Dimensions[0].Length;
                        long ix2 = @out.Shape.Offset;
                        long stride2 = @out.Shape.Dimensions[0].Stride;

                        for (long i = 0; i < totalOps; i++)
                        {
                            d2[ix2] = (System.SByte)(Math.Tanh(scalar));
                            ix2 += stride2;
                        }
                    }
                    else if (@out.Shape.Dimensions.Length == 2)
                    {
                        long opsOuter = @out.Shape.Dimensions[0].Length;
                        long opsInner = @out.Shape.Dimensions[1].Length;

                        long ix2 = @out.Shape.Offset;
                        long outerStride2 = @out.Shape.Dimensions[0].Stride;
                        long innerStride2 = @out.Shape.Dimensions[1].Stride;
                        outerStride2 -= innerStride2 * @out.Shape.Dimensions[1].Length;

                        for (long i = 0; i < opsOuter; i++)
                        {
                            for (long j = 0; j < opsInner; j++)
                            {
                                d2[ix2] = (System.SByte)(Math.Tanh(scalar));
                                ix2 += innerStride2;
                            }

                            ix2 += outerStride2;
                        }
                    }
                    else
                    {
                        long n = @out.Shape.Dimensions.LongLength - 3;
                        long[] limits = @out.Shape.Dimensions.Where(x => n-- > 0).Select(x => x.Length).ToArray();
                        long[] counters = new long[limits.LongLength];

                        long totalOps = limits.LongLength == 0 ? 1 : limits.Aggregate<long>((a, b) => a * b);

                        //This chunck of variables are used to prevent repeated calculations of offsets
                        long dimIndex0 = 0 + limits.LongLength;
                        long dimIndex1 = 1 + limits.LongLength;
                        long dimIndex2 = 2 + limits.LongLength;

                        long opsOuter = @out.Shape.Dimensions[0 + limits.LongLength].Length;
                        long opsInner = @out.Shape.Dimensions[1 + limits.LongLength].Length;
                        long opsInnerInner = @out.Shape.Dimensions[2 + limits.LongLength].Length;

                        long outerStride3 = @out.Shape.Dimensions[dimIndex0].Stride;
                        long innerStride3 = @out.Shape.Dimensions[dimIndex1].Stride;
                        long innerInnerStride3 = @out.Shape.Dimensions[dimIndex2].Stride;
                        outerStride3 -= innerStride3 * @out.Shape.Dimensions[dimIndex1].Length;
                        innerStride3 -= innerInnerStride3 * @out.Shape.Dimensions[dimIndex2].Length;

                        for (long outer = 0; outer < totalOps; outer++)
                        {
                            //Get the array offset for the first element in the outer dimension
                            long ix3 = @out.Shape[counters];

                            for (long i = 0; i < opsOuter; i++)
                            {
                                for (long j = 0; j < opsInner; j++)
                                {
                                    for (long k = 0; k < opsInnerInner; k++)
                                    {
                                        d2[ix3] = (System.SByte)(Math.Tanh(scalar));
                                        ix3 += innerInnerStride3;
                                    }

                                    ix3 += innerStride3;
                                }

                                ix3 += outerStride3;
                            }

                            if (counters.LongLength > 0)
                            {
                                //Basically a ripple carry adder
                                long p = counters.LongLength - 1;
                                while (++counters[p] == limits[p] && p > 0)
                                {
                                    counters[p] = 0;
                                    p--;
                                }
                            }
                        }
                    }
                }
            }
        }
        /// <summary>
        /// Unsafe implementation of applying a unary operation
        /// </summary>
        /// <typeparam name="C">The type of operation to perform</typeparam>
        /// <param name="op">The operation instance</param>
        /// <param name="in1">The input argument</param>
        /// <param name="out">The output target</param>
        internal static void UFunc_Op_Inner_Unary_Flush_Byte_TypedImpl<C>(NumCIL.UInt8.Tanh op, NdArray<System.Byte> in1, NdArray<System.Byte> @out)
            where C : IUnaryOp<System.Byte>
        {
            unsafe
            {
                using (var f1 = new Pinner(in1.DataAccessor))
                using (var f2 = new Pinner(@out.DataAccessor))
                {
                    var d1 = (System.Byte*)f1.ptr;
                    var d2 = (System.Byte*)f2.ptr;

                    if (@out.Shape.Dimensions.Length == 1)
                    {
                        long totalOps = @out.Shape.Dimensions[0].Length;

                        long ix1 = in1.Shape.Offset;
                        long ix2 = @out.Shape.Offset;

                        long stride1 = in1.Shape.Dimensions[0].Stride;
                        long stride2 = @out.Shape.Dimensions[0].Stride;


                        if (stride1 == stride2 && ix1 == ix2)
                        {
                            //Best case, all are equal, just keep a single counter
                            for (long i = 0; i < totalOps; i++)
                            {
                                d2[ix1] = (System.Byte)(Math.Tanh(d1[ix1]));
                                ix1 += stride1;
                            }
                        }
                        else
                        {
                            for (long i = 0; i < totalOps; i++)
                            {
                                d2[ix2] = (System.Byte)(Math.Tanh(d1[ix1]));
                                ix1 += stride1;
                                ix2 += stride2;
                            }
                        }
                    }
                    else if (@out.Shape.Dimensions.Length == 2)
                    {
                        long opsOuter = @out.Shape.Dimensions[0].Length;
                        long opsInner = @out.Shape.Dimensions[1].Length;

                        long ix1 = in1.Shape.Offset;
                        long ix2 = @out.Shape.Offset;

                        long outerStride1 = in1.Shape.Dimensions[0].Stride;
                        long outerStride2 = @out.Shape.Dimensions[0].Stride;

                        long innerStride1 = in1.Shape.Dimensions[1].Stride;
                        long innerStride2 = @out.Shape.Dimensions[1].Stride;

                        outerStride1 -= innerStride1 * in1.Shape.Dimensions[1].Length;
                        outerStride2 -= innerStride2 * @out.Shape.Dimensions[1].Length;

                        for (long i = 0; i < opsOuter; i++)
                        {
                            for (long j = 0; j < opsInner; j++)
                            {
                                d2[ix2] = (System.Byte)(Math.Tanh(d1[ix1]));
                                ix1 += innerStride1;
                                ix2 += innerStride2;
                            }

                            ix1 += outerStride1;
                            ix2 += outerStride2;
                        }
                    }
                    else
                    {
                        long n = in1.Shape.Dimensions.LongLength - 3;
                        long[] limits = in1.Shape.Dimensions.Where(x => n-- > 0).Select(x => x.Length).ToArray();
                        long[] counters = new long[limits.LongLength];

                        long totalOps = limits.LongLength == 0 ? 1 : limits.Aggregate<long>((a, b) => a * b);

                        //This chunck of variables are used to prevent repeated calculations of offsets
                        long dimIndex0 = 0 + limits.LongLength;
                        long dimIndex1 = 1 + limits.LongLength;
                        long dimIndex2 = 2 + limits.LongLength;

                        long opsOuter = @out.Shape.Dimensions[0 + limits.LongLength].Length;
                        long opsInner = @out.Shape.Dimensions[1 + limits.LongLength].Length;
                        long opsInnerInner = @out.Shape.Dimensions[2 + limits.LongLength].Length;

                        long outerStride1 = in1.Shape.Dimensions[dimIndex0].Stride;
                        long outerStride3 = @out.Shape.Dimensions[dimIndex0].Stride;

                        long innerStride1 = in1.Shape.Dimensions[dimIndex1].Stride;
                        long innerStride3 = @out.Shape.Dimensions[dimIndex1].Stride;

                        long innerInnerStride1 = in1.Shape.Dimensions[dimIndex2].Stride;
                        long innerInnerStride3 = @out.Shape.Dimensions[dimIndex2].Stride;

                        outerStride1 -= innerStride1 * in1.Shape.Dimensions[dimIndex1].Length;
                        outerStride3 -= innerStride3 * @out.Shape.Dimensions[dimIndex1].Length;

                        innerStride1 -= innerInnerStride1 * in1.Shape.Dimensions[dimIndex2].Length;
                        innerStride3 -= innerInnerStride3 * @out.Shape.Dimensions[dimIndex2].Length;

                        for (long outer = 0; outer < totalOps; outer++)
                        {
                            //Get the array offset for the first element in the outer dimension
                            long ix1 = in1.Shape[counters];
                            long ix3 = @out.Shape[counters];


                            for (long i = 0; i < opsOuter; i++)
                            {
                                for (long j = 0; j < opsInner; j++)
                                {
                                    for (long k = 0; k < opsInnerInner; k++)
                                    {
                                        d2[ix3] = (System.Byte)(Math.Tanh(d1[ix1]));
                                        ix1 += innerInnerStride1;
                                        ix3 += innerInnerStride3;
                                    }

                                    ix1 += innerStride1;
                                    ix3 += innerStride3;
                                }

                                ix1 += outerStride1;
                                ix3 += outerStride3;
                            }

                            if (counters.LongLength > 0)
                            {
                                //Basically a ripple carry adder
                                long p = counters.LongLength - 1;
                                while (++counters[p] == limits[p] && p > 0)
                                {
                                    counters[p] = 0;
                                    p--;
                                }
                            }
                        }
                    }
                }
            }
        }

        /// <summary>
        /// Unsafe implementation of applying a unary operation
        /// </summary>
        /// <typeparam name="C">The type of operation to perform</typeparam>
        /// <param name="op">The operation instance</param>
        /// <param name="scalar">The input scalar argument</param>
        /// <param name="out">The output target</param>
        internal static void UFunc_Op_Inner_Unary_Scalar_Flush_Byte_TypedImpl<C>(NumCIL.UInt8.Tanh op, System.Byte scalar, NdArray<System.Byte> @out)
            where C : IUnaryOp<System.Byte>
        {
            unsafe
            {
                using (var f2 = new Pinner(@out.DataAccessor))
                {
                    var d2 = (System.Byte*)f2.ptr;

                    if (@out.Shape.Dimensions.Length == 1)
                    {
                        long totalOps = @out.Shape.Dimensions[0].Length;
                        long ix2 = @out.Shape.Offset;
                        long stride2 = @out.Shape.Dimensions[0].Stride;

                        for (long i = 0; i < totalOps; i++)
                        {
                            d2[ix2] = (System.Byte)(Math.Tanh(scalar));
                            ix2 += stride2;
                        }
                    }
                    else if (@out.Shape.Dimensions.Length == 2)
                    {
                        long opsOuter = @out.Shape.Dimensions[0].Length;
                        long opsInner = @out.Shape.Dimensions[1].Length;

                        long ix2 = @out.Shape.Offset;
                        long outerStride2 = @out.Shape.Dimensions[0].Stride;
                        long innerStride2 = @out.Shape.Dimensions[1].Stride;
                        outerStride2 -= innerStride2 * @out.Shape.Dimensions[1].Length;

                        for (long i = 0; i < opsOuter; i++)
                        {
                            for (long j = 0; j < opsInner; j++)
                            {
                                d2[ix2] = (System.Byte)(Math.Tanh(scalar));
                                ix2 += innerStride2;
                            }

                            ix2 += outerStride2;
                        }
                    }
                    else
                    {
                        long n = @out.Shape.Dimensions.LongLength - 3;
                        long[] limits = @out.Shape.Dimensions.Where(x => n-- > 0).Select(x => x.Length).ToArray();
                        long[] counters = new long[limits.LongLength];

                        long totalOps = limits.LongLength == 0 ? 1 : limits.Aggregate<long>((a, b) => a * b);

                        //This chunck of variables are used to prevent repeated calculations of offsets
                        long dimIndex0 = 0 + limits.LongLength;
                        long dimIndex1 = 1 + limits.LongLength;
                        long dimIndex2 = 2 + limits.LongLength;

                        long opsOuter = @out.Shape.Dimensions[0 + limits.LongLength].Length;
                        long opsInner = @out.Shape.Dimensions[1 + limits.LongLength].Length;
                        long opsInnerInner = @out.Shape.Dimensions[2 + limits.LongLength].Length;

                        long outerStride3 = @out.Shape.Dimensions[dimIndex0].Stride;
                        long innerStride3 = @out.Shape.Dimensions[dimIndex1].Stride;
                        long innerInnerStride3 = @out.Shape.Dimensions[dimIndex2].Stride;
                        outerStride3 -= innerStride3 * @out.Shape.Dimensions[dimIndex1].Length;
                        innerStride3 -= innerInnerStride3 * @out.Shape.Dimensions[dimIndex2].Length;

                        for (long outer = 0; outer < totalOps; outer++)
                        {
                            //Get the array offset for the first element in the outer dimension
                            long ix3 = @out.Shape[counters];

                            for (long i = 0; i < opsOuter; i++)
                            {
                                for (long j = 0; j < opsInner; j++)
                                {
                                    for (long k = 0; k < opsInnerInner; k++)
                                    {
                                        d2[ix3] = (System.Byte)(Math.Tanh(scalar));
                                        ix3 += innerInnerStride3;
                                    }

                                    ix3 += innerStride3;
                                }

                                ix3 += outerStride3;
                            }

                            if (counters.LongLength > 0)
                            {
                                //Basically a ripple carry adder
                                long p = counters.LongLength - 1;
                                while (++counters[p] == limits[p] && p > 0)
                                {
                                    counters[p] = 0;
                                    p--;
                                }
                            }
                        }
                    }
                }
            }
        }
        /// <summary>
        /// Unsafe implementation of applying a unary operation
        /// </summary>
        /// <typeparam name="C">The type of operation to perform</typeparam>
        /// <param name="op">The operation instance</param>
        /// <param name="in1">The input argument</param>
        /// <param name="out">The output target</param>
        internal static void UFunc_Op_Inner_Unary_Flush_Int16_TypedImpl<C>(NumCIL.Int16.Tanh op, NdArray<System.Int16> in1, NdArray<System.Int16> @out)
            where C : IUnaryOp<System.Int16>
        {
            unsafe
            {
                using (var f1 = new Pinner(in1.DataAccessor))
                using (var f2 = new Pinner(@out.DataAccessor))
                {
                    var d1 = (System.Int16*)f1.ptr;
                    var d2 = (System.Int16*)f2.ptr;

                    if (@out.Shape.Dimensions.Length == 1)
                    {
                        long totalOps = @out.Shape.Dimensions[0].Length;

                        long ix1 = in1.Shape.Offset;
                        long ix2 = @out.Shape.Offset;

                        long stride1 = in1.Shape.Dimensions[0].Stride;
                        long stride2 = @out.Shape.Dimensions[0].Stride;


                        if (stride1 == stride2 && ix1 == ix2)
                        {
                            //Best case, all are equal, just keep a single counter
                            for (long i = 0; i < totalOps; i++)
                            {
                                d2[ix1] = (System.Int16)(Math.Tanh(d1[ix1]));
                                ix1 += stride1;
                            }
                        }
                        else
                        {
                            for (long i = 0; i < totalOps; i++)
                            {
                                d2[ix2] = (System.Int16)(Math.Tanh(d1[ix1]));
                                ix1 += stride1;
                                ix2 += stride2;
                            }
                        }
                    }
                    else if (@out.Shape.Dimensions.Length == 2)
                    {
                        long opsOuter = @out.Shape.Dimensions[0].Length;
                        long opsInner = @out.Shape.Dimensions[1].Length;

                        long ix1 = in1.Shape.Offset;
                        long ix2 = @out.Shape.Offset;

                        long outerStride1 = in1.Shape.Dimensions[0].Stride;
                        long outerStride2 = @out.Shape.Dimensions[0].Stride;

                        long innerStride1 = in1.Shape.Dimensions[1].Stride;
                        long innerStride2 = @out.Shape.Dimensions[1].Stride;

                        outerStride1 -= innerStride1 * in1.Shape.Dimensions[1].Length;
                        outerStride2 -= innerStride2 * @out.Shape.Dimensions[1].Length;

                        for (long i = 0; i < opsOuter; i++)
                        {
                            for (long j = 0; j < opsInner; j++)
                            {
                                d2[ix2] = (System.Int16)(Math.Tanh(d1[ix1]));
                                ix1 += innerStride1;
                                ix2 += innerStride2;
                            }

                            ix1 += outerStride1;
                            ix2 += outerStride2;
                        }
                    }
                    else
                    {
                        long n = in1.Shape.Dimensions.LongLength - 3;
                        long[] limits = in1.Shape.Dimensions.Where(x => n-- > 0).Select(x => x.Length).ToArray();
                        long[] counters = new long[limits.LongLength];

                        long totalOps = limits.LongLength == 0 ? 1 : limits.Aggregate<long>((a, b) => a * b);

                        //This chunck of variables are used to prevent repeated calculations of offsets
                        long dimIndex0 = 0 + limits.LongLength;
                        long dimIndex1 = 1 + limits.LongLength;
                        long dimIndex2 = 2 + limits.LongLength;

                        long opsOuter = @out.Shape.Dimensions[0 + limits.LongLength].Length;
                        long opsInner = @out.Shape.Dimensions[1 + limits.LongLength].Length;
                        long opsInnerInner = @out.Shape.Dimensions[2 + limits.LongLength].Length;

                        long outerStride1 = in1.Shape.Dimensions[dimIndex0].Stride;
                        long outerStride3 = @out.Shape.Dimensions[dimIndex0].Stride;

                        long innerStride1 = in1.Shape.Dimensions[dimIndex1].Stride;
                        long innerStride3 = @out.Shape.Dimensions[dimIndex1].Stride;

                        long innerInnerStride1 = in1.Shape.Dimensions[dimIndex2].Stride;
                        long innerInnerStride3 = @out.Shape.Dimensions[dimIndex2].Stride;

                        outerStride1 -= innerStride1 * in1.Shape.Dimensions[dimIndex1].Length;
                        outerStride3 -= innerStride3 * @out.Shape.Dimensions[dimIndex1].Length;

                        innerStride1 -= innerInnerStride1 * in1.Shape.Dimensions[dimIndex2].Length;
                        innerStride3 -= innerInnerStride3 * @out.Shape.Dimensions[dimIndex2].Length;

                        for (long outer = 0; outer < totalOps; outer++)
                        {
                            //Get the array offset for the first element in the outer dimension
                            long ix1 = in1.Shape[counters];
                            long ix3 = @out.Shape[counters];


                            for (long i = 0; i < opsOuter; i++)
                            {
                                for (long j = 0; j < opsInner; j++)
                                {
                                    for (long k = 0; k < opsInnerInner; k++)
                                    {
                                        d2[ix3] = (System.Int16)(Math.Tanh(d1[ix1]));
                                        ix1 += innerInnerStride1;
                                        ix3 += innerInnerStride3;
                                    }

                                    ix1 += innerStride1;
                                    ix3 += innerStride3;
                                }

                                ix1 += outerStride1;
                                ix3 += outerStride3;
                            }

                            if (counters.LongLength > 0)
                            {
                                //Basically a ripple carry adder
                                long p = counters.LongLength - 1;
                                while (++counters[p] == limits[p] && p > 0)
                                {
                                    counters[p] = 0;
                                    p--;
                                }
                            }
                        }
                    }
                }
            }
        }

        /// <summary>
        /// Unsafe implementation of applying a unary operation
        /// </summary>
        /// <typeparam name="C">The type of operation to perform</typeparam>
        /// <param name="op">The operation instance</param>
        /// <param name="scalar">The input scalar argument</param>
        /// <param name="out">The output target</param>
        internal static void UFunc_Op_Inner_Unary_Scalar_Flush_Int16_TypedImpl<C>(NumCIL.Int16.Tanh op, System.Int16 scalar, NdArray<System.Int16> @out)
            where C : IUnaryOp<System.Int16>
        {
            unsafe
            {
                using (var f2 = new Pinner(@out.DataAccessor))
                {
                    var d2 = (System.Int16*)f2.ptr;

                    if (@out.Shape.Dimensions.Length == 1)
                    {
                        long totalOps = @out.Shape.Dimensions[0].Length;
                        long ix2 = @out.Shape.Offset;
                        long stride2 = @out.Shape.Dimensions[0].Stride;

                        for (long i = 0; i < totalOps; i++)
                        {
                            d2[ix2] = (System.Int16)(Math.Tanh(scalar));
                            ix2 += stride2;
                        }
                    }
                    else if (@out.Shape.Dimensions.Length == 2)
                    {
                        long opsOuter = @out.Shape.Dimensions[0].Length;
                        long opsInner = @out.Shape.Dimensions[1].Length;

                        long ix2 = @out.Shape.Offset;
                        long outerStride2 = @out.Shape.Dimensions[0].Stride;
                        long innerStride2 = @out.Shape.Dimensions[1].Stride;
                        outerStride2 -= innerStride2 * @out.Shape.Dimensions[1].Length;

                        for (long i = 0; i < opsOuter; i++)
                        {
                            for (long j = 0; j < opsInner; j++)
                            {
                                d2[ix2] = (System.Int16)(Math.Tanh(scalar));
                                ix2 += innerStride2;
                            }

                            ix2 += outerStride2;
                        }
                    }
                    else
                    {
                        long n = @out.Shape.Dimensions.LongLength - 3;
                        long[] limits = @out.Shape.Dimensions.Where(x => n-- > 0).Select(x => x.Length).ToArray();
                        long[] counters = new long[limits.LongLength];

                        long totalOps = limits.LongLength == 0 ? 1 : limits.Aggregate<long>((a, b) => a * b);

                        //This chunck of variables are used to prevent repeated calculations of offsets
                        long dimIndex0 = 0 + limits.LongLength;
                        long dimIndex1 = 1 + limits.LongLength;
                        long dimIndex2 = 2 + limits.LongLength;

                        long opsOuter = @out.Shape.Dimensions[0 + limits.LongLength].Length;
                        long opsInner = @out.Shape.Dimensions[1 + limits.LongLength].Length;
                        long opsInnerInner = @out.Shape.Dimensions[2 + limits.LongLength].Length;

                        long outerStride3 = @out.Shape.Dimensions[dimIndex0].Stride;
                        long innerStride3 = @out.Shape.Dimensions[dimIndex1].Stride;
                        long innerInnerStride3 = @out.Shape.Dimensions[dimIndex2].Stride;
                        outerStride3 -= innerStride3 * @out.Shape.Dimensions[dimIndex1].Length;
                        innerStride3 -= innerInnerStride3 * @out.Shape.Dimensions[dimIndex2].Length;

                        for (long outer = 0; outer < totalOps; outer++)
                        {
                            //Get the array offset for the first element in the outer dimension
                            long ix3 = @out.Shape[counters];

                            for (long i = 0; i < opsOuter; i++)
                            {
                                for (long j = 0; j < opsInner; j++)
                                {
                                    for (long k = 0; k < opsInnerInner; k++)
                                    {
                                        d2[ix3] = (System.Int16)(Math.Tanh(scalar));
                                        ix3 += innerInnerStride3;
                                    }

                                    ix3 += innerStride3;
                                }

                                ix3 += outerStride3;
                            }

                            if (counters.LongLength > 0)
                            {
                                //Basically a ripple carry adder
                                long p = counters.LongLength - 1;
                                while (++counters[p] == limits[p] && p > 0)
                                {
                                    counters[p] = 0;
                                    p--;
                                }
                            }
                        }
                    }
                }
            }
        }
        /// <summary>
        /// Unsafe implementation of applying a unary operation
        /// </summary>
        /// <typeparam name="C">The type of operation to perform</typeparam>
        /// <param name="op">The operation instance</param>
        /// <param name="in1">The input argument</param>
        /// <param name="out">The output target</param>
        internal static void UFunc_Op_Inner_Unary_Flush_UInt16_TypedImpl<C>(NumCIL.UInt16.Tanh op, NdArray<System.UInt16> in1, NdArray<System.UInt16> @out)
            where C : IUnaryOp<System.UInt16>
        {
            unsafe
            {
                using (var f1 = new Pinner(in1.DataAccessor))
                using (var f2 = new Pinner(@out.DataAccessor))
                {
                    var d1 = (System.UInt16*)f1.ptr;
                    var d2 = (System.UInt16*)f2.ptr;

                    if (@out.Shape.Dimensions.Length == 1)
                    {
                        long totalOps = @out.Shape.Dimensions[0].Length;

                        long ix1 = in1.Shape.Offset;
                        long ix2 = @out.Shape.Offset;

                        long stride1 = in1.Shape.Dimensions[0].Stride;
                        long stride2 = @out.Shape.Dimensions[0].Stride;


                        if (stride1 == stride2 && ix1 == ix2)
                        {
                            //Best case, all are equal, just keep a single counter
                            for (long i = 0; i < totalOps; i++)
                            {
                                d2[ix1] = (System.UInt16)(Math.Tanh(d1[ix1]));
                                ix1 += stride1;
                            }
                        }
                        else
                        {
                            for (long i = 0; i < totalOps; i++)
                            {
                                d2[ix2] = (System.UInt16)(Math.Tanh(d1[ix1]));
                                ix1 += stride1;
                                ix2 += stride2;
                            }
                        }
                    }
                    else if (@out.Shape.Dimensions.Length == 2)
                    {
                        long opsOuter = @out.Shape.Dimensions[0].Length;
                        long opsInner = @out.Shape.Dimensions[1].Length;

                        long ix1 = in1.Shape.Offset;
                        long ix2 = @out.Shape.Offset;

                        long outerStride1 = in1.Shape.Dimensions[0].Stride;
                        long outerStride2 = @out.Shape.Dimensions[0].Stride;

                        long innerStride1 = in1.Shape.Dimensions[1].Stride;
                        long innerStride2 = @out.Shape.Dimensions[1].Stride;

                        outerStride1 -= innerStride1 * in1.Shape.Dimensions[1].Length;
                        outerStride2 -= innerStride2 * @out.Shape.Dimensions[1].Length;

                        for (long i = 0; i < opsOuter; i++)
                        {
                            for (long j = 0; j < opsInner; j++)
                            {
                                d2[ix2] = (System.UInt16)(Math.Tanh(d1[ix1]));
                                ix1 += innerStride1;
                                ix2 += innerStride2;
                            }

                            ix1 += outerStride1;
                            ix2 += outerStride2;
                        }
                    }
                    else
                    {
                        long n = in1.Shape.Dimensions.LongLength - 3;
                        long[] limits = in1.Shape.Dimensions.Where(x => n-- > 0).Select(x => x.Length).ToArray();
                        long[] counters = new long[limits.LongLength];

                        long totalOps = limits.LongLength == 0 ? 1 : limits.Aggregate<long>((a, b) => a * b);

                        //This chunck of variables are used to prevent repeated calculations of offsets
                        long dimIndex0 = 0 + limits.LongLength;
                        long dimIndex1 = 1 + limits.LongLength;
                        long dimIndex2 = 2 + limits.LongLength;

                        long opsOuter = @out.Shape.Dimensions[0 + limits.LongLength].Length;
                        long opsInner = @out.Shape.Dimensions[1 + limits.LongLength].Length;
                        long opsInnerInner = @out.Shape.Dimensions[2 + limits.LongLength].Length;

                        long outerStride1 = in1.Shape.Dimensions[dimIndex0].Stride;
                        long outerStride3 = @out.Shape.Dimensions[dimIndex0].Stride;

                        long innerStride1 = in1.Shape.Dimensions[dimIndex1].Stride;
                        long innerStride3 = @out.Shape.Dimensions[dimIndex1].Stride;

                        long innerInnerStride1 = in1.Shape.Dimensions[dimIndex2].Stride;
                        long innerInnerStride3 = @out.Shape.Dimensions[dimIndex2].Stride;

                        outerStride1 -= innerStride1 * in1.Shape.Dimensions[dimIndex1].Length;
                        outerStride3 -= innerStride3 * @out.Shape.Dimensions[dimIndex1].Length;

                        innerStride1 -= innerInnerStride1 * in1.Shape.Dimensions[dimIndex2].Length;
                        innerStride3 -= innerInnerStride3 * @out.Shape.Dimensions[dimIndex2].Length;

                        for (long outer = 0; outer < totalOps; outer++)
                        {
                            //Get the array offset for the first element in the outer dimension
                            long ix1 = in1.Shape[counters];
                            long ix3 = @out.Shape[counters];


                            for (long i = 0; i < opsOuter; i++)
                            {
                                for (long j = 0; j < opsInner; j++)
                                {
                                    for (long k = 0; k < opsInnerInner; k++)
                                    {
                                        d2[ix3] = (System.UInt16)(Math.Tanh(d1[ix1]));
                                        ix1 += innerInnerStride1;
                                        ix3 += innerInnerStride3;
                                    }

                                    ix1 += innerStride1;
                                    ix3 += innerStride3;
                                }

                                ix1 += outerStride1;
                                ix3 += outerStride3;
                            }

                            if (counters.LongLength > 0)
                            {
                                //Basically a ripple carry adder
                                long p = counters.LongLength - 1;
                                while (++counters[p] == limits[p] && p > 0)
                                {
                                    counters[p] = 0;
                                    p--;
                                }
                            }
                        }
                    }
                }
            }
        }

        /// <summary>
        /// Unsafe implementation of applying a unary operation
        /// </summary>
        /// <typeparam name="C">The type of operation to perform</typeparam>
        /// <param name="op">The operation instance</param>
        /// <param name="scalar">The input scalar argument</param>
        /// <param name="out">The output target</param>
        internal static void UFunc_Op_Inner_Unary_Scalar_Flush_UInt16_TypedImpl<C>(NumCIL.UInt16.Tanh op, System.UInt16 scalar, NdArray<System.UInt16> @out)
            where C : IUnaryOp<System.UInt16>
        {
            unsafe
            {
                using (var f2 = new Pinner(@out.DataAccessor))
                {
                    var d2 = (System.UInt16*)f2.ptr;

                    if (@out.Shape.Dimensions.Length == 1)
                    {
                        long totalOps = @out.Shape.Dimensions[0].Length;
                        long ix2 = @out.Shape.Offset;
                        long stride2 = @out.Shape.Dimensions[0].Stride;

                        for (long i = 0; i < totalOps; i++)
                        {
                            d2[ix2] = (System.UInt16)(Math.Tanh(scalar));
                            ix2 += stride2;
                        }
                    }
                    else if (@out.Shape.Dimensions.Length == 2)
                    {
                        long opsOuter = @out.Shape.Dimensions[0].Length;
                        long opsInner = @out.Shape.Dimensions[1].Length;

                        long ix2 = @out.Shape.Offset;
                        long outerStride2 = @out.Shape.Dimensions[0].Stride;
                        long innerStride2 = @out.Shape.Dimensions[1].Stride;
                        outerStride2 -= innerStride2 * @out.Shape.Dimensions[1].Length;

                        for (long i = 0; i < opsOuter; i++)
                        {
                            for (long j = 0; j < opsInner; j++)
                            {
                                d2[ix2] = (System.UInt16)(Math.Tanh(scalar));
                                ix2 += innerStride2;
                            }

                            ix2 += outerStride2;
                        }
                    }
                    else
                    {
                        long n = @out.Shape.Dimensions.LongLength - 3;
                        long[] limits = @out.Shape.Dimensions.Where(x => n-- > 0).Select(x => x.Length).ToArray();
                        long[] counters = new long[limits.LongLength];

                        long totalOps = limits.LongLength == 0 ? 1 : limits.Aggregate<long>((a, b) => a * b);

                        //This chunck of variables are used to prevent repeated calculations of offsets
                        long dimIndex0 = 0 + limits.LongLength;
                        long dimIndex1 = 1 + limits.LongLength;
                        long dimIndex2 = 2 + limits.LongLength;

                        long opsOuter = @out.Shape.Dimensions[0 + limits.LongLength].Length;
                        long opsInner = @out.Shape.Dimensions[1 + limits.LongLength].Length;
                        long opsInnerInner = @out.Shape.Dimensions[2 + limits.LongLength].Length;

                        long outerStride3 = @out.Shape.Dimensions[dimIndex0].Stride;
                        long innerStride3 = @out.Shape.Dimensions[dimIndex1].Stride;
                        long innerInnerStride3 = @out.Shape.Dimensions[dimIndex2].Stride;
                        outerStride3 -= innerStride3 * @out.Shape.Dimensions[dimIndex1].Length;
                        innerStride3 -= innerInnerStride3 * @out.Shape.Dimensions[dimIndex2].Length;

                        for (long outer = 0; outer < totalOps; outer++)
                        {
                            //Get the array offset for the first element in the outer dimension
                            long ix3 = @out.Shape[counters];

                            for (long i = 0; i < opsOuter; i++)
                            {
                                for (long j = 0; j < opsInner; j++)
                                {
                                    for (long k = 0; k < opsInnerInner; k++)
                                    {
                                        d2[ix3] = (System.UInt16)(Math.Tanh(scalar));
                                        ix3 += innerInnerStride3;
                                    }

                                    ix3 += innerStride3;
                                }

                                ix3 += outerStride3;
                            }

                            if (counters.LongLength > 0)
                            {
                                //Basically a ripple carry adder
                                long p = counters.LongLength - 1;
                                while (++counters[p] == limits[p] && p > 0)
                                {
                                    counters[p] = 0;
                                    p--;
                                }
                            }
                        }
                    }
                }
            }
        }
        /// <summary>
        /// Unsafe implementation of applying a unary operation
        /// </summary>
        /// <typeparam name="C">The type of operation to perform</typeparam>
        /// <param name="op">The operation instance</param>
        /// <param name="in1">The input argument</param>
        /// <param name="out">The output target</param>
        internal static void UFunc_Op_Inner_Unary_Flush_Int32_TypedImpl<C>(NumCIL.Int32.Tanh op, NdArray<System.Int32> in1, NdArray<System.Int32> @out)
            where C : IUnaryOp<System.Int32>
        {
            unsafe
            {
                using (var f1 = new Pinner(in1.DataAccessor))
                using (var f2 = new Pinner(@out.DataAccessor))
                {
                    var d1 = (System.Int32*)f1.ptr;
                    var d2 = (System.Int32*)f2.ptr;

                    if (@out.Shape.Dimensions.Length == 1)
                    {
                        long totalOps = @out.Shape.Dimensions[0].Length;

                        long ix1 = in1.Shape.Offset;
                        long ix2 = @out.Shape.Offset;

                        long stride1 = in1.Shape.Dimensions[0].Stride;
                        long stride2 = @out.Shape.Dimensions[0].Stride;


                        if (stride1 == stride2 && ix1 == ix2)
                        {
                            //Best case, all are equal, just keep a single counter
                            for (long i = 0; i < totalOps; i++)
                            {
                                d2[ix1] = (System.Int32)(Math.Tanh(d1[ix1]));
                                ix1 += stride1;
                            }
                        }
                        else
                        {
                            for (long i = 0; i < totalOps; i++)
                            {
                                d2[ix2] = (System.Int32)(Math.Tanh(d1[ix1]));
                                ix1 += stride1;
                                ix2 += stride2;
                            }
                        }
                    }
                    else if (@out.Shape.Dimensions.Length == 2)
                    {
                        long opsOuter = @out.Shape.Dimensions[0].Length;
                        long opsInner = @out.Shape.Dimensions[1].Length;

                        long ix1 = in1.Shape.Offset;
                        long ix2 = @out.Shape.Offset;

                        long outerStride1 = in1.Shape.Dimensions[0].Stride;
                        long outerStride2 = @out.Shape.Dimensions[0].Stride;

                        long innerStride1 = in1.Shape.Dimensions[1].Stride;
                        long innerStride2 = @out.Shape.Dimensions[1].Stride;

                        outerStride1 -= innerStride1 * in1.Shape.Dimensions[1].Length;
                        outerStride2 -= innerStride2 * @out.Shape.Dimensions[1].Length;

                        for (long i = 0; i < opsOuter; i++)
                        {
                            for (long j = 0; j < opsInner; j++)
                            {
                                d2[ix2] = (System.Int32)(Math.Tanh(d1[ix1]));
                                ix1 += innerStride1;
                                ix2 += innerStride2;
                            }

                            ix1 += outerStride1;
                            ix2 += outerStride2;
                        }
                    }
                    else
                    {
                        long n = in1.Shape.Dimensions.LongLength - 3;
                        long[] limits = in1.Shape.Dimensions.Where(x => n-- > 0).Select(x => x.Length).ToArray();
                        long[] counters = new long[limits.LongLength];

                        long totalOps = limits.LongLength == 0 ? 1 : limits.Aggregate<long>((a, b) => a * b);

                        //This chunck of variables are used to prevent repeated calculations of offsets
                        long dimIndex0 = 0 + limits.LongLength;
                        long dimIndex1 = 1 + limits.LongLength;
                        long dimIndex2 = 2 + limits.LongLength;

                        long opsOuter = @out.Shape.Dimensions[0 + limits.LongLength].Length;
                        long opsInner = @out.Shape.Dimensions[1 + limits.LongLength].Length;
                        long opsInnerInner = @out.Shape.Dimensions[2 + limits.LongLength].Length;

                        long outerStride1 = in1.Shape.Dimensions[dimIndex0].Stride;
                        long outerStride3 = @out.Shape.Dimensions[dimIndex0].Stride;

                        long innerStride1 = in1.Shape.Dimensions[dimIndex1].Stride;
                        long innerStride3 = @out.Shape.Dimensions[dimIndex1].Stride;

                        long innerInnerStride1 = in1.Shape.Dimensions[dimIndex2].Stride;
                        long innerInnerStride3 = @out.Shape.Dimensions[dimIndex2].Stride;

                        outerStride1 -= innerStride1 * in1.Shape.Dimensions[dimIndex1].Length;
                        outerStride3 -= innerStride3 * @out.Shape.Dimensions[dimIndex1].Length;

                        innerStride1 -= innerInnerStride1 * in1.Shape.Dimensions[dimIndex2].Length;
                        innerStride3 -= innerInnerStride3 * @out.Shape.Dimensions[dimIndex2].Length;

                        for (long outer = 0; outer < totalOps; outer++)
                        {
                            //Get the array offset for the first element in the outer dimension
                            long ix1 = in1.Shape[counters];
                            long ix3 = @out.Shape[counters];


                            for (long i = 0; i < opsOuter; i++)
                            {
                                for (long j = 0; j < opsInner; j++)
                                {
                                    for (long k = 0; k < opsInnerInner; k++)
                                    {
                                        d2[ix3] = (System.Int32)(Math.Tanh(d1[ix1]));
                                        ix1 += innerInnerStride1;
                                        ix3 += innerInnerStride3;
                                    }

                                    ix1 += innerStride1;
                                    ix3 += innerStride3;
                                }

                                ix1 += outerStride1;
                                ix3 += outerStride3;
                            }

                            if (counters.LongLength > 0)
                            {
                                //Basically a ripple carry adder
                                long p = counters.LongLength - 1;
                                while (++counters[p] == limits[p] && p > 0)
                                {
                                    counters[p] = 0;
                                    p--;
                                }
                            }
                        }
                    }
                }
            }
        }

        /// <summary>
        /// Unsafe implementation of applying a unary operation
        /// </summary>
        /// <typeparam name="C">The type of operation to perform</typeparam>
        /// <param name="op">The operation instance</param>
        /// <param name="scalar">The input scalar argument</param>
        /// <param name="out">The output target</param>
        internal static void UFunc_Op_Inner_Unary_Scalar_Flush_Int32_TypedImpl<C>(NumCIL.Int32.Tanh op, System.Int32 scalar, NdArray<System.Int32> @out)
            where C : IUnaryOp<System.Int32>
        {
            unsafe
            {
                using (var f2 = new Pinner(@out.DataAccessor))
                {
                    var d2 = (System.Int32*)f2.ptr;

                    if (@out.Shape.Dimensions.Length == 1)
                    {
                        long totalOps = @out.Shape.Dimensions[0].Length;
                        long ix2 = @out.Shape.Offset;
                        long stride2 = @out.Shape.Dimensions[0].Stride;

                        for (long i = 0; i < totalOps; i++)
                        {
                            d2[ix2] = (System.Int32)(Math.Tanh(scalar));
                            ix2 += stride2;
                        }
                    }
                    else if (@out.Shape.Dimensions.Length == 2)
                    {
                        long opsOuter = @out.Shape.Dimensions[0].Length;
                        long opsInner = @out.Shape.Dimensions[1].Length;

                        long ix2 = @out.Shape.Offset;
                        long outerStride2 = @out.Shape.Dimensions[0].Stride;
                        long innerStride2 = @out.Shape.Dimensions[1].Stride;
                        outerStride2 -= innerStride2 * @out.Shape.Dimensions[1].Length;

                        for (long i = 0; i < opsOuter; i++)
                        {
                            for (long j = 0; j < opsInner; j++)
                            {
                                d2[ix2] = (System.Int32)(Math.Tanh(scalar));
                                ix2 += innerStride2;
                            }

                            ix2 += outerStride2;
                        }
                    }
                    else
                    {
                        long n = @out.Shape.Dimensions.LongLength - 3;
                        long[] limits = @out.Shape.Dimensions.Where(x => n-- > 0).Select(x => x.Length).ToArray();
                        long[] counters = new long[limits.LongLength];

                        long totalOps = limits.LongLength == 0 ? 1 : limits.Aggregate<long>((a, b) => a * b);

                        //This chunck of variables are used to prevent repeated calculations of offsets
                        long dimIndex0 = 0 + limits.LongLength;
                        long dimIndex1 = 1 + limits.LongLength;
                        long dimIndex2 = 2 + limits.LongLength;

                        long opsOuter = @out.Shape.Dimensions[0 + limits.LongLength].Length;
                        long opsInner = @out.Shape.Dimensions[1 + limits.LongLength].Length;
                        long opsInnerInner = @out.Shape.Dimensions[2 + limits.LongLength].Length;

                        long outerStride3 = @out.Shape.Dimensions[dimIndex0].Stride;
                        long innerStride3 = @out.Shape.Dimensions[dimIndex1].Stride;
                        long innerInnerStride3 = @out.Shape.Dimensions[dimIndex2].Stride;
                        outerStride3 -= innerStride3 * @out.Shape.Dimensions[dimIndex1].Length;
                        innerStride3 -= innerInnerStride3 * @out.Shape.Dimensions[dimIndex2].Length;

                        for (long outer = 0; outer < totalOps; outer++)
                        {
                            //Get the array offset for the first element in the outer dimension
                            long ix3 = @out.Shape[counters];

                            for (long i = 0; i < opsOuter; i++)
                            {
                                for (long j = 0; j < opsInner; j++)
                                {
                                    for (long k = 0; k < opsInnerInner; k++)
                                    {
                                        d2[ix3] = (System.Int32)(Math.Tanh(scalar));
                                        ix3 += innerInnerStride3;
                                    }

                                    ix3 += innerStride3;
                                }

                                ix3 += outerStride3;
                            }

                            if (counters.LongLength > 0)
                            {
                                //Basically a ripple carry adder
                                long p = counters.LongLength - 1;
                                while (++counters[p] == limits[p] && p > 0)
                                {
                                    counters[p] = 0;
                                    p--;
                                }
                            }
                        }
                    }
                }
            }
        }
        /// <summary>
        /// Unsafe implementation of applying a unary operation
        /// </summary>
        /// <typeparam name="C">The type of operation to perform</typeparam>
        /// <param name="op">The operation instance</param>
        /// <param name="in1">The input argument</param>
        /// <param name="out">The output target</param>
        internal static void UFunc_Op_Inner_Unary_Flush_UInt32_TypedImpl<C>(NumCIL.UInt32.Tanh op, NdArray<System.UInt32> in1, NdArray<System.UInt32> @out)
            where C : IUnaryOp<System.UInt32>
        {
            unsafe
            {
                using (var f1 = new Pinner(in1.DataAccessor))
                using (var f2 = new Pinner(@out.DataAccessor))
                {
                    var d1 = (System.UInt32*)f1.ptr;
                    var d2 = (System.UInt32*)f2.ptr;

                    if (@out.Shape.Dimensions.Length == 1)
                    {
                        long totalOps = @out.Shape.Dimensions[0].Length;

                        long ix1 = in1.Shape.Offset;
                        long ix2 = @out.Shape.Offset;

                        long stride1 = in1.Shape.Dimensions[0].Stride;
                        long stride2 = @out.Shape.Dimensions[0].Stride;


                        if (stride1 == stride2 && ix1 == ix2)
                        {
                            //Best case, all are equal, just keep a single counter
                            for (long i = 0; i < totalOps; i++)
                            {
                                d2[ix1] = (System.UInt32)(Math.Tanh(d1[ix1]));
                                ix1 += stride1;
                            }
                        }
                        else
                        {
                            for (long i = 0; i < totalOps; i++)
                            {
                                d2[ix2] = (System.UInt32)(Math.Tanh(d1[ix1]));
                                ix1 += stride1;
                                ix2 += stride2;
                            }
                        }
                    }
                    else if (@out.Shape.Dimensions.Length == 2)
                    {
                        long opsOuter = @out.Shape.Dimensions[0].Length;
                        long opsInner = @out.Shape.Dimensions[1].Length;

                        long ix1 = in1.Shape.Offset;
                        long ix2 = @out.Shape.Offset;

                        long outerStride1 = in1.Shape.Dimensions[0].Stride;
                        long outerStride2 = @out.Shape.Dimensions[0].Stride;

                        long innerStride1 = in1.Shape.Dimensions[1].Stride;
                        long innerStride2 = @out.Shape.Dimensions[1].Stride;

                        outerStride1 -= innerStride1 * in1.Shape.Dimensions[1].Length;
                        outerStride2 -= innerStride2 * @out.Shape.Dimensions[1].Length;

                        for (long i = 0; i < opsOuter; i++)
                        {
                            for (long j = 0; j < opsInner; j++)
                            {
                                d2[ix2] = (System.UInt32)(Math.Tanh(d1[ix1]));
                                ix1 += innerStride1;
                                ix2 += innerStride2;
                            }

                            ix1 += outerStride1;
                            ix2 += outerStride2;
                        }
                    }
                    else
                    {
                        long n = in1.Shape.Dimensions.LongLength - 3;
                        long[] limits = in1.Shape.Dimensions.Where(x => n-- > 0).Select(x => x.Length).ToArray();
                        long[] counters = new long[limits.LongLength];

                        long totalOps = limits.LongLength == 0 ? 1 : limits.Aggregate<long>((a, b) => a * b);

                        //This chunck of variables are used to prevent repeated calculations of offsets
                        long dimIndex0 = 0 + limits.LongLength;
                        long dimIndex1 = 1 + limits.LongLength;
                        long dimIndex2 = 2 + limits.LongLength;

                        long opsOuter = @out.Shape.Dimensions[0 + limits.LongLength].Length;
                        long opsInner = @out.Shape.Dimensions[1 + limits.LongLength].Length;
                        long opsInnerInner = @out.Shape.Dimensions[2 + limits.LongLength].Length;

                        long outerStride1 = in1.Shape.Dimensions[dimIndex0].Stride;
                        long outerStride3 = @out.Shape.Dimensions[dimIndex0].Stride;

                        long innerStride1 = in1.Shape.Dimensions[dimIndex1].Stride;
                        long innerStride3 = @out.Shape.Dimensions[dimIndex1].Stride;

                        long innerInnerStride1 = in1.Shape.Dimensions[dimIndex2].Stride;
                        long innerInnerStride3 = @out.Shape.Dimensions[dimIndex2].Stride;

                        outerStride1 -= innerStride1 * in1.Shape.Dimensions[dimIndex1].Length;
                        outerStride3 -= innerStride3 * @out.Shape.Dimensions[dimIndex1].Length;

                        innerStride1 -= innerInnerStride1 * in1.Shape.Dimensions[dimIndex2].Length;
                        innerStride3 -= innerInnerStride3 * @out.Shape.Dimensions[dimIndex2].Length;

                        for (long outer = 0; outer < totalOps; outer++)
                        {
                            //Get the array offset for the first element in the outer dimension
                            long ix1 = in1.Shape[counters];
                            long ix3 = @out.Shape[counters];


                            for (long i = 0; i < opsOuter; i++)
                            {
                                for (long j = 0; j < opsInner; j++)
                                {
                                    for (long k = 0; k < opsInnerInner; k++)
                                    {
                                        d2[ix3] = (System.UInt32)(Math.Tanh(d1[ix1]));
                                        ix1 += innerInnerStride1;
                                        ix3 += innerInnerStride3;
                                    }

                                    ix1 += innerStride1;
                                    ix3 += innerStride3;
                                }

                                ix1 += outerStride1;
                                ix3 += outerStride3;
                            }

                            if (counters.LongLength > 0)
                            {
                                //Basically a ripple carry adder
                                long p = counters.LongLength - 1;
                                while (++counters[p] == limits[p] && p > 0)
                                {
                                    counters[p] = 0;
                                    p--;
                                }
                            }
                        }
                    }
                }
            }
        }

        /// <summary>
        /// Unsafe implementation of applying a unary operation
        /// </summary>
        /// <typeparam name="C">The type of operation to perform</typeparam>
        /// <param name="op">The operation instance</param>
        /// <param name="scalar">The input scalar argument</param>
        /// <param name="out">The output target</param>
        internal static void UFunc_Op_Inner_Unary_Scalar_Flush_UInt32_TypedImpl<C>(NumCIL.UInt32.Tanh op, System.UInt32 scalar, NdArray<System.UInt32> @out)
            where C : IUnaryOp<System.UInt32>
        {
            unsafe
            {
                using (var f2 = new Pinner(@out.DataAccessor))
                {
                    var d2 = (System.UInt32*)f2.ptr;

                    if (@out.Shape.Dimensions.Length == 1)
                    {
                        long totalOps = @out.Shape.Dimensions[0].Length;
                        long ix2 = @out.Shape.Offset;
                        long stride2 = @out.Shape.Dimensions[0].Stride;

                        for (long i = 0; i < totalOps; i++)
                        {
                            d2[ix2] = (System.UInt32)(Math.Tanh(scalar));
                            ix2 += stride2;
                        }
                    }
                    else if (@out.Shape.Dimensions.Length == 2)
                    {
                        long opsOuter = @out.Shape.Dimensions[0].Length;
                        long opsInner = @out.Shape.Dimensions[1].Length;

                        long ix2 = @out.Shape.Offset;
                        long outerStride2 = @out.Shape.Dimensions[0].Stride;
                        long innerStride2 = @out.Shape.Dimensions[1].Stride;
                        outerStride2 -= innerStride2 * @out.Shape.Dimensions[1].Length;

                        for (long i = 0; i < opsOuter; i++)
                        {
                            for (long j = 0; j < opsInner; j++)
                            {
                                d2[ix2] = (System.UInt32)(Math.Tanh(scalar));
                                ix2 += innerStride2;
                            }

                            ix2 += outerStride2;
                        }
                    }
                    else
                    {
                        long n = @out.Shape.Dimensions.LongLength - 3;
                        long[] limits = @out.Shape.Dimensions.Where(x => n-- > 0).Select(x => x.Length).ToArray();
                        long[] counters = new long[limits.LongLength];

                        long totalOps = limits.LongLength == 0 ? 1 : limits.Aggregate<long>((a, b) => a * b);

                        //This chunck of variables are used to prevent repeated calculations of offsets
                        long dimIndex0 = 0 + limits.LongLength;
                        long dimIndex1 = 1 + limits.LongLength;
                        long dimIndex2 = 2 + limits.LongLength;

                        long opsOuter = @out.Shape.Dimensions[0 + limits.LongLength].Length;
                        long opsInner = @out.Shape.Dimensions[1 + limits.LongLength].Length;
                        long opsInnerInner = @out.Shape.Dimensions[2 + limits.LongLength].Length;

                        long outerStride3 = @out.Shape.Dimensions[dimIndex0].Stride;
                        long innerStride3 = @out.Shape.Dimensions[dimIndex1].Stride;
                        long innerInnerStride3 = @out.Shape.Dimensions[dimIndex2].Stride;
                        outerStride3 -= innerStride3 * @out.Shape.Dimensions[dimIndex1].Length;
                        innerStride3 -= innerInnerStride3 * @out.Shape.Dimensions[dimIndex2].Length;

                        for (long outer = 0; outer < totalOps; outer++)
                        {
                            //Get the array offset for the first element in the outer dimension
                            long ix3 = @out.Shape[counters];

                            for (long i = 0; i < opsOuter; i++)
                            {
                                for (long j = 0; j < opsInner; j++)
                                {
                                    for (long k = 0; k < opsInnerInner; k++)
                                    {
                                        d2[ix3] = (System.UInt32)(Math.Tanh(scalar));
                                        ix3 += innerInnerStride3;
                                    }

                                    ix3 += innerStride3;
                                }

                                ix3 += outerStride3;
                            }

                            if (counters.LongLength > 0)
                            {
                                //Basically a ripple carry adder
                                long p = counters.LongLength - 1;
                                while (++counters[p] == limits[p] && p > 0)
                                {
                                    counters[p] = 0;
                                    p--;
                                }
                            }
                        }
                    }
                }
            }
        }
        /// <summary>
        /// Unsafe implementation of applying a unary operation
        /// </summary>
        /// <typeparam name="C">The type of operation to perform</typeparam>
        /// <param name="op">The operation instance</param>
        /// <param name="in1">The input argument</param>
        /// <param name="out">The output target</param>
        internal static void UFunc_Op_Inner_Unary_Flush_Int64_TypedImpl<C>(NumCIL.Int64.Tanh op, NdArray<System.Int64> in1, NdArray<System.Int64> @out)
            where C : IUnaryOp<System.Int64>
        {
            unsafe
            {
                using (var f1 = new Pinner(in1.DataAccessor))
                using (var f2 = new Pinner(@out.DataAccessor))
                {
                    var d1 = (System.Int64*)f1.ptr;
                    var d2 = (System.Int64*)f2.ptr;

                    if (@out.Shape.Dimensions.Length == 1)
                    {
                        long totalOps = @out.Shape.Dimensions[0].Length;

                        long ix1 = in1.Shape.Offset;
                        long ix2 = @out.Shape.Offset;

                        long stride1 = in1.Shape.Dimensions[0].Stride;
                        long stride2 = @out.Shape.Dimensions[0].Stride;


                        if (stride1 == stride2 && ix1 == ix2)
                        {
                            //Best case, all are equal, just keep a single counter
                            for (long i = 0; i < totalOps; i++)
                            {
                                d2[ix1] = (System.Int64)(Math.Tanh(d1[ix1]));
                                ix1 += stride1;
                            }
                        }
                        else
                        {
                            for (long i = 0; i < totalOps; i++)
                            {
                                d2[ix2] = (System.Int64)(Math.Tanh(d1[ix1]));
                                ix1 += stride1;
                                ix2 += stride2;
                            }
                        }
                    }
                    else if (@out.Shape.Dimensions.Length == 2)
                    {
                        long opsOuter = @out.Shape.Dimensions[0].Length;
                        long opsInner = @out.Shape.Dimensions[1].Length;

                        long ix1 = in1.Shape.Offset;
                        long ix2 = @out.Shape.Offset;

                        long outerStride1 = in1.Shape.Dimensions[0].Stride;
                        long outerStride2 = @out.Shape.Dimensions[0].Stride;

                        long innerStride1 = in1.Shape.Dimensions[1].Stride;
                        long innerStride2 = @out.Shape.Dimensions[1].Stride;

                        outerStride1 -= innerStride1 * in1.Shape.Dimensions[1].Length;
                        outerStride2 -= innerStride2 * @out.Shape.Dimensions[1].Length;

                        for (long i = 0; i < opsOuter; i++)
                        {
                            for (long j = 0; j < opsInner; j++)
                            {
                                d2[ix2] = (System.Int64)(Math.Tanh(d1[ix1]));
                                ix1 += innerStride1;
                                ix2 += innerStride2;
                            }

                            ix1 += outerStride1;
                            ix2 += outerStride2;
                        }
                    }
                    else
                    {
                        long n = in1.Shape.Dimensions.LongLength - 3;
                        long[] limits = in1.Shape.Dimensions.Where(x => n-- > 0).Select(x => x.Length).ToArray();
                        long[] counters = new long[limits.LongLength];

                        long totalOps = limits.LongLength == 0 ? 1 : limits.Aggregate<long>((a, b) => a * b);

                        //This chunck of variables are used to prevent repeated calculations of offsets
                        long dimIndex0 = 0 + limits.LongLength;
                        long dimIndex1 = 1 + limits.LongLength;
                        long dimIndex2 = 2 + limits.LongLength;

                        long opsOuter = @out.Shape.Dimensions[0 + limits.LongLength].Length;
                        long opsInner = @out.Shape.Dimensions[1 + limits.LongLength].Length;
                        long opsInnerInner = @out.Shape.Dimensions[2 + limits.LongLength].Length;

                        long outerStride1 = in1.Shape.Dimensions[dimIndex0].Stride;
                        long outerStride3 = @out.Shape.Dimensions[dimIndex0].Stride;

                        long innerStride1 = in1.Shape.Dimensions[dimIndex1].Stride;
                        long innerStride3 = @out.Shape.Dimensions[dimIndex1].Stride;

                        long innerInnerStride1 = in1.Shape.Dimensions[dimIndex2].Stride;
                        long innerInnerStride3 = @out.Shape.Dimensions[dimIndex2].Stride;

                        outerStride1 -= innerStride1 * in1.Shape.Dimensions[dimIndex1].Length;
                        outerStride3 -= innerStride3 * @out.Shape.Dimensions[dimIndex1].Length;

                        innerStride1 -= innerInnerStride1 * in1.Shape.Dimensions[dimIndex2].Length;
                        innerStride3 -= innerInnerStride3 * @out.Shape.Dimensions[dimIndex2].Length;

                        for (long outer = 0; outer < totalOps; outer++)
                        {
                            //Get the array offset for the first element in the outer dimension
                            long ix1 = in1.Shape[counters];
                            long ix3 = @out.Shape[counters];


                            for (long i = 0; i < opsOuter; i++)
                            {
                                for (long j = 0; j < opsInner; j++)
                                {
                                    for (long k = 0; k < opsInnerInner; k++)
                                    {
                                        d2[ix3] = (System.Int64)(Math.Tanh(d1[ix1]));
                                        ix1 += innerInnerStride1;
                                        ix3 += innerInnerStride3;
                                    }

                                    ix1 += innerStride1;
                                    ix3 += innerStride3;
                                }

                                ix1 += outerStride1;
                                ix3 += outerStride3;
                            }

                            if (counters.LongLength > 0)
                            {
                                //Basically a ripple carry adder
                                long p = counters.LongLength - 1;
                                while (++counters[p] == limits[p] && p > 0)
                                {
                                    counters[p] = 0;
                                    p--;
                                }
                            }
                        }
                    }
                }
            }
        }

        /// <summary>
        /// Unsafe implementation of applying a unary operation
        /// </summary>
        /// <typeparam name="C">The type of operation to perform</typeparam>
        /// <param name="op">The operation instance</param>
        /// <param name="scalar">The input scalar argument</param>
        /// <param name="out">The output target</param>
        internal static void UFunc_Op_Inner_Unary_Scalar_Flush_Int64_TypedImpl<C>(NumCIL.Int64.Tanh op, System.Int64 scalar, NdArray<System.Int64> @out)
            where C : IUnaryOp<System.Int64>
        {
            unsafe
            {
                using (var f2 = new Pinner(@out.DataAccessor))
                {
                    var d2 = (System.Int64*)f2.ptr;

                    if (@out.Shape.Dimensions.Length == 1)
                    {
                        long totalOps = @out.Shape.Dimensions[0].Length;
                        long ix2 = @out.Shape.Offset;
                        long stride2 = @out.Shape.Dimensions[0].Stride;

                        for (long i = 0; i < totalOps; i++)
                        {
                            d2[ix2] = (System.Int64)(Math.Tanh(scalar));
                            ix2 += stride2;
                        }
                    }
                    else if (@out.Shape.Dimensions.Length == 2)
                    {
                        long opsOuter = @out.Shape.Dimensions[0].Length;
                        long opsInner = @out.Shape.Dimensions[1].Length;

                        long ix2 = @out.Shape.Offset;
                        long outerStride2 = @out.Shape.Dimensions[0].Stride;
                        long innerStride2 = @out.Shape.Dimensions[1].Stride;
                        outerStride2 -= innerStride2 * @out.Shape.Dimensions[1].Length;

                        for (long i = 0; i < opsOuter; i++)
                        {
                            for (long j = 0; j < opsInner; j++)
                            {
                                d2[ix2] = (System.Int64)(Math.Tanh(scalar));
                                ix2 += innerStride2;
                            }

                            ix2 += outerStride2;
                        }
                    }
                    else
                    {
                        long n = @out.Shape.Dimensions.LongLength - 3;
                        long[] limits = @out.Shape.Dimensions.Where(x => n-- > 0).Select(x => x.Length).ToArray();
                        long[] counters = new long[limits.LongLength];

                        long totalOps = limits.LongLength == 0 ? 1 : limits.Aggregate<long>((a, b) => a * b);

                        //This chunck of variables are used to prevent repeated calculations of offsets
                        long dimIndex0 = 0 + limits.LongLength;
                        long dimIndex1 = 1 + limits.LongLength;
                        long dimIndex2 = 2 + limits.LongLength;

                        long opsOuter = @out.Shape.Dimensions[0 + limits.LongLength].Length;
                        long opsInner = @out.Shape.Dimensions[1 + limits.LongLength].Length;
                        long opsInnerInner = @out.Shape.Dimensions[2 + limits.LongLength].Length;

                        long outerStride3 = @out.Shape.Dimensions[dimIndex0].Stride;
                        long innerStride3 = @out.Shape.Dimensions[dimIndex1].Stride;
                        long innerInnerStride3 = @out.Shape.Dimensions[dimIndex2].Stride;
                        outerStride3 -= innerStride3 * @out.Shape.Dimensions[dimIndex1].Length;
                        innerStride3 -= innerInnerStride3 * @out.Shape.Dimensions[dimIndex2].Length;

                        for (long outer = 0; outer < totalOps; outer++)
                        {
                            //Get the array offset for the first element in the outer dimension
                            long ix3 = @out.Shape[counters];

                            for (long i = 0; i < opsOuter; i++)
                            {
                                for (long j = 0; j < opsInner; j++)
                                {
                                    for (long k = 0; k < opsInnerInner; k++)
                                    {
                                        d2[ix3] = (System.Int64)(Math.Tanh(scalar));
                                        ix3 += innerInnerStride3;
                                    }

                                    ix3 += innerStride3;
                                }

                                ix3 += outerStride3;
                            }

                            if (counters.LongLength > 0)
                            {
                                //Basically a ripple carry adder
                                long p = counters.LongLength - 1;
                                while (++counters[p] == limits[p] && p > 0)
                                {
                                    counters[p] = 0;
                                    p--;
                                }
                            }
                        }
                    }
                }
            }
        }
        /// <summary>
        /// Unsafe implementation of applying a unary operation
        /// </summary>
        /// <typeparam name="C">The type of operation to perform</typeparam>
        /// <param name="op">The operation instance</param>
        /// <param name="in1">The input argument</param>
        /// <param name="out">The output target</param>
        internal static void UFunc_Op_Inner_Unary_Flush_UInt64_TypedImpl<C>(NumCIL.UInt64.Tanh op, NdArray<System.UInt64> in1, NdArray<System.UInt64> @out)
            where C : IUnaryOp<System.UInt64>
        {
            unsafe
            {
                using (var f1 = new Pinner(in1.DataAccessor))
                using (var f2 = new Pinner(@out.DataAccessor))
                {
                    var d1 = (System.UInt64*)f1.ptr;
                    var d2 = (System.UInt64*)f2.ptr;

                    if (@out.Shape.Dimensions.Length == 1)
                    {
                        long totalOps = @out.Shape.Dimensions[0].Length;

                        long ix1 = in1.Shape.Offset;
                        long ix2 = @out.Shape.Offset;

                        long stride1 = in1.Shape.Dimensions[0].Stride;
                        long stride2 = @out.Shape.Dimensions[0].Stride;


                        if (stride1 == stride2 && ix1 == ix2)
                        {
                            //Best case, all are equal, just keep a single counter
                            for (long i = 0; i < totalOps; i++)
                            {
                                d2[ix1] = (System.UInt64)(Math.Tanh(d1[ix1]));
                                ix1 += stride1;
                            }
                        }
                        else
                        {
                            for (long i = 0; i < totalOps; i++)
                            {
                                d2[ix2] = (System.UInt64)(Math.Tanh(d1[ix1]));
                                ix1 += stride1;
                                ix2 += stride2;
                            }
                        }
                    }
                    else if (@out.Shape.Dimensions.Length == 2)
                    {
                        long opsOuter = @out.Shape.Dimensions[0].Length;
                        long opsInner = @out.Shape.Dimensions[1].Length;

                        long ix1 = in1.Shape.Offset;
                        long ix2 = @out.Shape.Offset;

                        long outerStride1 = in1.Shape.Dimensions[0].Stride;
                        long outerStride2 = @out.Shape.Dimensions[0].Stride;

                        long innerStride1 = in1.Shape.Dimensions[1].Stride;
                        long innerStride2 = @out.Shape.Dimensions[1].Stride;

                        outerStride1 -= innerStride1 * in1.Shape.Dimensions[1].Length;
                        outerStride2 -= innerStride2 * @out.Shape.Dimensions[1].Length;

                        for (long i = 0; i < opsOuter; i++)
                        {
                            for (long j = 0; j < opsInner; j++)
                            {
                                d2[ix2] = (System.UInt64)(Math.Tanh(d1[ix1]));
                                ix1 += innerStride1;
                                ix2 += innerStride2;
                            }

                            ix1 += outerStride1;
                            ix2 += outerStride2;
                        }
                    }
                    else
                    {
                        long n = in1.Shape.Dimensions.LongLength - 3;
                        long[] limits = in1.Shape.Dimensions.Where(x => n-- > 0).Select(x => x.Length).ToArray();
                        long[] counters = new long[limits.LongLength];

                        long totalOps = limits.LongLength == 0 ? 1 : limits.Aggregate<long>((a, b) => a * b);

                        //This chunck of variables are used to prevent repeated calculations of offsets
                        long dimIndex0 = 0 + limits.LongLength;
                        long dimIndex1 = 1 + limits.LongLength;
                        long dimIndex2 = 2 + limits.LongLength;

                        long opsOuter = @out.Shape.Dimensions[0 + limits.LongLength].Length;
                        long opsInner = @out.Shape.Dimensions[1 + limits.LongLength].Length;
                        long opsInnerInner = @out.Shape.Dimensions[2 + limits.LongLength].Length;

                        long outerStride1 = in1.Shape.Dimensions[dimIndex0].Stride;
                        long outerStride3 = @out.Shape.Dimensions[dimIndex0].Stride;

                        long innerStride1 = in1.Shape.Dimensions[dimIndex1].Stride;
                        long innerStride3 = @out.Shape.Dimensions[dimIndex1].Stride;

                        long innerInnerStride1 = in1.Shape.Dimensions[dimIndex2].Stride;
                        long innerInnerStride3 = @out.Shape.Dimensions[dimIndex2].Stride;

                        outerStride1 -= innerStride1 * in1.Shape.Dimensions[dimIndex1].Length;
                        outerStride3 -= innerStride3 * @out.Shape.Dimensions[dimIndex1].Length;

                        innerStride1 -= innerInnerStride1 * in1.Shape.Dimensions[dimIndex2].Length;
                        innerStride3 -= innerInnerStride3 * @out.Shape.Dimensions[dimIndex2].Length;

                        for (long outer = 0; outer < totalOps; outer++)
                        {
                            //Get the array offset for the first element in the outer dimension
                            long ix1 = in1.Shape[counters];
                            long ix3 = @out.Shape[counters];


                            for (long i = 0; i < opsOuter; i++)
                            {
                                for (long j = 0; j < opsInner; j++)
                                {
                                    for (long k = 0; k < opsInnerInner; k++)
                                    {
                                        d2[ix3] = (System.UInt64)(Math.Tanh(d1[ix1]));
                                        ix1 += innerInnerStride1;
                                        ix3 += innerInnerStride3;
                                    }

                                    ix1 += innerStride1;
                                    ix3 += innerStride3;
                                }

                                ix1 += outerStride1;
                                ix3 += outerStride3;
                            }

                            if (counters.LongLength > 0)
                            {
                                //Basically a ripple carry adder
                                long p = counters.LongLength - 1;
                                while (++counters[p] == limits[p] && p > 0)
                                {
                                    counters[p] = 0;
                                    p--;
                                }
                            }
                        }
                    }
                }
            }
        }

        /// <summary>
        /// Unsafe implementation of applying a unary operation
        /// </summary>
        /// <typeparam name="C">The type of operation to perform</typeparam>
        /// <param name="op">The operation instance</param>
        /// <param name="scalar">The input scalar argument</param>
        /// <param name="out">The output target</param>
        internal static void UFunc_Op_Inner_Unary_Scalar_Flush_UInt64_TypedImpl<C>(NumCIL.UInt64.Tanh op, System.UInt64 scalar, NdArray<System.UInt64> @out)
            where C : IUnaryOp<System.UInt64>
        {
            unsafe
            {
                using (var f2 = new Pinner(@out.DataAccessor))
                {
                    var d2 = (System.UInt64*)f2.ptr;

                    if (@out.Shape.Dimensions.Length == 1)
                    {
                        long totalOps = @out.Shape.Dimensions[0].Length;
                        long ix2 = @out.Shape.Offset;
                        long stride2 = @out.Shape.Dimensions[0].Stride;

                        for (long i = 0; i < totalOps; i++)
                        {
                            d2[ix2] = (System.UInt64)(Math.Tanh(scalar));
                            ix2 += stride2;
                        }
                    }
                    else if (@out.Shape.Dimensions.Length == 2)
                    {
                        long opsOuter = @out.Shape.Dimensions[0].Length;
                        long opsInner = @out.Shape.Dimensions[1].Length;

                        long ix2 = @out.Shape.Offset;
                        long outerStride2 = @out.Shape.Dimensions[0].Stride;
                        long innerStride2 = @out.Shape.Dimensions[1].Stride;
                        outerStride2 -= innerStride2 * @out.Shape.Dimensions[1].Length;

                        for (long i = 0; i < opsOuter; i++)
                        {
                            for (long j = 0; j < opsInner; j++)
                            {
                                d2[ix2] = (System.UInt64)(Math.Tanh(scalar));
                                ix2 += innerStride2;
                            }

                            ix2 += outerStride2;
                        }
                    }
                    else
                    {
                        long n = @out.Shape.Dimensions.LongLength - 3;
                        long[] limits = @out.Shape.Dimensions.Where(x => n-- > 0).Select(x => x.Length).ToArray();
                        long[] counters = new long[limits.LongLength];

                        long totalOps = limits.LongLength == 0 ? 1 : limits.Aggregate<long>((a, b) => a * b);

                        //This chunck of variables are used to prevent repeated calculations of offsets
                        long dimIndex0 = 0 + limits.LongLength;
                        long dimIndex1 = 1 + limits.LongLength;
                        long dimIndex2 = 2 + limits.LongLength;

                        long opsOuter = @out.Shape.Dimensions[0 + limits.LongLength].Length;
                        long opsInner = @out.Shape.Dimensions[1 + limits.LongLength].Length;
                        long opsInnerInner = @out.Shape.Dimensions[2 + limits.LongLength].Length;

                        long outerStride3 = @out.Shape.Dimensions[dimIndex0].Stride;
                        long innerStride3 = @out.Shape.Dimensions[dimIndex1].Stride;
                        long innerInnerStride3 = @out.Shape.Dimensions[dimIndex2].Stride;
                        outerStride3 -= innerStride3 * @out.Shape.Dimensions[dimIndex1].Length;
                        innerStride3 -= innerInnerStride3 * @out.Shape.Dimensions[dimIndex2].Length;

                        for (long outer = 0; outer < totalOps; outer++)
                        {
                            //Get the array offset for the first element in the outer dimension
                            long ix3 = @out.Shape[counters];

                            for (long i = 0; i < opsOuter; i++)
                            {
                                for (long j = 0; j < opsInner; j++)
                                {
                                    for (long k = 0; k < opsInnerInner; k++)
                                    {
                                        d2[ix3] = (System.UInt64)(Math.Tanh(scalar));
                                        ix3 += innerInnerStride3;
                                    }

                                    ix3 += innerStride3;
                                }

                                ix3 += outerStride3;
                            }

                            if (counters.LongLength > 0)
                            {
                                //Basically a ripple carry adder
                                long p = counters.LongLength - 1;
                                while (++counters[p] == limits[p] && p > 0)
                                {
                                    counters[p] = 0;
                                    p--;
                                }
                            }
                        }
                    }
                }
            }
        }
        /// <summary>
        /// Unsafe implementation of applying a unary operation
        /// </summary>
        /// <typeparam name="C">The type of operation to perform</typeparam>
        /// <param name="op">The operation instance</param>
        /// <param name="in1">The input argument</param>
        /// <param name="out">The output target</param>
        internal static void UFunc_Op_Inner_Unary_Flush_Single_TypedImpl<C>(NumCIL.Float.Tanh op, NdArray<System.Single> in1, NdArray<System.Single> @out)
            where C : IUnaryOp<System.Single>
        {
            unsafe
            {
                using (var f1 = new Pinner(in1.DataAccessor))
                using (var f2 = new Pinner(@out.DataAccessor))
                {
                    var d1 = (System.Single*)f1.ptr;
                    var d2 = (System.Single*)f2.ptr;

                    if (@out.Shape.Dimensions.Length == 1)
                    {
                        long totalOps = @out.Shape.Dimensions[0].Length;

                        long ix1 = in1.Shape.Offset;
                        long ix2 = @out.Shape.Offset;

                        long stride1 = in1.Shape.Dimensions[0].Stride;
                        long stride2 = @out.Shape.Dimensions[0].Stride;


                        if (stride1 == stride2 && ix1 == ix2)
                        {
                            //Best case, all are equal, just keep a single counter
                            for (long i = 0; i < totalOps; i++)
                            {
                                d2[ix1] = (System.Single)(Math.Tanh(d1[ix1]));
                                ix1 += stride1;
                            }
                        }
                        else
                        {
                            for (long i = 0; i < totalOps; i++)
                            {
                                d2[ix2] = (System.Single)(Math.Tanh(d1[ix1]));
                                ix1 += stride1;
                                ix2 += stride2;
                            }
                        }
                    }
                    else if (@out.Shape.Dimensions.Length == 2)
                    {
                        long opsOuter = @out.Shape.Dimensions[0].Length;
                        long opsInner = @out.Shape.Dimensions[1].Length;

                        long ix1 = in1.Shape.Offset;
                        long ix2 = @out.Shape.Offset;

                        long outerStride1 = in1.Shape.Dimensions[0].Stride;
                        long outerStride2 = @out.Shape.Dimensions[0].Stride;

                        long innerStride1 = in1.Shape.Dimensions[1].Stride;
                        long innerStride2 = @out.Shape.Dimensions[1].Stride;

                        outerStride1 -= innerStride1 * in1.Shape.Dimensions[1].Length;
                        outerStride2 -= innerStride2 * @out.Shape.Dimensions[1].Length;

                        for (long i = 0; i < opsOuter; i++)
                        {
                            for (long j = 0; j < opsInner; j++)
                            {
                                d2[ix2] = (System.Single)(Math.Tanh(d1[ix1]));
                                ix1 += innerStride1;
                                ix2 += innerStride2;
                            }

                            ix1 += outerStride1;
                            ix2 += outerStride2;
                        }
                    }
                    else
                    {
                        long n = in1.Shape.Dimensions.LongLength - 3;
                        long[] limits = in1.Shape.Dimensions.Where(x => n-- > 0).Select(x => x.Length).ToArray();
                        long[] counters = new long[limits.LongLength];

                        long totalOps = limits.LongLength == 0 ? 1 : limits.Aggregate<long>((a, b) => a * b);

                        //This chunck of variables are used to prevent repeated calculations of offsets
                        long dimIndex0 = 0 + limits.LongLength;
                        long dimIndex1 = 1 + limits.LongLength;
                        long dimIndex2 = 2 + limits.LongLength;

                        long opsOuter = @out.Shape.Dimensions[0 + limits.LongLength].Length;
                        long opsInner = @out.Shape.Dimensions[1 + limits.LongLength].Length;
                        long opsInnerInner = @out.Shape.Dimensions[2 + limits.LongLength].Length;

                        long outerStride1 = in1.Shape.Dimensions[dimIndex0].Stride;
                        long outerStride3 = @out.Shape.Dimensions[dimIndex0].Stride;

                        long innerStride1 = in1.Shape.Dimensions[dimIndex1].Stride;
                        long innerStride3 = @out.Shape.Dimensions[dimIndex1].Stride;

                        long innerInnerStride1 = in1.Shape.Dimensions[dimIndex2].Stride;
                        long innerInnerStride3 = @out.Shape.Dimensions[dimIndex2].Stride;

                        outerStride1 -= innerStride1 * in1.Shape.Dimensions[dimIndex1].Length;
                        outerStride3 -= innerStride3 * @out.Shape.Dimensions[dimIndex1].Length;

                        innerStride1 -= innerInnerStride1 * in1.Shape.Dimensions[dimIndex2].Length;
                        innerStride3 -= innerInnerStride3 * @out.Shape.Dimensions[dimIndex2].Length;

                        for (long outer = 0; outer < totalOps; outer++)
                        {
                            //Get the array offset for the first element in the outer dimension
                            long ix1 = in1.Shape[counters];
                            long ix3 = @out.Shape[counters];


                            for (long i = 0; i < opsOuter; i++)
                            {
                                for (long j = 0; j < opsInner; j++)
                                {
                                    for (long k = 0; k < opsInnerInner; k++)
                                    {
                                        d2[ix3] = (System.Single)(Math.Tanh(d1[ix1]));
                                        ix1 += innerInnerStride1;
                                        ix3 += innerInnerStride3;
                                    }

                                    ix1 += innerStride1;
                                    ix3 += innerStride3;
                                }

                                ix1 += outerStride1;
                                ix3 += outerStride3;
                            }

                            if (counters.LongLength > 0)
                            {
                                //Basically a ripple carry adder
                                long p = counters.LongLength - 1;
                                while (++counters[p] == limits[p] && p > 0)
                                {
                                    counters[p] = 0;
                                    p--;
                                }
                            }
                        }
                    }
                }
            }
        }

        /// <summary>
        /// Unsafe implementation of applying a unary operation
        /// </summary>
        /// <typeparam name="C">The type of operation to perform</typeparam>
        /// <param name="op">The operation instance</param>
        /// <param name="scalar">The input scalar argument</param>
        /// <param name="out">The output target</param>
        internal static void UFunc_Op_Inner_Unary_Scalar_Flush_Single_TypedImpl<C>(NumCIL.Float.Tanh op, System.Single scalar, NdArray<System.Single> @out)
            where C : IUnaryOp<System.Single>
        {
            unsafe
            {
                using (var f2 = new Pinner(@out.DataAccessor))
                {
                    var d2 = (System.Single*)f2.ptr;

                    if (@out.Shape.Dimensions.Length == 1)
                    {
                        long totalOps = @out.Shape.Dimensions[0].Length;
                        long ix2 = @out.Shape.Offset;
                        long stride2 = @out.Shape.Dimensions[0].Stride;

                        for (long i = 0; i < totalOps; i++)
                        {
                            d2[ix2] = (System.Single)(Math.Tanh(scalar));
                            ix2 += stride2;
                        }
                    }
                    else if (@out.Shape.Dimensions.Length == 2)
                    {
                        long opsOuter = @out.Shape.Dimensions[0].Length;
                        long opsInner = @out.Shape.Dimensions[1].Length;

                        long ix2 = @out.Shape.Offset;
                        long outerStride2 = @out.Shape.Dimensions[0].Stride;
                        long innerStride2 = @out.Shape.Dimensions[1].Stride;
                        outerStride2 -= innerStride2 * @out.Shape.Dimensions[1].Length;

                        for (long i = 0; i < opsOuter; i++)
                        {
                            for (long j = 0; j < opsInner; j++)
                            {
                                d2[ix2] = (System.Single)(Math.Tanh(scalar));
                                ix2 += innerStride2;
                            }

                            ix2 += outerStride2;
                        }
                    }
                    else
                    {
                        long n = @out.Shape.Dimensions.LongLength - 3;
                        long[] limits = @out.Shape.Dimensions.Where(x => n-- > 0).Select(x => x.Length).ToArray();
                        long[] counters = new long[limits.LongLength];

                        long totalOps = limits.LongLength == 0 ? 1 : limits.Aggregate<long>((a, b) => a * b);

                        //This chunck of variables are used to prevent repeated calculations of offsets
                        long dimIndex0 = 0 + limits.LongLength;
                        long dimIndex1 = 1 + limits.LongLength;
                        long dimIndex2 = 2 + limits.LongLength;

                        long opsOuter = @out.Shape.Dimensions[0 + limits.LongLength].Length;
                        long opsInner = @out.Shape.Dimensions[1 + limits.LongLength].Length;
                        long opsInnerInner = @out.Shape.Dimensions[2 + limits.LongLength].Length;

                        long outerStride3 = @out.Shape.Dimensions[dimIndex0].Stride;
                        long innerStride3 = @out.Shape.Dimensions[dimIndex1].Stride;
                        long innerInnerStride3 = @out.Shape.Dimensions[dimIndex2].Stride;
                        outerStride3 -= innerStride3 * @out.Shape.Dimensions[dimIndex1].Length;
                        innerStride3 -= innerInnerStride3 * @out.Shape.Dimensions[dimIndex2].Length;

                        for (long outer = 0; outer < totalOps; outer++)
                        {
                            //Get the array offset for the first element in the outer dimension
                            long ix3 = @out.Shape[counters];

                            for (long i = 0; i < opsOuter; i++)
                            {
                                for (long j = 0; j < opsInner; j++)
                                {
                                    for (long k = 0; k < opsInnerInner; k++)
                                    {
                                        d2[ix3] = (System.Single)(Math.Tanh(scalar));
                                        ix3 += innerInnerStride3;
                                    }

                                    ix3 += innerStride3;
                                }

                                ix3 += outerStride3;
                            }

                            if (counters.LongLength > 0)
                            {
                                //Basically a ripple carry adder
                                long p = counters.LongLength - 1;
                                while (++counters[p] == limits[p] && p > 0)
                                {
                                    counters[p] = 0;
                                    p--;
                                }
                            }
                        }
                    }
                }
            }
        }
        /// <summary>
        /// Unsafe implementation of applying a unary operation
        /// </summary>
        /// <typeparam name="C">The type of operation to perform</typeparam>
        /// <param name="op">The operation instance</param>
        /// <param name="in1">The input argument</param>
        /// <param name="out">The output target</param>
        internal static void UFunc_Op_Inner_Unary_Flush_Double_TypedImpl<C>(NumCIL.Double.Tanh op, NdArray<System.Double> in1, NdArray<System.Double> @out)
            where C : IUnaryOp<System.Double>
        {
            unsafe
            {
                using (var f1 = new Pinner(in1.DataAccessor))
                using (var f2 = new Pinner(@out.DataAccessor))
                {
                    var d1 = (System.Double*)f1.ptr;
                    var d2 = (System.Double*)f2.ptr;

                    if (@out.Shape.Dimensions.Length == 1)
                    {
                        long totalOps = @out.Shape.Dimensions[0].Length;

                        long ix1 = in1.Shape.Offset;
                        long ix2 = @out.Shape.Offset;

                        long stride1 = in1.Shape.Dimensions[0].Stride;
                        long stride2 = @out.Shape.Dimensions[0].Stride;


                        if (stride1 == stride2 && ix1 == ix2)
                        {
                            //Best case, all are equal, just keep a single counter
                            for (long i = 0; i < totalOps; i++)
                            {
                                d2[ix1] = (System.Double)(Math.Tanh(d1[ix1]));
                                ix1 += stride1;
                            }
                        }
                        else
                        {
                            for (long i = 0; i < totalOps; i++)
                            {
                                d2[ix2] = (System.Double)(Math.Tanh(d1[ix1]));
                                ix1 += stride1;
                                ix2 += stride2;
                            }
                        }
                    }
                    else if (@out.Shape.Dimensions.Length == 2)
                    {
                        long opsOuter = @out.Shape.Dimensions[0].Length;
                        long opsInner = @out.Shape.Dimensions[1].Length;

                        long ix1 = in1.Shape.Offset;
                        long ix2 = @out.Shape.Offset;

                        long outerStride1 = in1.Shape.Dimensions[0].Stride;
                        long outerStride2 = @out.Shape.Dimensions[0].Stride;

                        long innerStride1 = in1.Shape.Dimensions[1].Stride;
                        long innerStride2 = @out.Shape.Dimensions[1].Stride;

                        outerStride1 -= innerStride1 * in1.Shape.Dimensions[1].Length;
                        outerStride2 -= innerStride2 * @out.Shape.Dimensions[1].Length;

                        for (long i = 0; i < opsOuter; i++)
                        {
                            for (long j = 0; j < opsInner; j++)
                            {
                                d2[ix2] = (System.Double)(Math.Tanh(d1[ix1]));
                                ix1 += innerStride1;
                                ix2 += innerStride2;
                            }

                            ix1 += outerStride1;
                            ix2 += outerStride2;
                        }
                    }
                    else
                    {
                        long n = in1.Shape.Dimensions.LongLength - 3;
                        long[] limits = in1.Shape.Dimensions.Where(x => n-- > 0).Select(x => x.Length).ToArray();
                        long[] counters = new long[limits.LongLength];

                        long totalOps = limits.LongLength == 0 ? 1 : limits.Aggregate<long>((a, b) => a * b);

                        //This chunck of variables are used to prevent repeated calculations of offsets
                        long dimIndex0 = 0 + limits.LongLength;
                        long dimIndex1 = 1 + limits.LongLength;
                        long dimIndex2 = 2 + limits.LongLength;

                        long opsOuter = @out.Shape.Dimensions[0 + limits.LongLength].Length;
                        long opsInner = @out.Shape.Dimensions[1 + limits.LongLength].Length;
                        long opsInnerInner = @out.Shape.Dimensions[2 + limits.LongLength].Length;

                        long outerStride1 = in1.Shape.Dimensions[dimIndex0].Stride;
                        long outerStride3 = @out.Shape.Dimensions[dimIndex0].Stride;

                        long innerStride1 = in1.Shape.Dimensions[dimIndex1].Stride;
                        long innerStride3 = @out.Shape.Dimensions[dimIndex1].Stride;

                        long innerInnerStride1 = in1.Shape.Dimensions[dimIndex2].Stride;
                        long innerInnerStride3 = @out.Shape.Dimensions[dimIndex2].Stride;

                        outerStride1 -= innerStride1 * in1.Shape.Dimensions[dimIndex1].Length;
                        outerStride3 -= innerStride3 * @out.Shape.Dimensions[dimIndex1].Length;

                        innerStride1 -= innerInnerStride1 * in1.Shape.Dimensions[dimIndex2].Length;
                        innerStride3 -= innerInnerStride3 * @out.Shape.Dimensions[dimIndex2].Length;

                        for (long outer = 0; outer < totalOps; outer++)
                        {
                            //Get the array offset for the first element in the outer dimension
                            long ix1 = in1.Shape[counters];
                            long ix3 = @out.Shape[counters];


                            for (long i = 0; i < opsOuter; i++)
                            {
                                for (long j = 0; j < opsInner; j++)
                                {
                                    for (long k = 0; k < opsInnerInner; k++)
                                    {
                                        d2[ix3] = (System.Double)(Math.Tanh(d1[ix1]));
                                        ix1 += innerInnerStride1;
                                        ix3 += innerInnerStride3;
                                    }

                                    ix1 += innerStride1;
                                    ix3 += innerStride3;
                                }

                                ix1 += outerStride1;
                                ix3 += outerStride3;
                            }

                            if (counters.LongLength > 0)
                            {
                                //Basically a ripple carry adder
                                long p = counters.LongLength - 1;
                                while (++counters[p] == limits[p] && p > 0)
                                {
                                    counters[p] = 0;
                                    p--;
                                }
                            }
                        }
                    }
                }
            }
        }

        /// <summary>
        /// Unsafe implementation of applying a unary operation
        /// </summary>
        /// <typeparam name="C">The type of operation to perform</typeparam>
        /// <param name="op">The operation instance</param>
        /// <param name="scalar">The input scalar argument</param>
        /// <param name="out">The output target</param>
        internal static void UFunc_Op_Inner_Unary_Scalar_Flush_Double_TypedImpl<C>(NumCIL.Double.Tanh op, System.Double scalar, NdArray<System.Double> @out)
            where C : IUnaryOp<System.Double>
        {
            unsafe
            {
                using (var f2 = new Pinner(@out.DataAccessor))
                {
                    var d2 = (System.Double*)f2.ptr;

                    if (@out.Shape.Dimensions.Length == 1)
                    {
                        long totalOps = @out.Shape.Dimensions[0].Length;
                        long ix2 = @out.Shape.Offset;
                        long stride2 = @out.Shape.Dimensions[0].Stride;

                        for (long i = 0; i < totalOps; i++)
                        {
                            d2[ix2] = (System.Double)(Math.Tanh(scalar));
                            ix2 += stride2;
                        }
                    }
                    else if (@out.Shape.Dimensions.Length == 2)
                    {
                        long opsOuter = @out.Shape.Dimensions[0].Length;
                        long opsInner = @out.Shape.Dimensions[1].Length;

                        long ix2 = @out.Shape.Offset;
                        long outerStride2 = @out.Shape.Dimensions[0].Stride;
                        long innerStride2 = @out.Shape.Dimensions[1].Stride;
                        outerStride2 -= innerStride2 * @out.Shape.Dimensions[1].Length;

                        for (long i = 0; i < opsOuter; i++)
                        {
                            for (long j = 0; j < opsInner; j++)
                            {
                                d2[ix2] = (System.Double)(Math.Tanh(scalar));
                                ix2 += innerStride2;
                            }

                            ix2 += outerStride2;
                        }
                    }
                    else
                    {
                        long n = @out.Shape.Dimensions.LongLength - 3;
                        long[] limits = @out.Shape.Dimensions.Where(x => n-- > 0).Select(x => x.Length).ToArray();
                        long[] counters = new long[limits.LongLength];

                        long totalOps = limits.LongLength == 0 ? 1 : limits.Aggregate<long>((a, b) => a * b);

                        //This chunck of variables are used to prevent repeated calculations of offsets
                        long dimIndex0 = 0 + limits.LongLength;
                        long dimIndex1 = 1 + limits.LongLength;
                        long dimIndex2 = 2 + limits.LongLength;

                        long opsOuter = @out.Shape.Dimensions[0 + limits.LongLength].Length;
                        long opsInner = @out.Shape.Dimensions[1 + limits.LongLength].Length;
                        long opsInnerInner = @out.Shape.Dimensions[2 + limits.LongLength].Length;

                        long outerStride3 = @out.Shape.Dimensions[dimIndex0].Stride;
                        long innerStride3 = @out.Shape.Dimensions[dimIndex1].Stride;
                        long innerInnerStride3 = @out.Shape.Dimensions[dimIndex2].Stride;
                        outerStride3 -= innerStride3 * @out.Shape.Dimensions[dimIndex1].Length;
                        innerStride3 -= innerInnerStride3 * @out.Shape.Dimensions[dimIndex2].Length;

                        for (long outer = 0; outer < totalOps; outer++)
                        {
                            //Get the array offset for the first element in the outer dimension
                            long ix3 = @out.Shape[counters];

                            for (long i = 0; i < opsOuter; i++)
                            {
                                for (long j = 0; j < opsInner; j++)
                                {
                                    for (long k = 0; k < opsInnerInner; k++)
                                    {
                                        d2[ix3] = (System.Double)(Math.Tanh(scalar));
                                        ix3 += innerInnerStride3;
                                    }

                                    ix3 += innerStride3;
                                }

                                ix3 += outerStride3;
                            }

                            if (counters.LongLength > 0)
                            {
                                //Basically a ripple carry adder
                                long p = counters.LongLength - 1;
                                while (++counters[p] == limits[p] && p > 0)
                                {
                                    counters[p] = 0;
                                    p--;
                                }
                            }
                        }
                    }
                }
            }
        }
        /// <summary>
        /// Unsafe implementation of applying a unary operation
        /// </summary>
        /// <typeparam name="C">The type of operation to perform</typeparam>
        /// <param name="op">The operation instance</param>
        /// <param name="in1">The input argument</param>
        /// <param name="out">The output target</param>
        internal static void UFunc_Op_Inner_Unary_Flush_SByte_TypedImpl<C>(NumCIL.Int8.Log op, NdArray<System.SByte> in1, NdArray<System.SByte> @out)
            where C : IUnaryOp<System.SByte>
        {
            unsafe
            {
                using (var f1 = new Pinner(in1.DataAccessor))
                using (var f2 = new Pinner(@out.DataAccessor))
                {
                    var d1 = (System.SByte*)f1.ptr;
                    var d2 = (System.SByte*)f2.ptr;

                    if (@out.Shape.Dimensions.Length == 1)
                    {
                        long totalOps = @out.Shape.Dimensions[0].Length;

                        long ix1 = in1.Shape.Offset;
                        long ix2 = @out.Shape.Offset;

                        long stride1 = in1.Shape.Dimensions[0].Stride;
                        long stride2 = @out.Shape.Dimensions[0].Stride;


                        if (stride1 == stride2 && ix1 == ix2)
                        {
                            //Best case, all are equal, just keep a single counter
                            for (long i = 0; i < totalOps; i++)
                            {
                                d2[ix1] = (System.SByte)(Math.Log(d1[ix1]));
                                ix1 += stride1;
                            }
                        }
                        else
                        {
                            for (long i = 0; i < totalOps; i++)
                            {
                                d2[ix2] = (System.SByte)(Math.Log(d1[ix1]));
                                ix1 += stride1;
                                ix2 += stride2;
                            }
                        }
                    }
                    else if (@out.Shape.Dimensions.Length == 2)
                    {
                        long opsOuter = @out.Shape.Dimensions[0].Length;
                        long opsInner = @out.Shape.Dimensions[1].Length;

                        long ix1 = in1.Shape.Offset;
                        long ix2 = @out.Shape.Offset;

                        long outerStride1 = in1.Shape.Dimensions[0].Stride;
                        long outerStride2 = @out.Shape.Dimensions[0].Stride;

                        long innerStride1 = in1.Shape.Dimensions[1].Stride;
                        long innerStride2 = @out.Shape.Dimensions[1].Stride;

                        outerStride1 -= innerStride1 * in1.Shape.Dimensions[1].Length;
                        outerStride2 -= innerStride2 * @out.Shape.Dimensions[1].Length;

                        for (long i = 0; i < opsOuter; i++)
                        {
                            for (long j = 0; j < opsInner; j++)
                            {
                                d2[ix2] = (System.SByte)(Math.Log(d1[ix1]));
                                ix1 += innerStride1;
                                ix2 += innerStride2;
                            }

                            ix1 += outerStride1;
                            ix2 += outerStride2;
                        }
                    }
                    else
                    {
                        long n = in1.Shape.Dimensions.LongLength - 3;
                        long[] limits = in1.Shape.Dimensions.Where(x => n-- > 0).Select(x => x.Length).ToArray();
                        long[] counters = new long[limits.LongLength];

                        long totalOps = limits.LongLength == 0 ? 1 : limits.Aggregate<long>((a, b) => a * b);

                        //This chunck of variables are used to prevent repeated calculations of offsets
                        long dimIndex0 = 0 + limits.LongLength;
                        long dimIndex1 = 1 + limits.LongLength;
                        long dimIndex2 = 2 + limits.LongLength;

                        long opsOuter = @out.Shape.Dimensions[0 + limits.LongLength].Length;
                        long opsInner = @out.Shape.Dimensions[1 + limits.LongLength].Length;
                        long opsInnerInner = @out.Shape.Dimensions[2 + limits.LongLength].Length;

                        long outerStride1 = in1.Shape.Dimensions[dimIndex0].Stride;
                        long outerStride3 = @out.Shape.Dimensions[dimIndex0].Stride;

                        long innerStride1 = in1.Shape.Dimensions[dimIndex1].Stride;
                        long innerStride3 = @out.Shape.Dimensions[dimIndex1].Stride;

                        long innerInnerStride1 = in1.Shape.Dimensions[dimIndex2].Stride;
                        long innerInnerStride3 = @out.Shape.Dimensions[dimIndex2].Stride;

                        outerStride1 -= innerStride1 * in1.Shape.Dimensions[dimIndex1].Length;
                        outerStride3 -= innerStride3 * @out.Shape.Dimensions[dimIndex1].Length;

                        innerStride1 -= innerInnerStride1 * in1.Shape.Dimensions[dimIndex2].Length;
                        innerStride3 -= innerInnerStride3 * @out.Shape.Dimensions[dimIndex2].Length;

                        for (long outer = 0; outer < totalOps; outer++)
                        {
                            //Get the array offset for the first element in the outer dimension
                            long ix1 = in1.Shape[counters];
                            long ix3 = @out.Shape[counters];


                            for (long i = 0; i < opsOuter; i++)
                            {
                                for (long j = 0; j < opsInner; j++)
                                {
                                    for (long k = 0; k < opsInnerInner; k++)
                                    {
                                        d2[ix3] = (System.SByte)(Math.Log(d1[ix1]));
                                        ix1 += innerInnerStride1;
                                        ix3 += innerInnerStride3;
                                    }

                                    ix1 += innerStride1;
                                    ix3 += innerStride3;
                                }

                                ix1 += outerStride1;
                                ix3 += outerStride3;
                            }

                            if (counters.LongLength > 0)
                            {
                                //Basically a ripple carry adder
                                long p = counters.LongLength - 1;
                                while (++counters[p] == limits[p] && p > 0)
                                {
                                    counters[p] = 0;
                                    p--;
                                }
                            }
                        }
                    }
                }
            }
        }

        /// <summary>
        /// Unsafe implementation of applying a unary operation
        /// </summary>
        /// <typeparam name="C">The type of operation to perform</typeparam>
        /// <param name="op">The operation instance</param>
        /// <param name="scalar">The input scalar argument</param>
        /// <param name="out">The output target</param>
        internal static void UFunc_Op_Inner_Unary_Scalar_Flush_SByte_TypedImpl<C>(NumCIL.Int8.Log op, System.SByte scalar, NdArray<System.SByte> @out)
            where C : IUnaryOp<System.SByte>
        {
            unsafe
            {
                using (var f2 = new Pinner(@out.DataAccessor))
                {
                    var d2 = (System.SByte*)f2.ptr;

                    if (@out.Shape.Dimensions.Length == 1)
                    {
                        long totalOps = @out.Shape.Dimensions[0].Length;
                        long ix2 = @out.Shape.Offset;
                        long stride2 = @out.Shape.Dimensions[0].Stride;

                        for (long i = 0; i < totalOps; i++)
                        {
                            d2[ix2] = (System.SByte)(Math.Log(scalar));
                            ix2 += stride2;
                        }
                    }
                    else if (@out.Shape.Dimensions.Length == 2)
                    {
                        long opsOuter = @out.Shape.Dimensions[0].Length;
                        long opsInner = @out.Shape.Dimensions[1].Length;

                        long ix2 = @out.Shape.Offset;
                        long outerStride2 = @out.Shape.Dimensions[0].Stride;
                        long innerStride2 = @out.Shape.Dimensions[1].Stride;
                        outerStride2 -= innerStride2 * @out.Shape.Dimensions[1].Length;

                        for (long i = 0; i < opsOuter; i++)
                        {
                            for (long j = 0; j < opsInner; j++)
                            {
                                d2[ix2] = (System.SByte)(Math.Log(scalar));
                                ix2 += innerStride2;
                            }

                            ix2 += outerStride2;
                        }
                    }
                    else
                    {
                        long n = @out.Shape.Dimensions.LongLength - 3;
                        long[] limits = @out.Shape.Dimensions.Where(x => n-- > 0).Select(x => x.Length).ToArray();
                        long[] counters = new long[limits.LongLength];

                        long totalOps = limits.LongLength == 0 ? 1 : limits.Aggregate<long>((a, b) => a * b);

                        //This chunck of variables are used to prevent repeated calculations of offsets
                        long dimIndex0 = 0 + limits.LongLength;
                        long dimIndex1 = 1 + limits.LongLength;
                        long dimIndex2 = 2 + limits.LongLength;

                        long opsOuter = @out.Shape.Dimensions[0 + limits.LongLength].Length;
                        long opsInner = @out.Shape.Dimensions[1 + limits.LongLength].Length;
                        long opsInnerInner = @out.Shape.Dimensions[2 + limits.LongLength].Length;

                        long outerStride3 = @out.Shape.Dimensions[dimIndex0].Stride;
                        long innerStride3 = @out.Shape.Dimensions[dimIndex1].Stride;
                        long innerInnerStride3 = @out.Shape.Dimensions[dimIndex2].Stride;
                        outerStride3 -= innerStride3 * @out.Shape.Dimensions[dimIndex1].Length;
                        innerStride3 -= innerInnerStride3 * @out.Shape.Dimensions[dimIndex2].Length;

                        for (long outer = 0; outer < totalOps; outer++)
                        {
                            //Get the array offset for the first element in the outer dimension
                            long ix3 = @out.Shape[counters];

                            for (long i = 0; i < opsOuter; i++)
                            {
                                for (long j = 0; j < opsInner; j++)
                                {
                                    for (long k = 0; k < opsInnerInner; k++)
                                    {
                                        d2[ix3] = (System.SByte)(Math.Log(scalar));
                                        ix3 += innerInnerStride3;
                                    }

                                    ix3 += innerStride3;
                                }

                                ix3 += outerStride3;
                            }

                            if (counters.LongLength > 0)
                            {
                                //Basically a ripple carry adder
                                long p = counters.LongLength - 1;
                                while (++counters[p] == limits[p] && p > 0)
                                {
                                    counters[p] = 0;
                                    p--;
                                }
                            }
                        }
                    }
                }
            }
        }
        /// <summary>
        /// Unsafe implementation of applying a unary operation
        /// </summary>
        /// <typeparam name="C">The type of operation to perform</typeparam>
        /// <param name="op">The operation instance</param>
        /// <param name="in1">The input argument</param>
        /// <param name="out">The output target</param>
        internal static void UFunc_Op_Inner_Unary_Flush_Byte_TypedImpl<C>(NumCIL.UInt8.Log op, NdArray<System.Byte> in1, NdArray<System.Byte> @out)
            where C : IUnaryOp<System.Byte>
        {
            unsafe
            {
                using (var f1 = new Pinner(in1.DataAccessor))
                using (var f2 = new Pinner(@out.DataAccessor))
                {
                    var d1 = (System.Byte*)f1.ptr;
                    var d2 = (System.Byte*)f2.ptr;

                    if (@out.Shape.Dimensions.Length == 1)
                    {
                        long totalOps = @out.Shape.Dimensions[0].Length;

                        long ix1 = in1.Shape.Offset;
                        long ix2 = @out.Shape.Offset;

                        long stride1 = in1.Shape.Dimensions[0].Stride;
                        long stride2 = @out.Shape.Dimensions[0].Stride;


                        if (stride1 == stride2 && ix1 == ix2)
                        {
                            //Best case, all are equal, just keep a single counter
                            for (long i = 0; i < totalOps; i++)
                            {
                                d2[ix1] = (System.Byte)(Math.Log(d1[ix1]));
                                ix1 += stride1;
                            }
                        }
                        else
                        {
                            for (long i = 0; i < totalOps; i++)
                            {
                                d2[ix2] = (System.Byte)(Math.Log(d1[ix1]));
                                ix1 += stride1;
                                ix2 += stride2;
                            }
                        }
                    }
                    else if (@out.Shape.Dimensions.Length == 2)
                    {
                        long opsOuter = @out.Shape.Dimensions[0].Length;
                        long opsInner = @out.Shape.Dimensions[1].Length;

                        long ix1 = in1.Shape.Offset;
                        long ix2 = @out.Shape.Offset;

                        long outerStride1 = in1.Shape.Dimensions[0].Stride;
                        long outerStride2 = @out.Shape.Dimensions[0].Stride;

                        long innerStride1 = in1.Shape.Dimensions[1].Stride;
                        long innerStride2 = @out.Shape.Dimensions[1].Stride;

                        outerStride1 -= innerStride1 * in1.Shape.Dimensions[1].Length;
                        outerStride2 -= innerStride2 * @out.Shape.Dimensions[1].Length;

                        for (long i = 0; i < opsOuter; i++)
                        {
                            for (long j = 0; j < opsInner; j++)
                            {
                                d2[ix2] = (System.Byte)(Math.Log(d1[ix1]));
                                ix1 += innerStride1;
                                ix2 += innerStride2;
                            }

                            ix1 += outerStride1;
                            ix2 += outerStride2;
                        }
                    }
                    else
                    {
                        long n = in1.Shape.Dimensions.LongLength - 3;
                        long[] limits = in1.Shape.Dimensions.Where(x => n-- > 0).Select(x => x.Length).ToArray();
                        long[] counters = new long[limits.LongLength];

                        long totalOps = limits.LongLength == 0 ? 1 : limits.Aggregate<long>((a, b) => a * b);

                        //This chunck of variables are used to prevent repeated calculations of offsets
                        long dimIndex0 = 0 + limits.LongLength;
                        long dimIndex1 = 1 + limits.LongLength;
                        long dimIndex2 = 2 + limits.LongLength;

                        long opsOuter = @out.Shape.Dimensions[0 + limits.LongLength].Length;
                        long opsInner = @out.Shape.Dimensions[1 + limits.LongLength].Length;
                        long opsInnerInner = @out.Shape.Dimensions[2 + limits.LongLength].Length;

                        long outerStride1 = in1.Shape.Dimensions[dimIndex0].Stride;
                        long outerStride3 = @out.Shape.Dimensions[dimIndex0].Stride;

                        long innerStride1 = in1.Shape.Dimensions[dimIndex1].Stride;
                        long innerStride3 = @out.Shape.Dimensions[dimIndex1].Stride;

                        long innerInnerStride1 = in1.Shape.Dimensions[dimIndex2].Stride;
                        long innerInnerStride3 = @out.Shape.Dimensions[dimIndex2].Stride;

                        outerStride1 -= innerStride1 * in1.Shape.Dimensions[dimIndex1].Length;
                        outerStride3 -= innerStride3 * @out.Shape.Dimensions[dimIndex1].Length;

                        innerStride1 -= innerInnerStride1 * in1.Shape.Dimensions[dimIndex2].Length;
                        innerStride3 -= innerInnerStride3 * @out.Shape.Dimensions[dimIndex2].Length;

                        for (long outer = 0; outer < totalOps; outer++)
                        {
                            //Get the array offset for the first element in the outer dimension
                            long ix1 = in1.Shape[counters];
                            long ix3 = @out.Shape[counters];


                            for (long i = 0; i < opsOuter; i++)
                            {
                                for (long j = 0; j < opsInner; j++)
                                {
                                    for (long k = 0; k < opsInnerInner; k++)
                                    {
                                        d2[ix3] = (System.Byte)(Math.Log(d1[ix1]));
                                        ix1 += innerInnerStride1;
                                        ix3 += innerInnerStride3;
                                    }

                                    ix1 += innerStride1;
                                    ix3 += innerStride3;
                                }

                                ix1 += outerStride1;
                                ix3 += outerStride3;
                            }

                            if (counters.LongLength > 0)
                            {
                                //Basically a ripple carry adder
                                long p = counters.LongLength - 1;
                                while (++counters[p] == limits[p] && p > 0)
                                {
                                    counters[p] = 0;
                                    p--;
                                }
                            }
                        }
                    }
                }
            }
        }

        /// <summary>
        /// Unsafe implementation of applying a unary operation
        /// </summary>
        /// <typeparam name="C">The type of operation to perform</typeparam>
        /// <param name="op">The operation instance</param>
        /// <param name="scalar">The input scalar argument</param>
        /// <param name="out">The output target</param>
        internal static void UFunc_Op_Inner_Unary_Scalar_Flush_Byte_TypedImpl<C>(NumCIL.UInt8.Log op, System.Byte scalar, NdArray<System.Byte> @out)
            where C : IUnaryOp<System.Byte>
        {
            unsafe
            {
                using (var f2 = new Pinner(@out.DataAccessor))
                {
                    var d2 = (System.Byte*)f2.ptr;

                    if (@out.Shape.Dimensions.Length == 1)
                    {
                        long totalOps = @out.Shape.Dimensions[0].Length;
                        long ix2 = @out.Shape.Offset;
                        long stride2 = @out.Shape.Dimensions[0].Stride;

                        for (long i = 0; i < totalOps; i++)
                        {
                            d2[ix2] = (System.Byte)(Math.Log(scalar));
                            ix2 += stride2;
                        }
                    }
                    else if (@out.Shape.Dimensions.Length == 2)
                    {
                        long opsOuter = @out.Shape.Dimensions[0].Length;
                        long opsInner = @out.Shape.Dimensions[1].Length;

                        long ix2 = @out.Shape.Offset;
                        long outerStride2 = @out.Shape.Dimensions[0].Stride;
                        long innerStride2 = @out.Shape.Dimensions[1].Stride;
                        outerStride2 -= innerStride2 * @out.Shape.Dimensions[1].Length;

                        for (long i = 0; i < opsOuter; i++)
                        {
                            for (long j = 0; j < opsInner; j++)
                            {
                                d2[ix2] = (System.Byte)(Math.Log(scalar));
                                ix2 += innerStride2;
                            }

                            ix2 += outerStride2;
                        }
                    }
                    else
                    {
                        long n = @out.Shape.Dimensions.LongLength - 3;
                        long[] limits = @out.Shape.Dimensions.Where(x => n-- > 0).Select(x => x.Length).ToArray();
                        long[] counters = new long[limits.LongLength];

                        long totalOps = limits.LongLength == 0 ? 1 : limits.Aggregate<long>((a, b) => a * b);

                        //This chunck of variables are used to prevent repeated calculations of offsets
                        long dimIndex0 = 0 + limits.LongLength;
                        long dimIndex1 = 1 + limits.LongLength;
                        long dimIndex2 = 2 + limits.LongLength;

                        long opsOuter = @out.Shape.Dimensions[0 + limits.LongLength].Length;
                        long opsInner = @out.Shape.Dimensions[1 + limits.LongLength].Length;
                        long opsInnerInner = @out.Shape.Dimensions[2 + limits.LongLength].Length;

                        long outerStride3 = @out.Shape.Dimensions[dimIndex0].Stride;
                        long innerStride3 = @out.Shape.Dimensions[dimIndex1].Stride;
                        long innerInnerStride3 = @out.Shape.Dimensions[dimIndex2].Stride;
                        outerStride3 -= innerStride3 * @out.Shape.Dimensions[dimIndex1].Length;
                        innerStride3 -= innerInnerStride3 * @out.Shape.Dimensions[dimIndex2].Length;

                        for (long outer = 0; outer < totalOps; outer++)
                        {
                            //Get the array offset for the first element in the outer dimension
                            long ix3 = @out.Shape[counters];

                            for (long i = 0; i < opsOuter; i++)
                            {
                                for (long j = 0; j < opsInner; j++)
                                {
                                    for (long k = 0; k < opsInnerInner; k++)
                                    {
                                        d2[ix3] = (System.Byte)(Math.Log(scalar));
                                        ix3 += innerInnerStride3;
                                    }

                                    ix3 += innerStride3;
                                }

                                ix3 += outerStride3;
                            }

                            if (counters.LongLength > 0)
                            {
                                //Basically a ripple carry adder
                                long p = counters.LongLength - 1;
                                while (++counters[p] == limits[p] && p > 0)
                                {
                                    counters[p] = 0;
                                    p--;
                                }
                            }
                        }
                    }
                }
            }
        }
        /// <summary>
        /// Unsafe implementation of applying a unary operation
        /// </summary>
        /// <typeparam name="C">The type of operation to perform</typeparam>
        /// <param name="op">The operation instance</param>
        /// <param name="in1">The input argument</param>
        /// <param name="out">The output target</param>
        internal static void UFunc_Op_Inner_Unary_Flush_Int16_TypedImpl<C>(NumCIL.Int16.Log op, NdArray<System.Int16> in1, NdArray<System.Int16> @out)
            where C : IUnaryOp<System.Int16>
        {
            unsafe
            {
                using (var f1 = new Pinner(in1.DataAccessor))
                using (var f2 = new Pinner(@out.DataAccessor))
                {
                    var d1 = (System.Int16*)f1.ptr;
                    var d2 = (System.Int16*)f2.ptr;

                    if (@out.Shape.Dimensions.Length == 1)
                    {
                        long totalOps = @out.Shape.Dimensions[0].Length;

                        long ix1 = in1.Shape.Offset;
                        long ix2 = @out.Shape.Offset;

                        long stride1 = in1.Shape.Dimensions[0].Stride;
                        long stride2 = @out.Shape.Dimensions[0].Stride;


                        if (stride1 == stride2 && ix1 == ix2)
                        {
                            //Best case, all are equal, just keep a single counter
                            for (long i = 0; i < totalOps; i++)
                            {
                                d2[ix1] = (System.Int16)(Math.Log(d1[ix1]));
                                ix1 += stride1;
                            }
                        }
                        else
                        {
                            for (long i = 0; i < totalOps; i++)
                            {
                                d2[ix2] = (System.Int16)(Math.Log(d1[ix1]));
                                ix1 += stride1;
                                ix2 += stride2;
                            }
                        }
                    }
                    else if (@out.Shape.Dimensions.Length == 2)
                    {
                        long opsOuter = @out.Shape.Dimensions[0].Length;
                        long opsInner = @out.Shape.Dimensions[1].Length;

                        long ix1 = in1.Shape.Offset;
                        long ix2 = @out.Shape.Offset;

                        long outerStride1 = in1.Shape.Dimensions[0].Stride;
                        long outerStride2 = @out.Shape.Dimensions[0].Stride;

                        long innerStride1 = in1.Shape.Dimensions[1].Stride;
                        long innerStride2 = @out.Shape.Dimensions[1].Stride;

                        outerStride1 -= innerStride1 * in1.Shape.Dimensions[1].Length;
                        outerStride2 -= innerStride2 * @out.Shape.Dimensions[1].Length;

                        for (long i = 0; i < opsOuter; i++)
                        {
                            for (long j = 0; j < opsInner; j++)
                            {
                                d2[ix2] = (System.Int16)(Math.Log(d1[ix1]));
                                ix1 += innerStride1;
                                ix2 += innerStride2;
                            }

                            ix1 += outerStride1;
                            ix2 += outerStride2;
                        }
                    }
                    else
                    {
                        long n = in1.Shape.Dimensions.LongLength - 3;
                        long[] limits = in1.Shape.Dimensions.Where(x => n-- > 0).Select(x => x.Length).ToArray();
                        long[] counters = new long[limits.LongLength];

                        long totalOps = limits.LongLength == 0 ? 1 : limits.Aggregate<long>((a, b) => a * b);

                        //This chunck of variables are used to prevent repeated calculations of offsets
                        long dimIndex0 = 0 + limits.LongLength;
                        long dimIndex1 = 1 + limits.LongLength;
                        long dimIndex2 = 2 + limits.LongLength;

                        long opsOuter = @out.Shape.Dimensions[0 + limits.LongLength].Length;
                        long opsInner = @out.Shape.Dimensions[1 + limits.LongLength].Length;
                        long opsInnerInner = @out.Shape.Dimensions[2 + limits.LongLength].Length;

                        long outerStride1 = in1.Shape.Dimensions[dimIndex0].Stride;
                        long outerStride3 = @out.Shape.Dimensions[dimIndex0].Stride;

                        long innerStride1 = in1.Shape.Dimensions[dimIndex1].Stride;
                        long innerStride3 = @out.Shape.Dimensions[dimIndex1].Stride;

                        long innerInnerStride1 = in1.Shape.Dimensions[dimIndex2].Stride;
                        long innerInnerStride3 = @out.Shape.Dimensions[dimIndex2].Stride;

                        outerStride1 -= innerStride1 * in1.Shape.Dimensions[dimIndex1].Length;
                        outerStride3 -= innerStride3 * @out.Shape.Dimensions[dimIndex1].Length;

                        innerStride1 -= innerInnerStride1 * in1.Shape.Dimensions[dimIndex2].Length;
                        innerStride3 -= innerInnerStride3 * @out.Shape.Dimensions[dimIndex2].Length;

                        for (long outer = 0; outer < totalOps; outer++)
                        {
                            //Get the array offset for the first element in the outer dimension
                            long ix1 = in1.Shape[counters];
                            long ix3 = @out.Shape[counters];


                            for (long i = 0; i < opsOuter; i++)
                            {
                                for (long j = 0; j < opsInner; j++)
                                {
                                    for (long k = 0; k < opsInnerInner; k++)
                                    {
                                        d2[ix3] = (System.Int16)(Math.Log(d1[ix1]));
                                        ix1 += innerInnerStride1;
                                        ix3 += innerInnerStride3;
                                    }

                                    ix1 += innerStride1;
                                    ix3 += innerStride3;
                                }

                                ix1 += outerStride1;
                                ix3 += outerStride3;
                            }

                            if (counters.LongLength > 0)
                            {
                                //Basically a ripple carry adder
                                long p = counters.LongLength - 1;
                                while (++counters[p] == limits[p] && p > 0)
                                {
                                    counters[p] = 0;
                                    p--;
                                }
                            }
                        }
                    }
                }
            }
        }

        /// <summary>
        /// Unsafe implementation of applying a unary operation
        /// </summary>
        /// <typeparam name="C">The type of operation to perform</typeparam>
        /// <param name="op">The operation instance</param>
        /// <param name="scalar">The input scalar argument</param>
        /// <param name="out">The output target</param>
        internal static void UFunc_Op_Inner_Unary_Scalar_Flush_Int16_TypedImpl<C>(NumCIL.Int16.Log op, System.Int16 scalar, NdArray<System.Int16> @out)
            where C : IUnaryOp<System.Int16>
        {
            unsafe
            {
                using (var f2 = new Pinner(@out.DataAccessor))
                {
                    var d2 = (System.Int16*)f2.ptr;

                    if (@out.Shape.Dimensions.Length == 1)
                    {
                        long totalOps = @out.Shape.Dimensions[0].Length;
                        long ix2 = @out.Shape.Offset;
                        long stride2 = @out.Shape.Dimensions[0].Stride;

                        for (long i = 0; i < totalOps; i++)
                        {
                            d2[ix2] = (System.Int16)(Math.Log(scalar));
                            ix2 += stride2;
                        }
                    }
                    else if (@out.Shape.Dimensions.Length == 2)
                    {
                        long opsOuter = @out.Shape.Dimensions[0].Length;
                        long opsInner = @out.Shape.Dimensions[1].Length;

                        long ix2 = @out.Shape.Offset;
                        long outerStride2 = @out.Shape.Dimensions[0].Stride;
                        long innerStride2 = @out.Shape.Dimensions[1].Stride;
                        outerStride2 -= innerStride2 * @out.Shape.Dimensions[1].Length;

                        for (long i = 0; i < opsOuter; i++)
                        {
                            for (long j = 0; j < opsInner; j++)
                            {
                                d2[ix2] = (System.Int16)(Math.Log(scalar));
                                ix2 += innerStride2;
                            }

                            ix2 += outerStride2;
                        }
                    }
                    else
                    {
                        long n = @out.Shape.Dimensions.LongLength - 3;
                        long[] limits = @out.Shape.Dimensions.Where(x => n-- > 0).Select(x => x.Length).ToArray();
                        long[] counters = new long[limits.LongLength];

                        long totalOps = limits.LongLength == 0 ? 1 : limits.Aggregate<long>((a, b) => a * b);

                        //This chunck of variables are used to prevent repeated calculations of offsets
                        long dimIndex0 = 0 + limits.LongLength;
                        long dimIndex1 = 1 + limits.LongLength;
                        long dimIndex2 = 2 + limits.LongLength;

                        long opsOuter = @out.Shape.Dimensions[0 + limits.LongLength].Length;
                        long opsInner = @out.Shape.Dimensions[1 + limits.LongLength].Length;
                        long opsInnerInner = @out.Shape.Dimensions[2 + limits.LongLength].Length;

                        long outerStride3 = @out.Shape.Dimensions[dimIndex0].Stride;
                        long innerStride3 = @out.Shape.Dimensions[dimIndex1].Stride;
                        long innerInnerStride3 = @out.Shape.Dimensions[dimIndex2].Stride;
                        outerStride3 -= innerStride3 * @out.Shape.Dimensions[dimIndex1].Length;
                        innerStride3 -= innerInnerStride3 * @out.Shape.Dimensions[dimIndex2].Length;

                        for (long outer = 0; outer < totalOps; outer++)
                        {
                            //Get the array offset for the first element in the outer dimension
                            long ix3 = @out.Shape[counters];

                            for (long i = 0; i < opsOuter; i++)
                            {
                                for (long j = 0; j < opsInner; j++)
                                {
                                    for (long k = 0; k < opsInnerInner; k++)
                                    {
                                        d2[ix3] = (System.Int16)(Math.Log(scalar));
                                        ix3 += innerInnerStride3;
                                    }

                                    ix3 += innerStride3;
                                }

                                ix3 += outerStride3;
                            }

                            if (counters.LongLength > 0)
                            {
                                //Basically a ripple carry adder
                                long p = counters.LongLength - 1;
                                while (++counters[p] == limits[p] && p > 0)
                                {
                                    counters[p] = 0;
                                    p--;
                                }
                            }
                        }
                    }
                }
            }
        }
        /// <summary>
        /// Unsafe implementation of applying a unary operation
        /// </summary>
        /// <typeparam name="C">The type of operation to perform</typeparam>
        /// <param name="op">The operation instance</param>
        /// <param name="in1">The input argument</param>
        /// <param name="out">The output target</param>
        internal static void UFunc_Op_Inner_Unary_Flush_UInt16_TypedImpl<C>(NumCIL.UInt16.Log op, NdArray<System.UInt16> in1, NdArray<System.UInt16> @out)
            where C : IUnaryOp<System.UInt16>
        {
            unsafe
            {
                using (var f1 = new Pinner(in1.DataAccessor))
                using (var f2 = new Pinner(@out.DataAccessor))
                {
                    var d1 = (System.UInt16*)f1.ptr;
                    var d2 = (System.UInt16*)f2.ptr;

                    if (@out.Shape.Dimensions.Length == 1)
                    {
                        long totalOps = @out.Shape.Dimensions[0].Length;

                        long ix1 = in1.Shape.Offset;
                        long ix2 = @out.Shape.Offset;

                        long stride1 = in1.Shape.Dimensions[0].Stride;
                        long stride2 = @out.Shape.Dimensions[0].Stride;


                        if (stride1 == stride2 && ix1 == ix2)
                        {
                            //Best case, all are equal, just keep a single counter
                            for (long i = 0; i < totalOps; i++)
                            {
                                d2[ix1] = (System.UInt16)(Math.Log(d1[ix1]));
                                ix1 += stride1;
                            }
                        }
                        else
                        {
                            for (long i = 0; i < totalOps; i++)
                            {
                                d2[ix2] = (System.UInt16)(Math.Log(d1[ix1]));
                                ix1 += stride1;
                                ix2 += stride2;
                            }
                        }
                    }
                    else if (@out.Shape.Dimensions.Length == 2)
                    {
                        long opsOuter = @out.Shape.Dimensions[0].Length;
                        long opsInner = @out.Shape.Dimensions[1].Length;

                        long ix1 = in1.Shape.Offset;
                        long ix2 = @out.Shape.Offset;

                        long outerStride1 = in1.Shape.Dimensions[0].Stride;
                        long outerStride2 = @out.Shape.Dimensions[0].Stride;

                        long innerStride1 = in1.Shape.Dimensions[1].Stride;
                        long innerStride2 = @out.Shape.Dimensions[1].Stride;

                        outerStride1 -= innerStride1 * in1.Shape.Dimensions[1].Length;
                        outerStride2 -= innerStride2 * @out.Shape.Dimensions[1].Length;

                        for (long i = 0; i < opsOuter; i++)
                        {
                            for (long j = 0; j < opsInner; j++)
                            {
                                d2[ix2] = (System.UInt16)(Math.Log(d1[ix1]));
                                ix1 += innerStride1;
                                ix2 += innerStride2;
                            }

                            ix1 += outerStride1;
                            ix2 += outerStride2;
                        }
                    }
                    else
                    {
                        long n = in1.Shape.Dimensions.LongLength - 3;
                        long[] limits = in1.Shape.Dimensions.Where(x => n-- > 0).Select(x => x.Length).ToArray();
                        long[] counters = new long[limits.LongLength];

                        long totalOps = limits.LongLength == 0 ? 1 : limits.Aggregate<long>((a, b) => a * b);

                        //This chunck of variables are used to prevent repeated calculations of offsets
                        long dimIndex0 = 0 + limits.LongLength;
                        long dimIndex1 = 1 + limits.LongLength;
                        long dimIndex2 = 2 + limits.LongLength;

                        long opsOuter = @out.Shape.Dimensions[0 + limits.LongLength].Length;
                        long opsInner = @out.Shape.Dimensions[1 + limits.LongLength].Length;
                        long opsInnerInner = @out.Shape.Dimensions[2 + limits.LongLength].Length;

                        long outerStride1 = in1.Shape.Dimensions[dimIndex0].Stride;
                        long outerStride3 = @out.Shape.Dimensions[dimIndex0].Stride;

                        long innerStride1 = in1.Shape.Dimensions[dimIndex1].Stride;
                        long innerStride3 = @out.Shape.Dimensions[dimIndex1].Stride;

                        long innerInnerStride1 = in1.Shape.Dimensions[dimIndex2].Stride;
                        long innerInnerStride3 = @out.Shape.Dimensions[dimIndex2].Stride;

                        outerStride1 -= innerStride1 * in1.Shape.Dimensions[dimIndex1].Length;
                        outerStride3 -= innerStride3 * @out.Shape.Dimensions[dimIndex1].Length;

                        innerStride1 -= innerInnerStride1 * in1.Shape.Dimensions[dimIndex2].Length;
                        innerStride3 -= innerInnerStride3 * @out.Shape.Dimensions[dimIndex2].Length;

                        for (long outer = 0; outer < totalOps; outer++)
                        {
                            //Get the array offset for the first element in the outer dimension
                            long ix1 = in1.Shape[counters];
                            long ix3 = @out.Shape[counters];


                            for (long i = 0; i < opsOuter; i++)
                            {
                                for (long j = 0; j < opsInner; j++)
                                {
                                    for (long k = 0; k < opsInnerInner; k++)
                                    {
                                        d2[ix3] = (System.UInt16)(Math.Log(d1[ix1]));
                                        ix1 += innerInnerStride1;
                                        ix3 += innerInnerStride3;
                                    }

                                    ix1 += innerStride1;
                                    ix3 += innerStride3;
                                }

                                ix1 += outerStride1;
                                ix3 += outerStride3;
                            }

                            if (counters.LongLength > 0)
                            {
                                //Basically a ripple carry adder
                                long p = counters.LongLength - 1;
                                while (++counters[p] == limits[p] && p > 0)
                                {
                                    counters[p] = 0;
                                    p--;
                                }
                            }
                        }
                    }
                }
            }
        }

        /// <summary>
        /// Unsafe implementation of applying a unary operation
        /// </summary>
        /// <typeparam name="C">The type of operation to perform</typeparam>
        /// <param name="op">The operation instance</param>
        /// <param name="scalar">The input scalar argument</param>
        /// <param name="out">The output target</param>
        internal static void UFunc_Op_Inner_Unary_Scalar_Flush_UInt16_TypedImpl<C>(NumCIL.UInt16.Log op, System.UInt16 scalar, NdArray<System.UInt16> @out)
            where C : IUnaryOp<System.UInt16>
        {
            unsafe
            {
                using (var f2 = new Pinner(@out.DataAccessor))
                {
                    var d2 = (System.UInt16*)f2.ptr;

                    if (@out.Shape.Dimensions.Length == 1)
                    {
                        long totalOps = @out.Shape.Dimensions[0].Length;
                        long ix2 = @out.Shape.Offset;
                        long stride2 = @out.Shape.Dimensions[0].Stride;

                        for (long i = 0; i < totalOps; i++)
                        {
                            d2[ix2] = (System.UInt16)(Math.Log(scalar));
                            ix2 += stride2;
                        }
                    }
                    else if (@out.Shape.Dimensions.Length == 2)
                    {
                        long opsOuter = @out.Shape.Dimensions[0].Length;
                        long opsInner = @out.Shape.Dimensions[1].Length;

                        long ix2 = @out.Shape.Offset;
                        long outerStride2 = @out.Shape.Dimensions[0].Stride;
                        long innerStride2 = @out.Shape.Dimensions[1].Stride;
                        outerStride2 -= innerStride2 * @out.Shape.Dimensions[1].Length;

                        for (long i = 0; i < opsOuter; i++)
                        {
                            for (long j = 0; j < opsInner; j++)
                            {
                                d2[ix2] = (System.UInt16)(Math.Log(scalar));
                                ix2 += innerStride2;
                            }

                            ix2 += outerStride2;
                        }
                    }
                    else
                    {
                        long n = @out.Shape.Dimensions.LongLength - 3;
                        long[] limits = @out.Shape.Dimensions.Where(x => n-- > 0).Select(x => x.Length).ToArray();
                        long[] counters = new long[limits.LongLength];

                        long totalOps = limits.LongLength == 0 ? 1 : limits.Aggregate<long>((a, b) => a * b);

                        //This chunck of variables are used to prevent repeated calculations of offsets
                        long dimIndex0 = 0 + limits.LongLength;
                        long dimIndex1 = 1 + limits.LongLength;
                        long dimIndex2 = 2 + limits.LongLength;

                        long opsOuter = @out.Shape.Dimensions[0 + limits.LongLength].Length;
                        long opsInner = @out.Shape.Dimensions[1 + limits.LongLength].Length;
                        long opsInnerInner = @out.Shape.Dimensions[2 + limits.LongLength].Length;

                        long outerStride3 = @out.Shape.Dimensions[dimIndex0].Stride;
                        long innerStride3 = @out.Shape.Dimensions[dimIndex1].Stride;
                        long innerInnerStride3 = @out.Shape.Dimensions[dimIndex2].Stride;
                        outerStride3 -= innerStride3 * @out.Shape.Dimensions[dimIndex1].Length;
                        innerStride3 -= innerInnerStride3 * @out.Shape.Dimensions[dimIndex2].Length;

                        for (long outer = 0; outer < totalOps; outer++)
                        {
                            //Get the array offset for the first element in the outer dimension
                            long ix3 = @out.Shape[counters];

                            for (long i = 0; i < opsOuter; i++)
                            {
                                for (long j = 0; j < opsInner; j++)
                                {
                                    for (long k = 0; k < opsInnerInner; k++)
                                    {
                                        d2[ix3] = (System.UInt16)(Math.Log(scalar));
                                        ix3 += innerInnerStride3;
                                    }

                                    ix3 += innerStride3;
                                }

                                ix3 += outerStride3;
                            }

                            if (counters.LongLength > 0)
                            {
                                //Basically a ripple carry adder
                                long p = counters.LongLength - 1;
                                while (++counters[p] == limits[p] && p > 0)
                                {
                                    counters[p] = 0;
                                    p--;
                                }
                            }
                        }
                    }
                }
            }
        }
        /// <summary>
        /// Unsafe implementation of applying a unary operation
        /// </summary>
        /// <typeparam name="C">The type of operation to perform</typeparam>
        /// <param name="op">The operation instance</param>
        /// <param name="in1">The input argument</param>
        /// <param name="out">The output target</param>
        internal static void UFunc_Op_Inner_Unary_Flush_Int32_TypedImpl<C>(NumCIL.Int32.Log op, NdArray<System.Int32> in1, NdArray<System.Int32> @out)
            where C : IUnaryOp<System.Int32>
        {
            unsafe
            {
                using (var f1 = new Pinner(in1.DataAccessor))
                using (var f2 = new Pinner(@out.DataAccessor))
                {
                    var d1 = (System.Int32*)f1.ptr;
                    var d2 = (System.Int32*)f2.ptr;

                    if (@out.Shape.Dimensions.Length == 1)
                    {
                        long totalOps = @out.Shape.Dimensions[0].Length;

                        long ix1 = in1.Shape.Offset;
                        long ix2 = @out.Shape.Offset;

                        long stride1 = in1.Shape.Dimensions[0].Stride;
                        long stride2 = @out.Shape.Dimensions[0].Stride;


                        if (stride1 == stride2 && ix1 == ix2)
                        {
                            //Best case, all are equal, just keep a single counter
                            for (long i = 0; i < totalOps; i++)
                            {
                                d2[ix1] = (System.Int32)(Math.Log(d1[ix1]));
                                ix1 += stride1;
                            }
                        }
                        else
                        {
                            for (long i = 0; i < totalOps; i++)
                            {
                                d2[ix2] = (System.Int32)(Math.Log(d1[ix1]));
                                ix1 += stride1;
                                ix2 += stride2;
                            }
                        }
                    }
                    else if (@out.Shape.Dimensions.Length == 2)
                    {
                        long opsOuter = @out.Shape.Dimensions[0].Length;
                        long opsInner = @out.Shape.Dimensions[1].Length;

                        long ix1 = in1.Shape.Offset;
                        long ix2 = @out.Shape.Offset;

                        long outerStride1 = in1.Shape.Dimensions[0].Stride;
                        long outerStride2 = @out.Shape.Dimensions[0].Stride;

                        long innerStride1 = in1.Shape.Dimensions[1].Stride;
                        long innerStride2 = @out.Shape.Dimensions[1].Stride;

                        outerStride1 -= innerStride1 * in1.Shape.Dimensions[1].Length;
                        outerStride2 -= innerStride2 * @out.Shape.Dimensions[1].Length;

                        for (long i = 0; i < opsOuter; i++)
                        {
                            for (long j = 0; j < opsInner; j++)
                            {
                                d2[ix2] = (System.Int32)(Math.Log(d1[ix1]));
                                ix1 += innerStride1;
                                ix2 += innerStride2;
                            }

                            ix1 += outerStride1;
                            ix2 += outerStride2;
                        }
                    }
                    else
                    {
                        long n = in1.Shape.Dimensions.LongLength - 3;
                        long[] limits = in1.Shape.Dimensions.Where(x => n-- > 0).Select(x => x.Length).ToArray();
                        long[] counters = new long[limits.LongLength];

                        long totalOps = limits.LongLength == 0 ? 1 : limits.Aggregate<long>((a, b) => a * b);

                        //This chunck of variables are used to prevent repeated calculations of offsets
                        long dimIndex0 = 0 + limits.LongLength;
                        long dimIndex1 = 1 + limits.LongLength;
                        long dimIndex2 = 2 + limits.LongLength;

                        long opsOuter = @out.Shape.Dimensions[0 + limits.LongLength].Length;
                        long opsInner = @out.Shape.Dimensions[1 + limits.LongLength].Length;
                        long opsInnerInner = @out.Shape.Dimensions[2 + limits.LongLength].Length;

                        long outerStride1 = in1.Shape.Dimensions[dimIndex0].Stride;
                        long outerStride3 = @out.Shape.Dimensions[dimIndex0].Stride;

                        long innerStride1 = in1.Shape.Dimensions[dimIndex1].Stride;
                        long innerStride3 = @out.Shape.Dimensions[dimIndex1].Stride;

                        long innerInnerStride1 = in1.Shape.Dimensions[dimIndex2].Stride;
                        long innerInnerStride3 = @out.Shape.Dimensions[dimIndex2].Stride;

                        outerStride1 -= innerStride1 * in1.Shape.Dimensions[dimIndex1].Length;
                        outerStride3 -= innerStride3 * @out.Shape.Dimensions[dimIndex1].Length;

                        innerStride1 -= innerInnerStride1 * in1.Shape.Dimensions[dimIndex2].Length;
                        innerStride3 -= innerInnerStride3 * @out.Shape.Dimensions[dimIndex2].Length;

                        for (long outer = 0; outer < totalOps; outer++)
                        {
                            //Get the array offset for the first element in the outer dimension
                            long ix1 = in1.Shape[counters];
                            long ix3 = @out.Shape[counters];


                            for (long i = 0; i < opsOuter; i++)
                            {
                                for (long j = 0; j < opsInner; j++)
                                {
                                    for (long k = 0; k < opsInnerInner; k++)
                                    {
                                        d2[ix3] = (System.Int32)(Math.Log(d1[ix1]));
                                        ix1 += innerInnerStride1;
                                        ix3 += innerInnerStride3;
                                    }

                                    ix1 += innerStride1;
                                    ix3 += innerStride3;
                                }

                                ix1 += outerStride1;
                                ix3 += outerStride3;
                            }

                            if (counters.LongLength > 0)
                            {
                                //Basically a ripple carry adder
                                long p = counters.LongLength - 1;
                                while (++counters[p] == limits[p] && p > 0)
                                {
                                    counters[p] = 0;
                                    p--;
                                }
                            }
                        }
                    }
                }
            }
        }

        /// <summary>
        /// Unsafe implementation of applying a unary operation
        /// </summary>
        /// <typeparam name="C">The type of operation to perform</typeparam>
        /// <param name="op">The operation instance</param>
        /// <param name="scalar">The input scalar argument</param>
        /// <param name="out">The output target</param>
        internal static void UFunc_Op_Inner_Unary_Scalar_Flush_Int32_TypedImpl<C>(NumCIL.Int32.Log op, System.Int32 scalar, NdArray<System.Int32> @out)
            where C : IUnaryOp<System.Int32>
        {
            unsafe
            {
                using (var f2 = new Pinner(@out.DataAccessor))
                {
                    var d2 = (System.Int32*)f2.ptr;

                    if (@out.Shape.Dimensions.Length == 1)
                    {
                        long totalOps = @out.Shape.Dimensions[0].Length;
                        long ix2 = @out.Shape.Offset;
                        long stride2 = @out.Shape.Dimensions[0].Stride;

                        for (long i = 0; i < totalOps; i++)
                        {
                            d2[ix2] = (System.Int32)(Math.Log(scalar));
                            ix2 += stride2;
                        }
                    }
                    else if (@out.Shape.Dimensions.Length == 2)
                    {
                        long opsOuter = @out.Shape.Dimensions[0].Length;
                        long opsInner = @out.Shape.Dimensions[1].Length;

                        long ix2 = @out.Shape.Offset;
                        long outerStride2 = @out.Shape.Dimensions[0].Stride;
                        long innerStride2 = @out.Shape.Dimensions[1].Stride;
                        outerStride2 -= innerStride2 * @out.Shape.Dimensions[1].Length;

                        for (long i = 0; i < opsOuter; i++)
                        {
                            for (long j = 0; j < opsInner; j++)
                            {
                                d2[ix2] = (System.Int32)(Math.Log(scalar));
                                ix2 += innerStride2;
                            }

                            ix2 += outerStride2;
                        }
                    }
                    else
                    {
                        long n = @out.Shape.Dimensions.LongLength - 3;
                        long[] limits = @out.Shape.Dimensions.Where(x => n-- > 0).Select(x => x.Length).ToArray();
                        long[] counters = new long[limits.LongLength];

                        long totalOps = limits.LongLength == 0 ? 1 : limits.Aggregate<long>((a, b) => a * b);

                        //This chunck of variables are used to prevent repeated calculations of offsets
                        long dimIndex0 = 0 + limits.LongLength;
                        long dimIndex1 = 1 + limits.LongLength;
                        long dimIndex2 = 2 + limits.LongLength;

                        long opsOuter = @out.Shape.Dimensions[0 + limits.LongLength].Length;
                        long opsInner = @out.Shape.Dimensions[1 + limits.LongLength].Length;
                        long opsInnerInner = @out.Shape.Dimensions[2 + limits.LongLength].Length;

                        long outerStride3 = @out.Shape.Dimensions[dimIndex0].Stride;
                        long innerStride3 = @out.Shape.Dimensions[dimIndex1].Stride;
                        long innerInnerStride3 = @out.Shape.Dimensions[dimIndex2].Stride;
                        outerStride3 -= innerStride3 * @out.Shape.Dimensions[dimIndex1].Length;
                        innerStride3 -= innerInnerStride3 * @out.Shape.Dimensions[dimIndex2].Length;

                        for (long outer = 0; outer < totalOps; outer++)
                        {
                            //Get the array offset for the first element in the outer dimension
                            long ix3 = @out.Shape[counters];

                            for (long i = 0; i < opsOuter; i++)
                            {
                                for (long j = 0; j < opsInner; j++)
                                {
                                    for (long k = 0; k < opsInnerInner; k++)
                                    {
                                        d2[ix3] = (System.Int32)(Math.Log(scalar));
                                        ix3 += innerInnerStride3;
                                    }

                                    ix3 += innerStride3;
                                }

                                ix3 += outerStride3;
                            }

                            if (counters.LongLength > 0)
                            {
                                //Basically a ripple carry adder
                                long p = counters.LongLength - 1;
                                while (++counters[p] == limits[p] && p > 0)
                                {
                                    counters[p] = 0;
                                    p--;
                                }
                            }
                        }
                    }
                }
            }
        }
        /// <summary>
        /// Unsafe implementation of applying a unary operation
        /// </summary>
        /// <typeparam name="C">The type of operation to perform</typeparam>
        /// <param name="op">The operation instance</param>
        /// <param name="in1">The input argument</param>
        /// <param name="out">The output target</param>
        internal static void UFunc_Op_Inner_Unary_Flush_UInt32_TypedImpl<C>(NumCIL.UInt32.Log op, NdArray<System.UInt32> in1, NdArray<System.UInt32> @out)
            where C : IUnaryOp<System.UInt32>
        {
            unsafe
            {
                using (var f1 = new Pinner(in1.DataAccessor))
                using (var f2 = new Pinner(@out.DataAccessor))
                {
                    var d1 = (System.UInt32*)f1.ptr;
                    var d2 = (System.UInt32*)f2.ptr;

                    if (@out.Shape.Dimensions.Length == 1)
                    {
                        long totalOps = @out.Shape.Dimensions[0].Length;

                        long ix1 = in1.Shape.Offset;
                        long ix2 = @out.Shape.Offset;

                        long stride1 = in1.Shape.Dimensions[0].Stride;
                        long stride2 = @out.Shape.Dimensions[0].Stride;


                        if (stride1 == stride2 && ix1 == ix2)
                        {
                            //Best case, all are equal, just keep a single counter
                            for (long i = 0; i < totalOps; i++)
                            {
                                d2[ix1] = (System.UInt32)(Math.Log(d1[ix1]));
                                ix1 += stride1;
                            }
                        }
                        else
                        {
                            for (long i = 0; i < totalOps; i++)
                            {
                                d2[ix2] = (System.UInt32)(Math.Log(d1[ix1]));
                                ix1 += stride1;
                                ix2 += stride2;
                            }
                        }
                    }
                    else if (@out.Shape.Dimensions.Length == 2)
                    {
                        long opsOuter = @out.Shape.Dimensions[0].Length;
                        long opsInner = @out.Shape.Dimensions[1].Length;

                        long ix1 = in1.Shape.Offset;
                        long ix2 = @out.Shape.Offset;

                        long outerStride1 = in1.Shape.Dimensions[0].Stride;
                        long outerStride2 = @out.Shape.Dimensions[0].Stride;

                        long innerStride1 = in1.Shape.Dimensions[1].Stride;
                        long innerStride2 = @out.Shape.Dimensions[1].Stride;

                        outerStride1 -= innerStride1 * in1.Shape.Dimensions[1].Length;
                        outerStride2 -= innerStride2 * @out.Shape.Dimensions[1].Length;

                        for (long i = 0; i < opsOuter; i++)
                        {
                            for (long j = 0; j < opsInner; j++)
                            {
                                d2[ix2] = (System.UInt32)(Math.Log(d1[ix1]));
                                ix1 += innerStride1;
                                ix2 += innerStride2;
                            }

                            ix1 += outerStride1;
                            ix2 += outerStride2;
                        }
                    }
                    else
                    {
                        long n = in1.Shape.Dimensions.LongLength - 3;
                        long[] limits = in1.Shape.Dimensions.Where(x => n-- > 0).Select(x => x.Length).ToArray();
                        long[] counters = new long[limits.LongLength];

                        long totalOps = limits.LongLength == 0 ? 1 : limits.Aggregate<long>((a, b) => a * b);

                        //This chunck of variables are used to prevent repeated calculations of offsets
                        long dimIndex0 = 0 + limits.LongLength;
                        long dimIndex1 = 1 + limits.LongLength;
                        long dimIndex2 = 2 + limits.LongLength;

                        long opsOuter = @out.Shape.Dimensions[0 + limits.LongLength].Length;
                        long opsInner = @out.Shape.Dimensions[1 + limits.LongLength].Length;
                        long opsInnerInner = @out.Shape.Dimensions[2 + limits.LongLength].Length;

                        long outerStride1 = in1.Shape.Dimensions[dimIndex0].Stride;
                        long outerStride3 = @out.Shape.Dimensions[dimIndex0].Stride;

                        long innerStride1 = in1.Shape.Dimensions[dimIndex1].Stride;
                        long innerStride3 = @out.Shape.Dimensions[dimIndex1].Stride;

                        long innerInnerStride1 = in1.Shape.Dimensions[dimIndex2].Stride;
                        long innerInnerStride3 = @out.Shape.Dimensions[dimIndex2].Stride;

                        outerStride1 -= innerStride1 * in1.Shape.Dimensions[dimIndex1].Length;
                        outerStride3 -= innerStride3 * @out.Shape.Dimensions[dimIndex1].Length;

                        innerStride1 -= innerInnerStride1 * in1.Shape.Dimensions[dimIndex2].Length;
                        innerStride3 -= innerInnerStride3 * @out.Shape.Dimensions[dimIndex2].Length;

                        for (long outer = 0; outer < totalOps; outer++)
                        {
                            //Get the array offset for the first element in the outer dimension
                            long ix1 = in1.Shape[counters];
                            long ix3 = @out.Shape[counters];


                            for (long i = 0; i < opsOuter; i++)
                            {
                                for (long j = 0; j < opsInner; j++)
                                {
                                    for (long k = 0; k < opsInnerInner; k++)
                                    {
                                        d2[ix3] = (System.UInt32)(Math.Log(d1[ix1]));
                                        ix1 += innerInnerStride1;
                                        ix3 += innerInnerStride3;
                                    }

                                    ix1 += innerStride1;
                                    ix3 += innerStride3;
                                }

                                ix1 += outerStride1;
                                ix3 += outerStride3;
                            }

                            if (counters.LongLength > 0)
                            {
                                //Basically a ripple carry adder
                                long p = counters.LongLength - 1;
                                while (++counters[p] == limits[p] && p > 0)
                                {
                                    counters[p] = 0;
                                    p--;
                                }
                            }
                        }
                    }
                }
            }
        }

        /// <summary>
        /// Unsafe implementation of applying a unary operation
        /// </summary>
        /// <typeparam name="C">The type of operation to perform</typeparam>
        /// <param name="op">The operation instance</param>
        /// <param name="scalar">The input scalar argument</param>
        /// <param name="out">The output target</param>
        internal static void UFunc_Op_Inner_Unary_Scalar_Flush_UInt32_TypedImpl<C>(NumCIL.UInt32.Log op, System.UInt32 scalar, NdArray<System.UInt32> @out)
            where C : IUnaryOp<System.UInt32>
        {
            unsafe
            {
                using (var f2 = new Pinner(@out.DataAccessor))
                {
                    var d2 = (System.UInt32*)f2.ptr;

                    if (@out.Shape.Dimensions.Length == 1)
                    {
                        long totalOps = @out.Shape.Dimensions[0].Length;
                        long ix2 = @out.Shape.Offset;
                        long stride2 = @out.Shape.Dimensions[0].Stride;

                        for (long i = 0; i < totalOps; i++)
                        {
                            d2[ix2] = (System.UInt32)(Math.Log(scalar));
                            ix2 += stride2;
                        }
                    }
                    else if (@out.Shape.Dimensions.Length == 2)
                    {
                        long opsOuter = @out.Shape.Dimensions[0].Length;
                        long opsInner = @out.Shape.Dimensions[1].Length;

                        long ix2 = @out.Shape.Offset;
                        long outerStride2 = @out.Shape.Dimensions[0].Stride;
                        long innerStride2 = @out.Shape.Dimensions[1].Stride;
                        outerStride2 -= innerStride2 * @out.Shape.Dimensions[1].Length;

                        for (long i = 0; i < opsOuter; i++)
                        {
                            for (long j = 0; j < opsInner; j++)
                            {
                                d2[ix2] = (System.UInt32)(Math.Log(scalar));
                                ix2 += innerStride2;
                            }

                            ix2 += outerStride2;
                        }
                    }
                    else
                    {
                        long n = @out.Shape.Dimensions.LongLength - 3;
                        long[] limits = @out.Shape.Dimensions.Where(x => n-- > 0).Select(x => x.Length).ToArray();
                        long[] counters = new long[limits.LongLength];

                        long totalOps = limits.LongLength == 0 ? 1 : limits.Aggregate<long>((a, b) => a * b);

                        //This chunck of variables are used to prevent repeated calculations of offsets
                        long dimIndex0 = 0 + limits.LongLength;
                        long dimIndex1 = 1 + limits.LongLength;
                        long dimIndex2 = 2 + limits.LongLength;

                        long opsOuter = @out.Shape.Dimensions[0 + limits.LongLength].Length;
                        long opsInner = @out.Shape.Dimensions[1 + limits.LongLength].Length;
                        long opsInnerInner = @out.Shape.Dimensions[2 + limits.LongLength].Length;

                        long outerStride3 = @out.Shape.Dimensions[dimIndex0].Stride;
                        long innerStride3 = @out.Shape.Dimensions[dimIndex1].Stride;
                        long innerInnerStride3 = @out.Shape.Dimensions[dimIndex2].Stride;
                        outerStride3 -= innerStride3 * @out.Shape.Dimensions[dimIndex1].Length;
                        innerStride3 -= innerInnerStride3 * @out.Shape.Dimensions[dimIndex2].Length;

                        for (long outer = 0; outer < totalOps; outer++)
                        {
                            //Get the array offset for the first element in the outer dimension
                            long ix3 = @out.Shape[counters];

                            for (long i = 0; i < opsOuter; i++)
                            {
                                for (long j = 0; j < opsInner; j++)
                                {
                                    for (long k = 0; k < opsInnerInner; k++)
                                    {
                                        d2[ix3] = (System.UInt32)(Math.Log(scalar));
                                        ix3 += innerInnerStride3;
                                    }

                                    ix3 += innerStride3;
                                }

                                ix3 += outerStride3;
                            }

                            if (counters.LongLength > 0)
                            {
                                //Basically a ripple carry adder
                                long p = counters.LongLength - 1;
                                while (++counters[p] == limits[p] && p > 0)
                                {
                                    counters[p] = 0;
                                    p--;
                                }
                            }
                        }
                    }
                }
            }
        }
        /// <summary>
        /// Unsafe implementation of applying a unary operation
        /// </summary>
        /// <typeparam name="C">The type of operation to perform</typeparam>
        /// <param name="op">The operation instance</param>
        /// <param name="in1">The input argument</param>
        /// <param name="out">The output target</param>
        internal static void UFunc_Op_Inner_Unary_Flush_Int64_TypedImpl<C>(NumCIL.Int64.Log op, NdArray<System.Int64> in1, NdArray<System.Int64> @out)
            where C : IUnaryOp<System.Int64>
        {
            unsafe
            {
                using (var f1 = new Pinner(in1.DataAccessor))
                using (var f2 = new Pinner(@out.DataAccessor))
                {
                    var d1 = (System.Int64*)f1.ptr;
                    var d2 = (System.Int64*)f2.ptr;

                    if (@out.Shape.Dimensions.Length == 1)
                    {
                        long totalOps = @out.Shape.Dimensions[0].Length;

                        long ix1 = in1.Shape.Offset;
                        long ix2 = @out.Shape.Offset;

                        long stride1 = in1.Shape.Dimensions[0].Stride;
                        long stride2 = @out.Shape.Dimensions[0].Stride;


                        if (stride1 == stride2 && ix1 == ix2)
                        {
                            //Best case, all are equal, just keep a single counter
                            for (long i = 0; i < totalOps; i++)
                            {
                                d2[ix1] = (System.Int64)(Math.Log(d1[ix1]));
                                ix1 += stride1;
                            }
                        }
                        else
                        {
                            for (long i = 0; i < totalOps; i++)
                            {
                                d2[ix2] = (System.Int64)(Math.Log(d1[ix1]));
                                ix1 += stride1;
                                ix2 += stride2;
                            }
                        }
                    }
                    else if (@out.Shape.Dimensions.Length == 2)
                    {
                        long opsOuter = @out.Shape.Dimensions[0].Length;
                        long opsInner = @out.Shape.Dimensions[1].Length;

                        long ix1 = in1.Shape.Offset;
                        long ix2 = @out.Shape.Offset;

                        long outerStride1 = in1.Shape.Dimensions[0].Stride;
                        long outerStride2 = @out.Shape.Dimensions[0].Stride;

                        long innerStride1 = in1.Shape.Dimensions[1].Stride;
                        long innerStride2 = @out.Shape.Dimensions[1].Stride;

                        outerStride1 -= innerStride1 * in1.Shape.Dimensions[1].Length;
                        outerStride2 -= innerStride2 * @out.Shape.Dimensions[1].Length;

                        for (long i = 0; i < opsOuter; i++)
                        {
                            for (long j = 0; j < opsInner; j++)
                            {
                                d2[ix2] = (System.Int64)(Math.Log(d1[ix1]));
                                ix1 += innerStride1;
                                ix2 += innerStride2;
                            }

                            ix1 += outerStride1;
                            ix2 += outerStride2;
                        }
                    }
                    else
                    {
                        long n = in1.Shape.Dimensions.LongLength - 3;
                        long[] limits = in1.Shape.Dimensions.Where(x => n-- > 0).Select(x => x.Length).ToArray();
                        long[] counters = new long[limits.LongLength];

                        long totalOps = limits.LongLength == 0 ? 1 : limits.Aggregate<long>((a, b) => a * b);

                        //This chunck of variables are used to prevent repeated calculations of offsets
                        long dimIndex0 = 0 + limits.LongLength;
                        long dimIndex1 = 1 + limits.LongLength;
                        long dimIndex2 = 2 + limits.LongLength;

                        long opsOuter = @out.Shape.Dimensions[0 + limits.LongLength].Length;
                        long opsInner = @out.Shape.Dimensions[1 + limits.LongLength].Length;
                        long opsInnerInner = @out.Shape.Dimensions[2 + limits.LongLength].Length;

                        long outerStride1 = in1.Shape.Dimensions[dimIndex0].Stride;
                        long outerStride3 = @out.Shape.Dimensions[dimIndex0].Stride;

                        long innerStride1 = in1.Shape.Dimensions[dimIndex1].Stride;
                        long innerStride3 = @out.Shape.Dimensions[dimIndex1].Stride;

                        long innerInnerStride1 = in1.Shape.Dimensions[dimIndex2].Stride;
                        long innerInnerStride3 = @out.Shape.Dimensions[dimIndex2].Stride;

                        outerStride1 -= innerStride1 * in1.Shape.Dimensions[dimIndex1].Length;
                        outerStride3 -= innerStride3 * @out.Shape.Dimensions[dimIndex1].Length;

                        innerStride1 -= innerInnerStride1 * in1.Shape.Dimensions[dimIndex2].Length;
                        innerStride3 -= innerInnerStride3 * @out.Shape.Dimensions[dimIndex2].Length;

                        for (long outer = 0; outer < totalOps; outer++)
                        {
                            //Get the array offset for the first element in the outer dimension
                            long ix1 = in1.Shape[counters];
                            long ix3 = @out.Shape[counters];


                            for (long i = 0; i < opsOuter; i++)
                            {
                                for (long j = 0; j < opsInner; j++)
                                {
                                    for (long k = 0; k < opsInnerInner; k++)
                                    {
                                        d2[ix3] = (System.Int64)(Math.Log(d1[ix1]));
                                        ix1 += innerInnerStride1;
                                        ix3 += innerInnerStride3;
                                    }

                                    ix1 += innerStride1;
                                    ix3 += innerStride3;
                                }

                                ix1 += outerStride1;
                                ix3 += outerStride3;
                            }

                            if (counters.LongLength > 0)
                            {
                                //Basically a ripple carry adder
                                long p = counters.LongLength - 1;
                                while (++counters[p] == limits[p] && p > 0)
                                {
                                    counters[p] = 0;
                                    p--;
                                }
                            }
                        }
                    }
                }
            }
        }

        /// <summary>
        /// Unsafe implementation of applying a unary operation
        /// </summary>
        /// <typeparam name="C">The type of operation to perform</typeparam>
        /// <param name="op">The operation instance</param>
        /// <param name="scalar">The input scalar argument</param>
        /// <param name="out">The output target</param>
        internal static void UFunc_Op_Inner_Unary_Scalar_Flush_Int64_TypedImpl<C>(NumCIL.Int64.Log op, System.Int64 scalar, NdArray<System.Int64> @out)
            where C : IUnaryOp<System.Int64>
        {
            unsafe
            {
                using (var f2 = new Pinner(@out.DataAccessor))
                {
                    var d2 = (System.Int64*)f2.ptr;

                    if (@out.Shape.Dimensions.Length == 1)
                    {
                        long totalOps = @out.Shape.Dimensions[0].Length;
                        long ix2 = @out.Shape.Offset;
                        long stride2 = @out.Shape.Dimensions[0].Stride;

                        for (long i = 0; i < totalOps; i++)
                        {
                            d2[ix2] = (System.Int64)(Math.Log(scalar));
                            ix2 += stride2;
                        }
                    }
                    else if (@out.Shape.Dimensions.Length == 2)
                    {
                        long opsOuter = @out.Shape.Dimensions[0].Length;
                        long opsInner = @out.Shape.Dimensions[1].Length;

                        long ix2 = @out.Shape.Offset;
                        long outerStride2 = @out.Shape.Dimensions[0].Stride;
                        long innerStride2 = @out.Shape.Dimensions[1].Stride;
                        outerStride2 -= innerStride2 * @out.Shape.Dimensions[1].Length;

                        for (long i = 0; i < opsOuter; i++)
                        {
                            for (long j = 0; j < opsInner; j++)
                            {
                                d2[ix2] = (System.Int64)(Math.Log(scalar));
                                ix2 += innerStride2;
                            }

                            ix2 += outerStride2;
                        }
                    }
                    else
                    {
                        long n = @out.Shape.Dimensions.LongLength - 3;
                        long[] limits = @out.Shape.Dimensions.Where(x => n-- > 0).Select(x => x.Length).ToArray();
                        long[] counters = new long[limits.LongLength];

                        long totalOps = limits.LongLength == 0 ? 1 : limits.Aggregate<long>((a, b) => a * b);

                        //This chunck of variables are used to prevent repeated calculations of offsets
                        long dimIndex0 = 0 + limits.LongLength;
                        long dimIndex1 = 1 + limits.LongLength;
                        long dimIndex2 = 2 + limits.LongLength;

                        long opsOuter = @out.Shape.Dimensions[0 + limits.LongLength].Length;
                        long opsInner = @out.Shape.Dimensions[1 + limits.LongLength].Length;
                        long opsInnerInner = @out.Shape.Dimensions[2 + limits.LongLength].Length;

                        long outerStride3 = @out.Shape.Dimensions[dimIndex0].Stride;
                        long innerStride3 = @out.Shape.Dimensions[dimIndex1].Stride;
                        long innerInnerStride3 = @out.Shape.Dimensions[dimIndex2].Stride;
                        outerStride3 -= innerStride3 * @out.Shape.Dimensions[dimIndex1].Length;
                        innerStride3 -= innerInnerStride3 * @out.Shape.Dimensions[dimIndex2].Length;

                        for (long outer = 0; outer < totalOps; outer++)
                        {
                            //Get the array offset for the first element in the outer dimension
                            long ix3 = @out.Shape[counters];

                            for (long i = 0; i < opsOuter; i++)
                            {
                                for (long j = 0; j < opsInner; j++)
                                {
                                    for (long k = 0; k < opsInnerInner; k++)
                                    {
                                        d2[ix3] = (System.Int64)(Math.Log(scalar));
                                        ix3 += innerInnerStride3;
                                    }

                                    ix3 += innerStride3;
                                }

                                ix3 += outerStride3;
                            }

                            if (counters.LongLength > 0)
                            {
                                //Basically a ripple carry adder
                                long p = counters.LongLength - 1;
                                while (++counters[p] == limits[p] && p > 0)
                                {
                                    counters[p] = 0;
                                    p--;
                                }
                            }
                        }
                    }
                }
            }
        }
        /// <summary>
        /// Unsafe implementation of applying a unary operation
        /// </summary>
        /// <typeparam name="C">The type of operation to perform</typeparam>
        /// <param name="op">The operation instance</param>
        /// <param name="in1">The input argument</param>
        /// <param name="out">The output target</param>
        internal static void UFunc_Op_Inner_Unary_Flush_UInt64_TypedImpl<C>(NumCIL.UInt64.Log op, NdArray<System.UInt64> in1, NdArray<System.UInt64> @out)
            where C : IUnaryOp<System.UInt64>
        {
            unsafe
            {
                using (var f1 = new Pinner(in1.DataAccessor))
                using (var f2 = new Pinner(@out.DataAccessor))
                {
                    var d1 = (System.UInt64*)f1.ptr;
                    var d2 = (System.UInt64*)f2.ptr;

                    if (@out.Shape.Dimensions.Length == 1)
                    {
                        long totalOps = @out.Shape.Dimensions[0].Length;

                        long ix1 = in1.Shape.Offset;
                        long ix2 = @out.Shape.Offset;

                        long stride1 = in1.Shape.Dimensions[0].Stride;
                        long stride2 = @out.Shape.Dimensions[0].Stride;


                        if (stride1 == stride2 && ix1 == ix2)
                        {
                            //Best case, all are equal, just keep a single counter
                            for (long i = 0; i < totalOps; i++)
                            {
                                d2[ix1] = (System.UInt64)(Math.Log(d1[ix1]));
                                ix1 += stride1;
                            }
                        }
                        else
                        {
                            for (long i = 0; i < totalOps; i++)
                            {
                                d2[ix2] = (System.UInt64)(Math.Log(d1[ix1]));
                                ix1 += stride1;
                                ix2 += stride2;
                            }
                        }
                    }
                    else if (@out.Shape.Dimensions.Length == 2)
                    {
                        long opsOuter = @out.Shape.Dimensions[0].Length;
                        long opsInner = @out.Shape.Dimensions[1].Length;

                        long ix1 = in1.Shape.Offset;
                        long ix2 = @out.Shape.Offset;

                        long outerStride1 = in1.Shape.Dimensions[0].Stride;
                        long outerStride2 = @out.Shape.Dimensions[0].Stride;

                        long innerStride1 = in1.Shape.Dimensions[1].Stride;
                        long innerStride2 = @out.Shape.Dimensions[1].Stride;

                        outerStride1 -= innerStride1 * in1.Shape.Dimensions[1].Length;
                        outerStride2 -= innerStride2 * @out.Shape.Dimensions[1].Length;

                        for (long i = 0; i < opsOuter; i++)
                        {
                            for (long j = 0; j < opsInner; j++)
                            {
                                d2[ix2] = (System.UInt64)(Math.Log(d1[ix1]));
                                ix1 += innerStride1;
                                ix2 += innerStride2;
                            }

                            ix1 += outerStride1;
                            ix2 += outerStride2;
                        }
                    }
                    else
                    {
                        long n = in1.Shape.Dimensions.LongLength - 3;
                        long[] limits = in1.Shape.Dimensions.Where(x => n-- > 0).Select(x => x.Length).ToArray();
                        long[] counters = new long[limits.LongLength];

                        long totalOps = limits.LongLength == 0 ? 1 : limits.Aggregate<long>((a, b) => a * b);

                        //This chunck of variables are used to prevent repeated calculations of offsets
                        long dimIndex0 = 0 + limits.LongLength;
                        long dimIndex1 = 1 + limits.LongLength;
                        long dimIndex2 = 2 + limits.LongLength;

                        long opsOuter = @out.Shape.Dimensions[0 + limits.LongLength].Length;
                        long opsInner = @out.Shape.Dimensions[1 + limits.LongLength].Length;
                        long opsInnerInner = @out.Shape.Dimensions[2 + limits.LongLength].Length;

                        long outerStride1 = in1.Shape.Dimensions[dimIndex0].Stride;
                        long outerStride3 = @out.Shape.Dimensions[dimIndex0].Stride;

                        long innerStride1 = in1.Shape.Dimensions[dimIndex1].Stride;
                        long innerStride3 = @out.Shape.Dimensions[dimIndex1].Stride;

                        long innerInnerStride1 = in1.Shape.Dimensions[dimIndex2].Stride;
                        long innerInnerStride3 = @out.Shape.Dimensions[dimIndex2].Stride;

                        outerStride1 -= innerStride1 * in1.Shape.Dimensions[dimIndex1].Length;
                        outerStride3 -= innerStride3 * @out.Shape.Dimensions[dimIndex1].Length;

                        innerStride1 -= innerInnerStride1 * in1.Shape.Dimensions[dimIndex2].Length;
                        innerStride3 -= innerInnerStride3 * @out.Shape.Dimensions[dimIndex2].Length;

                        for (long outer = 0; outer < totalOps; outer++)
                        {
                            //Get the array offset for the first element in the outer dimension
                            long ix1 = in1.Shape[counters];
                            long ix3 = @out.Shape[counters];


                            for (long i = 0; i < opsOuter; i++)
                            {
                                for (long j = 0; j < opsInner; j++)
                                {
                                    for (long k = 0; k < opsInnerInner; k++)
                                    {
                                        d2[ix3] = (System.UInt64)(Math.Log(d1[ix1]));
                                        ix1 += innerInnerStride1;
                                        ix3 += innerInnerStride3;
                                    }

                                    ix1 += innerStride1;
                                    ix3 += innerStride3;
                                }

                                ix1 += outerStride1;
                                ix3 += outerStride3;
                            }

                            if (counters.LongLength > 0)
                            {
                                //Basically a ripple carry adder
                                long p = counters.LongLength - 1;
                                while (++counters[p] == limits[p] && p > 0)
                                {
                                    counters[p] = 0;
                                    p--;
                                }
                            }
                        }
                    }
                }
            }
        }

        /// <summary>
        /// Unsafe implementation of applying a unary operation
        /// </summary>
        /// <typeparam name="C">The type of operation to perform</typeparam>
        /// <param name="op">The operation instance</param>
        /// <param name="scalar">The input scalar argument</param>
        /// <param name="out">The output target</param>
        internal static void UFunc_Op_Inner_Unary_Scalar_Flush_UInt64_TypedImpl<C>(NumCIL.UInt64.Log op, System.UInt64 scalar, NdArray<System.UInt64> @out)
            where C : IUnaryOp<System.UInt64>
        {
            unsafe
            {
                using (var f2 = new Pinner(@out.DataAccessor))
                {
                    var d2 = (System.UInt64*)f2.ptr;

                    if (@out.Shape.Dimensions.Length == 1)
                    {
                        long totalOps = @out.Shape.Dimensions[0].Length;
                        long ix2 = @out.Shape.Offset;
                        long stride2 = @out.Shape.Dimensions[0].Stride;

                        for (long i = 0; i < totalOps; i++)
                        {
                            d2[ix2] = (System.UInt64)(Math.Log(scalar));
                            ix2 += stride2;
                        }
                    }
                    else if (@out.Shape.Dimensions.Length == 2)
                    {
                        long opsOuter = @out.Shape.Dimensions[0].Length;
                        long opsInner = @out.Shape.Dimensions[1].Length;

                        long ix2 = @out.Shape.Offset;
                        long outerStride2 = @out.Shape.Dimensions[0].Stride;
                        long innerStride2 = @out.Shape.Dimensions[1].Stride;
                        outerStride2 -= innerStride2 * @out.Shape.Dimensions[1].Length;

                        for (long i = 0; i < opsOuter; i++)
                        {
                            for (long j = 0; j < opsInner; j++)
                            {
                                d2[ix2] = (System.UInt64)(Math.Log(scalar));
                                ix2 += innerStride2;
                            }

                            ix2 += outerStride2;
                        }
                    }
                    else
                    {
                        long n = @out.Shape.Dimensions.LongLength - 3;
                        long[] limits = @out.Shape.Dimensions.Where(x => n-- > 0).Select(x => x.Length).ToArray();
                        long[] counters = new long[limits.LongLength];

                        long totalOps = limits.LongLength == 0 ? 1 : limits.Aggregate<long>((a, b) => a * b);

                        //This chunck of variables are used to prevent repeated calculations of offsets
                        long dimIndex0 = 0 + limits.LongLength;
                        long dimIndex1 = 1 + limits.LongLength;
                        long dimIndex2 = 2 + limits.LongLength;

                        long opsOuter = @out.Shape.Dimensions[0 + limits.LongLength].Length;
                        long opsInner = @out.Shape.Dimensions[1 + limits.LongLength].Length;
                        long opsInnerInner = @out.Shape.Dimensions[2 + limits.LongLength].Length;

                        long outerStride3 = @out.Shape.Dimensions[dimIndex0].Stride;
                        long innerStride3 = @out.Shape.Dimensions[dimIndex1].Stride;
                        long innerInnerStride3 = @out.Shape.Dimensions[dimIndex2].Stride;
                        outerStride3 -= innerStride3 * @out.Shape.Dimensions[dimIndex1].Length;
                        innerStride3 -= innerInnerStride3 * @out.Shape.Dimensions[dimIndex2].Length;

                        for (long outer = 0; outer < totalOps; outer++)
                        {
                            //Get the array offset for the first element in the outer dimension
                            long ix3 = @out.Shape[counters];

                            for (long i = 0; i < opsOuter; i++)
                            {
                                for (long j = 0; j < opsInner; j++)
                                {
                                    for (long k = 0; k < opsInnerInner; k++)
                                    {
                                        d2[ix3] = (System.UInt64)(Math.Log(scalar));
                                        ix3 += innerInnerStride3;
                                    }

                                    ix3 += innerStride3;
                                }

                                ix3 += outerStride3;
                            }

                            if (counters.LongLength > 0)
                            {
                                //Basically a ripple carry adder
                                long p = counters.LongLength - 1;
                                while (++counters[p] == limits[p] && p > 0)
                                {
                                    counters[p] = 0;
                                    p--;
                                }
                            }
                        }
                    }
                }
            }
        }
        /// <summary>
        /// Unsafe implementation of applying a unary operation
        /// </summary>
        /// <typeparam name="C">The type of operation to perform</typeparam>
        /// <param name="op">The operation instance</param>
        /// <param name="in1">The input argument</param>
        /// <param name="out">The output target</param>
        internal static void UFunc_Op_Inner_Unary_Flush_Single_TypedImpl<C>(NumCIL.Float.Log op, NdArray<System.Single> in1, NdArray<System.Single> @out)
            where C : IUnaryOp<System.Single>
        {
            unsafe
            {
                using (var f1 = new Pinner(in1.DataAccessor))
                using (var f2 = new Pinner(@out.DataAccessor))
                {
                    var d1 = (System.Single*)f1.ptr;
                    var d2 = (System.Single*)f2.ptr;

                    if (@out.Shape.Dimensions.Length == 1)
                    {
                        long totalOps = @out.Shape.Dimensions[0].Length;

                        long ix1 = in1.Shape.Offset;
                        long ix2 = @out.Shape.Offset;

                        long stride1 = in1.Shape.Dimensions[0].Stride;
                        long stride2 = @out.Shape.Dimensions[0].Stride;


                        if (stride1 == stride2 && ix1 == ix2)
                        {
                            //Best case, all are equal, just keep a single counter
                            for (long i = 0; i < totalOps; i++)
                            {
                                d2[ix1] = (System.Single)(Math.Log(d1[ix1]));
                                ix1 += stride1;
                            }
                        }
                        else
                        {
                            for (long i = 0; i < totalOps; i++)
                            {
                                d2[ix2] = (System.Single)(Math.Log(d1[ix1]));
                                ix1 += stride1;
                                ix2 += stride2;
                            }
                        }
                    }
                    else if (@out.Shape.Dimensions.Length == 2)
                    {
                        long opsOuter = @out.Shape.Dimensions[0].Length;
                        long opsInner = @out.Shape.Dimensions[1].Length;

                        long ix1 = in1.Shape.Offset;
                        long ix2 = @out.Shape.Offset;

                        long outerStride1 = in1.Shape.Dimensions[0].Stride;
                        long outerStride2 = @out.Shape.Dimensions[0].Stride;

                        long innerStride1 = in1.Shape.Dimensions[1].Stride;
                        long innerStride2 = @out.Shape.Dimensions[1].Stride;

                        outerStride1 -= innerStride1 * in1.Shape.Dimensions[1].Length;
                        outerStride2 -= innerStride2 * @out.Shape.Dimensions[1].Length;

                        for (long i = 0; i < opsOuter; i++)
                        {
                            for (long j = 0; j < opsInner; j++)
                            {
                                d2[ix2] = (System.Single)(Math.Log(d1[ix1]));
                                ix1 += innerStride1;
                                ix2 += innerStride2;
                            }

                            ix1 += outerStride1;
                            ix2 += outerStride2;
                        }
                    }
                    else
                    {
                        long n = in1.Shape.Dimensions.LongLength - 3;
                        long[] limits = in1.Shape.Dimensions.Where(x => n-- > 0).Select(x => x.Length).ToArray();
                        long[] counters = new long[limits.LongLength];

                        long totalOps = limits.LongLength == 0 ? 1 : limits.Aggregate<long>((a, b) => a * b);

                        //This chunck of variables are used to prevent repeated calculations of offsets
                        long dimIndex0 = 0 + limits.LongLength;
                        long dimIndex1 = 1 + limits.LongLength;
                        long dimIndex2 = 2 + limits.LongLength;

                        long opsOuter = @out.Shape.Dimensions[0 + limits.LongLength].Length;
                        long opsInner = @out.Shape.Dimensions[1 + limits.LongLength].Length;
                        long opsInnerInner = @out.Shape.Dimensions[2 + limits.LongLength].Length;

                        long outerStride1 = in1.Shape.Dimensions[dimIndex0].Stride;
                        long outerStride3 = @out.Shape.Dimensions[dimIndex0].Stride;

                        long innerStride1 = in1.Shape.Dimensions[dimIndex1].Stride;
                        long innerStride3 = @out.Shape.Dimensions[dimIndex1].Stride;

                        long innerInnerStride1 = in1.Shape.Dimensions[dimIndex2].Stride;
                        long innerInnerStride3 = @out.Shape.Dimensions[dimIndex2].Stride;

                        outerStride1 -= innerStride1 * in1.Shape.Dimensions[dimIndex1].Length;
                        outerStride3 -= innerStride3 * @out.Shape.Dimensions[dimIndex1].Length;

                        innerStride1 -= innerInnerStride1 * in1.Shape.Dimensions[dimIndex2].Length;
                        innerStride3 -= innerInnerStride3 * @out.Shape.Dimensions[dimIndex2].Length;

                        for (long outer = 0; outer < totalOps; outer++)
                        {
                            //Get the array offset for the first element in the outer dimension
                            long ix1 = in1.Shape[counters];
                            long ix3 = @out.Shape[counters];


                            for (long i = 0; i < opsOuter; i++)
                            {
                                for (long j = 0; j < opsInner; j++)
                                {
                                    for (long k = 0; k < opsInnerInner; k++)
                                    {
                                        d2[ix3] = (System.Single)(Math.Log(d1[ix1]));
                                        ix1 += innerInnerStride1;
                                        ix3 += innerInnerStride3;
                                    }

                                    ix1 += innerStride1;
                                    ix3 += innerStride3;
                                }

                                ix1 += outerStride1;
                                ix3 += outerStride3;
                            }

                            if (counters.LongLength > 0)
                            {
                                //Basically a ripple carry adder
                                long p = counters.LongLength - 1;
                                while (++counters[p] == limits[p] && p > 0)
                                {
                                    counters[p] = 0;
                                    p--;
                                }
                            }
                        }
                    }
                }
            }
        }

        /// <summary>
        /// Unsafe implementation of applying a unary operation
        /// </summary>
        /// <typeparam name="C">The type of operation to perform</typeparam>
        /// <param name="op">The operation instance</param>
        /// <param name="scalar">The input scalar argument</param>
        /// <param name="out">The output target</param>
        internal static void UFunc_Op_Inner_Unary_Scalar_Flush_Single_TypedImpl<C>(NumCIL.Float.Log op, System.Single scalar, NdArray<System.Single> @out)
            where C : IUnaryOp<System.Single>
        {
            unsafe
            {
                using (var f2 = new Pinner(@out.DataAccessor))
                {
                    var d2 = (System.Single*)f2.ptr;

                    if (@out.Shape.Dimensions.Length == 1)
                    {
                        long totalOps = @out.Shape.Dimensions[0].Length;
                        long ix2 = @out.Shape.Offset;
                        long stride2 = @out.Shape.Dimensions[0].Stride;

                        for (long i = 0; i < totalOps; i++)
                        {
                            d2[ix2] = (System.Single)(Math.Log(scalar));
                            ix2 += stride2;
                        }
                    }
                    else if (@out.Shape.Dimensions.Length == 2)
                    {
                        long opsOuter = @out.Shape.Dimensions[0].Length;
                        long opsInner = @out.Shape.Dimensions[1].Length;

                        long ix2 = @out.Shape.Offset;
                        long outerStride2 = @out.Shape.Dimensions[0].Stride;
                        long innerStride2 = @out.Shape.Dimensions[1].Stride;
                        outerStride2 -= innerStride2 * @out.Shape.Dimensions[1].Length;

                        for (long i = 0; i < opsOuter; i++)
                        {
                            for (long j = 0; j < opsInner; j++)
                            {
                                d2[ix2] = (System.Single)(Math.Log(scalar));
                                ix2 += innerStride2;
                            }

                            ix2 += outerStride2;
                        }
                    }
                    else
                    {
                        long n = @out.Shape.Dimensions.LongLength - 3;
                        long[] limits = @out.Shape.Dimensions.Where(x => n-- > 0).Select(x => x.Length).ToArray();
                        long[] counters = new long[limits.LongLength];

                        long totalOps = limits.LongLength == 0 ? 1 : limits.Aggregate<long>((a, b) => a * b);

                        //This chunck of variables are used to prevent repeated calculations of offsets
                        long dimIndex0 = 0 + limits.LongLength;
                        long dimIndex1 = 1 + limits.LongLength;
                        long dimIndex2 = 2 + limits.LongLength;

                        long opsOuter = @out.Shape.Dimensions[0 + limits.LongLength].Length;
                        long opsInner = @out.Shape.Dimensions[1 + limits.LongLength].Length;
                        long opsInnerInner = @out.Shape.Dimensions[2 + limits.LongLength].Length;

                        long outerStride3 = @out.Shape.Dimensions[dimIndex0].Stride;
                        long innerStride3 = @out.Shape.Dimensions[dimIndex1].Stride;
                        long innerInnerStride3 = @out.Shape.Dimensions[dimIndex2].Stride;
                        outerStride3 -= innerStride3 * @out.Shape.Dimensions[dimIndex1].Length;
                        innerStride3 -= innerInnerStride3 * @out.Shape.Dimensions[dimIndex2].Length;

                        for (long outer = 0; outer < totalOps; outer++)
                        {
                            //Get the array offset for the first element in the outer dimension
                            long ix3 = @out.Shape[counters];

                            for (long i = 0; i < opsOuter; i++)
                            {
                                for (long j = 0; j < opsInner; j++)
                                {
                                    for (long k = 0; k < opsInnerInner; k++)
                                    {
                                        d2[ix3] = (System.Single)(Math.Log(scalar));
                                        ix3 += innerInnerStride3;
                                    }

                                    ix3 += innerStride3;
                                }

                                ix3 += outerStride3;
                            }

                            if (counters.LongLength > 0)
                            {
                                //Basically a ripple carry adder
                                long p = counters.LongLength - 1;
                                while (++counters[p] == limits[p] && p > 0)
                                {
                                    counters[p] = 0;
                                    p--;
                                }
                            }
                        }
                    }
                }
            }
        }
        /// <summary>
        /// Unsafe implementation of applying a unary operation
        /// </summary>
        /// <typeparam name="C">The type of operation to perform</typeparam>
        /// <param name="op">The operation instance</param>
        /// <param name="in1">The input argument</param>
        /// <param name="out">The output target</param>
        internal static void UFunc_Op_Inner_Unary_Flush_Double_TypedImpl<C>(NumCIL.Double.Log op, NdArray<System.Double> in1, NdArray<System.Double> @out)
            where C : IUnaryOp<System.Double>
        {
            unsafe
            {
                using (var f1 = new Pinner(in1.DataAccessor))
                using (var f2 = new Pinner(@out.DataAccessor))
                {
                    var d1 = (System.Double*)f1.ptr;
                    var d2 = (System.Double*)f2.ptr;

                    if (@out.Shape.Dimensions.Length == 1)
                    {
                        long totalOps = @out.Shape.Dimensions[0].Length;

                        long ix1 = in1.Shape.Offset;
                        long ix2 = @out.Shape.Offset;

                        long stride1 = in1.Shape.Dimensions[0].Stride;
                        long stride2 = @out.Shape.Dimensions[0].Stride;


                        if (stride1 == stride2 && ix1 == ix2)
                        {
                            //Best case, all are equal, just keep a single counter
                            for (long i = 0; i < totalOps; i++)
                            {
                                d2[ix1] = (System.Double)(Math.Log(d1[ix1]));
                                ix1 += stride1;
                            }
                        }
                        else
                        {
                            for (long i = 0; i < totalOps; i++)
                            {
                                d2[ix2] = (System.Double)(Math.Log(d1[ix1]));
                                ix1 += stride1;
                                ix2 += stride2;
                            }
                        }
                    }
                    else if (@out.Shape.Dimensions.Length == 2)
                    {
                        long opsOuter = @out.Shape.Dimensions[0].Length;
                        long opsInner = @out.Shape.Dimensions[1].Length;

                        long ix1 = in1.Shape.Offset;
                        long ix2 = @out.Shape.Offset;

                        long outerStride1 = in1.Shape.Dimensions[0].Stride;
                        long outerStride2 = @out.Shape.Dimensions[0].Stride;

                        long innerStride1 = in1.Shape.Dimensions[1].Stride;
                        long innerStride2 = @out.Shape.Dimensions[1].Stride;

                        outerStride1 -= innerStride1 * in1.Shape.Dimensions[1].Length;
                        outerStride2 -= innerStride2 * @out.Shape.Dimensions[1].Length;

                        for (long i = 0; i < opsOuter; i++)
                        {
                            for (long j = 0; j < opsInner; j++)
                            {
                                d2[ix2] = (System.Double)(Math.Log(d1[ix1]));
                                ix1 += innerStride1;
                                ix2 += innerStride2;
                            }

                            ix1 += outerStride1;
                            ix2 += outerStride2;
                        }
                    }
                    else
                    {
                        long n = in1.Shape.Dimensions.LongLength - 3;
                        long[] limits = in1.Shape.Dimensions.Where(x => n-- > 0).Select(x => x.Length).ToArray();
                        long[] counters = new long[limits.LongLength];

                        long totalOps = limits.LongLength == 0 ? 1 : limits.Aggregate<long>((a, b) => a * b);

                        //This chunck of variables are used to prevent repeated calculations of offsets
                        long dimIndex0 = 0 + limits.LongLength;
                        long dimIndex1 = 1 + limits.LongLength;
                        long dimIndex2 = 2 + limits.LongLength;

                        long opsOuter = @out.Shape.Dimensions[0 + limits.LongLength].Length;
                        long opsInner = @out.Shape.Dimensions[1 + limits.LongLength].Length;
                        long opsInnerInner = @out.Shape.Dimensions[2 + limits.LongLength].Length;

                        long outerStride1 = in1.Shape.Dimensions[dimIndex0].Stride;
                        long outerStride3 = @out.Shape.Dimensions[dimIndex0].Stride;

                        long innerStride1 = in1.Shape.Dimensions[dimIndex1].Stride;
                        long innerStride3 = @out.Shape.Dimensions[dimIndex1].Stride;

                        long innerInnerStride1 = in1.Shape.Dimensions[dimIndex2].Stride;
                        long innerInnerStride3 = @out.Shape.Dimensions[dimIndex2].Stride;

                        outerStride1 -= innerStride1 * in1.Shape.Dimensions[dimIndex1].Length;
                        outerStride3 -= innerStride3 * @out.Shape.Dimensions[dimIndex1].Length;

                        innerStride1 -= innerInnerStride1 * in1.Shape.Dimensions[dimIndex2].Length;
                        innerStride3 -= innerInnerStride3 * @out.Shape.Dimensions[dimIndex2].Length;

                        for (long outer = 0; outer < totalOps; outer++)
                        {
                            //Get the array offset for the first element in the outer dimension
                            long ix1 = in1.Shape[counters];
                            long ix3 = @out.Shape[counters];


                            for (long i = 0; i < opsOuter; i++)
                            {
                                for (long j = 0; j < opsInner; j++)
                                {
                                    for (long k = 0; k < opsInnerInner; k++)
                                    {
                                        d2[ix3] = (System.Double)(Math.Log(d1[ix1]));
                                        ix1 += innerInnerStride1;
                                        ix3 += innerInnerStride3;
                                    }

                                    ix1 += innerStride1;
                                    ix3 += innerStride3;
                                }

                                ix1 += outerStride1;
                                ix3 += outerStride3;
                            }

                            if (counters.LongLength > 0)
                            {
                                //Basically a ripple carry adder
                                long p = counters.LongLength - 1;
                                while (++counters[p] == limits[p] && p > 0)
                                {
                                    counters[p] = 0;
                                    p--;
                                }
                            }
                        }
                    }
                }
            }
        }

        /// <summary>
        /// Unsafe implementation of applying a unary operation
        /// </summary>
        /// <typeparam name="C">The type of operation to perform</typeparam>
        /// <param name="op">The operation instance</param>
        /// <param name="scalar">The input scalar argument</param>
        /// <param name="out">The output target</param>
        internal static void UFunc_Op_Inner_Unary_Scalar_Flush_Double_TypedImpl<C>(NumCIL.Double.Log op, System.Double scalar, NdArray<System.Double> @out)
            where C : IUnaryOp<System.Double>
        {
            unsafe
            {
                using (var f2 = new Pinner(@out.DataAccessor))
                {
                    var d2 = (System.Double*)f2.ptr;

                    if (@out.Shape.Dimensions.Length == 1)
                    {
                        long totalOps = @out.Shape.Dimensions[0].Length;
                        long ix2 = @out.Shape.Offset;
                        long stride2 = @out.Shape.Dimensions[0].Stride;

                        for (long i = 0; i < totalOps; i++)
                        {
                            d2[ix2] = (System.Double)(Math.Log(scalar));
                            ix2 += stride2;
                        }
                    }
                    else if (@out.Shape.Dimensions.Length == 2)
                    {
                        long opsOuter = @out.Shape.Dimensions[0].Length;
                        long opsInner = @out.Shape.Dimensions[1].Length;

                        long ix2 = @out.Shape.Offset;
                        long outerStride2 = @out.Shape.Dimensions[0].Stride;
                        long innerStride2 = @out.Shape.Dimensions[1].Stride;
                        outerStride2 -= innerStride2 * @out.Shape.Dimensions[1].Length;

                        for (long i = 0; i < opsOuter; i++)
                        {
                            for (long j = 0; j < opsInner; j++)
                            {
                                d2[ix2] = (System.Double)(Math.Log(scalar));
                                ix2 += innerStride2;
                            }

                            ix2 += outerStride2;
                        }
                    }
                    else
                    {
                        long n = @out.Shape.Dimensions.LongLength - 3;
                        long[] limits = @out.Shape.Dimensions.Where(x => n-- > 0).Select(x => x.Length).ToArray();
                        long[] counters = new long[limits.LongLength];

                        long totalOps = limits.LongLength == 0 ? 1 : limits.Aggregate<long>((a, b) => a * b);

                        //This chunck of variables are used to prevent repeated calculations of offsets
                        long dimIndex0 = 0 + limits.LongLength;
                        long dimIndex1 = 1 + limits.LongLength;
                        long dimIndex2 = 2 + limits.LongLength;

                        long opsOuter = @out.Shape.Dimensions[0 + limits.LongLength].Length;
                        long opsInner = @out.Shape.Dimensions[1 + limits.LongLength].Length;
                        long opsInnerInner = @out.Shape.Dimensions[2 + limits.LongLength].Length;

                        long outerStride3 = @out.Shape.Dimensions[dimIndex0].Stride;
                        long innerStride3 = @out.Shape.Dimensions[dimIndex1].Stride;
                        long innerInnerStride3 = @out.Shape.Dimensions[dimIndex2].Stride;
                        outerStride3 -= innerStride3 * @out.Shape.Dimensions[dimIndex1].Length;
                        innerStride3 -= innerInnerStride3 * @out.Shape.Dimensions[dimIndex2].Length;

                        for (long outer = 0; outer < totalOps; outer++)
                        {
                            //Get the array offset for the first element in the outer dimension
                            long ix3 = @out.Shape[counters];

                            for (long i = 0; i < opsOuter; i++)
                            {
                                for (long j = 0; j < opsInner; j++)
                                {
                                    for (long k = 0; k < opsInnerInner; k++)
                                    {
                                        d2[ix3] = (System.Double)(Math.Log(scalar));
                                        ix3 += innerInnerStride3;
                                    }

                                    ix3 += innerStride3;
                                }

                                ix3 += outerStride3;
                            }

                            if (counters.LongLength > 0)
                            {
                                //Basically a ripple carry adder
                                long p = counters.LongLength - 1;
                                while (++counters[p] == limits[p] && p > 0)
                                {
                                    counters[p] = 0;
                                    p--;
                                }
                            }
                        }
                    }
                }
            }
        }
        /// <summary>
        /// Unsafe implementation of applying a unary operation
        /// </summary>
        /// <typeparam name="C">The type of operation to perform</typeparam>
        /// <param name="op">The operation instance</param>
        /// <param name="in1">The input argument</param>
        /// <param name="out">The output target</param>
        internal static void UFunc_Op_Inner_Unary_Flush_SByte_TypedImpl<C>(NumCIL.Int8.Log10 op, NdArray<System.SByte> in1, NdArray<System.SByte> @out)
            where C : IUnaryOp<System.SByte>
        {
            unsafe
            {
                using (var f1 = new Pinner(in1.DataAccessor))
                using (var f2 = new Pinner(@out.DataAccessor))
                {
                    var d1 = (System.SByte*)f1.ptr;
                    var d2 = (System.SByte*)f2.ptr;

                    if (@out.Shape.Dimensions.Length == 1)
                    {
                        long totalOps = @out.Shape.Dimensions[0].Length;

                        long ix1 = in1.Shape.Offset;
                        long ix2 = @out.Shape.Offset;

                        long stride1 = in1.Shape.Dimensions[0].Stride;
                        long stride2 = @out.Shape.Dimensions[0].Stride;


                        if (stride1 == stride2 && ix1 == ix2)
                        {
                            //Best case, all are equal, just keep a single counter
                            for (long i = 0; i < totalOps; i++)
                            {
                                d2[ix1] = (System.SByte)(Math.Log10(d1[ix1]));
                                ix1 += stride1;
                            }
                        }
                        else
                        {
                            for (long i = 0; i < totalOps; i++)
                            {
                                d2[ix2] = (System.SByte)(Math.Log10(d1[ix1]));
                                ix1 += stride1;
                                ix2 += stride2;
                            }
                        }
                    }
                    else if (@out.Shape.Dimensions.Length == 2)
                    {
                        long opsOuter = @out.Shape.Dimensions[0].Length;
                        long opsInner = @out.Shape.Dimensions[1].Length;

                        long ix1 = in1.Shape.Offset;
                        long ix2 = @out.Shape.Offset;

                        long outerStride1 = in1.Shape.Dimensions[0].Stride;
                        long outerStride2 = @out.Shape.Dimensions[0].Stride;

                        long innerStride1 = in1.Shape.Dimensions[1].Stride;
                        long innerStride2 = @out.Shape.Dimensions[1].Stride;

                        outerStride1 -= innerStride1 * in1.Shape.Dimensions[1].Length;
                        outerStride2 -= innerStride2 * @out.Shape.Dimensions[1].Length;

                        for (long i = 0; i < opsOuter; i++)
                        {
                            for (long j = 0; j < opsInner; j++)
                            {
                                d2[ix2] = (System.SByte)(Math.Log10(d1[ix1]));
                                ix1 += innerStride1;
                                ix2 += innerStride2;
                            }

                            ix1 += outerStride1;
                            ix2 += outerStride2;
                        }
                    }
                    else
                    {
                        long n = in1.Shape.Dimensions.LongLength - 3;
                        long[] limits = in1.Shape.Dimensions.Where(x => n-- > 0).Select(x => x.Length).ToArray();
                        long[] counters = new long[limits.LongLength];

                        long totalOps = limits.LongLength == 0 ? 1 : limits.Aggregate<long>((a, b) => a * b);

                        //This chunck of variables are used to prevent repeated calculations of offsets
                        long dimIndex0 = 0 + limits.LongLength;
                        long dimIndex1 = 1 + limits.LongLength;
                        long dimIndex2 = 2 + limits.LongLength;

                        long opsOuter = @out.Shape.Dimensions[0 + limits.LongLength].Length;
                        long opsInner = @out.Shape.Dimensions[1 + limits.LongLength].Length;
                        long opsInnerInner = @out.Shape.Dimensions[2 + limits.LongLength].Length;

                        long outerStride1 = in1.Shape.Dimensions[dimIndex0].Stride;
                        long outerStride3 = @out.Shape.Dimensions[dimIndex0].Stride;

                        long innerStride1 = in1.Shape.Dimensions[dimIndex1].Stride;
                        long innerStride3 = @out.Shape.Dimensions[dimIndex1].Stride;

                        long innerInnerStride1 = in1.Shape.Dimensions[dimIndex2].Stride;
                        long innerInnerStride3 = @out.Shape.Dimensions[dimIndex2].Stride;

                        outerStride1 -= innerStride1 * in1.Shape.Dimensions[dimIndex1].Length;
                        outerStride3 -= innerStride3 * @out.Shape.Dimensions[dimIndex1].Length;

                        innerStride1 -= innerInnerStride1 * in1.Shape.Dimensions[dimIndex2].Length;
                        innerStride3 -= innerInnerStride3 * @out.Shape.Dimensions[dimIndex2].Length;

                        for (long outer = 0; outer < totalOps; outer++)
                        {
                            //Get the array offset for the first element in the outer dimension
                            long ix1 = in1.Shape[counters];
                            long ix3 = @out.Shape[counters];


                            for (long i = 0; i < opsOuter; i++)
                            {
                                for (long j = 0; j < opsInner; j++)
                                {
                                    for (long k = 0; k < opsInnerInner; k++)
                                    {
                                        d2[ix3] = (System.SByte)(Math.Log10(d1[ix1]));
                                        ix1 += innerInnerStride1;
                                        ix3 += innerInnerStride3;
                                    }

                                    ix1 += innerStride1;
                                    ix3 += innerStride3;
                                }

                                ix1 += outerStride1;
                                ix3 += outerStride3;
                            }

                            if (counters.LongLength > 0)
                            {
                                //Basically a ripple carry adder
                                long p = counters.LongLength - 1;
                                while (++counters[p] == limits[p] && p > 0)
                                {
                                    counters[p] = 0;
                                    p--;
                                }
                            }
                        }
                    }
                }
            }
        }

        /// <summary>
        /// Unsafe implementation of applying a unary operation
        /// </summary>
        /// <typeparam name="C">The type of operation to perform</typeparam>
        /// <param name="op">The operation instance</param>
        /// <param name="scalar">The input scalar argument</param>
        /// <param name="out">The output target</param>
        internal static void UFunc_Op_Inner_Unary_Scalar_Flush_SByte_TypedImpl<C>(NumCIL.Int8.Log10 op, System.SByte scalar, NdArray<System.SByte> @out)
            where C : IUnaryOp<System.SByte>
        {
            unsafe
            {
                using (var f2 = new Pinner(@out.DataAccessor))
                {
                    var d2 = (System.SByte*)f2.ptr;

                    if (@out.Shape.Dimensions.Length == 1)
                    {
                        long totalOps = @out.Shape.Dimensions[0].Length;
                        long ix2 = @out.Shape.Offset;
                        long stride2 = @out.Shape.Dimensions[0].Stride;

                        for (long i = 0; i < totalOps; i++)
                        {
                            d2[ix2] = (System.SByte)(Math.Log10(scalar));
                            ix2 += stride2;
                        }
                    }
                    else if (@out.Shape.Dimensions.Length == 2)
                    {
                        long opsOuter = @out.Shape.Dimensions[0].Length;
                        long opsInner = @out.Shape.Dimensions[1].Length;

                        long ix2 = @out.Shape.Offset;
                        long outerStride2 = @out.Shape.Dimensions[0].Stride;
                        long innerStride2 = @out.Shape.Dimensions[1].Stride;
                        outerStride2 -= innerStride2 * @out.Shape.Dimensions[1].Length;

                        for (long i = 0; i < opsOuter; i++)
                        {
                            for (long j = 0; j < opsInner; j++)
                            {
                                d2[ix2] = (System.SByte)(Math.Log10(scalar));
                                ix2 += innerStride2;
                            }

                            ix2 += outerStride2;
                        }
                    }
                    else
                    {
                        long n = @out.Shape.Dimensions.LongLength - 3;
                        long[] limits = @out.Shape.Dimensions.Where(x => n-- > 0).Select(x => x.Length).ToArray();
                        long[] counters = new long[limits.LongLength];

                        long totalOps = limits.LongLength == 0 ? 1 : limits.Aggregate<long>((a, b) => a * b);

                        //This chunck of variables are used to prevent repeated calculations of offsets
                        long dimIndex0 = 0 + limits.LongLength;
                        long dimIndex1 = 1 + limits.LongLength;
                        long dimIndex2 = 2 + limits.LongLength;

                        long opsOuter = @out.Shape.Dimensions[0 + limits.LongLength].Length;
                        long opsInner = @out.Shape.Dimensions[1 + limits.LongLength].Length;
                        long opsInnerInner = @out.Shape.Dimensions[2 + limits.LongLength].Length;

                        long outerStride3 = @out.Shape.Dimensions[dimIndex0].Stride;
                        long innerStride3 = @out.Shape.Dimensions[dimIndex1].Stride;
                        long innerInnerStride3 = @out.Shape.Dimensions[dimIndex2].Stride;
                        outerStride3 -= innerStride3 * @out.Shape.Dimensions[dimIndex1].Length;
                        innerStride3 -= innerInnerStride3 * @out.Shape.Dimensions[dimIndex2].Length;

                        for (long outer = 0; outer < totalOps; outer++)
                        {
                            //Get the array offset for the first element in the outer dimension
                            long ix3 = @out.Shape[counters];

                            for (long i = 0; i < opsOuter; i++)
                            {
                                for (long j = 0; j < opsInner; j++)
                                {
                                    for (long k = 0; k < opsInnerInner; k++)
                                    {
                                        d2[ix3] = (System.SByte)(Math.Log10(scalar));
                                        ix3 += innerInnerStride3;
                                    }

                                    ix3 += innerStride3;
                                }

                                ix3 += outerStride3;
                            }

                            if (counters.LongLength > 0)
                            {
                                //Basically a ripple carry adder
                                long p = counters.LongLength - 1;
                                while (++counters[p] == limits[p] && p > 0)
                                {
                                    counters[p] = 0;
                                    p--;
                                }
                            }
                        }
                    }
                }
            }
        }
        /// <summary>
        /// Unsafe implementation of applying a unary operation
        /// </summary>
        /// <typeparam name="C">The type of operation to perform</typeparam>
        /// <param name="op">The operation instance</param>
        /// <param name="in1">The input argument</param>
        /// <param name="out">The output target</param>
        internal static void UFunc_Op_Inner_Unary_Flush_Byte_TypedImpl<C>(NumCIL.UInt8.Log10 op, NdArray<System.Byte> in1, NdArray<System.Byte> @out)
            where C : IUnaryOp<System.Byte>
        {
            unsafe
            {
                using (var f1 = new Pinner(in1.DataAccessor))
                using (var f2 = new Pinner(@out.DataAccessor))
                {
                    var d1 = (System.Byte*)f1.ptr;
                    var d2 = (System.Byte*)f2.ptr;

                    if (@out.Shape.Dimensions.Length == 1)
                    {
                        long totalOps = @out.Shape.Dimensions[0].Length;

                        long ix1 = in1.Shape.Offset;
                        long ix2 = @out.Shape.Offset;

                        long stride1 = in1.Shape.Dimensions[0].Stride;
                        long stride2 = @out.Shape.Dimensions[0].Stride;


                        if (stride1 == stride2 && ix1 == ix2)
                        {
                            //Best case, all are equal, just keep a single counter
                            for (long i = 0; i < totalOps; i++)
                            {
                                d2[ix1] = (System.Byte)(Math.Log10(d1[ix1]));
                                ix1 += stride1;
                            }
                        }
                        else
                        {
                            for (long i = 0; i < totalOps; i++)
                            {
                                d2[ix2] = (System.Byte)(Math.Log10(d1[ix1]));
                                ix1 += stride1;
                                ix2 += stride2;
                            }
                        }
                    }
                    else if (@out.Shape.Dimensions.Length == 2)
                    {
                        long opsOuter = @out.Shape.Dimensions[0].Length;
                        long opsInner = @out.Shape.Dimensions[1].Length;

                        long ix1 = in1.Shape.Offset;
                        long ix2 = @out.Shape.Offset;

                        long outerStride1 = in1.Shape.Dimensions[0].Stride;
                        long outerStride2 = @out.Shape.Dimensions[0].Stride;

                        long innerStride1 = in1.Shape.Dimensions[1].Stride;
                        long innerStride2 = @out.Shape.Dimensions[1].Stride;

                        outerStride1 -= innerStride1 * in1.Shape.Dimensions[1].Length;
                        outerStride2 -= innerStride2 * @out.Shape.Dimensions[1].Length;

                        for (long i = 0; i < opsOuter; i++)
                        {
                            for (long j = 0; j < opsInner; j++)
                            {
                                d2[ix2] = (System.Byte)(Math.Log10(d1[ix1]));
                                ix1 += innerStride1;
                                ix2 += innerStride2;
                            }

                            ix1 += outerStride1;
                            ix2 += outerStride2;
                        }
                    }
                    else
                    {
                        long n = in1.Shape.Dimensions.LongLength - 3;
                        long[] limits = in1.Shape.Dimensions.Where(x => n-- > 0).Select(x => x.Length).ToArray();
                        long[] counters = new long[limits.LongLength];

                        long totalOps = limits.LongLength == 0 ? 1 : limits.Aggregate<long>((a, b) => a * b);

                        //This chunck of variables are used to prevent repeated calculations of offsets
                        long dimIndex0 = 0 + limits.LongLength;
                        long dimIndex1 = 1 + limits.LongLength;
                        long dimIndex2 = 2 + limits.LongLength;

                        long opsOuter = @out.Shape.Dimensions[0 + limits.LongLength].Length;
                        long opsInner = @out.Shape.Dimensions[1 + limits.LongLength].Length;
                        long opsInnerInner = @out.Shape.Dimensions[2 + limits.LongLength].Length;

                        long outerStride1 = in1.Shape.Dimensions[dimIndex0].Stride;
                        long outerStride3 = @out.Shape.Dimensions[dimIndex0].Stride;

                        long innerStride1 = in1.Shape.Dimensions[dimIndex1].Stride;
                        long innerStride3 = @out.Shape.Dimensions[dimIndex1].Stride;

                        long innerInnerStride1 = in1.Shape.Dimensions[dimIndex2].Stride;
                        long innerInnerStride3 = @out.Shape.Dimensions[dimIndex2].Stride;

                        outerStride1 -= innerStride1 * in1.Shape.Dimensions[dimIndex1].Length;
                        outerStride3 -= innerStride3 * @out.Shape.Dimensions[dimIndex1].Length;

                        innerStride1 -= innerInnerStride1 * in1.Shape.Dimensions[dimIndex2].Length;
                        innerStride3 -= innerInnerStride3 * @out.Shape.Dimensions[dimIndex2].Length;

                        for (long outer = 0; outer < totalOps; outer++)
                        {
                            //Get the array offset for the first element in the outer dimension
                            long ix1 = in1.Shape[counters];
                            long ix3 = @out.Shape[counters];


                            for (long i = 0; i < opsOuter; i++)
                            {
                                for (long j = 0; j < opsInner; j++)
                                {
                                    for (long k = 0; k < opsInnerInner; k++)
                                    {
                                        d2[ix3] = (System.Byte)(Math.Log10(d1[ix1]));
                                        ix1 += innerInnerStride1;
                                        ix3 += innerInnerStride3;
                                    }

                                    ix1 += innerStride1;
                                    ix3 += innerStride3;
                                }

                                ix1 += outerStride1;
                                ix3 += outerStride3;
                            }

                            if (counters.LongLength > 0)
                            {
                                //Basically a ripple carry adder
                                long p = counters.LongLength - 1;
                                while (++counters[p] == limits[p] && p > 0)
                                {
                                    counters[p] = 0;
                                    p--;
                                }
                            }
                        }
                    }
                }
            }
        }

        /// <summary>
        /// Unsafe implementation of applying a unary operation
        /// </summary>
        /// <typeparam name="C">The type of operation to perform</typeparam>
        /// <param name="op">The operation instance</param>
        /// <param name="scalar">The input scalar argument</param>
        /// <param name="out">The output target</param>
        internal static void UFunc_Op_Inner_Unary_Scalar_Flush_Byte_TypedImpl<C>(NumCIL.UInt8.Log10 op, System.Byte scalar, NdArray<System.Byte> @out)
            where C : IUnaryOp<System.Byte>
        {
            unsafe
            {
                using (var f2 = new Pinner(@out.DataAccessor))
                {
                    var d2 = (System.Byte*)f2.ptr;

                    if (@out.Shape.Dimensions.Length == 1)
                    {
                        long totalOps = @out.Shape.Dimensions[0].Length;
                        long ix2 = @out.Shape.Offset;
                        long stride2 = @out.Shape.Dimensions[0].Stride;

                        for (long i = 0; i < totalOps; i++)
                        {
                            d2[ix2] = (System.Byte)(Math.Log10(scalar));
                            ix2 += stride2;
                        }
                    }
                    else if (@out.Shape.Dimensions.Length == 2)
                    {
                        long opsOuter = @out.Shape.Dimensions[0].Length;
                        long opsInner = @out.Shape.Dimensions[1].Length;

                        long ix2 = @out.Shape.Offset;
                        long outerStride2 = @out.Shape.Dimensions[0].Stride;
                        long innerStride2 = @out.Shape.Dimensions[1].Stride;
                        outerStride2 -= innerStride2 * @out.Shape.Dimensions[1].Length;

                        for (long i = 0; i < opsOuter; i++)
                        {
                            for (long j = 0; j < opsInner; j++)
                            {
                                d2[ix2] = (System.Byte)(Math.Log10(scalar));
                                ix2 += innerStride2;
                            }

                            ix2 += outerStride2;
                        }
                    }
                    else
                    {
                        long n = @out.Shape.Dimensions.LongLength - 3;
                        long[] limits = @out.Shape.Dimensions.Where(x => n-- > 0).Select(x => x.Length).ToArray();
                        long[] counters = new long[limits.LongLength];

                        long totalOps = limits.LongLength == 0 ? 1 : limits.Aggregate<long>((a, b) => a * b);

                        //This chunck of variables are used to prevent repeated calculations of offsets
                        long dimIndex0 = 0 + limits.LongLength;
                        long dimIndex1 = 1 + limits.LongLength;
                        long dimIndex2 = 2 + limits.LongLength;

                        long opsOuter = @out.Shape.Dimensions[0 + limits.LongLength].Length;
                        long opsInner = @out.Shape.Dimensions[1 + limits.LongLength].Length;
                        long opsInnerInner = @out.Shape.Dimensions[2 + limits.LongLength].Length;

                        long outerStride3 = @out.Shape.Dimensions[dimIndex0].Stride;
                        long innerStride3 = @out.Shape.Dimensions[dimIndex1].Stride;
                        long innerInnerStride3 = @out.Shape.Dimensions[dimIndex2].Stride;
                        outerStride3 -= innerStride3 * @out.Shape.Dimensions[dimIndex1].Length;
                        innerStride3 -= innerInnerStride3 * @out.Shape.Dimensions[dimIndex2].Length;

                        for (long outer = 0; outer < totalOps; outer++)
                        {
                            //Get the array offset for the first element in the outer dimension
                            long ix3 = @out.Shape[counters];

                            for (long i = 0; i < opsOuter; i++)
                            {
                                for (long j = 0; j < opsInner; j++)
                                {
                                    for (long k = 0; k < opsInnerInner; k++)
                                    {
                                        d2[ix3] = (System.Byte)(Math.Log10(scalar));
                                        ix3 += innerInnerStride3;
                                    }

                                    ix3 += innerStride3;
                                }

                                ix3 += outerStride3;
                            }

                            if (counters.LongLength > 0)
                            {
                                //Basically a ripple carry adder
                                long p = counters.LongLength - 1;
                                while (++counters[p] == limits[p] && p > 0)
                                {
                                    counters[p] = 0;
                                    p--;
                                }
                            }
                        }
                    }
                }
            }
        }
        /// <summary>
        /// Unsafe implementation of applying a unary operation
        /// </summary>
        /// <typeparam name="C">The type of operation to perform</typeparam>
        /// <param name="op">The operation instance</param>
        /// <param name="in1">The input argument</param>
        /// <param name="out">The output target</param>
        internal static void UFunc_Op_Inner_Unary_Flush_Int16_TypedImpl<C>(NumCIL.Int16.Log10 op, NdArray<System.Int16> in1, NdArray<System.Int16> @out)
            where C : IUnaryOp<System.Int16>
        {
            unsafe
            {
                using (var f1 = new Pinner(in1.DataAccessor))
                using (var f2 = new Pinner(@out.DataAccessor))
                {
                    var d1 = (System.Int16*)f1.ptr;
                    var d2 = (System.Int16*)f2.ptr;

                    if (@out.Shape.Dimensions.Length == 1)
                    {
                        long totalOps = @out.Shape.Dimensions[0].Length;

                        long ix1 = in1.Shape.Offset;
                        long ix2 = @out.Shape.Offset;

                        long stride1 = in1.Shape.Dimensions[0].Stride;
                        long stride2 = @out.Shape.Dimensions[0].Stride;


                        if (stride1 == stride2 && ix1 == ix2)
                        {
                            //Best case, all are equal, just keep a single counter
                            for (long i = 0; i < totalOps; i++)
                            {
                                d2[ix1] = (System.Int16)(Math.Log10(d1[ix1]));
                                ix1 += stride1;
                            }
                        }
                        else
                        {
                            for (long i = 0; i < totalOps; i++)
                            {
                                d2[ix2] = (System.Int16)(Math.Log10(d1[ix1]));
                                ix1 += stride1;
                                ix2 += stride2;
                            }
                        }
                    }
                    else if (@out.Shape.Dimensions.Length == 2)
                    {
                        long opsOuter = @out.Shape.Dimensions[0].Length;
                        long opsInner = @out.Shape.Dimensions[1].Length;

                        long ix1 = in1.Shape.Offset;
                        long ix2 = @out.Shape.Offset;

                        long outerStride1 = in1.Shape.Dimensions[0].Stride;
                        long outerStride2 = @out.Shape.Dimensions[0].Stride;

                        long innerStride1 = in1.Shape.Dimensions[1].Stride;
                        long innerStride2 = @out.Shape.Dimensions[1].Stride;

                        outerStride1 -= innerStride1 * in1.Shape.Dimensions[1].Length;
                        outerStride2 -= innerStride2 * @out.Shape.Dimensions[1].Length;

                        for (long i = 0; i < opsOuter; i++)
                        {
                            for (long j = 0; j < opsInner; j++)
                            {
                                d2[ix2] = (System.Int16)(Math.Log10(d1[ix1]));
                                ix1 += innerStride1;
                                ix2 += innerStride2;
                            }

                            ix1 += outerStride1;
                            ix2 += outerStride2;
                        }
                    }
                    else
                    {
                        long n = in1.Shape.Dimensions.LongLength - 3;
                        long[] limits = in1.Shape.Dimensions.Where(x => n-- > 0).Select(x => x.Length).ToArray();
                        long[] counters = new long[limits.LongLength];

                        long totalOps = limits.LongLength == 0 ? 1 : limits.Aggregate<long>((a, b) => a * b);

                        //This chunck of variables are used to prevent repeated calculations of offsets
                        long dimIndex0 = 0 + limits.LongLength;
                        long dimIndex1 = 1 + limits.LongLength;
                        long dimIndex2 = 2 + limits.LongLength;

                        long opsOuter = @out.Shape.Dimensions[0 + limits.LongLength].Length;
                        long opsInner = @out.Shape.Dimensions[1 + limits.LongLength].Length;
                        long opsInnerInner = @out.Shape.Dimensions[2 + limits.LongLength].Length;

                        long outerStride1 = in1.Shape.Dimensions[dimIndex0].Stride;
                        long outerStride3 = @out.Shape.Dimensions[dimIndex0].Stride;

                        long innerStride1 = in1.Shape.Dimensions[dimIndex1].Stride;
                        long innerStride3 = @out.Shape.Dimensions[dimIndex1].Stride;

                        long innerInnerStride1 = in1.Shape.Dimensions[dimIndex2].Stride;
                        long innerInnerStride3 = @out.Shape.Dimensions[dimIndex2].Stride;

                        outerStride1 -= innerStride1 * in1.Shape.Dimensions[dimIndex1].Length;
                        outerStride3 -= innerStride3 * @out.Shape.Dimensions[dimIndex1].Length;

                        innerStride1 -= innerInnerStride1 * in1.Shape.Dimensions[dimIndex2].Length;
                        innerStride3 -= innerInnerStride3 * @out.Shape.Dimensions[dimIndex2].Length;

                        for (long outer = 0; outer < totalOps; outer++)
                        {
                            //Get the array offset for the first element in the outer dimension
                            long ix1 = in1.Shape[counters];
                            long ix3 = @out.Shape[counters];


                            for (long i = 0; i < opsOuter; i++)
                            {
                                for (long j = 0; j < opsInner; j++)
                                {
                                    for (long k = 0; k < opsInnerInner; k++)
                                    {
                                        d2[ix3] = (System.Int16)(Math.Log10(d1[ix1]));
                                        ix1 += innerInnerStride1;
                                        ix3 += innerInnerStride3;
                                    }

                                    ix1 += innerStride1;
                                    ix3 += innerStride3;
                                }

                                ix1 += outerStride1;
                                ix3 += outerStride3;
                            }

                            if (counters.LongLength > 0)
                            {
                                //Basically a ripple carry adder
                                long p = counters.LongLength - 1;
                                while (++counters[p] == limits[p] && p > 0)
                                {
                                    counters[p] = 0;
                                    p--;
                                }
                            }
                        }
                    }
                }
            }
        }

        /// <summary>
        /// Unsafe implementation of applying a unary operation
        /// </summary>
        /// <typeparam name="C">The type of operation to perform</typeparam>
        /// <param name="op">The operation instance</param>
        /// <param name="scalar">The input scalar argument</param>
        /// <param name="out">The output target</param>
        internal static void UFunc_Op_Inner_Unary_Scalar_Flush_Int16_TypedImpl<C>(NumCIL.Int16.Log10 op, System.Int16 scalar, NdArray<System.Int16> @out)
            where C : IUnaryOp<System.Int16>
        {
            unsafe
            {
                using (var f2 = new Pinner(@out.DataAccessor))
                {
                    var d2 = (System.Int16*)f2.ptr;

                    if (@out.Shape.Dimensions.Length == 1)
                    {
                        long totalOps = @out.Shape.Dimensions[0].Length;
                        long ix2 = @out.Shape.Offset;
                        long stride2 = @out.Shape.Dimensions[0].Stride;

                        for (long i = 0; i < totalOps; i++)
                        {
                            d2[ix2] = (System.Int16)(Math.Log10(scalar));
                            ix2 += stride2;
                        }
                    }
                    else if (@out.Shape.Dimensions.Length == 2)
                    {
                        long opsOuter = @out.Shape.Dimensions[0].Length;
                        long opsInner = @out.Shape.Dimensions[1].Length;

                        long ix2 = @out.Shape.Offset;
                        long outerStride2 = @out.Shape.Dimensions[0].Stride;
                        long innerStride2 = @out.Shape.Dimensions[1].Stride;
                        outerStride2 -= innerStride2 * @out.Shape.Dimensions[1].Length;

                        for (long i = 0; i < opsOuter; i++)
                        {
                            for (long j = 0; j < opsInner; j++)
                            {
                                d2[ix2] = (System.Int16)(Math.Log10(scalar));
                                ix2 += innerStride2;
                            }

                            ix2 += outerStride2;
                        }
                    }
                    else
                    {
                        long n = @out.Shape.Dimensions.LongLength - 3;
                        long[] limits = @out.Shape.Dimensions.Where(x => n-- > 0).Select(x => x.Length).ToArray();
                        long[] counters = new long[limits.LongLength];

                        long totalOps = limits.LongLength == 0 ? 1 : limits.Aggregate<long>((a, b) => a * b);

                        //This chunck of variables are used to prevent repeated calculations of offsets
                        long dimIndex0 = 0 + limits.LongLength;
                        long dimIndex1 = 1 + limits.LongLength;
                        long dimIndex2 = 2 + limits.LongLength;

                        long opsOuter = @out.Shape.Dimensions[0 + limits.LongLength].Length;
                        long opsInner = @out.Shape.Dimensions[1 + limits.LongLength].Length;
                        long opsInnerInner = @out.Shape.Dimensions[2 + limits.LongLength].Length;

                        long outerStride3 = @out.Shape.Dimensions[dimIndex0].Stride;
                        long innerStride3 = @out.Shape.Dimensions[dimIndex1].Stride;
                        long innerInnerStride3 = @out.Shape.Dimensions[dimIndex2].Stride;
                        outerStride3 -= innerStride3 * @out.Shape.Dimensions[dimIndex1].Length;
                        innerStride3 -= innerInnerStride3 * @out.Shape.Dimensions[dimIndex2].Length;

                        for (long outer = 0; outer < totalOps; outer++)
                        {
                            //Get the array offset for the first element in the outer dimension
                            long ix3 = @out.Shape[counters];

                            for (long i = 0; i < opsOuter; i++)
                            {
                                for (long j = 0; j < opsInner; j++)
                                {
                                    for (long k = 0; k < opsInnerInner; k++)
                                    {
                                        d2[ix3] = (System.Int16)(Math.Log10(scalar));
                                        ix3 += innerInnerStride3;
                                    }

                                    ix3 += innerStride3;
                                }

                                ix3 += outerStride3;
                            }

                            if (counters.LongLength > 0)
                            {
                                //Basically a ripple carry adder
                                long p = counters.LongLength - 1;
                                while (++counters[p] == limits[p] && p > 0)
                                {
                                    counters[p] = 0;
                                    p--;
                                }
                            }
                        }
                    }
                }
            }
        }
        /// <summary>
        /// Unsafe implementation of applying a unary operation
        /// </summary>
        /// <typeparam name="C">The type of operation to perform</typeparam>
        /// <param name="op">The operation instance</param>
        /// <param name="in1">The input argument</param>
        /// <param name="out">The output target</param>
        internal static void UFunc_Op_Inner_Unary_Flush_UInt16_TypedImpl<C>(NumCIL.UInt16.Log10 op, NdArray<System.UInt16> in1, NdArray<System.UInt16> @out)
            where C : IUnaryOp<System.UInt16>
        {
            unsafe
            {
                using (var f1 = new Pinner(in1.DataAccessor))
                using (var f2 = new Pinner(@out.DataAccessor))
                {
                    var d1 = (System.UInt16*)f1.ptr;
                    var d2 = (System.UInt16*)f2.ptr;

                    if (@out.Shape.Dimensions.Length == 1)
                    {
                        long totalOps = @out.Shape.Dimensions[0].Length;

                        long ix1 = in1.Shape.Offset;
                        long ix2 = @out.Shape.Offset;

                        long stride1 = in1.Shape.Dimensions[0].Stride;
                        long stride2 = @out.Shape.Dimensions[0].Stride;


                        if (stride1 == stride2 && ix1 == ix2)
                        {
                            //Best case, all are equal, just keep a single counter
                            for (long i = 0; i < totalOps; i++)
                            {
                                d2[ix1] = (System.UInt16)(Math.Log10(d1[ix1]));
                                ix1 += stride1;
                            }
                        }
                        else
                        {
                            for (long i = 0; i < totalOps; i++)
                            {
                                d2[ix2] = (System.UInt16)(Math.Log10(d1[ix1]));
                                ix1 += stride1;
                                ix2 += stride2;
                            }
                        }
                    }
                    else if (@out.Shape.Dimensions.Length == 2)
                    {
                        long opsOuter = @out.Shape.Dimensions[0].Length;
                        long opsInner = @out.Shape.Dimensions[1].Length;

                        long ix1 = in1.Shape.Offset;
                        long ix2 = @out.Shape.Offset;

                        long outerStride1 = in1.Shape.Dimensions[0].Stride;
                        long outerStride2 = @out.Shape.Dimensions[0].Stride;

                        long innerStride1 = in1.Shape.Dimensions[1].Stride;
                        long innerStride2 = @out.Shape.Dimensions[1].Stride;

                        outerStride1 -= innerStride1 * in1.Shape.Dimensions[1].Length;
                        outerStride2 -= innerStride2 * @out.Shape.Dimensions[1].Length;

                        for (long i = 0; i < opsOuter; i++)
                        {
                            for (long j = 0; j < opsInner; j++)
                            {
                                d2[ix2] = (System.UInt16)(Math.Log10(d1[ix1]));
                                ix1 += innerStride1;
                                ix2 += innerStride2;
                            }

                            ix1 += outerStride1;
                            ix2 += outerStride2;
                        }
                    }
                    else
                    {
                        long n = in1.Shape.Dimensions.LongLength - 3;
                        long[] limits = in1.Shape.Dimensions.Where(x => n-- > 0).Select(x => x.Length).ToArray();
                        long[] counters = new long[limits.LongLength];

                        long totalOps = limits.LongLength == 0 ? 1 : limits.Aggregate<long>((a, b) => a * b);

                        //This chunck of variables are used to prevent repeated calculations of offsets
                        long dimIndex0 = 0 + limits.LongLength;
                        long dimIndex1 = 1 + limits.LongLength;
                        long dimIndex2 = 2 + limits.LongLength;

                        long opsOuter = @out.Shape.Dimensions[0 + limits.LongLength].Length;
                        long opsInner = @out.Shape.Dimensions[1 + limits.LongLength].Length;
                        long opsInnerInner = @out.Shape.Dimensions[2 + limits.LongLength].Length;

                        long outerStride1 = in1.Shape.Dimensions[dimIndex0].Stride;
                        long outerStride3 = @out.Shape.Dimensions[dimIndex0].Stride;

                        long innerStride1 = in1.Shape.Dimensions[dimIndex1].Stride;
                        long innerStride3 = @out.Shape.Dimensions[dimIndex1].Stride;

                        long innerInnerStride1 = in1.Shape.Dimensions[dimIndex2].Stride;
                        long innerInnerStride3 = @out.Shape.Dimensions[dimIndex2].Stride;

                        outerStride1 -= innerStride1 * in1.Shape.Dimensions[dimIndex1].Length;
                        outerStride3 -= innerStride3 * @out.Shape.Dimensions[dimIndex1].Length;

                        innerStride1 -= innerInnerStride1 * in1.Shape.Dimensions[dimIndex2].Length;
                        innerStride3 -= innerInnerStride3 * @out.Shape.Dimensions[dimIndex2].Length;

                        for (long outer = 0; outer < totalOps; outer++)
                        {
                            //Get the array offset for the first element in the outer dimension
                            long ix1 = in1.Shape[counters];
                            long ix3 = @out.Shape[counters];


                            for (long i = 0; i < opsOuter; i++)
                            {
                                for (long j = 0; j < opsInner; j++)
                                {
                                    for (long k = 0; k < opsInnerInner; k++)
                                    {
                                        d2[ix3] = (System.UInt16)(Math.Log10(d1[ix1]));
                                        ix1 += innerInnerStride1;
                                        ix3 += innerInnerStride3;
                                    }

                                    ix1 += innerStride1;
                                    ix3 += innerStride3;
                                }

                                ix1 += outerStride1;
                                ix3 += outerStride3;
                            }

                            if (counters.LongLength > 0)
                            {
                                //Basically a ripple carry adder
                                long p = counters.LongLength - 1;
                                while (++counters[p] == limits[p] && p > 0)
                                {
                                    counters[p] = 0;
                                    p--;
                                }
                            }
                        }
                    }
                }
            }
        }

        /// <summary>
        /// Unsafe implementation of applying a unary operation
        /// </summary>
        /// <typeparam name="C">The type of operation to perform</typeparam>
        /// <param name="op">The operation instance</param>
        /// <param name="scalar">The input scalar argument</param>
        /// <param name="out">The output target</param>
        internal static void UFunc_Op_Inner_Unary_Scalar_Flush_UInt16_TypedImpl<C>(NumCIL.UInt16.Log10 op, System.UInt16 scalar, NdArray<System.UInt16> @out)
            where C : IUnaryOp<System.UInt16>
        {
            unsafe
            {
                using (var f2 = new Pinner(@out.DataAccessor))
                {
                    var d2 = (System.UInt16*)f2.ptr;

                    if (@out.Shape.Dimensions.Length == 1)
                    {
                        long totalOps = @out.Shape.Dimensions[0].Length;
                        long ix2 = @out.Shape.Offset;
                        long stride2 = @out.Shape.Dimensions[0].Stride;

                        for (long i = 0; i < totalOps; i++)
                        {
                            d2[ix2] = (System.UInt16)(Math.Log10(scalar));
                            ix2 += stride2;
                        }
                    }
                    else if (@out.Shape.Dimensions.Length == 2)
                    {
                        long opsOuter = @out.Shape.Dimensions[0].Length;
                        long opsInner = @out.Shape.Dimensions[1].Length;

                        long ix2 = @out.Shape.Offset;
                        long outerStride2 = @out.Shape.Dimensions[0].Stride;
                        long innerStride2 = @out.Shape.Dimensions[1].Stride;
                        outerStride2 -= innerStride2 * @out.Shape.Dimensions[1].Length;

                        for (long i = 0; i < opsOuter; i++)
                        {
                            for (long j = 0; j < opsInner; j++)
                            {
                                d2[ix2] = (System.UInt16)(Math.Log10(scalar));
                                ix2 += innerStride2;
                            }

                            ix2 += outerStride2;
                        }
                    }
                    else
                    {
                        long n = @out.Shape.Dimensions.LongLength - 3;
                        long[] limits = @out.Shape.Dimensions.Where(x => n-- > 0).Select(x => x.Length).ToArray();
                        long[] counters = new long[limits.LongLength];

                        long totalOps = limits.LongLength == 0 ? 1 : limits.Aggregate<long>((a, b) => a * b);

                        //This chunck of variables are used to prevent repeated calculations of offsets
                        long dimIndex0 = 0 + limits.LongLength;
                        long dimIndex1 = 1 + limits.LongLength;
                        long dimIndex2 = 2 + limits.LongLength;

                        long opsOuter = @out.Shape.Dimensions[0 + limits.LongLength].Length;
                        long opsInner = @out.Shape.Dimensions[1 + limits.LongLength].Length;
                        long opsInnerInner = @out.Shape.Dimensions[2 + limits.LongLength].Length;

                        long outerStride3 = @out.Shape.Dimensions[dimIndex0].Stride;
                        long innerStride3 = @out.Shape.Dimensions[dimIndex1].Stride;
                        long innerInnerStride3 = @out.Shape.Dimensions[dimIndex2].Stride;
                        outerStride3 -= innerStride3 * @out.Shape.Dimensions[dimIndex1].Length;
                        innerStride3 -= innerInnerStride3 * @out.Shape.Dimensions[dimIndex2].Length;

                        for (long outer = 0; outer < totalOps; outer++)
                        {
                            //Get the array offset for the first element in the outer dimension
                            long ix3 = @out.Shape[counters];

                            for (long i = 0; i < opsOuter; i++)
                            {
                                for (long j = 0; j < opsInner; j++)
                                {
                                    for (long k = 0; k < opsInnerInner; k++)
                                    {
                                        d2[ix3] = (System.UInt16)(Math.Log10(scalar));
                                        ix3 += innerInnerStride3;
                                    }

                                    ix3 += innerStride3;
                                }

                                ix3 += outerStride3;
                            }

                            if (counters.LongLength > 0)
                            {
                                //Basically a ripple carry adder
                                long p = counters.LongLength - 1;
                                while (++counters[p] == limits[p] && p > 0)
                                {
                                    counters[p] = 0;
                                    p--;
                                }
                            }
                        }
                    }
                }
            }
        }
        /// <summary>
        /// Unsafe implementation of applying a unary operation
        /// </summary>
        /// <typeparam name="C">The type of operation to perform</typeparam>
        /// <param name="op">The operation instance</param>
        /// <param name="in1">The input argument</param>
        /// <param name="out">The output target</param>
        internal static void UFunc_Op_Inner_Unary_Flush_Int32_TypedImpl<C>(NumCIL.Int32.Log10 op, NdArray<System.Int32> in1, NdArray<System.Int32> @out)
            where C : IUnaryOp<System.Int32>
        {
            unsafe
            {
                using (var f1 = new Pinner(in1.DataAccessor))
                using (var f2 = new Pinner(@out.DataAccessor))
                {
                    var d1 = (System.Int32*)f1.ptr;
                    var d2 = (System.Int32*)f2.ptr;

                    if (@out.Shape.Dimensions.Length == 1)
                    {
                        long totalOps = @out.Shape.Dimensions[0].Length;

                        long ix1 = in1.Shape.Offset;
                        long ix2 = @out.Shape.Offset;

                        long stride1 = in1.Shape.Dimensions[0].Stride;
                        long stride2 = @out.Shape.Dimensions[0].Stride;


                        if (stride1 == stride2 && ix1 == ix2)
                        {
                            //Best case, all are equal, just keep a single counter
                            for (long i = 0; i < totalOps; i++)
                            {
                                d2[ix1] = (System.Int32)(Math.Log10(d1[ix1]));
                                ix1 += stride1;
                            }
                        }
                        else
                        {
                            for (long i = 0; i < totalOps; i++)
                            {
                                d2[ix2] = (System.Int32)(Math.Log10(d1[ix1]));
                                ix1 += stride1;
                                ix2 += stride2;
                            }
                        }
                    }
                    else if (@out.Shape.Dimensions.Length == 2)
                    {
                        long opsOuter = @out.Shape.Dimensions[0].Length;
                        long opsInner = @out.Shape.Dimensions[1].Length;

                        long ix1 = in1.Shape.Offset;
                        long ix2 = @out.Shape.Offset;

                        long outerStride1 = in1.Shape.Dimensions[0].Stride;
                        long outerStride2 = @out.Shape.Dimensions[0].Stride;

                        long innerStride1 = in1.Shape.Dimensions[1].Stride;
                        long innerStride2 = @out.Shape.Dimensions[1].Stride;

                        outerStride1 -= innerStride1 * in1.Shape.Dimensions[1].Length;
                        outerStride2 -= innerStride2 * @out.Shape.Dimensions[1].Length;

                        for (long i = 0; i < opsOuter; i++)
                        {
                            for (long j = 0; j < opsInner; j++)
                            {
                                d2[ix2] = (System.Int32)(Math.Log10(d1[ix1]));
                                ix1 += innerStride1;
                                ix2 += innerStride2;
                            }

                            ix1 += outerStride1;
                            ix2 += outerStride2;
                        }
                    }
                    else
                    {
                        long n = in1.Shape.Dimensions.LongLength - 3;
                        long[] limits = in1.Shape.Dimensions.Where(x => n-- > 0).Select(x => x.Length).ToArray();
                        long[] counters = new long[limits.LongLength];

                        long totalOps = limits.LongLength == 0 ? 1 : limits.Aggregate<long>((a, b) => a * b);

                        //This chunck of variables are used to prevent repeated calculations of offsets
                        long dimIndex0 = 0 + limits.LongLength;
                        long dimIndex1 = 1 + limits.LongLength;
                        long dimIndex2 = 2 + limits.LongLength;

                        long opsOuter = @out.Shape.Dimensions[0 + limits.LongLength].Length;
                        long opsInner = @out.Shape.Dimensions[1 + limits.LongLength].Length;
                        long opsInnerInner = @out.Shape.Dimensions[2 + limits.LongLength].Length;

                        long outerStride1 = in1.Shape.Dimensions[dimIndex0].Stride;
                        long outerStride3 = @out.Shape.Dimensions[dimIndex0].Stride;

                        long innerStride1 = in1.Shape.Dimensions[dimIndex1].Stride;
                        long innerStride3 = @out.Shape.Dimensions[dimIndex1].Stride;

                        long innerInnerStride1 = in1.Shape.Dimensions[dimIndex2].Stride;
                        long innerInnerStride3 = @out.Shape.Dimensions[dimIndex2].Stride;

                        outerStride1 -= innerStride1 * in1.Shape.Dimensions[dimIndex1].Length;
                        outerStride3 -= innerStride3 * @out.Shape.Dimensions[dimIndex1].Length;

                        innerStride1 -= innerInnerStride1 * in1.Shape.Dimensions[dimIndex2].Length;
                        innerStride3 -= innerInnerStride3 * @out.Shape.Dimensions[dimIndex2].Length;

                        for (long outer = 0; outer < totalOps; outer++)
                        {
                            //Get the array offset for the first element in the outer dimension
                            long ix1 = in1.Shape[counters];
                            long ix3 = @out.Shape[counters];


                            for (long i = 0; i < opsOuter; i++)
                            {
                                for (long j = 0; j < opsInner; j++)
                                {
                                    for (long k = 0; k < opsInnerInner; k++)
                                    {
                                        d2[ix3] = (System.Int32)(Math.Log10(d1[ix1]));
                                        ix1 += innerInnerStride1;
                                        ix3 += innerInnerStride3;
                                    }

                                    ix1 += innerStride1;
                                    ix3 += innerStride3;
                                }

                                ix1 += outerStride1;
                                ix3 += outerStride3;
                            }

                            if (counters.LongLength > 0)
                            {
                                //Basically a ripple carry adder
                                long p = counters.LongLength - 1;
                                while (++counters[p] == limits[p] && p > 0)
                                {
                                    counters[p] = 0;
                                    p--;
                                }
                            }
                        }
                    }
                }
            }
        }

        /// <summary>
        /// Unsafe implementation of applying a unary operation
        /// </summary>
        /// <typeparam name="C">The type of operation to perform</typeparam>
        /// <param name="op">The operation instance</param>
        /// <param name="scalar">The input scalar argument</param>
        /// <param name="out">The output target</param>
        internal static void UFunc_Op_Inner_Unary_Scalar_Flush_Int32_TypedImpl<C>(NumCIL.Int32.Log10 op, System.Int32 scalar, NdArray<System.Int32> @out)
            where C : IUnaryOp<System.Int32>
        {
            unsafe
            {
                using (var f2 = new Pinner(@out.DataAccessor))
                {
                    var d2 = (System.Int32*)f2.ptr;

                    if (@out.Shape.Dimensions.Length == 1)
                    {
                        long totalOps = @out.Shape.Dimensions[0].Length;
                        long ix2 = @out.Shape.Offset;
                        long stride2 = @out.Shape.Dimensions[0].Stride;

                        for (long i = 0; i < totalOps; i++)
                        {
                            d2[ix2] = (System.Int32)(Math.Log10(scalar));
                            ix2 += stride2;
                        }
                    }
                    else if (@out.Shape.Dimensions.Length == 2)
                    {
                        long opsOuter = @out.Shape.Dimensions[0].Length;
                        long opsInner = @out.Shape.Dimensions[1].Length;

                        long ix2 = @out.Shape.Offset;
                        long outerStride2 = @out.Shape.Dimensions[0].Stride;
                        long innerStride2 = @out.Shape.Dimensions[1].Stride;
                        outerStride2 -= innerStride2 * @out.Shape.Dimensions[1].Length;

                        for (long i = 0; i < opsOuter; i++)
                        {
                            for (long j = 0; j < opsInner; j++)
                            {
                                d2[ix2] = (System.Int32)(Math.Log10(scalar));
                                ix2 += innerStride2;
                            }

                            ix2 += outerStride2;
                        }
                    }
                    else
                    {
                        long n = @out.Shape.Dimensions.LongLength - 3;
                        long[] limits = @out.Shape.Dimensions.Where(x => n-- > 0).Select(x => x.Length).ToArray();
                        long[] counters = new long[limits.LongLength];

                        long totalOps = limits.LongLength == 0 ? 1 : limits.Aggregate<long>((a, b) => a * b);

                        //This chunck of variables are used to prevent repeated calculations of offsets
                        long dimIndex0 = 0 + limits.LongLength;
                        long dimIndex1 = 1 + limits.LongLength;
                        long dimIndex2 = 2 + limits.LongLength;

                        long opsOuter = @out.Shape.Dimensions[0 + limits.LongLength].Length;
                        long opsInner = @out.Shape.Dimensions[1 + limits.LongLength].Length;
                        long opsInnerInner = @out.Shape.Dimensions[2 + limits.LongLength].Length;

                        long outerStride3 = @out.Shape.Dimensions[dimIndex0].Stride;
                        long innerStride3 = @out.Shape.Dimensions[dimIndex1].Stride;
                        long innerInnerStride3 = @out.Shape.Dimensions[dimIndex2].Stride;
                        outerStride3 -= innerStride3 * @out.Shape.Dimensions[dimIndex1].Length;
                        innerStride3 -= innerInnerStride3 * @out.Shape.Dimensions[dimIndex2].Length;

                        for (long outer = 0; outer < totalOps; outer++)
                        {
                            //Get the array offset for the first element in the outer dimension
                            long ix3 = @out.Shape[counters];

                            for (long i = 0; i < opsOuter; i++)
                            {
                                for (long j = 0; j < opsInner; j++)
                                {
                                    for (long k = 0; k < opsInnerInner; k++)
                                    {
                                        d2[ix3] = (System.Int32)(Math.Log10(scalar));
                                        ix3 += innerInnerStride3;
                                    }

                                    ix3 += innerStride3;
                                }

                                ix3 += outerStride3;
                            }

                            if (counters.LongLength > 0)
                            {
                                //Basically a ripple carry adder
                                long p = counters.LongLength - 1;
                                while (++counters[p] == limits[p] && p > 0)
                                {
                                    counters[p] = 0;
                                    p--;
                                }
                            }
                        }
                    }
                }
            }
        }
        /// <summary>
        /// Unsafe implementation of applying a unary operation
        /// </summary>
        /// <typeparam name="C">The type of operation to perform</typeparam>
        /// <param name="op">The operation instance</param>
        /// <param name="in1">The input argument</param>
        /// <param name="out">The output target</param>
        internal static void UFunc_Op_Inner_Unary_Flush_UInt32_TypedImpl<C>(NumCIL.UInt32.Log10 op, NdArray<System.UInt32> in1, NdArray<System.UInt32> @out)
            where C : IUnaryOp<System.UInt32>
        {
            unsafe
            {
                using (var f1 = new Pinner(in1.DataAccessor))
                using (var f2 = new Pinner(@out.DataAccessor))
                {
                    var d1 = (System.UInt32*)f1.ptr;
                    var d2 = (System.UInt32*)f2.ptr;

                    if (@out.Shape.Dimensions.Length == 1)
                    {
                        long totalOps = @out.Shape.Dimensions[0].Length;

                        long ix1 = in1.Shape.Offset;
                        long ix2 = @out.Shape.Offset;

                        long stride1 = in1.Shape.Dimensions[0].Stride;
                        long stride2 = @out.Shape.Dimensions[0].Stride;


                        if (stride1 == stride2 && ix1 == ix2)
                        {
                            //Best case, all are equal, just keep a single counter
                            for (long i = 0; i < totalOps; i++)
                            {
                                d2[ix1] = (System.UInt32)(Math.Log10(d1[ix1]));
                                ix1 += stride1;
                            }
                        }
                        else
                        {
                            for (long i = 0; i < totalOps; i++)
                            {
                                d2[ix2] = (System.UInt32)(Math.Log10(d1[ix1]));
                                ix1 += stride1;
                                ix2 += stride2;
                            }
                        }
                    }
                    else if (@out.Shape.Dimensions.Length == 2)
                    {
                        long opsOuter = @out.Shape.Dimensions[0].Length;
                        long opsInner = @out.Shape.Dimensions[1].Length;

                        long ix1 = in1.Shape.Offset;
                        long ix2 = @out.Shape.Offset;

                        long outerStride1 = in1.Shape.Dimensions[0].Stride;
                        long outerStride2 = @out.Shape.Dimensions[0].Stride;

                        long innerStride1 = in1.Shape.Dimensions[1].Stride;
                        long innerStride2 = @out.Shape.Dimensions[1].Stride;

                        outerStride1 -= innerStride1 * in1.Shape.Dimensions[1].Length;
                        outerStride2 -= innerStride2 * @out.Shape.Dimensions[1].Length;

                        for (long i = 0; i < opsOuter; i++)
                        {
                            for (long j = 0; j < opsInner; j++)
                            {
                                d2[ix2] = (System.UInt32)(Math.Log10(d1[ix1]));
                                ix1 += innerStride1;
                                ix2 += innerStride2;
                            }

                            ix1 += outerStride1;
                            ix2 += outerStride2;
                        }
                    }
                    else
                    {
                        long n = in1.Shape.Dimensions.LongLength - 3;
                        long[] limits = in1.Shape.Dimensions.Where(x => n-- > 0).Select(x => x.Length).ToArray();
                        long[] counters = new long[limits.LongLength];

                        long totalOps = limits.LongLength == 0 ? 1 : limits.Aggregate<long>((a, b) => a * b);

                        //This chunck of variables are used to prevent repeated calculations of offsets
                        long dimIndex0 = 0 + limits.LongLength;
                        long dimIndex1 = 1 + limits.LongLength;
                        long dimIndex2 = 2 + limits.LongLength;

                        long opsOuter = @out.Shape.Dimensions[0 + limits.LongLength].Length;
                        long opsInner = @out.Shape.Dimensions[1 + limits.LongLength].Length;
                        long opsInnerInner = @out.Shape.Dimensions[2 + limits.LongLength].Length;

                        long outerStride1 = in1.Shape.Dimensions[dimIndex0].Stride;
                        long outerStride3 = @out.Shape.Dimensions[dimIndex0].Stride;

                        long innerStride1 = in1.Shape.Dimensions[dimIndex1].Stride;
                        long innerStride3 = @out.Shape.Dimensions[dimIndex1].Stride;

                        long innerInnerStride1 = in1.Shape.Dimensions[dimIndex2].Stride;
                        long innerInnerStride3 = @out.Shape.Dimensions[dimIndex2].Stride;

                        outerStride1 -= innerStride1 * in1.Shape.Dimensions[dimIndex1].Length;
                        outerStride3 -= innerStride3 * @out.Shape.Dimensions[dimIndex1].Length;

                        innerStride1 -= innerInnerStride1 * in1.Shape.Dimensions[dimIndex2].Length;
                        innerStride3 -= innerInnerStride3 * @out.Shape.Dimensions[dimIndex2].Length;

                        for (long outer = 0; outer < totalOps; outer++)
                        {
                            //Get the array offset for the first element in the outer dimension
                            long ix1 = in1.Shape[counters];
                            long ix3 = @out.Shape[counters];


                            for (long i = 0; i < opsOuter; i++)
                            {
                                for (long j = 0; j < opsInner; j++)
                                {
                                    for (long k = 0; k < opsInnerInner; k++)
                                    {
                                        d2[ix3] = (System.UInt32)(Math.Log10(d1[ix1]));
                                        ix1 += innerInnerStride1;
                                        ix3 += innerInnerStride3;
                                    }

                                    ix1 += innerStride1;
                                    ix3 += innerStride3;
                                }

                                ix1 += outerStride1;
                                ix3 += outerStride3;
                            }

                            if (counters.LongLength > 0)
                            {
                                //Basically a ripple carry adder
                                long p = counters.LongLength - 1;
                                while (++counters[p] == limits[p] && p > 0)
                                {
                                    counters[p] = 0;
                                    p--;
                                }
                            }
                        }
                    }
                }
            }
        }

        /// <summary>
        /// Unsafe implementation of applying a unary operation
        /// </summary>
        /// <typeparam name="C">The type of operation to perform</typeparam>
        /// <param name="op">The operation instance</param>
        /// <param name="scalar">The input scalar argument</param>
        /// <param name="out">The output target</param>
        internal static void UFunc_Op_Inner_Unary_Scalar_Flush_UInt32_TypedImpl<C>(NumCIL.UInt32.Log10 op, System.UInt32 scalar, NdArray<System.UInt32> @out)
            where C : IUnaryOp<System.UInt32>
        {
            unsafe
            {
                using (var f2 = new Pinner(@out.DataAccessor))
                {
                    var d2 = (System.UInt32*)f2.ptr;

                    if (@out.Shape.Dimensions.Length == 1)
                    {
                        long totalOps = @out.Shape.Dimensions[0].Length;
                        long ix2 = @out.Shape.Offset;
                        long stride2 = @out.Shape.Dimensions[0].Stride;

                        for (long i = 0; i < totalOps; i++)
                        {
                            d2[ix2] = (System.UInt32)(Math.Log10(scalar));
                            ix2 += stride2;
                        }
                    }
                    else if (@out.Shape.Dimensions.Length == 2)
                    {
                        long opsOuter = @out.Shape.Dimensions[0].Length;
                        long opsInner = @out.Shape.Dimensions[1].Length;

                        long ix2 = @out.Shape.Offset;
                        long outerStride2 = @out.Shape.Dimensions[0].Stride;
                        long innerStride2 = @out.Shape.Dimensions[1].Stride;
                        outerStride2 -= innerStride2 * @out.Shape.Dimensions[1].Length;

                        for (long i = 0; i < opsOuter; i++)
                        {
                            for (long j = 0; j < opsInner; j++)
                            {
                                d2[ix2] = (System.UInt32)(Math.Log10(scalar));
                                ix2 += innerStride2;
                            }

                            ix2 += outerStride2;
                        }
                    }
                    else
                    {
                        long n = @out.Shape.Dimensions.LongLength - 3;
                        long[] limits = @out.Shape.Dimensions.Where(x => n-- > 0).Select(x => x.Length).ToArray();
                        long[] counters = new long[limits.LongLength];

                        long totalOps = limits.LongLength == 0 ? 1 : limits.Aggregate<long>((a, b) => a * b);

                        //This chunck of variables are used to prevent repeated calculations of offsets
                        long dimIndex0 = 0 + limits.LongLength;
                        long dimIndex1 = 1 + limits.LongLength;
                        long dimIndex2 = 2 + limits.LongLength;

                        long opsOuter = @out.Shape.Dimensions[0 + limits.LongLength].Length;
                        long opsInner = @out.Shape.Dimensions[1 + limits.LongLength].Length;
                        long opsInnerInner = @out.Shape.Dimensions[2 + limits.LongLength].Length;

                        long outerStride3 = @out.Shape.Dimensions[dimIndex0].Stride;
                        long innerStride3 = @out.Shape.Dimensions[dimIndex1].Stride;
                        long innerInnerStride3 = @out.Shape.Dimensions[dimIndex2].Stride;
                        outerStride3 -= innerStride3 * @out.Shape.Dimensions[dimIndex1].Length;
                        innerStride3 -= innerInnerStride3 * @out.Shape.Dimensions[dimIndex2].Length;

                        for (long outer = 0; outer < totalOps; outer++)
                        {
                            //Get the array offset for the first element in the outer dimension
                            long ix3 = @out.Shape[counters];

                            for (long i = 0; i < opsOuter; i++)
                            {
                                for (long j = 0; j < opsInner; j++)
                                {
                                    for (long k = 0; k < opsInnerInner; k++)
                                    {
                                        d2[ix3] = (System.UInt32)(Math.Log10(scalar));
                                        ix3 += innerInnerStride3;
                                    }

                                    ix3 += innerStride3;
                                }

                                ix3 += outerStride3;
                            }

                            if (counters.LongLength > 0)
                            {
                                //Basically a ripple carry adder
                                long p = counters.LongLength - 1;
                                while (++counters[p] == limits[p] && p > 0)
                                {
                                    counters[p] = 0;
                                    p--;
                                }
                            }
                        }
                    }
                }
            }
        }
        /// <summary>
        /// Unsafe implementation of applying a unary operation
        /// </summary>
        /// <typeparam name="C">The type of operation to perform</typeparam>
        /// <param name="op">The operation instance</param>
        /// <param name="in1">The input argument</param>
        /// <param name="out">The output target</param>
        internal static void UFunc_Op_Inner_Unary_Flush_Int64_TypedImpl<C>(NumCIL.Int64.Log10 op, NdArray<System.Int64> in1, NdArray<System.Int64> @out)
            where C : IUnaryOp<System.Int64>
        {
            unsafe
            {
                using (var f1 = new Pinner(in1.DataAccessor))
                using (var f2 = new Pinner(@out.DataAccessor))
                {
                    var d1 = (System.Int64*)f1.ptr;
                    var d2 = (System.Int64*)f2.ptr;

                    if (@out.Shape.Dimensions.Length == 1)
                    {
                        long totalOps = @out.Shape.Dimensions[0].Length;

                        long ix1 = in1.Shape.Offset;
                        long ix2 = @out.Shape.Offset;

                        long stride1 = in1.Shape.Dimensions[0].Stride;
                        long stride2 = @out.Shape.Dimensions[0].Stride;


                        if (stride1 == stride2 && ix1 == ix2)
                        {
                            //Best case, all are equal, just keep a single counter
                            for (long i = 0; i < totalOps; i++)
                            {
                                d2[ix1] = (System.Int64)(Math.Log10(d1[ix1]));
                                ix1 += stride1;
                            }
                        }
                        else
                        {
                            for (long i = 0; i < totalOps; i++)
                            {
                                d2[ix2] = (System.Int64)(Math.Log10(d1[ix1]));
                                ix1 += stride1;
                                ix2 += stride2;
                            }
                        }
                    }
                    else if (@out.Shape.Dimensions.Length == 2)
                    {
                        long opsOuter = @out.Shape.Dimensions[0].Length;
                        long opsInner = @out.Shape.Dimensions[1].Length;

                        long ix1 = in1.Shape.Offset;
                        long ix2 = @out.Shape.Offset;

                        long outerStride1 = in1.Shape.Dimensions[0].Stride;
                        long outerStride2 = @out.Shape.Dimensions[0].Stride;

                        long innerStride1 = in1.Shape.Dimensions[1].Stride;
                        long innerStride2 = @out.Shape.Dimensions[1].Stride;

                        outerStride1 -= innerStride1 * in1.Shape.Dimensions[1].Length;
                        outerStride2 -= innerStride2 * @out.Shape.Dimensions[1].Length;

                        for (long i = 0; i < opsOuter; i++)
                        {
                            for (long j = 0; j < opsInner; j++)
                            {
                                d2[ix2] = (System.Int64)(Math.Log10(d1[ix1]));
                                ix1 += innerStride1;
                                ix2 += innerStride2;
                            }

                            ix1 += outerStride1;
                            ix2 += outerStride2;
                        }
                    }
                    else
                    {
                        long n = in1.Shape.Dimensions.LongLength - 3;
                        long[] limits = in1.Shape.Dimensions.Where(x => n-- > 0).Select(x => x.Length).ToArray();
                        long[] counters = new long[limits.LongLength];

                        long totalOps = limits.LongLength == 0 ? 1 : limits.Aggregate<long>((a, b) => a * b);

                        //This chunck of variables are used to prevent repeated calculations of offsets
                        long dimIndex0 = 0 + limits.LongLength;
                        long dimIndex1 = 1 + limits.LongLength;
                        long dimIndex2 = 2 + limits.LongLength;

                        long opsOuter = @out.Shape.Dimensions[0 + limits.LongLength].Length;
                        long opsInner = @out.Shape.Dimensions[1 + limits.LongLength].Length;
                        long opsInnerInner = @out.Shape.Dimensions[2 + limits.LongLength].Length;

                        long outerStride1 = in1.Shape.Dimensions[dimIndex0].Stride;
                        long outerStride3 = @out.Shape.Dimensions[dimIndex0].Stride;

                        long innerStride1 = in1.Shape.Dimensions[dimIndex1].Stride;
                        long innerStride3 = @out.Shape.Dimensions[dimIndex1].Stride;

                        long innerInnerStride1 = in1.Shape.Dimensions[dimIndex2].Stride;
                        long innerInnerStride3 = @out.Shape.Dimensions[dimIndex2].Stride;

                        outerStride1 -= innerStride1 * in1.Shape.Dimensions[dimIndex1].Length;
                        outerStride3 -= innerStride3 * @out.Shape.Dimensions[dimIndex1].Length;

                        innerStride1 -= innerInnerStride1 * in1.Shape.Dimensions[dimIndex2].Length;
                        innerStride3 -= innerInnerStride3 * @out.Shape.Dimensions[dimIndex2].Length;

                        for (long outer = 0; outer < totalOps; outer++)
                        {
                            //Get the array offset for the first element in the outer dimension
                            long ix1 = in1.Shape[counters];
                            long ix3 = @out.Shape[counters];


                            for (long i = 0; i < opsOuter; i++)
                            {
                                for (long j = 0; j < opsInner; j++)
                                {
                                    for (long k = 0; k < opsInnerInner; k++)
                                    {
                                        d2[ix3] = (System.Int64)(Math.Log10(d1[ix1]));
                                        ix1 += innerInnerStride1;
                                        ix3 += innerInnerStride3;
                                    }

                                    ix1 += innerStride1;
                                    ix3 += innerStride3;
                                }

                                ix1 += outerStride1;
                                ix3 += outerStride3;
                            }

                            if (counters.LongLength > 0)
                            {
                                //Basically a ripple carry adder
                                long p = counters.LongLength - 1;
                                while (++counters[p] == limits[p] && p > 0)
                                {
                                    counters[p] = 0;
                                    p--;
                                }
                            }
                        }
                    }
                }
            }
        }

        /// <summary>
        /// Unsafe implementation of applying a unary operation
        /// </summary>
        /// <typeparam name="C">The type of operation to perform</typeparam>
        /// <param name="op">The operation instance</param>
        /// <param name="scalar">The input scalar argument</param>
        /// <param name="out">The output target</param>
        internal static void UFunc_Op_Inner_Unary_Scalar_Flush_Int64_TypedImpl<C>(NumCIL.Int64.Log10 op, System.Int64 scalar, NdArray<System.Int64> @out)
            where C : IUnaryOp<System.Int64>
        {
            unsafe
            {
                using (var f2 = new Pinner(@out.DataAccessor))
                {
                    var d2 = (System.Int64*)f2.ptr;

                    if (@out.Shape.Dimensions.Length == 1)
                    {
                        long totalOps = @out.Shape.Dimensions[0].Length;
                        long ix2 = @out.Shape.Offset;
                        long stride2 = @out.Shape.Dimensions[0].Stride;

                        for (long i = 0; i < totalOps; i++)
                        {
                            d2[ix2] = (System.Int64)(Math.Log10(scalar));
                            ix2 += stride2;
                        }
                    }
                    else if (@out.Shape.Dimensions.Length == 2)
                    {
                        long opsOuter = @out.Shape.Dimensions[0].Length;
                        long opsInner = @out.Shape.Dimensions[1].Length;

                        long ix2 = @out.Shape.Offset;
                        long outerStride2 = @out.Shape.Dimensions[0].Stride;
                        long innerStride2 = @out.Shape.Dimensions[1].Stride;
                        outerStride2 -= innerStride2 * @out.Shape.Dimensions[1].Length;

                        for (long i = 0; i < opsOuter; i++)
                        {
                            for (long j = 0; j < opsInner; j++)
                            {
                                d2[ix2] = (System.Int64)(Math.Log10(scalar));
                                ix2 += innerStride2;
                            }

                            ix2 += outerStride2;
                        }
                    }
                    else
                    {
                        long n = @out.Shape.Dimensions.LongLength - 3;
                        long[] limits = @out.Shape.Dimensions.Where(x => n-- > 0).Select(x => x.Length).ToArray();
                        long[] counters = new long[limits.LongLength];

                        long totalOps = limits.LongLength == 0 ? 1 : limits.Aggregate<long>((a, b) => a * b);

                        //This chunck of variables are used to prevent repeated calculations of offsets
                        long dimIndex0 = 0 + limits.LongLength;
                        long dimIndex1 = 1 + limits.LongLength;
                        long dimIndex2 = 2 + limits.LongLength;

                        long opsOuter = @out.Shape.Dimensions[0 + limits.LongLength].Length;
                        long opsInner = @out.Shape.Dimensions[1 + limits.LongLength].Length;
                        long opsInnerInner = @out.Shape.Dimensions[2 + limits.LongLength].Length;

                        long outerStride3 = @out.Shape.Dimensions[dimIndex0].Stride;
                        long innerStride3 = @out.Shape.Dimensions[dimIndex1].Stride;
                        long innerInnerStride3 = @out.Shape.Dimensions[dimIndex2].Stride;
                        outerStride3 -= innerStride3 * @out.Shape.Dimensions[dimIndex1].Length;
                        innerStride3 -= innerInnerStride3 * @out.Shape.Dimensions[dimIndex2].Length;

                        for (long outer = 0; outer < totalOps; outer++)
                        {
                            //Get the array offset for the first element in the outer dimension
                            long ix3 = @out.Shape[counters];

                            for (long i = 0; i < opsOuter; i++)
                            {
                                for (long j = 0; j < opsInner; j++)
                                {
                                    for (long k = 0; k < opsInnerInner; k++)
                                    {
                                        d2[ix3] = (System.Int64)(Math.Log10(scalar));
                                        ix3 += innerInnerStride3;
                                    }

                                    ix3 += innerStride3;
                                }

                                ix3 += outerStride3;
                            }

                            if (counters.LongLength > 0)
                            {
                                //Basically a ripple carry adder
                                long p = counters.LongLength - 1;
                                while (++counters[p] == limits[p] && p > 0)
                                {
                                    counters[p] = 0;
                                    p--;
                                }
                            }
                        }
                    }
                }
            }
        }
        /// <summary>
        /// Unsafe implementation of applying a unary operation
        /// </summary>
        /// <typeparam name="C">The type of operation to perform</typeparam>
        /// <param name="op">The operation instance</param>
        /// <param name="in1">The input argument</param>
        /// <param name="out">The output target</param>
        internal static void UFunc_Op_Inner_Unary_Flush_UInt64_TypedImpl<C>(NumCIL.UInt64.Log10 op, NdArray<System.UInt64> in1, NdArray<System.UInt64> @out)
            where C : IUnaryOp<System.UInt64>
        {
            unsafe
            {
                using (var f1 = new Pinner(in1.DataAccessor))
                using (var f2 = new Pinner(@out.DataAccessor))
                {
                    var d1 = (System.UInt64*)f1.ptr;
                    var d2 = (System.UInt64*)f2.ptr;

                    if (@out.Shape.Dimensions.Length == 1)
                    {
                        long totalOps = @out.Shape.Dimensions[0].Length;

                        long ix1 = in1.Shape.Offset;
                        long ix2 = @out.Shape.Offset;

                        long stride1 = in1.Shape.Dimensions[0].Stride;
                        long stride2 = @out.Shape.Dimensions[0].Stride;


                        if (stride1 == stride2 && ix1 == ix2)
                        {
                            //Best case, all are equal, just keep a single counter
                            for (long i = 0; i < totalOps; i++)
                            {
                                d2[ix1] = (System.UInt64)(Math.Log10(d1[ix1]));
                                ix1 += stride1;
                            }
                        }
                        else
                        {
                            for (long i = 0; i < totalOps; i++)
                            {
                                d2[ix2] = (System.UInt64)(Math.Log10(d1[ix1]));
                                ix1 += stride1;
                                ix2 += stride2;
                            }
                        }
                    }
                    else if (@out.Shape.Dimensions.Length == 2)
                    {
                        long opsOuter = @out.Shape.Dimensions[0].Length;
                        long opsInner = @out.Shape.Dimensions[1].Length;

                        long ix1 = in1.Shape.Offset;
                        long ix2 = @out.Shape.Offset;

                        long outerStride1 = in1.Shape.Dimensions[0].Stride;
                        long outerStride2 = @out.Shape.Dimensions[0].Stride;

                        long innerStride1 = in1.Shape.Dimensions[1].Stride;
                        long innerStride2 = @out.Shape.Dimensions[1].Stride;

                        outerStride1 -= innerStride1 * in1.Shape.Dimensions[1].Length;
                        outerStride2 -= innerStride2 * @out.Shape.Dimensions[1].Length;

                        for (long i = 0; i < opsOuter; i++)
                        {
                            for (long j = 0; j < opsInner; j++)
                            {
                                d2[ix2] = (System.UInt64)(Math.Log10(d1[ix1]));
                                ix1 += innerStride1;
                                ix2 += innerStride2;
                            }

                            ix1 += outerStride1;
                            ix2 += outerStride2;
                        }
                    }
                    else
                    {
                        long n = in1.Shape.Dimensions.LongLength - 3;
                        long[] limits = in1.Shape.Dimensions.Where(x => n-- > 0).Select(x => x.Length).ToArray();
                        long[] counters = new long[limits.LongLength];

                        long totalOps = limits.LongLength == 0 ? 1 : limits.Aggregate<long>((a, b) => a * b);

                        //This chunck of variables are used to prevent repeated calculations of offsets
                        long dimIndex0 = 0 + limits.LongLength;
                        long dimIndex1 = 1 + limits.LongLength;
                        long dimIndex2 = 2 + limits.LongLength;

                        long opsOuter = @out.Shape.Dimensions[0 + limits.LongLength].Length;
                        long opsInner = @out.Shape.Dimensions[1 + limits.LongLength].Length;
                        long opsInnerInner = @out.Shape.Dimensions[2 + limits.LongLength].Length;

                        long outerStride1 = in1.Shape.Dimensions[dimIndex0].Stride;
                        long outerStride3 = @out.Shape.Dimensions[dimIndex0].Stride;

                        long innerStride1 = in1.Shape.Dimensions[dimIndex1].Stride;
                        long innerStride3 = @out.Shape.Dimensions[dimIndex1].Stride;

                        long innerInnerStride1 = in1.Shape.Dimensions[dimIndex2].Stride;
                        long innerInnerStride3 = @out.Shape.Dimensions[dimIndex2].Stride;

                        outerStride1 -= innerStride1 * in1.Shape.Dimensions[dimIndex1].Length;
                        outerStride3 -= innerStride3 * @out.Shape.Dimensions[dimIndex1].Length;

                        innerStride1 -= innerInnerStride1 * in1.Shape.Dimensions[dimIndex2].Length;
                        innerStride3 -= innerInnerStride3 * @out.Shape.Dimensions[dimIndex2].Length;

                        for (long outer = 0; outer < totalOps; outer++)
                        {
                            //Get the array offset for the first element in the outer dimension
                            long ix1 = in1.Shape[counters];
                            long ix3 = @out.Shape[counters];


                            for (long i = 0; i < opsOuter; i++)
                            {
                                for (long j = 0; j < opsInner; j++)
                                {
                                    for (long k = 0; k < opsInnerInner; k++)
                                    {
                                        d2[ix3] = (System.UInt64)(Math.Log10(d1[ix1]));
                                        ix1 += innerInnerStride1;
                                        ix3 += innerInnerStride3;
                                    }

                                    ix1 += innerStride1;
                                    ix3 += innerStride3;
                                }

                                ix1 += outerStride1;
                                ix3 += outerStride3;
                            }

                            if (counters.LongLength > 0)
                            {
                                //Basically a ripple carry adder
                                long p = counters.LongLength - 1;
                                while (++counters[p] == limits[p] && p > 0)
                                {
                                    counters[p] = 0;
                                    p--;
                                }
                            }
                        }
                    }
                }
            }
        }

        /// <summary>
        /// Unsafe implementation of applying a unary operation
        /// </summary>
        /// <typeparam name="C">The type of operation to perform</typeparam>
        /// <param name="op">The operation instance</param>
        /// <param name="scalar">The input scalar argument</param>
        /// <param name="out">The output target</param>
        internal static void UFunc_Op_Inner_Unary_Scalar_Flush_UInt64_TypedImpl<C>(NumCIL.UInt64.Log10 op, System.UInt64 scalar, NdArray<System.UInt64> @out)
            where C : IUnaryOp<System.UInt64>
        {
            unsafe
            {
                using (var f2 = new Pinner(@out.DataAccessor))
                {
                    var d2 = (System.UInt64*)f2.ptr;

                    if (@out.Shape.Dimensions.Length == 1)
                    {
                        long totalOps = @out.Shape.Dimensions[0].Length;
                        long ix2 = @out.Shape.Offset;
                        long stride2 = @out.Shape.Dimensions[0].Stride;

                        for (long i = 0; i < totalOps; i++)
                        {
                            d2[ix2] = (System.UInt64)(Math.Log10(scalar));
                            ix2 += stride2;
                        }
                    }
                    else if (@out.Shape.Dimensions.Length == 2)
                    {
                        long opsOuter = @out.Shape.Dimensions[0].Length;
                        long opsInner = @out.Shape.Dimensions[1].Length;

                        long ix2 = @out.Shape.Offset;
                        long outerStride2 = @out.Shape.Dimensions[0].Stride;
                        long innerStride2 = @out.Shape.Dimensions[1].Stride;
                        outerStride2 -= innerStride2 * @out.Shape.Dimensions[1].Length;

                        for (long i = 0; i < opsOuter; i++)
                        {
                            for (long j = 0; j < opsInner; j++)
                            {
                                d2[ix2] = (System.UInt64)(Math.Log10(scalar));
                                ix2 += innerStride2;
                            }

                            ix2 += outerStride2;
                        }
                    }
                    else
                    {
                        long n = @out.Shape.Dimensions.LongLength - 3;
                        long[] limits = @out.Shape.Dimensions.Where(x => n-- > 0).Select(x => x.Length).ToArray();
                        long[] counters = new long[limits.LongLength];

                        long totalOps = limits.LongLength == 0 ? 1 : limits.Aggregate<long>((a, b) => a * b);

                        //This chunck of variables are used to prevent repeated calculations of offsets
                        long dimIndex0 = 0 + limits.LongLength;
                        long dimIndex1 = 1 + limits.LongLength;
                        long dimIndex2 = 2 + limits.LongLength;

                        long opsOuter = @out.Shape.Dimensions[0 + limits.LongLength].Length;
                        long opsInner = @out.Shape.Dimensions[1 + limits.LongLength].Length;
                        long opsInnerInner = @out.Shape.Dimensions[2 + limits.LongLength].Length;

                        long outerStride3 = @out.Shape.Dimensions[dimIndex0].Stride;
                        long innerStride3 = @out.Shape.Dimensions[dimIndex1].Stride;
                        long innerInnerStride3 = @out.Shape.Dimensions[dimIndex2].Stride;
                        outerStride3 -= innerStride3 * @out.Shape.Dimensions[dimIndex1].Length;
                        innerStride3 -= innerInnerStride3 * @out.Shape.Dimensions[dimIndex2].Length;

                        for (long outer = 0; outer < totalOps; outer++)
                        {
                            //Get the array offset for the first element in the outer dimension
                            long ix3 = @out.Shape[counters];

                            for (long i = 0; i < opsOuter; i++)
                            {
                                for (long j = 0; j < opsInner; j++)
                                {
                                    for (long k = 0; k < opsInnerInner; k++)
                                    {
                                        d2[ix3] = (System.UInt64)(Math.Log10(scalar));
                                        ix3 += innerInnerStride3;
                                    }

                                    ix3 += innerStride3;
                                }

                                ix3 += outerStride3;
                            }

                            if (counters.LongLength > 0)
                            {
                                //Basically a ripple carry adder
                                long p = counters.LongLength - 1;
                                while (++counters[p] == limits[p] && p > 0)
                                {
                                    counters[p] = 0;
                                    p--;
                                }
                            }
                        }
                    }
                }
            }
        }
        /// <summary>
        /// Unsafe implementation of applying a unary operation
        /// </summary>
        /// <typeparam name="C">The type of operation to perform</typeparam>
        /// <param name="op">The operation instance</param>
        /// <param name="in1">The input argument</param>
        /// <param name="out">The output target</param>
        internal static void UFunc_Op_Inner_Unary_Flush_Single_TypedImpl<C>(NumCIL.Float.Log10 op, NdArray<System.Single> in1, NdArray<System.Single> @out)
            where C : IUnaryOp<System.Single>
        {
            unsafe
            {
                using (var f1 = new Pinner(in1.DataAccessor))
                using (var f2 = new Pinner(@out.DataAccessor))
                {
                    var d1 = (System.Single*)f1.ptr;
                    var d2 = (System.Single*)f2.ptr;

                    if (@out.Shape.Dimensions.Length == 1)
                    {
                        long totalOps = @out.Shape.Dimensions[0].Length;

                        long ix1 = in1.Shape.Offset;
                        long ix2 = @out.Shape.Offset;

                        long stride1 = in1.Shape.Dimensions[0].Stride;
                        long stride2 = @out.Shape.Dimensions[0].Stride;


                        if (stride1 == stride2 && ix1 == ix2)
                        {
                            //Best case, all are equal, just keep a single counter
                            for (long i = 0; i < totalOps; i++)
                            {
                                d2[ix1] = (System.Single)(Math.Log10(d1[ix1]));
                                ix1 += stride1;
                            }
                        }
                        else
                        {
                            for (long i = 0; i < totalOps; i++)
                            {
                                d2[ix2] = (System.Single)(Math.Log10(d1[ix1]));
                                ix1 += stride1;
                                ix2 += stride2;
                            }
                        }
                    }
                    else if (@out.Shape.Dimensions.Length == 2)
                    {
                        long opsOuter = @out.Shape.Dimensions[0].Length;
                        long opsInner = @out.Shape.Dimensions[1].Length;

                        long ix1 = in1.Shape.Offset;
                        long ix2 = @out.Shape.Offset;

                        long outerStride1 = in1.Shape.Dimensions[0].Stride;
                        long outerStride2 = @out.Shape.Dimensions[0].Stride;

                        long innerStride1 = in1.Shape.Dimensions[1].Stride;
                        long innerStride2 = @out.Shape.Dimensions[1].Stride;

                        outerStride1 -= innerStride1 * in1.Shape.Dimensions[1].Length;
                        outerStride2 -= innerStride2 * @out.Shape.Dimensions[1].Length;

                        for (long i = 0; i < opsOuter; i++)
                        {
                            for (long j = 0; j < opsInner; j++)
                            {
                                d2[ix2] = (System.Single)(Math.Log10(d1[ix1]));
                                ix1 += innerStride1;
                                ix2 += innerStride2;
                            }

                            ix1 += outerStride1;
                            ix2 += outerStride2;
                        }
                    }
                    else
                    {
                        long n = in1.Shape.Dimensions.LongLength - 3;
                        long[] limits = in1.Shape.Dimensions.Where(x => n-- > 0).Select(x => x.Length).ToArray();
                        long[] counters = new long[limits.LongLength];

                        long totalOps = limits.LongLength == 0 ? 1 : limits.Aggregate<long>((a, b) => a * b);

                        //This chunck of variables are used to prevent repeated calculations of offsets
                        long dimIndex0 = 0 + limits.LongLength;
                        long dimIndex1 = 1 + limits.LongLength;
                        long dimIndex2 = 2 + limits.LongLength;

                        long opsOuter = @out.Shape.Dimensions[0 + limits.LongLength].Length;
                        long opsInner = @out.Shape.Dimensions[1 + limits.LongLength].Length;
                        long opsInnerInner = @out.Shape.Dimensions[2 + limits.LongLength].Length;

                        long outerStride1 = in1.Shape.Dimensions[dimIndex0].Stride;
                        long outerStride3 = @out.Shape.Dimensions[dimIndex0].Stride;

                        long innerStride1 = in1.Shape.Dimensions[dimIndex1].Stride;
                        long innerStride3 = @out.Shape.Dimensions[dimIndex1].Stride;

                        long innerInnerStride1 = in1.Shape.Dimensions[dimIndex2].Stride;
                        long innerInnerStride3 = @out.Shape.Dimensions[dimIndex2].Stride;

                        outerStride1 -= innerStride1 * in1.Shape.Dimensions[dimIndex1].Length;
                        outerStride3 -= innerStride3 * @out.Shape.Dimensions[dimIndex1].Length;

                        innerStride1 -= innerInnerStride1 * in1.Shape.Dimensions[dimIndex2].Length;
                        innerStride3 -= innerInnerStride3 * @out.Shape.Dimensions[dimIndex2].Length;

                        for (long outer = 0; outer < totalOps; outer++)
                        {
                            //Get the array offset for the first element in the outer dimension
                            long ix1 = in1.Shape[counters];
                            long ix3 = @out.Shape[counters];


                            for (long i = 0; i < opsOuter; i++)
                            {
                                for (long j = 0; j < opsInner; j++)
                                {
                                    for (long k = 0; k < opsInnerInner; k++)
                                    {
                                        d2[ix3] = (System.Single)(Math.Log10(d1[ix1]));
                                        ix1 += innerInnerStride1;
                                        ix3 += innerInnerStride3;
                                    }

                                    ix1 += innerStride1;
                                    ix3 += innerStride3;
                                }

                                ix1 += outerStride1;
                                ix3 += outerStride3;
                            }

                            if (counters.LongLength > 0)
                            {
                                //Basically a ripple carry adder
                                long p = counters.LongLength - 1;
                                while (++counters[p] == limits[p] && p > 0)
                                {
                                    counters[p] = 0;
                                    p--;
                                }
                            }
                        }
                    }
                }
            }
        }

        /// <summary>
        /// Unsafe implementation of applying a unary operation
        /// </summary>
        /// <typeparam name="C">The type of operation to perform</typeparam>
        /// <param name="op">The operation instance</param>
        /// <param name="scalar">The input scalar argument</param>
        /// <param name="out">The output target</param>
        internal static void UFunc_Op_Inner_Unary_Scalar_Flush_Single_TypedImpl<C>(NumCIL.Float.Log10 op, System.Single scalar, NdArray<System.Single> @out)
            where C : IUnaryOp<System.Single>
        {
            unsafe
            {
                using (var f2 = new Pinner(@out.DataAccessor))
                {
                    var d2 = (System.Single*)f2.ptr;

                    if (@out.Shape.Dimensions.Length == 1)
                    {
                        long totalOps = @out.Shape.Dimensions[0].Length;
                        long ix2 = @out.Shape.Offset;
                        long stride2 = @out.Shape.Dimensions[0].Stride;

                        for (long i = 0; i < totalOps; i++)
                        {
                            d2[ix2] = (System.Single)(Math.Log10(scalar));
                            ix2 += stride2;
                        }
                    }
                    else if (@out.Shape.Dimensions.Length == 2)
                    {
                        long opsOuter = @out.Shape.Dimensions[0].Length;
                        long opsInner = @out.Shape.Dimensions[1].Length;

                        long ix2 = @out.Shape.Offset;
                        long outerStride2 = @out.Shape.Dimensions[0].Stride;
                        long innerStride2 = @out.Shape.Dimensions[1].Stride;
                        outerStride2 -= innerStride2 * @out.Shape.Dimensions[1].Length;

                        for (long i = 0; i < opsOuter; i++)
                        {
                            for (long j = 0; j < opsInner; j++)
                            {
                                d2[ix2] = (System.Single)(Math.Log10(scalar));
                                ix2 += innerStride2;
                            }

                            ix2 += outerStride2;
                        }
                    }
                    else
                    {
                        long n = @out.Shape.Dimensions.LongLength - 3;
                        long[] limits = @out.Shape.Dimensions.Where(x => n-- > 0).Select(x => x.Length).ToArray();
                        long[] counters = new long[limits.LongLength];

                        long totalOps = limits.LongLength == 0 ? 1 : limits.Aggregate<long>((a, b) => a * b);

                        //This chunck of variables are used to prevent repeated calculations of offsets
                        long dimIndex0 = 0 + limits.LongLength;
                        long dimIndex1 = 1 + limits.LongLength;
                        long dimIndex2 = 2 + limits.LongLength;

                        long opsOuter = @out.Shape.Dimensions[0 + limits.LongLength].Length;
                        long opsInner = @out.Shape.Dimensions[1 + limits.LongLength].Length;
                        long opsInnerInner = @out.Shape.Dimensions[2 + limits.LongLength].Length;

                        long outerStride3 = @out.Shape.Dimensions[dimIndex0].Stride;
                        long innerStride3 = @out.Shape.Dimensions[dimIndex1].Stride;
                        long innerInnerStride3 = @out.Shape.Dimensions[dimIndex2].Stride;
                        outerStride3 -= innerStride3 * @out.Shape.Dimensions[dimIndex1].Length;
                        innerStride3 -= innerInnerStride3 * @out.Shape.Dimensions[dimIndex2].Length;

                        for (long outer = 0; outer < totalOps; outer++)
                        {
                            //Get the array offset for the first element in the outer dimension
                            long ix3 = @out.Shape[counters];

                            for (long i = 0; i < opsOuter; i++)
                            {
                                for (long j = 0; j < opsInner; j++)
                                {
                                    for (long k = 0; k < opsInnerInner; k++)
                                    {
                                        d2[ix3] = (System.Single)(Math.Log10(scalar));
                                        ix3 += innerInnerStride3;
                                    }

                                    ix3 += innerStride3;
                                }

                                ix3 += outerStride3;
                            }

                            if (counters.LongLength > 0)
                            {
                                //Basically a ripple carry adder
                                long p = counters.LongLength - 1;
                                while (++counters[p] == limits[p] && p > 0)
                                {
                                    counters[p] = 0;
                                    p--;
                                }
                            }
                        }
                    }
                }
            }
        }
        /// <summary>
        /// Unsafe implementation of applying a unary operation
        /// </summary>
        /// <typeparam name="C">The type of operation to perform</typeparam>
        /// <param name="op">The operation instance</param>
        /// <param name="in1">The input argument</param>
        /// <param name="out">The output target</param>
        internal static void UFunc_Op_Inner_Unary_Flush_Double_TypedImpl<C>(NumCIL.Double.Log10 op, NdArray<System.Double> in1, NdArray<System.Double> @out)
            where C : IUnaryOp<System.Double>
        {
            unsafe
            {
                using (var f1 = new Pinner(in1.DataAccessor))
                using (var f2 = new Pinner(@out.DataAccessor))
                {
                    var d1 = (System.Double*)f1.ptr;
                    var d2 = (System.Double*)f2.ptr;

                    if (@out.Shape.Dimensions.Length == 1)
                    {
                        long totalOps = @out.Shape.Dimensions[0].Length;

                        long ix1 = in1.Shape.Offset;
                        long ix2 = @out.Shape.Offset;

                        long stride1 = in1.Shape.Dimensions[0].Stride;
                        long stride2 = @out.Shape.Dimensions[0].Stride;


                        if (stride1 == stride2 && ix1 == ix2)
                        {
                            //Best case, all are equal, just keep a single counter
                            for (long i = 0; i < totalOps; i++)
                            {
                                d2[ix1] = (System.Double)(Math.Log10(d1[ix1]));
                                ix1 += stride1;
                            }
                        }
                        else
                        {
                            for (long i = 0; i < totalOps; i++)
                            {
                                d2[ix2] = (System.Double)(Math.Log10(d1[ix1]));
                                ix1 += stride1;
                                ix2 += stride2;
                            }
                        }
                    }
                    else if (@out.Shape.Dimensions.Length == 2)
                    {
                        long opsOuter = @out.Shape.Dimensions[0].Length;
                        long opsInner = @out.Shape.Dimensions[1].Length;

                        long ix1 = in1.Shape.Offset;
                        long ix2 = @out.Shape.Offset;

                        long outerStride1 = in1.Shape.Dimensions[0].Stride;
                        long outerStride2 = @out.Shape.Dimensions[0].Stride;

                        long innerStride1 = in1.Shape.Dimensions[1].Stride;
                        long innerStride2 = @out.Shape.Dimensions[1].Stride;

                        outerStride1 -= innerStride1 * in1.Shape.Dimensions[1].Length;
                        outerStride2 -= innerStride2 * @out.Shape.Dimensions[1].Length;

                        for (long i = 0; i < opsOuter; i++)
                        {
                            for (long j = 0; j < opsInner; j++)
                            {
                                d2[ix2] = (System.Double)(Math.Log10(d1[ix1]));
                                ix1 += innerStride1;
                                ix2 += innerStride2;
                            }

                            ix1 += outerStride1;
                            ix2 += outerStride2;
                        }
                    }
                    else
                    {
                        long n = in1.Shape.Dimensions.LongLength - 3;
                        long[] limits = in1.Shape.Dimensions.Where(x => n-- > 0).Select(x => x.Length).ToArray();
                        long[] counters = new long[limits.LongLength];

                        long totalOps = limits.LongLength == 0 ? 1 : limits.Aggregate<long>((a, b) => a * b);

                        //This chunck of variables are used to prevent repeated calculations of offsets
                        long dimIndex0 = 0 + limits.LongLength;
                        long dimIndex1 = 1 + limits.LongLength;
                        long dimIndex2 = 2 + limits.LongLength;

                        long opsOuter = @out.Shape.Dimensions[0 + limits.LongLength].Length;
                        long opsInner = @out.Shape.Dimensions[1 + limits.LongLength].Length;
                        long opsInnerInner = @out.Shape.Dimensions[2 + limits.LongLength].Length;

                        long outerStride1 = in1.Shape.Dimensions[dimIndex0].Stride;
                        long outerStride3 = @out.Shape.Dimensions[dimIndex0].Stride;

                        long innerStride1 = in1.Shape.Dimensions[dimIndex1].Stride;
                        long innerStride3 = @out.Shape.Dimensions[dimIndex1].Stride;

                        long innerInnerStride1 = in1.Shape.Dimensions[dimIndex2].Stride;
                        long innerInnerStride3 = @out.Shape.Dimensions[dimIndex2].Stride;

                        outerStride1 -= innerStride1 * in1.Shape.Dimensions[dimIndex1].Length;
                        outerStride3 -= innerStride3 * @out.Shape.Dimensions[dimIndex1].Length;

                        innerStride1 -= innerInnerStride1 * in1.Shape.Dimensions[dimIndex2].Length;
                        innerStride3 -= innerInnerStride3 * @out.Shape.Dimensions[dimIndex2].Length;

                        for (long outer = 0; outer < totalOps; outer++)
                        {
                            //Get the array offset for the first element in the outer dimension
                            long ix1 = in1.Shape[counters];
                            long ix3 = @out.Shape[counters];


                            for (long i = 0; i < opsOuter; i++)
                            {
                                for (long j = 0; j < opsInner; j++)
                                {
                                    for (long k = 0; k < opsInnerInner; k++)
                                    {
                                        d2[ix3] = (System.Double)(Math.Log10(d1[ix1]));
                                        ix1 += innerInnerStride1;
                                        ix3 += innerInnerStride3;
                                    }

                                    ix1 += innerStride1;
                                    ix3 += innerStride3;
                                }

                                ix1 += outerStride1;
                                ix3 += outerStride3;
                            }

                            if (counters.LongLength > 0)
                            {
                                //Basically a ripple carry adder
                                long p = counters.LongLength - 1;
                                while (++counters[p] == limits[p] && p > 0)
                                {
                                    counters[p] = 0;
                                    p--;
                                }
                            }
                        }
                    }
                }
            }
        }

        /// <summary>
        /// Unsafe implementation of applying a unary operation
        /// </summary>
        /// <typeparam name="C">The type of operation to perform</typeparam>
        /// <param name="op">The operation instance</param>
        /// <param name="scalar">The input scalar argument</param>
        /// <param name="out">The output target</param>
        internal static void UFunc_Op_Inner_Unary_Scalar_Flush_Double_TypedImpl<C>(NumCIL.Double.Log10 op, System.Double scalar, NdArray<System.Double> @out)
            where C : IUnaryOp<System.Double>
        {
            unsafe
            {
                using (var f2 = new Pinner(@out.DataAccessor))
                {
                    var d2 = (System.Double*)f2.ptr;

                    if (@out.Shape.Dimensions.Length == 1)
                    {
                        long totalOps = @out.Shape.Dimensions[0].Length;
                        long ix2 = @out.Shape.Offset;
                        long stride2 = @out.Shape.Dimensions[0].Stride;

                        for (long i = 0; i < totalOps; i++)
                        {
                            d2[ix2] = (System.Double)(Math.Log10(scalar));
                            ix2 += stride2;
                        }
                    }
                    else if (@out.Shape.Dimensions.Length == 2)
                    {
                        long opsOuter = @out.Shape.Dimensions[0].Length;
                        long opsInner = @out.Shape.Dimensions[1].Length;

                        long ix2 = @out.Shape.Offset;
                        long outerStride2 = @out.Shape.Dimensions[0].Stride;
                        long innerStride2 = @out.Shape.Dimensions[1].Stride;
                        outerStride2 -= innerStride2 * @out.Shape.Dimensions[1].Length;

                        for (long i = 0; i < opsOuter; i++)
                        {
                            for (long j = 0; j < opsInner; j++)
                            {
                                d2[ix2] = (System.Double)(Math.Log10(scalar));
                                ix2 += innerStride2;
                            }

                            ix2 += outerStride2;
                        }
                    }
                    else
                    {
                        long n = @out.Shape.Dimensions.LongLength - 3;
                        long[] limits = @out.Shape.Dimensions.Where(x => n-- > 0).Select(x => x.Length).ToArray();
                        long[] counters = new long[limits.LongLength];

                        long totalOps = limits.LongLength == 0 ? 1 : limits.Aggregate<long>((a, b) => a * b);

                        //This chunck of variables are used to prevent repeated calculations of offsets
                        long dimIndex0 = 0 + limits.LongLength;
                        long dimIndex1 = 1 + limits.LongLength;
                        long dimIndex2 = 2 + limits.LongLength;

                        long opsOuter = @out.Shape.Dimensions[0 + limits.LongLength].Length;
                        long opsInner = @out.Shape.Dimensions[1 + limits.LongLength].Length;
                        long opsInnerInner = @out.Shape.Dimensions[2 + limits.LongLength].Length;

                        long outerStride3 = @out.Shape.Dimensions[dimIndex0].Stride;
                        long innerStride3 = @out.Shape.Dimensions[dimIndex1].Stride;
                        long innerInnerStride3 = @out.Shape.Dimensions[dimIndex2].Stride;
                        outerStride3 -= innerStride3 * @out.Shape.Dimensions[dimIndex1].Length;
                        innerStride3 -= innerInnerStride3 * @out.Shape.Dimensions[dimIndex2].Length;

                        for (long outer = 0; outer < totalOps; outer++)
                        {
                            //Get the array offset for the first element in the outer dimension
                            long ix3 = @out.Shape[counters];

                            for (long i = 0; i < opsOuter; i++)
                            {
                                for (long j = 0; j < opsInner; j++)
                                {
                                    for (long k = 0; k < opsInnerInner; k++)
                                    {
                                        d2[ix3] = (System.Double)(Math.Log10(scalar));
                                        ix3 += innerInnerStride3;
                                    }

                                    ix3 += innerStride3;
                                }

                                ix3 += outerStride3;
                            }

                            if (counters.LongLength > 0)
                            {
                                //Basically a ripple carry adder
                                long p = counters.LongLength - 1;
                                while (++counters[p] == limits[p] && p > 0)
                                {
                                    counters[p] = 0;
                                    p--;
                                }
                            }
                        }
                    }
                }
            }
        }
        /// <summary>
        /// Unsafe implementation of applying a unary operation
        /// </summary>
        /// <typeparam name="C">The type of operation to perform</typeparam>
        /// <param name="op">The operation instance</param>
        /// <param name="in1">The input argument</param>
        /// <param name="out">The output target</param>
        internal static void UFunc_Op_Inner_Unary_Flush_SByte_TypedImpl<C>(NumCIL.Int8.Invert op, NdArray<System.SByte> in1, NdArray<System.SByte> @out)
            where C : IUnaryOp<System.SByte>
        {
            unsafe
            {
                using (var f1 = new Pinner(in1.DataAccessor))
                using (var f2 = new Pinner(@out.DataAccessor))
                {
                    var d1 = (System.SByte*)f1.ptr;
                    var d2 = (System.SByte*)f2.ptr;

                    if (@out.Shape.Dimensions.Length == 1)
                    {
                        long totalOps = @out.Shape.Dimensions[0].Length;

                        long ix1 = in1.Shape.Offset;
                        long ix2 = @out.Shape.Offset;

                        long stride1 = in1.Shape.Dimensions[0].Stride;
                        long stride2 = @out.Shape.Dimensions[0].Stride;


                        if (stride1 == stride2 && ix1 == ix2)
                        {
                            //Best case, all are equal, just keep a single counter
                            for (long i = 0; i < totalOps; i++)
                            {
                                d2[ix1] = (System.SByte)(~(d1[ix1]));
                                ix1 += stride1;
                            }
                        }
                        else
                        {
                            for (long i = 0; i < totalOps; i++)
                            {
                                d2[ix2] = (System.SByte)(~(d1[ix1]));
                                ix1 += stride1;
                                ix2 += stride2;
                            }
                        }
                    }
                    else if (@out.Shape.Dimensions.Length == 2)
                    {
                        long opsOuter = @out.Shape.Dimensions[0].Length;
                        long opsInner = @out.Shape.Dimensions[1].Length;

                        long ix1 = in1.Shape.Offset;
                        long ix2 = @out.Shape.Offset;

                        long outerStride1 = in1.Shape.Dimensions[0].Stride;
                        long outerStride2 = @out.Shape.Dimensions[0].Stride;

                        long innerStride1 = in1.Shape.Dimensions[1].Stride;
                        long innerStride2 = @out.Shape.Dimensions[1].Stride;

                        outerStride1 -= innerStride1 * in1.Shape.Dimensions[1].Length;
                        outerStride2 -= innerStride2 * @out.Shape.Dimensions[1].Length;

                        for (long i = 0; i < opsOuter; i++)
                        {
                            for (long j = 0; j < opsInner; j++)
                            {
                                d2[ix2] = (System.SByte)(~(d1[ix1]));
                                ix1 += innerStride1;
                                ix2 += innerStride2;
                            }

                            ix1 += outerStride1;
                            ix2 += outerStride2;
                        }
                    }
                    else
                    {
                        long n = in1.Shape.Dimensions.LongLength - 3;
                        long[] limits = in1.Shape.Dimensions.Where(x => n-- > 0).Select(x => x.Length).ToArray();
                        long[] counters = new long[limits.LongLength];

                        long totalOps = limits.LongLength == 0 ? 1 : limits.Aggregate<long>((a, b) => a * b);

                        //This chunck of variables are used to prevent repeated calculations of offsets
                        long dimIndex0 = 0 + limits.LongLength;
                        long dimIndex1 = 1 + limits.LongLength;
                        long dimIndex2 = 2 + limits.LongLength;

                        long opsOuter = @out.Shape.Dimensions[0 + limits.LongLength].Length;
                        long opsInner = @out.Shape.Dimensions[1 + limits.LongLength].Length;
                        long opsInnerInner = @out.Shape.Dimensions[2 + limits.LongLength].Length;

                        long outerStride1 = in1.Shape.Dimensions[dimIndex0].Stride;
                        long outerStride3 = @out.Shape.Dimensions[dimIndex0].Stride;

                        long innerStride1 = in1.Shape.Dimensions[dimIndex1].Stride;
                        long innerStride3 = @out.Shape.Dimensions[dimIndex1].Stride;

                        long innerInnerStride1 = in1.Shape.Dimensions[dimIndex2].Stride;
                        long innerInnerStride3 = @out.Shape.Dimensions[dimIndex2].Stride;

                        outerStride1 -= innerStride1 * in1.Shape.Dimensions[dimIndex1].Length;
                        outerStride3 -= innerStride3 * @out.Shape.Dimensions[dimIndex1].Length;

                        innerStride1 -= innerInnerStride1 * in1.Shape.Dimensions[dimIndex2].Length;
                        innerStride3 -= innerInnerStride3 * @out.Shape.Dimensions[dimIndex2].Length;

                        for (long outer = 0; outer < totalOps; outer++)
                        {
                            //Get the array offset for the first element in the outer dimension
                            long ix1 = in1.Shape[counters];
                            long ix3 = @out.Shape[counters];


                            for (long i = 0; i < opsOuter; i++)
                            {
                                for (long j = 0; j < opsInner; j++)
                                {
                                    for (long k = 0; k < opsInnerInner; k++)
                                    {
                                        d2[ix3] = (System.SByte)(~(d1[ix1]));
                                        ix1 += innerInnerStride1;
                                        ix3 += innerInnerStride3;
                                    }

                                    ix1 += innerStride1;
                                    ix3 += innerStride3;
                                }

                                ix1 += outerStride1;
                                ix3 += outerStride3;
                            }

                            if (counters.LongLength > 0)
                            {
                                //Basically a ripple carry adder
                                long p = counters.LongLength - 1;
                                while (++counters[p] == limits[p] && p > 0)
                                {
                                    counters[p] = 0;
                                    p--;
                                }
                            }
                        }
                    }
                }
            }
        }

        /// <summary>
        /// Unsafe implementation of applying a unary operation
        /// </summary>
        /// <typeparam name="C">The type of operation to perform</typeparam>
        /// <param name="op">The operation instance</param>
        /// <param name="scalar">The input scalar argument</param>
        /// <param name="out">The output target</param>
        internal static void UFunc_Op_Inner_Unary_Scalar_Flush_SByte_TypedImpl<C>(NumCIL.Int8.Invert op, System.SByte scalar, NdArray<System.SByte> @out)
            where C : IUnaryOp<System.SByte>
        {
            unsafe
            {
                using (var f2 = new Pinner(@out.DataAccessor))
                {
                    var d2 = (System.SByte*)f2.ptr;

                    if (@out.Shape.Dimensions.Length == 1)
                    {
                        long totalOps = @out.Shape.Dimensions[0].Length;
                        long ix2 = @out.Shape.Offset;
                        long stride2 = @out.Shape.Dimensions[0].Stride;

                        for (long i = 0; i < totalOps; i++)
                        {
                            d2[ix2] = (System.SByte)(~(scalar));
                            ix2 += stride2;
                        }
                    }
                    else if (@out.Shape.Dimensions.Length == 2)
                    {
                        long opsOuter = @out.Shape.Dimensions[0].Length;
                        long opsInner = @out.Shape.Dimensions[1].Length;

                        long ix2 = @out.Shape.Offset;
                        long outerStride2 = @out.Shape.Dimensions[0].Stride;
                        long innerStride2 = @out.Shape.Dimensions[1].Stride;
                        outerStride2 -= innerStride2 * @out.Shape.Dimensions[1].Length;

                        for (long i = 0; i < opsOuter; i++)
                        {
                            for (long j = 0; j < opsInner; j++)
                            {
                                d2[ix2] = (System.SByte)(~(scalar));
                                ix2 += innerStride2;
                            }

                            ix2 += outerStride2;
                        }
                    }
                    else
                    {
                        long n = @out.Shape.Dimensions.LongLength - 3;
                        long[] limits = @out.Shape.Dimensions.Where(x => n-- > 0).Select(x => x.Length).ToArray();
                        long[] counters = new long[limits.LongLength];

                        long totalOps = limits.LongLength == 0 ? 1 : limits.Aggregate<long>((a, b) => a * b);

                        //This chunck of variables are used to prevent repeated calculations of offsets
                        long dimIndex0 = 0 + limits.LongLength;
                        long dimIndex1 = 1 + limits.LongLength;
                        long dimIndex2 = 2 + limits.LongLength;

                        long opsOuter = @out.Shape.Dimensions[0 + limits.LongLength].Length;
                        long opsInner = @out.Shape.Dimensions[1 + limits.LongLength].Length;
                        long opsInnerInner = @out.Shape.Dimensions[2 + limits.LongLength].Length;

                        long outerStride3 = @out.Shape.Dimensions[dimIndex0].Stride;
                        long innerStride3 = @out.Shape.Dimensions[dimIndex1].Stride;
                        long innerInnerStride3 = @out.Shape.Dimensions[dimIndex2].Stride;
                        outerStride3 -= innerStride3 * @out.Shape.Dimensions[dimIndex1].Length;
                        innerStride3 -= innerInnerStride3 * @out.Shape.Dimensions[dimIndex2].Length;

                        for (long outer = 0; outer < totalOps; outer++)
                        {
                            //Get the array offset for the first element in the outer dimension
                            long ix3 = @out.Shape[counters];

                            for (long i = 0; i < opsOuter; i++)
                            {
                                for (long j = 0; j < opsInner; j++)
                                {
                                    for (long k = 0; k < opsInnerInner; k++)
                                    {
                                        d2[ix3] = (System.SByte)(~(scalar));
                                        ix3 += innerInnerStride3;
                                    }

                                    ix3 += innerStride3;
                                }

                                ix3 += outerStride3;
                            }

                            if (counters.LongLength > 0)
                            {
                                //Basically a ripple carry adder
                                long p = counters.LongLength - 1;
                                while (++counters[p] == limits[p] && p > 0)
                                {
                                    counters[p] = 0;
                                    p--;
                                }
                            }
                        }
                    }
                }
            }
        }
        /// <summary>
        /// Unsafe implementation of applying a unary operation
        /// </summary>
        /// <typeparam name="C">The type of operation to perform</typeparam>
        /// <param name="op">The operation instance</param>
        /// <param name="in1">The input argument</param>
        /// <param name="out">The output target</param>
        internal static void UFunc_Op_Inner_Unary_Flush_Byte_TypedImpl<C>(NumCIL.UInt8.Invert op, NdArray<System.Byte> in1, NdArray<System.Byte> @out)
            where C : IUnaryOp<System.Byte>
        {
            unsafe
            {
                using (var f1 = new Pinner(in1.DataAccessor))
                using (var f2 = new Pinner(@out.DataAccessor))
                {
                    var d1 = (System.Byte*)f1.ptr;
                    var d2 = (System.Byte*)f2.ptr;

                    if (@out.Shape.Dimensions.Length == 1)
                    {
                        long totalOps = @out.Shape.Dimensions[0].Length;

                        long ix1 = in1.Shape.Offset;
                        long ix2 = @out.Shape.Offset;

                        long stride1 = in1.Shape.Dimensions[0].Stride;
                        long stride2 = @out.Shape.Dimensions[0].Stride;


                        if (stride1 == stride2 && ix1 == ix2)
                        {
                            //Best case, all are equal, just keep a single counter
                            for (long i = 0; i < totalOps; i++)
                            {
                                d2[ix1] = (System.Byte)(~(d1[ix1]));
                                ix1 += stride1;
                            }
                        }
                        else
                        {
                            for (long i = 0; i < totalOps; i++)
                            {
                                d2[ix2] = (System.Byte)(~(d1[ix1]));
                                ix1 += stride1;
                                ix2 += stride2;
                            }
                        }
                    }
                    else if (@out.Shape.Dimensions.Length == 2)
                    {
                        long opsOuter = @out.Shape.Dimensions[0].Length;
                        long opsInner = @out.Shape.Dimensions[1].Length;

                        long ix1 = in1.Shape.Offset;
                        long ix2 = @out.Shape.Offset;

                        long outerStride1 = in1.Shape.Dimensions[0].Stride;
                        long outerStride2 = @out.Shape.Dimensions[0].Stride;

                        long innerStride1 = in1.Shape.Dimensions[1].Stride;
                        long innerStride2 = @out.Shape.Dimensions[1].Stride;

                        outerStride1 -= innerStride1 * in1.Shape.Dimensions[1].Length;
                        outerStride2 -= innerStride2 * @out.Shape.Dimensions[1].Length;

                        for (long i = 0; i < opsOuter; i++)
                        {
                            for (long j = 0; j < opsInner; j++)
                            {
                                d2[ix2] = (System.Byte)(~(d1[ix1]));
                                ix1 += innerStride1;
                                ix2 += innerStride2;
                            }

                            ix1 += outerStride1;
                            ix2 += outerStride2;
                        }
                    }
                    else
                    {
                        long n = in1.Shape.Dimensions.LongLength - 3;
                        long[] limits = in1.Shape.Dimensions.Where(x => n-- > 0).Select(x => x.Length).ToArray();
                        long[] counters = new long[limits.LongLength];

                        long totalOps = limits.LongLength == 0 ? 1 : limits.Aggregate<long>((a, b) => a * b);

                        //This chunck of variables are used to prevent repeated calculations of offsets
                        long dimIndex0 = 0 + limits.LongLength;
                        long dimIndex1 = 1 + limits.LongLength;
                        long dimIndex2 = 2 + limits.LongLength;

                        long opsOuter = @out.Shape.Dimensions[0 + limits.LongLength].Length;
                        long opsInner = @out.Shape.Dimensions[1 + limits.LongLength].Length;
                        long opsInnerInner = @out.Shape.Dimensions[2 + limits.LongLength].Length;

                        long outerStride1 = in1.Shape.Dimensions[dimIndex0].Stride;
                        long outerStride3 = @out.Shape.Dimensions[dimIndex0].Stride;

                        long innerStride1 = in1.Shape.Dimensions[dimIndex1].Stride;
                        long innerStride3 = @out.Shape.Dimensions[dimIndex1].Stride;

                        long innerInnerStride1 = in1.Shape.Dimensions[dimIndex2].Stride;
                        long innerInnerStride3 = @out.Shape.Dimensions[dimIndex2].Stride;

                        outerStride1 -= innerStride1 * in1.Shape.Dimensions[dimIndex1].Length;
                        outerStride3 -= innerStride3 * @out.Shape.Dimensions[dimIndex1].Length;

                        innerStride1 -= innerInnerStride1 * in1.Shape.Dimensions[dimIndex2].Length;
                        innerStride3 -= innerInnerStride3 * @out.Shape.Dimensions[dimIndex2].Length;

                        for (long outer = 0; outer < totalOps; outer++)
                        {
                            //Get the array offset for the first element in the outer dimension
                            long ix1 = in1.Shape[counters];
                            long ix3 = @out.Shape[counters];


                            for (long i = 0; i < opsOuter; i++)
                            {
                                for (long j = 0; j < opsInner; j++)
                                {
                                    for (long k = 0; k < opsInnerInner; k++)
                                    {
                                        d2[ix3] = (System.Byte)(~(d1[ix1]));
                                        ix1 += innerInnerStride1;
                                        ix3 += innerInnerStride3;
                                    }

                                    ix1 += innerStride1;
                                    ix3 += innerStride3;
                                }

                                ix1 += outerStride1;
                                ix3 += outerStride3;
                            }

                            if (counters.LongLength > 0)
                            {
                                //Basically a ripple carry adder
                                long p = counters.LongLength - 1;
                                while (++counters[p] == limits[p] && p > 0)
                                {
                                    counters[p] = 0;
                                    p--;
                                }
                            }
                        }
                    }
                }
            }
        }

        /// <summary>
        /// Unsafe implementation of applying a unary operation
        /// </summary>
        /// <typeparam name="C">The type of operation to perform</typeparam>
        /// <param name="op">The operation instance</param>
        /// <param name="scalar">The input scalar argument</param>
        /// <param name="out">The output target</param>
        internal static void UFunc_Op_Inner_Unary_Scalar_Flush_Byte_TypedImpl<C>(NumCIL.UInt8.Invert op, System.Byte scalar, NdArray<System.Byte> @out)
            where C : IUnaryOp<System.Byte>
        {
            unsafe
            {
                using (var f2 = new Pinner(@out.DataAccessor))
                {
                    var d2 = (System.Byte*)f2.ptr;

                    if (@out.Shape.Dimensions.Length == 1)
                    {
                        long totalOps = @out.Shape.Dimensions[0].Length;
                        long ix2 = @out.Shape.Offset;
                        long stride2 = @out.Shape.Dimensions[0].Stride;

                        for (long i = 0; i < totalOps; i++)
                        {
                            d2[ix2] = (System.Byte)(~(scalar));
                            ix2 += stride2;
                        }
                    }
                    else if (@out.Shape.Dimensions.Length == 2)
                    {
                        long opsOuter = @out.Shape.Dimensions[0].Length;
                        long opsInner = @out.Shape.Dimensions[1].Length;

                        long ix2 = @out.Shape.Offset;
                        long outerStride2 = @out.Shape.Dimensions[0].Stride;
                        long innerStride2 = @out.Shape.Dimensions[1].Stride;
                        outerStride2 -= innerStride2 * @out.Shape.Dimensions[1].Length;

                        for (long i = 0; i < opsOuter; i++)
                        {
                            for (long j = 0; j < opsInner; j++)
                            {
                                d2[ix2] = (System.Byte)(~(scalar));
                                ix2 += innerStride2;
                            }

                            ix2 += outerStride2;
                        }
                    }
                    else
                    {
                        long n = @out.Shape.Dimensions.LongLength - 3;
                        long[] limits = @out.Shape.Dimensions.Where(x => n-- > 0).Select(x => x.Length).ToArray();
                        long[] counters = new long[limits.LongLength];

                        long totalOps = limits.LongLength == 0 ? 1 : limits.Aggregate<long>((a, b) => a * b);

                        //This chunck of variables are used to prevent repeated calculations of offsets
                        long dimIndex0 = 0 + limits.LongLength;
                        long dimIndex1 = 1 + limits.LongLength;
                        long dimIndex2 = 2 + limits.LongLength;

                        long opsOuter = @out.Shape.Dimensions[0 + limits.LongLength].Length;
                        long opsInner = @out.Shape.Dimensions[1 + limits.LongLength].Length;
                        long opsInnerInner = @out.Shape.Dimensions[2 + limits.LongLength].Length;

                        long outerStride3 = @out.Shape.Dimensions[dimIndex0].Stride;
                        long innerStride3 = @out.Shape.Dimensions[dimIndex1].Stride;
                        long innerInnerStride3 = @out.Shape.Dimensions[dimIndex2].Stride;
                        outerStride3 -= innerStride3 * @out.Shape.Dimensions[dimIndex1].Length;
                        innerStride3 -= innerInnerStride3 * @out.Shape.Dimensions[dimIndex2].Length;

                        for (long outer = 0; outer < totalOps; outer++)
                        {
                            //Get the array offset for the first element in the outer dimension
                            long ix3 = @out.Shape[counters];

                            for (long i = 0; i < opsOuter; i++)
                            {
                                for (long j = 0; j < opsInner; j++)
                                {
                                    for (long k = 0; k < opsInnerInner; k++)
                                    {
                                        d2[ix3] = (System.Byte)(~(scalar));
                                        ix3 += innerInnerStride3;
                                    }

                                    ix3 += innerStride3;
                                }

                                ix3 += outerStride3;
                            }

                            if (counters.LongLength > 0)
                            {
                                //Basically a ripple carry adder
                                long p = counters.LongLength - 1;
                                while (++counters[p] == limits[p] && p > 0)
                                {
                                    counters[p] = 0;
                                    p--;
                                }
                            }
                        }
                    }
                }
            }
        }
        /// <summary>
        /// Unsafe implementation of applying a unary operation
        /// </summary>
        /// <typeparam name="C">The type of operation to perform</typeparam>
        /// <param name="op">The operation instance</param>
        /// <param name="in1">The input argument</param>
        /// <param name="out">The output target</param>
        internal static void UFunc_Op_Inner_Unary_Flush_Int16_TypedImpl<C>(NumCIL.Int16.Invert op, NdArray<System.Int16> in1, NdArray<System.Int16> @out)
            where C : IUnaryOp<System.Int16>
        {
            unsafe
            {
                using (var f1 = new Pinner(in1.DataAccessor))
                using (var f2 = new Pinner(@out.DataAccessor))
                {
                    var d1 = (System.Int16*)f1.ptr;
                    var d2 = (System.Int16*)f2.ptr;

                    if (@out.Shape.Dimensions.Length == 1)
                    {
                        long totalOps = @out.Shape.Dimensions[0].Length;

                        long ix1 = in1.Shape.Offset;
                        long ix2 = @out.Shape.Offset;

                        long stride1 = in1.Shape.Dimensions[0].Stride;
                        long stride2 = @out.Shape.Dimensions[0].Stride;


                        if (stride1 == stride2 && ix1 == ix2)
                        {
                            //Best case, all are equal, just keep a single counter
                            for (long i = 0; i < totalOps; i++)
                            {
                                d2[ix1] = (System.Int16)(~(d1[ix1]));
                                ix1 += stride1;
                            }
                        }
                        else
                        {
                            for (long i = 0; i < totalOps; i++)
                            {
                                d2[ix2] = (System.Int16)(~(d1[ix1]));
                                ix1 += stride1;
                                ix2 += stride2;
                            }
                        }
                    }
                    else if (@out.Shape.Dimensions.Length == 2)
                    {
                        long opsOuter = @out.Shape.Dimensions[0].Length;
                        long opsInner = @out.Shape.Dimensions[1].Length;

                        long ix1 = in1.Shape.Offset;
                        long ix2 = @out.Shape.Offset;

                        long outerStride1 = in1.Shape.Dimensions[0].Stride;
                        long outerStride2 = @out.Shape.Dimensions[0].Stride;

                        long innerStride1 = in1.Shape.Dimensions[1].Stride;
                        long innerStride2 = @out.Shape.Dimensions[1].Stride;

                        outerStride1 -= innerStride1 * in1.Shape.Dimensions[1].Length;
                        outerStride2 -= innerStride2 * @out.Shape.Dimensions[1].Length;

                        for (long i = 0; i < opsOuter; i++)
                        {
                            for (long j = 0; j < opsInner; j++)
                            {
                                d2[ix2] = (System.Int16)(~(d1[ix1]));
                                ix1 += innerStride1;
                                ix2 += innerStride2;
                            }

                            ix1 += outerStride1;
                            ix2 += outerStride2;
                        }
                    }
                    else
                    {
                        long n = in1.Shape.Dimensions.LongLength - 3;
                        long[] limits = in1.Shape.Dimensions.Where(x => n-- > 0).Select(x => x.Length).ToArray();
                        long[] counters = new long[limits.LongLength];

                        long totalOps = limits.LongLength == 0 ? 1 : limits.Aggregate<long>((a, b) => a * b);

                        //This chunck of variables are used to prevent repeated calculations of offsets
                        long dimIndex0 = 0 + limits.LongLength;
                        long dimIndex1 = 1 + limits.LongLength;
                        long dimIndex2 = 2 + limits.LongLength;

                        long opsOuter = @out.Shape.Dimensions[0 + limits.LongLength].Length;
                        long opsInner = @out.Shape.Dimensions[1 + limits.LongLength].Length;
                        long opsInnerInner = @out.Shape.Dimensions[2 + limits.LongLength].Length;

                        long outerStride1 = in1.Shape.Dimensions[dimIndex0].Stride;
                        long outerStride3 = @out.Shape.Dimensions[dimIndex0].Stride;

                        long innerStride1 = in1.Shape.Dimensions[dimIndex1].Stride;
                        long innerStride3 = @out.Shape.Dimensions[dimIndex1].Stride;

                        long innerInnerStride1 = in1.Shape.Dimensions[dimIndex2].Stride;
                        long innerInnerStride3 = @out.Shape.Dimensions[dimIndex2].Stride;

                        outerStride1 -= innerStride1 * in1.Shape.Dimensions[dimIndex1].Length;
                        outerStride3 -= innerStride3 * @out.Shape.Dimensions[dimIndex1].Length;

                        innerStride1 -= innerInnerStride1 * in1.Shape.Dimensions[dimIndex2].Length;
                        innerStride3 -= innerInnerStride3 * @out.Shape.Dimensions[dimIndex2].Length;

                        for (long outer = 0; outer < totalOps; outer++)
                        {
                            //Get the array offset for the first element in the outer dimension
                            long ix1 = in1.Shape[counters];
                            long ix3 = @out.Shape[counters];


                            for (long i = 0; i < opsOuter; i++)
                            {
                                for (long j = 0; j < opsInner; j++)
                                {
                                    for (long k = 0; k < opsInnerInner; k++)
                                    {
                                        d2[ix3] = (System.Int16)(~(d1[ix1]));
                                        ix1 += innerInnerStride1;
                                        ix3 += innerInnerStride3;
                                    }

                                    ix1 += innerStride1;
                                    ix3 += innerStride3;
                                }

                                ix1 += outerStride1;
                                ix3 += outerStride3;
                            }

                            if (counters.LongLength > 0)
                            {
                                //Basically a ripple carry adder
                                long p = counters.LongLength - 1;
                                while (++counters[p] == limits[p] && p > 0)
                                {
                                    counters[p] = 0;
                                    p--;
                                }
                            }
                        }
                    }
                }
            }
        }

        /// <summary>
        /// Unsafe implementation of applying a unary operation
        /// </summary>
        /// <typeparam name="C">The type of operation to perform</typeparam>
        /// <param name="op">The operation instance</param>
        /// <param name="scalar">The input scalar argument</param>
        /// <param name="out">The output target</param>
        internal static void UFunc_Op_Inner_Unary_Scalar_Flush_Int16_TypedImpl<C>(NumCIL.Int16.Invert op, System.Int16 scalar, NdArray<System.Int16> @out)
            where C : IUnaryOp<System.Int16>
        {
            unsafe
            {
                using (var f2 = new Pinner(@out.DataAccessor))
                {
                    var d2 = (System.Int16*)f2.ptr;

                    if (@out.Shape.Dimensions.Length == 1)
                    {
                        long totalOps = @out.Shape.Dimensions[0].Length;
                        long ix2 = @out.Shape.Offset;
                        long stride2 = @out.Shape.Dimensions[0].Stride;

                        for (long i = 0; i < totalOps; i++)
                        {
                            d2[ix2] = (System.Int16)(~(scalar));
                            ix2 += stride2;
                        }
                    }
                    else if (@out.Shape.Dimensions.Length == 2)
                    {
                        long opsOuter = @out.Shape.Dimensions[0].Length;
                        long opsInner = @out.Shape.Dimensions[1].Length;

                        long ix2 = @out.Shape.Offset;
                        long outerStride2 = @out.Shape.Dimensions[0].Stride;
                        long innerStride2 = @out.Shape.Dimensions[1].Stride;
                        outerStride2 -= innerStride2 * @out.Shape.Dimensions[1].Length;

                        for (long i = 0; i < opsOuter; i++)
                        {
                            for (long j = 0; j < opsInner; j++)
                            {
                                d2[ix2] = (System.Int16)(~(scalar));
                                ix2 += innerStride2;
                            }

                            ix2 += outerStride2;
                        }
                    }
                    else
                    {
                        long n = @out.Shape.Dimensions.LongLength - 3;
                        long[] limits = @out.Shape.Dimensions.Where(x => n-- > 0).Select(x => x.Length).ToArray();
                        long[] counters = new long[limits.LongLength];

                        long totalOps = limits.LongLength == 0 ? 1 : limits.Aggregate<long>((a, b) => a * b);

                        //This chunck of variables are used to prevent repeated calculations of offsets
                        long dimIndex0 = 0 + limits.LongLength;
                        long dimIndex1 = 1 + limits.LongLength;
                        long dimIndex2 = 2 + limits.LongLength;

                        long opsOuter = @out.Shape.Dimensions[0 + limits.LongLength].Length;
                        long opsInner = @out.Shape.Dimensions[1 + limits.LongLength].Length;
                        long opsInnerInner = @out.Shape.Dimensions[2 + limits.LongLength].Length;

                        long outerStride3 = @out.Shape.Dimensions[dimIndex0].Stride;
                        long innerStride3 = @out.Shape.Dimensions[dimIndex1].Stride;
                        long innerInnerStride3 = @out.Shape.Dimensions[dimIndex2].Stride;
                        outerStride3 -= innerStride3 * @out.Shape.Dimensions[dimIndex1].Length;
                        innerStride3 -= innerInnerStride3 * @out.Shape.Dimensions[dimIndex2].Length;

                        for (long outer = 0; outer < totalOps; outer++)
                        {
                            //Get the array offset for the first element in the outer dimension
                            long ix3 = @out.Shape[counters];

                            for (long i = 0; i < opsOuter; i++)
                            {
                                for (long j = 0; j < opsInner; j++)
                                {
                                    for (long k = 0; k < opsInnerInner; k++)
                                    {
                                        d2[ix3] = (System.Int16)(~(scalar));
                                        ix3 += innerInnerStride3;
                                    }

                                    ix3 += innerStride3;
                                }

                                ix3 += outerStride3;
                            }

                            if (counters.LongLength > 0)
                            {
                                //Basically a ripple carry adder
                                long p = counters.LongLength - 1;
                                while (++counters[p] == limits[p] && p > 0)
                                {
                                    counters[p] = 0;
                                    p--;
                                }
                            }
                        }
                    }
                }
            }
        }
        /// <summary>
        /// Unsafe implementation of applying a unary operation
        /// </summary>
        /// <typeparam name="C">The type of operation to perform</typeparam>
        /// <param name="op">The operation instance</param>
        /// <param name="in1">The input argument</param>
        /// <param name="out">The output target</param>
        internal static void UFunc_Op_Inner_Unary_Flush_UInt16_TypedImpl<C>(NumCIL.UInt16.Invert op, NdArray<System.UInt16> in1, NdArray<System.UInt16> @out)
            where C : IUnaryOp<System.UInt16>
        {
            unsafe
            {
                using (var f1 = new Pinner(in1.DataAccessor))
                using (var f2 = new Pinner(@out.DataAccessor))
                {
                    var d1 = (System.UInt16*)f1.ptr;
                    var d2 = (System.UInt16*)f2.ptr;

                    if (@out.Shape.Dimensions.Length == 1)
                    {
                        long totalOps = @out.Shape.Dimensions[0].Length;

                        long ix1 = in1.Shape.Offset;
                        long ix2 = @out.Shape.Offset;

                        long stride1 = in1.Shape.Dimensions[0].Stride;
                        long stride2 = @out.Shape.Dimensions[0].Stride;


                        if (stride1 == stride2 && ix1 == ix2)
                        {
                            //Best case, all are equal, just keep a single counter
                            for (long i = 0; i < totalOps; i++)
                            {
                                d2[ix1] = (System.UInt16)(~(d1[ix1]));
                                ix1 += stride1;
                            }
                        }
                        else
                        {
                            for (long i = 0; i < totalOps; i++)
                            {
                                d2[ix2] = (System.UInt16)(~(d1[ix1]));
                                ix1 += stride1;
                                ix2 += stride2;
                            }
                        }
                    }
                    else if (@out.Shape.Dimensions.Length == 2)
                    {
                        long opsOuter = @out.Shape.Dimensions[0].Length;
                        long opsInner = @out.Shape.Dimensions[1].Length;

                        long ix1 = in1.Shape.Offset;
                        long ix2 = @out.Shape.Offset;

                        long outerStride1 = in1.Shape.Dimensions[0].Stride;
                        long outerStride2 = @out.Shape.Dimensions[0].Stride;

                        long innerStride1 = in1.Shape.Dimensions[1].Stride;
                        long innerStride2 = @out.Shape.Dimensions[1].Stride;

                        outerStride1 -= innerStride1 * in1.Shape.Dimensions[1].Length;
                        outerStride2 -= innerStride2 * @out.Shape.Dimensions[1].Length;

                        for (long i = 0; i < opsOuter; i++)
                        {
                            for (long j = 0; j < opsInner; j++)
                            {
                                d2[ix2] = (System.UInt16)(~(d1[ix1]));
                                ix1 += innerStride1;
                                ix2 += innerStride2;
                            }

                            ix1 += outerStride1;
                            ix2 += outerStride2;
                        }
                    }
                    else
                    {
                        long n = in1.Shape.Dimensions.LongLength - 3;
                        long[] limits = in1.Shape.Dimensions.Where(x => n-- > 0).Select(x => x.Length).ToArray();
                        long[] counters = new long[limits.LongLength];

                        long totalOps = limits.LongLength == 0 ? 1 : limits.Aggregate<long>((a, b) => a * b);

                        //This chunck of variables are used to prevent repeated calculations of offsets
                        long dimIndex0 = 0 + limits.LongLength;
                        long dimIndex1 = 1 + limits.LongLength;
                        long dimIndex2 = 2 + limits.LongLength;

                        long opsOuter = @out.Shape.Dimensions[0 + limits.LongLength].Length;
                        long opsInner = @out.Shape.Dimensions[1 + limits.LongLength].Length;
                        long opsInnerInner = @out.Shape.Dimensions[2 + limits.LongLength].Length;

                        long outerStride1 = in1.Shape.Dimensions[dimIndex0].Stride;
                        long outerStride3 = @out.Shape.Dimensions[dimIndex0].Stride;

                        long innerStride1 = in1.Shape.Dimensions[dimIndex1].Stride;
                        long innerStride3 = @out.Shape.Dimensions[dimIndex1].Stride;

                        long innerInnerStride1 = in1.Shape.Dimensions[dimIndex2].Stride;
                        long innerInnerStride3 = @out.Shape.Dimensions[dimIndex2].Stride;

                        outerStride1 -= innerStride1 * in1.Shape.Dimensions[dimIndex1].Length;
                        outerStride3 -= innerStride3 * @out.Shape.Dimensions[dimIndex1].Length;

                        innerStride1 -= innerInnerStride1 * in1.Shape.Dimensions[dimIndex2].Length;
                        innerStride3 -= innerInnerStride3 * @out.Shape.Dimensions[dimIndex2].Length;

                        for (long outer = 0; outer < totalOps; outer++)
                        {
                            //Get the array offset for the first element in the outer dimension
                            long ix1 = in1.Shape[counters];
                            long ix3 = @out.Shape[counters];


                            for (long i = 0; i < opsOuter; i++)
                            {
                                for (long j = 0; j < opsInner; j++)
                                {
                                    for (long k = 0; k < opsInnerInner; k++)
                                    {
                                        d2[ix3] = (System.UInt16)(~(d1[ix1]));
                                        ix1 += innerInnerStride1;
                                        ix3 += innerInnerStride3;
                                    }

                                    ix1 += innerStride1;
                                    ix3 += innerStride3;
                                }

                                ix1 += outerStride1;
                                ix3 += outerStride3;
                            }

                            if (counters.LongLength > 0)
                            {
                                //Basically a ripple carry adder
                                long p = counters.LongLength - 1;
                                while (++counters[p] == limits[p] && p > 0)
                                {
                                    counters[p] = 0;
                                    p--;
                                }
                            }
                        }
                    }
                }
            }
        }

        /// <summary>
        /// Unsafe implementation of applying a unary operation
        /// </summary>
        /// <typeparam name="C">The type of operation to perform</typeparam>
        /// <param name="op">The operation instance</param>
        /// <param name="scalar">The input scalar argument</param>
        /// <param name="out">The output target</param>
        internal static void UFunc_Op_Inner_Unary_Scalar_Flush_UInt16_TypedImpl<C>(NumCIL.UInt16.Invert op, System.UInt16 scalar, NdArray<System.UInt16> @out)
            where C : IUnaryOp<System.UInt16>
        {
            unsafe
            {
                using (var f2 = new Pinner(@out.DataAccessor))
                {
                    var d2 = (System.UInt16*)f2.ptr;

                    if (@out.Shape.Dimensions.Length == 1)
                    {
                        long totalOps = @out.Shape.Dimensions[0].Length;
                        long ix2 = @out.Shape.Offset;
                        long stride2 = @out.Shape.Dimensions[0].Stride;

                        for (long i = 0; i < totalOps; i++)
                        {
                            d2[ix2] = (System.UInt16)(~(scalar));
                            ix2 += stride2;
                        }
                    }
                    else if (@out.Shape.Dimensions.Length == 2)
                    {
                        long opsOuter = @out.Shape.Dimensions[0].Length;
                        long opsInner = @out.Shape.Dimensions[1].Length;

                        long ix2 = @out.Shape.Offset;
                        long outerStride2 = @out.Shape.Dimensions[0].Stride;
                        long innerStride2 = @out.Shape.Dimensions[1].Stride;
                        outerStride2 -= innerStride2 * @out.Shape.Dimensions[1].Length;

                        for (long i = 0; i < opsOuter; i++)
                        {
                            for (long j = 0; j < opsInner; j++)
                            {
                                d2[ix2] = (System.UInt16)(~(scalar));
                                ix2 += innerStride2;
                            }

                            ix2 += outerStride2;
                        }
                    }
                    else
                    {
                        long n = @out.Shape.Dimensions.LongLength - 3;
                        long[] limits = @out.Shape.Dimensions.Where(x => n-- > 0).Select(x => x.Length).ToArray();
                        long[] counters = new long[limits.LongLength];

                        long totalOps = limits.LongLength == 0 ? 1 : limits.Aggregate<long>((a, b) => a * b);

                        //This chunck of variables are used to prevent repeated calculations of offsets
                        long dimIndex0 = 0 + limits.LongLength;
                        long dimIndex1 = 1 + limits.LongLength;
                        long dimIndex2 = 2 + limits.LongLength;

                        long opsOuter = @out.Shape.Dimensions[0 + limits.LongLength].Length;
                        long opsInner = @out.Shape.Dimensions[1 + limits.LongLength].Length;
                        long opsInnerInner = @out.Shape.Dimensions[2 + limits.LongLength].Length;

                        long outerStride3 = @out.Shape.Dimensions[dimIndex0].Stride;
                        long innerStride3 = @out.Shape.Dimensions[dimIndex1].Stride;
                        long innerInnerStride3 = @out.Shape.Dimensions[dimIndex2].Stride;
                        outerStride3 -= innerStride3 * @out.Shape.Dimensions[dimIndex1].Length;
                        innerStride3 -= innerInnerStride3 * @out.Shape.Dimensions[dimIndex2].Length;

                        for (long outer = 0; outer < totalOps; outer++)
                        {
                            //Get the array offset for the first element in the outer dimension
                            long ix3 = @out.Shape[counters];

                            for (long i = 0; i < opsOuter; i++)
                            {
                                for (long j = 0; j < opsInner; j++)
                                {
                                    for (long k = 0; k < opsInnerInner; k++)
                                    {
                                        d2[ix3] = (System.UInt16)(~(scalar));
                                        ix3 += innerInnerStride3;
                                    }

                                    ix3 += innerStride3;
                                }

                                ix3 += outerStride3;
                            }

                            if (counters.LongLength > 0)
                            {
                                //Basically a ripple carry adder
                                long p = counters.LongLength - 1;
                                while (++counters[p] == limits[p] && p > 0)
                                {
                                    counters[p] = 0;
                                    p--;
                                }
                            }
                        }
                    }
                }
            }
        }
        /// <summary>
        /// Unsafe implementation of applying a unary operation
        /// </summary>
        /// <typeparam name="C">The type of operation to perform</typeparam>
        /// <param name="op">The operation instance</param>
        /// <param name="in1">The input argument</param>
        /// <param name="out">The output target</param>
        internal static void UFunc_Op_Inner_Unary_Flush_Int32_TypedImpl<C>(NumCIL.Int32.Invert op, NdArray<System.Int32> in1, NdArray<System.Int32> @out)
            where C : IUnaryOp<System.Int32>
        {
            unsafe
            {
                using (var f1 = new Pinner(in1.DataAccessor))
                using (var f2 = new Pinner(@out.DataAccessor))
                {
                    var d1 = (System.Int32*)f1.ptr;
                    var d2 = (System.Int32*)f2.ptr;

                    if (@out.Shape.Dimensions.Length == 1)
                    {
                        long totalOps = @out.Shape.Dimensions[0].Length;

                        long ix1 = in1.Shape.Offset;
                        long ix2 = @out.Shape.Offset;

                        long stride1 = in1.Shape.Dimensions[0].Stride;
                        long stride2 = @out.Shape.Dimensions[0].Stride;


                        if (stride1 == stride2 && ix1 == ix2)
                        {
                            //Best case, all are equal, just keep a single counter
                            for (long i = 0; i < totalOps; i++)
                            {
                                d2[ix1] = (System.Int32)(~(d1[ix1]));
                                ix1 += stride1;
                            }
                        }
                        else
                        {
                            for (long i = 0; i < totalOps; i++)
                            {
                                d2[ix2] = (System.Int32)(~(d1[ix1]));
                                ix1 += stride1;
                                ix2 += stride2;
                            }
                        }
                    }
                    else if (@out.Shape.Dimensions.Length == 2)
                    {
                        long opsOuter = @out.Shape.Dimensions[0].Length;
                        long opsInner = @out.Shape.Dimensions[1].Length;

                        long ix1 = in1.Shape.Offset;
                        long ix2 = @out.Shape.Offset;

                        long outerStride1 = in1.Shape.Dimensions[0].Stride;
                        long outerStride2 = @out.Shape.Dimensions[0].Stride;

                        long innerStride1 = in1.Shape.Dimensions[1].Stride;
                        long innerStride2 = @out.Shape.Dimensions[1].Stride;

                        outerStride1 -= innerStride1 * in1.Shape.Dimensions[1].Length;
                        outerStride2 -= innerStride2 * @out.Shape.Dimensions[1].Length;

                        for (long i = 0; i < opsOuter; i++)
                        {
                            for (long j = 0; j < opsInner; j++)
                            {
                                d2[ix2] = (System.Int32)(~(d1[ix1]));
                                ix1 += innerStride1;
                                ix2 += innerStride2;
                            }

                            ix1 += outerStride1;
                            ix2 += outerStride2;
                        }
                    }
                    else
                    {
                        long n = in1.Shape.Dimensions.LongLength - 3;
                        long[] limits = in1.Shape.Dimensions.Where(x => n-- > 0).Select(x => x.Length).ToArray();
                        long[] counters = new long[limits.LongLength];

                        long totalOps = limits.LongLength == 0 ? 1 : limits.Aggregate<long>((a, b) => a * b);

                        //This chunck of variables are used to prevent repeated calculations of offsets
                        long dimIndex0 = 0 + limits.LongLength;
                        long dimIndex1 = 1 + limits.LongLength;
                        long dimIndex2 = 2 + limits.LongLength;

                        long opsOuter = @out.Shape.Dimensions[0 + limits.LongLength].Length;
                        long opsInner = @out.Shape.Dimensions[1 + limits.LongLength].Length;
                        long opsInnerInner = @out.Shape.Dimensions[2 + limits.LongLength].Length;

                        long outerStride1 = in1.Shape.Dimensions[dimIndex0].Stride;
                        long outerStride3 = @out.Shape.Dimensions[dimIndex0].Stride;

                        long innerStride1 = in1.Shape.Dimensions[dimIndex1].Stride;
                        long innerStride3 = @out.Shape.Dimensions[dimIndex1].Stride;

                        long innerInnerStride1 = in1.Shape.Dimensions[dimIndex2].Stride;
                        long innerInnerStride3 = @out.Shape.Dimensions[dimIndex2].Stride;

                        outerStride1 -= innerStride1 * in1.Shape.Dimensions[dimIndex1].Length;
                        outerStride3 -= innerStride3 * @out.Shape.Dimensions[dimIndex1].Length;

                        innerStride1 -= innerInnerStride1 * in1.Shape.Dimensions[dimIndex2].Length;
                        innerStride3 -= innerInnerStride3 * @out.Shape.Dimensions[dimIndex2].Length;

                        for (long outer = 0; outer < totalOps; outer++)
                        {
                            //Get the array offset for the first element in the outer dimension
                            long ix1 = in1.Shape[counters];
                            long ix3 = @out.Shape[counters];


                            for (long i = 0; i < opsOuter; i++)
                            {
                                for (long j = 0; j < opsInner; j++)
                                {
                                    for (long k = 0; k < opsInnerInner; k++)
                                    {
                                        d2[ix3] = (System.Int32)(~(d1[ix1]));
                                        ix1 += innerInnerStride1;
                                        ix3 += innerInnerStride3;
                                    }

                                    ix1 += innerStride1;
                                    ix3 += innerStride3;
                                }

                                ix1 += outerStride1;
                                ix3 += outerStride3;
                            }

                            if (counters.LongLength > 0)
                            {
                                //Basically a ripple carry adder
                                long p = counters.LongLength - 1;
                                while (++counters[p] == limits[p] && p > 0)
                                {
                                    counters[p] = 0;
                                    p--;
                                }
                            }
                        }
                    }
                }
            }
        }

        /// <summary>
        /// Unsafe implementation of applying a unary operation
        /// </summary>
        /// <typeparam name="C">The type of operation to perform</typeparam>
        /// <param name="op">The operation instance</param>
        /// <param name="scalar">The input scalar argument</param>
        /// <param name="out">The output target</param>
        internal static void UFunc_Op_Inner_Unary_Scalar_Flush_Int32_TypedImpl<C>(NumCIL.Int32.Invert op, System.Int32 scalar, NdArray<System.Int32> @out)
            where C : IUnaryOp<System.Int32>
        {
            unsafe
            {
                using (var f2 = new Pinner(@out.DataAccessor))
                {
                    var d2 = (System.Int32*)f2.ptr;

                    if (@out.Shape.Dimensions.Length == 1)
                    {
                        long totalOps = @out.Shape.Dimensions[0].Length;
                        long ix2 = @out.Shape.Offset;
                        long stride2 = @out.Shape.Dimensions[0].Stride;

                        for (long i = 0; i < totalOps; i++)
                        {
                            d2[ix2] = (System.Int32)(~(scalar));
                            ix2 += stride2;
                        }
                    }
                    else if (@out.Shape.Dimensions.Length == 2)
                    {
                        long opsOuter = @out.Shape.Dimensions[0].Length;
                        long opsInner = @out.Shape.Dimensions[1].Length;

                        long ix2 = @out.Shape.Offset;
                        long outerStride2 = @out.Shape.Dimensions[0].Stride;
                        long innerStride2 = @out.Shape.Dimensions[1].Stride;
                        outerStride2 -= innerStride2 * @out.Shape.Dimensions[1].Length;

                        for (long i = 0; i < opsOuter; i++)
                        {
                            for (long j = 0; j < opsInner; j++)
                            {
                                d2[ix2] = (System.Int32)(~(scalar));
                                ix2 += innerStride2;
                            }

                            ix2 += outerStride2;
                        }
                    }
                    else
                    {
                        long n = @out.Shape.Dimensions.LongLength - 3;
                        long[] limits = @out.Shape.Dimensions.Where(x => n-- > 0).Select(x => x.Length).ToArray();
                        long[] counters = new long[limits.LongLength];

                        long totalOps = limits.LongLength == 0 ? 1 : limits.Aggregate<long>((a, b) => a * b);

                        //This chunck of variables are used to prevent repeated calculations of offsets
                        long dimIndex0 = 0 + limits.LongLength;
                        long dimIndex1 = 1 + limits.LongLength;
                        long dimIndex2 = 2 + limits.LongLength;

                        long opsOuter = @out.Shape.Dimensions[0 + limits.LongLength].Length;
                        long opsInner = @out.Shape.Dimensions[1 + limits.LongLength].Length;
                        long opsInnerInner = @out.Shape.Dimensions[2 + limits.LongLength].Length;

                        long outerStride3 = @out.Shape.Dimensions[dimIndex0].Stride;
                        long innerStride3 = @out.Shape.Dimensions[dimIndex1].Stride;
                        long innerInnerStride3 = @out.Shape.Dimensions[dimIndex2].Stride;
                        outerStride3 -= innerStride3 * @out.Shape.Dimensions[dimIndex1].Length;
                        innerStride3 -= innerInnerStride3 * @out.Shape.Dimensions[dimIndex2].Length;

                        for (long outer = 0; outer < totalOps; outer++)
                        {
                            //Get the array offset for the first element in the outer dimension
                            long ix3 = @out.Shape[counters];

                            for (long i = 0; i < opsOuter; i++)
                            {
                                for (long j = 0; j < opsInner; j++)
                                {
                                    for (long k = 0; k < opsInnerInner; k++)
                                    {
                                        d2[ix3] = (System.Int32)(~(scalar));
                                        ix3 += innerInnerStride3;
                                    }

                                    ix3 += innerStride3;
                                }

                                ix3 += outerStride3;
                            }

                            if (counters.LongLength > 0)
                            {
                                //Basically a ripple carry adder
                                long p = counters.LongLength - 1;
                                while (++counters[p] == limits[p] && p > 0)
                                {
                                    counters[p] = 0;
                                    p--;
                                }
                            }
                        }
                    }
                }
            }
        }
        /// <summary>
        /// Unsafe implementation of applying a unary operation
        /// </summary>
        /// <typeparam name="C">The type of operation to perform</typeparam>
        /// <param name="op">The operation instance</param>
        /// <param name="in1">The input argument</param>
        /// <param name="out">The output target</param>
        internal static void UFunc_Op_Inner_Unary_Flush_UInt32_TypedImpl<C>(NumCIL.UInt32.Invert op, NdArray<System.UInt32> in1, NdArray<System.UInt32> @out)
            where C : IUnaryOp<System.UInt32>
        {
            unsafe
            {
                using (var f1 = new Pinner(in1.DataAccessor))
                using (var f2 = new Pinner(@out.DataAccessor))
                {
                    var d1 = (System.UInt32*)f1.ptr;
                    var d2 = (System.UInt32*)f2.ptr;

                    if (@out.Shape.Dimensions.Length == 1)
                    {
                        long totalOps = @out.Shape.Dimensions[0].Length;

                        long ix1 = in1.Shape.Offset;
                        long ix2 = @out.Shape.Offset;

                        long stride1 = in1.Shape.Dimensions[0].Stride;
                        long stride2 = @out.Shape.Dimensions[0].Stride;


                        if (stride1 == stride2 && ix1 == ix2)
                        {
                            //Best case, all are equal, just keep a single counter
                            for (long i = 0; i < totalOps; i++)
                            {
                                d2[ix1] = (System.UInt32)(~(d1[ix1]));
                                ix1 += stride1;
                            }
                        }
                        else
                        {
                            for (long i = 0; i < totalOps; i++)
                            {
                                d2[ix2] = (System.UInt32)(~(d1[ix1]));
                                ix1 += stride1;
                                ix2 += stride2;
                            }
                        }
                    }
                    else if (@out.Shape.Dimensions.Length == 2)
                    {
                        long opsOuter = @out.Shape.Dimensions[0].Length;
                        long opsInner = @out.Shape.Dimensions[1].Length;

                        long ix1 = in1.Shape.Offset;
                        long ix2 = @out.Shape.Offset;

                        long outerStride1 = in1.Shape.Dimensions[0].Stride;
                        long outerStride2 = @out.Shape.Dimensions[0].Stride;

                        long innerStride1 = in1.Shape.Dimensions[1].Stride;
                        long innerStride2 = @out.Shape.Dimensions[1].Stride;

                        outerStride1 -= innerStride1 * in1.Shape.Dimensions[1].Length;
                        outerStride2 -= innerStride2 * @out.Shape.Dimensions[1].Length;

                        for (long i = 0; i < opsOuter; i++)
                        {
                            for (long j = 0; j < opsInner; j++)
                            {
                                d2[ix2] = (System.UInt32)(~(d1[ix1]));
                                ix1 += innerStride1;
                                ix2 += innerStride2;
                            }

                            ix1 += outerStride1;
                            ix2 += outerStride2;
                        }
                    }
                    else
                    {
                        long n = in1.Shape.Dimensions.LongLength - 3;
                        long[] limits = in1.Shape.Dimensions.Where(x => n-- > 0).Select(x => x.Length).ToArray();
                        long[] counters = new long[limits.LongLength];

                        long totalOps = limits.LongLength == 0 ? 1 : limits.Aggregate<long>((a, b) => a * b);

                        //This chunck of variables are used to prevent repeated calculations of offsets
                        long dimIndex0 = 0 + limits.LongLength;
                        long dimIndex1 = 1 + limits.LongLength;
                        long dimIndex2 = 2 + limits.LongLength;

                        long opsOuter = @out.Shape.Dimensions[0 + limits.LongLength].Length;
                        long opsInner = @out.Shape.Dimensions[1 + limits.LongLength].Length;
                        long opsInnerInner = @out.Shape.Dimensions[2 + limits.LongLength].Length;

                        long outerStride1 = in1.Shape.Dimensions[dimIndex0].Stride;
                        long outerStride3 = @out.Shape.Dimensions[dimIndex0].Stride;

                        long innerStride1 = in1.Shape.Dimensions[dimIndex1].Stride;
                        long innerStride3 = @out.Shape.Dimensions[dimIndex1].Stride;

                        long innerInnerStride1 = in1.Shape.Dimensions[dimIndex2].Stride;
                        long innerInnerStride3 = @out.Shape.Dimensions[dimIndex2].Stride;

                        outerStride1 -= innerStride1 * in1.Shape.Dimensions[dimIndex1].Length;
                        outerStride3 -= innerStride3 * @out.Shape.Dimensions[dimIndex1].Length;

                        innerStride1 -= innerInnerStride1 * in1.Shape.Dimensions[dimIndex2].Length;
                        innerStride3 -= innerInnerStride3 * @out.Shape.Dimensions[dimIndex2].Length;

                        for (long outer = 0; outer < totalOps; outer++)
                        {
                            //Get the array offset for the first element in the outer dimension
                            long ix1 = in1.Shape[counters];
                            long ix3 = @out.Shape[counters];


                            for (long i = 0; i < opsOuter; i++)
                            {
                                for (long j = 0; j < opsInner; j++)
                                {
                                    for (long k = 0; k < opsInnerInner; k++)
                                    {
                                        d2[ix3] = (System.UInt32)(~(d1[ix1]));
                                        ix1 += innerInnerStride1;
                                        ix3 += innerInnerStride3;
                                    }

                                    ix1 += innerStride1;
                                    ix3 += innerStride3;
                                }

                                ix1 += outerStride1;
                                ix3 += outerStride3;
                            }

                            if (counters.LongLength > 0)
                            {
                                //Basically a ripple carry adder
                                long p = counters.LongLength - 1;
                                while (++counters[p] == limits[p] && p > 0)
                                {
                                    counters[p] = 0;
                                    p--;
                                }
                            }
                        }
                    }
                }
            }
        }

        /// <summary>
        /// Unsafe implementation of applying a unary operation
        /// </summary>
        /// <typeparam name="C">The type of operation to perform</typeparam>
        /// <param name="op">The operation instance</param>
        /// <param name="scalar">The input scalar argument</param>
        /// <param name="out">The output target</param>
        internal static void UFunc_Op_Inner_Unary_Scalar_Flush_UInt32_TypedImpl<C>(NumCIL.UInt32.Invert op, System.UInt32 scalar, NdArray<System.UInt32> @out)
            where C : IUnaryOp<System.UInt32>
        {
            unsafe
            {
                using (var f2 = new Pinner(@out.DataAccessor))
                {
                    var d2 = (System.UInt32*)f2.ptr;

                    if (@out.Shape.Dimensions.Length == 1)
                    {
                        long totalOps = @out.Shape.Dimensions[0].Length;
                        long ix2 = @out.Shape.Offset;
                        long stride2 = @out.Shape.Dimensions[0].Stride;

                        for (long i = 0; i < totalOps; i++)
                        {
                            d2[ix2] = (System.UInt32)(~(scalar));
                            ix2 += stride2;
                        }
                    }
                    else if (@out.Shape.Dimensions.Length == 2)
                    {
                        long opsOuter = @out.Shape.Dimensions[0].Length;
                        long opsInner = @out.Shape.Dimensions[1].Length;

                        long ix2 = @out.Shape.Offset;
                        long outerStride2 = @out.Shape.Dimensions[0].Stride;
                        long innerStride2 = @out.Shape.Dimensions[1].Stride;
                        outerStride2 -= innerStride2 * @out.Shape.Dimensions[1].Length;

                        for (long i = 0; i < opsOuter; i++)
                        {
                            for (long j = 0; j < opsInner; j++)
                            {
                                d2[ix2] = (System.UInt32)(~(scalar));
                                ix2 += innerStride2;
                            }

                            ix2 += outerStride2;
                        }
                    }
                    else
                    {
                        long n = @out.Shape.Dimensions.LongLength - 3;
                        long[] limits = @out.Shape.Dimensions.Where(x => n-- > 0).Select(x => x.Length).ToArray();
                        long[] counters = new long[limits.LongLength];

                        long totalOps = limits.LongLength == 0 ? 1 : limits.Aggregate<long>((a, b) => a * b);

                        //This chunck of variables are used to prevent repeated calculations of offsets
                        long dimIndex0 = 0 + limits.LongLength;
                        long dimIndex1 = 1 + limits.LongLength;
                        long dimIndex2 = 2 + limits.LongLength;

                        long opsOuter = @out.Shape.Dimensions[0 + limits.LongLength].Length;
                        long opsInner = @out.Shape.Dimensions[1 + limits.LongLength].Length;
                        long opsInnerInner = @out.Shape.Dimensions[2 + limits.LongLength].Length;

                        long outerStride3 = @out.Shape.Dimensions[dimIndex0].Stride;
                        long innerStride3 = @out.Shape.Dimensions[dimIndex1].Stride;
                        long innerInnerStride3 = @out.Shape.Dimensions[dimIndex2].Stride;
                        outerStride3 -= innerStride3 * @out.Shape.Dimensions[dimIndex1].Length;
                        innerStride3 -= innerInnerStride3 * @out.Shape.Dimensions[dimIndex2].Length;

                        for (long outer = 0; outer < totalOps; outer++)
                        {
                            //Get the array offset for the first element in the outer dimension
                            long ix3 = @out.Shape[counters];

                            for (long i = 0; i < opsOuter; i++)
                            {
                                for (long j = 0; j < opsInner; j++)
                                {
                                    for (long k = 0; k < opsInnerInner; k++)
                                    {
                                        d2[ix3] = (System.UInt32)(~(scalar));
                                        ix3 += innerInnerStride3;
                                    }

                                    ix3 += innerStride3;
                                }

                                ix3 += outerStride3;
                            }

                            if (counters.LongLength > 0)
                            {
                                //Basically a ripple carry adder
                                long p = counters.LongLength - 1;
                                while (++counters[p] == limits[p] && p > 0)
                                {
                                    counters[p] = 0;
                                    p--;
                                }
                            }
                        }
                    }
                }
            }
        }
        /// <summary>
        /// Unsafe implementation of applying a unary operation
        /// </summary>
        /// <typeparam name="C">The type of operation to perform</typeparam>
        /// <param name="op">The operation instance</param>
        /// <param name="in1">The input argument</param>
        /// <param name="out">The output target</param>
        internal static void UFunc_Op_Inner_Unary_Flush_Int64_TypedImpl<C>(NumCIL.Int64.Invert op, NdArray<System.Int64> in1, NdArray<System.Int64> @out)
            where C : IUnaryOp<System.Int64>
        {
            unsafe
            {
                using (var f1 = new Pinner(in1.DataAccessor))
                using (var f2 = new Pinner(@out.DataAccessor))
                {
                    var d1 = (System.Int64*)f1.ptr;
                    var d2 = (System.Int64*)f2.ptr;

                    if (@out.Shape.Dimensions.Length == 1)
                    {
                        long totalOps = @out.Shape.Dimensions[0].Length;

                        long ix1 = in1.Shape.Offset;
                        long ix2 = @out.Shape.Offset;

                        long stride1 = in1.Shape.Dimensions[0].Stride;
                        long stride2 = @out.Shape.Dimensions[0].Stride;


                        if (stride1 == stride2 && ix1 == ix2)
                        {
                            //Best case, all are equal, just keep a single counter
                            for (long i = 0; i < totalOps; i++)
                            {
                                d2[ix1] = (System.Int64)(~(d1[ix1]));
                                ix1 += stride1;
                            }
                        }
                        else
                        {
                            for (long i = 0; i < totalOps; i++)
                            {
                                d2[ix2] = (System.Int64)(~(d1[ix1]));
                                ix1 += stride1;
                                ix2 += stride2;
                            }
                        }
                    }
                    else if (@out.Shape.Dimensions.Length == 2)
                    {
                        long opsOuter = @out.Shape.Dimensions[0].Length;
                        long opsInner = @out.Shape.Dimensions[1].Length;

                        long ix1 = in1.Shape.Offset;
                        long ix2 = @out.Shape.Offset;

                        long outerStride1 = in1.Shape.Dimensions[0].Stride;
                        long outerStride2 = @out.Shape.Dimensions[0].Stride;

                        long innerStride1 = in1.Shape.Dimensions[1].Stride;
                        long innerStride2 = @out.Shape.Dimensions[1].Stride;

                        outerStride1 -= innerStride1 * in1.Shape.Dimensions[1].Length;
                        outerStride2 -= innerStride2 * @out.Shape.Dimensions[1].Length;

                        for (long i = 0; i < opsOuter; i++)
                        {
                            for (long j = 0; j < opsInner; j++)
                            {
                                d2[ix2] = (System.Int64)(~(d1[ix1]));
                                ix1 += innerStride1;
                                ix2 += innerStride2;
                            }

                            ix1 += outerStride1;
                            ix2 += outerStride2;
                        }
                    }
                    else
                    {
                        long n = in1.Shape.Dimensions.LongLength - 3;
                        long[] limits = in1.Shape.Dimensions.Where(x => n-- > 0).Select(x => x.Length).ToArray();
                        long[] counters = new long[limits.LongLength];

                        long totalOps = limits.LongLength == 0 ? 1 : limits.Aggregate<long>((a, b) => a * b);

                        //This chunck of variables are used to prevent repeated calculations of offsets
                        long dimIndex0 = 0 + limits.LongLength;
                        long dimIndex1 = 1 + limits.LongLength;
                        long dimIndex2 = 2 + limits.LongLength;

                        long opsOuter = @out.Shape.Dimensions[0 + limits.LongLength].Length;
                        long opsInner = @out.Shape.Dimensions[1 + limits.LongLength].Length;
                        long opsInnerInner = @out.Shape.Dimensions[2 + limits.LongLength].Length;

                        long outerStride1 = in1.Shape.Dimensions[dimIndex0].Stride;
                        long outerStride3 = @out.Shape.Dimensions[dimIndex0].Stride;

                        long innerStride1 = in1.Shape.Dimensions[dimIndex1].Stride;
                        long innerStride3 = @out.Shape.Dimensions[dimIndex1].Stride;

                        long innerInnerStride1 = in1.Shape.Dimensions[dimIndex2].Stride;
                        long innerInnerStride3 = @out.Shape.Dimensions[dimIndex2].Stride;

                        outerStride1 -= innerStride1 * in1.Shape.Dimensions[dimIndex1].Length;
                        outerStride3 -= innerStride3 * @out.Shape.Dimensions[dimIndex1].Length;

                        innerStride1 -= innerInnerStride1 * in1.Shape.Dimensions[dimIndex2].Length;
                        innerStride3 -= innerInnerStride3 * @out.Shape.Dimensions[dimIndex2].Length;

                        for (long outer = 0; outer < totalOps; outer++)
                        {
                            //Get the array offset for the first element in the outer dimension
                            long ix1 = in1.Shape[counters];
                            long ix3 = @out.Shape[counters];


                            for (long i = 0; i < opsOuter; i++)
                            {
                                for (long j = 0; j < opsInner; j++)
                                {
                                    for (long k = 0; k < opsInnerInner; k++)
                                    {
                                        d2[ix3] = (System.Int64)(~(d1[ix1]));
                                        ix1 += innerInnerStride1;
                                        ix3 += innerInnerStride3;
                                    }

                                    ix1 += innerStride1;
                                    ix3 += innerStride3;
                                }

                                ix1 += outerStride1;
                                ix3 += outerStride3;
                            }

                            if (counters.LongLength > 0)
                            {
                                //Basically a ripple carry adder
                                long p = counters.LongLength - 1;
                                while (++counters[p] == limits[p] && p > 0)
                                {
                                    counters[p] = 0;
                                    p--;
                                }
                            }
                        }
                    }
                }
            }
        }

        /// <summary>
        /// Unsafe implementation of applying a unary operation
        /// </summary>
        /// <typeparam name="C">The type of operation to perform</typeparam>
        /// <param name="op">The operation instance</param>
        /// <param name="scalar">The input scalar argument</param>
        /// <param name="out">The output target</param>
        internal static void UFunc_Op_Inner_Unary_Scalar_Flush_Int64_TypedImpl<C>(NumCIL.Int64.Invert op, System.Int64 scalar, NdArray<System.Int64> @out)
            where C : IUnaryOp<System.Int64>
        {
            unsafe
            {
                using (var f2 = new Pinner(@out.DataAccessor))
                {
                    var d2 = (System.Int64*)f2.ptr;

                    if (@out.Shape.Dimensions.Length == 1)
                    {
                        long totalOps = @out.Shape.Dimensions[0].Length;
                        long ix2 = @out.Shape.Offset;
                        long stride2 = @out.Shape.Dimensions[0].Stride;

                        for (long i = 0; i < totalOps; i++)
                        {
                            d2[ix2] = (System.Int64)(~(scalar));
                            ix2 += stride2;
                        }
                    }
                    else if (@out.Shape.Dimensions.Length == 2)
                    {
                        long opsOuter = @out.Shape.Dimensions[0].Length;
                        long opsInner = @out.Shape.Dimensions[1].Length;

                        long ix2 = @out.Shape.Offset;
                        long outerStride2 = @out.Shape.Dimensions[0].Stride;
                        long innerStride2 = @out.Shape.Dimensions[1].Stride;
                        outerStride2 -= innerStride2 * @out.Shape.Dimensions[1].Length;

                        for (long i = 0; i < opsOuter; i++)
                        {
                            for (long j = 0; j < opsInner; j++)
                            {
                                d2[ix2] = (System.Int64)(~(scalar));
                                ix2 += innerStride2;
                            }

                            ix2 += outerStride2;
                        }
                    }
                    else
                    {
                        long n = @out.Shape.Dimensions.LongLength - 3;
                        long[] limits = @out.Shape.Dimensions.Where(x => n-- > 0).Select(x => x.Length).ToArray();
                        long[] counters = new long[limits.LongLength];

                        long totalOps = limits.LongLength == 0 ? 1 : limits.Aggregate<long>((a, b) => a * b);

                        //This chunck of variables are used to prevent repeated calculations of offsets
                        long dimIndex0 = 0 + limits.LongLength;
                        long dimIndex1 = 1 + limits.LongLength;
                        long dimIndex2 = 2 + limits.LongLength;

                        long opsOuter = @out.Shape.Dimensions[0 + limits.LongLength].Length;
                        long opsInner = @out.Shape.Dimensions[1 + limits.LongLength].Length;
                        long opsInnerInner = @out.Shape.Dimensions[2 + limits.LongLength].Length;

                        long outerStride3 = @out.Shape.Dimensions[dimIndex0].Stride;
                        long innerStride3 = @out.Shape.Dimensions[dimIndex1].Stride;
                        long innerInnerStride3 = @out.Shape.Dimensions[dimIndex2].Stride;
                        outerStride3 -= innerStride3 * @out.Shape.Dimensions[dimIndex1].Length;
                        innerStride3 -= innerInnerStride3 * @out.Shape.Dimensions[dimIndex2].Length;

                        for (long outer = 0; outer < totalOps; outer++)
                        {
                            //Get the array offset for the first element in the outer dimension
                            long ix3 = @out.Shape[counters];

                            for (long i = 0; i < opsOuter; i++)
                            {
                                for (long j = 0; j < opsInner; j++)
                                {
                                    for (long k = 0; k < opsInnerInner; k++)
                                    {
                                        d2[ix3] = (System.Int64)(~(scalar));
                                        ix3 += innerInnerStride3;
                                    }

                                    ix3 += innerStride3;
                                }

                                ix3 += outerStride3;
                            }

                            if (counters.LongLength > 0)
                            {
                                //Basically a ripple carry adder
                                long p = counters.LongLength - 1;
                                while (++counters[p] == limits[p] && p > 0)
                                {
                                    counters[p] = 0;
                                    p--;
                                }
                            }
                        }
                    }
                }
            }
        }
        /// <summary>
        /// Unsafe implementation of applying a unary operation
        /// </summary>
        /// <typeparam name="C">The type of operation to perform</typeparam>
        /// <param name="op">The operation instance</param>
        /// <param name="in1">The input argument</param>
        /// <param name="out">The output target</param>
        internal static void UFunc_Op_Inner_Unary_Flush_UInt64_TypedImpl<C>(NumCIL.UInt64.Invert op, NdArray<System.UInt64> in1, NdArray<System.UInt64> @out)
            where C : IUnaryOp<System.UInt64>
        {
            unsafe
            {
                using (var f1 = new Pinner(in1.DataAccessor))
                using (var f2 = new Pinner(@out.DataAccessor))
                {
                    var d1 = (System.UInt64*)f1.ptr;
                    var d2 = (System.UInt64*)f2.ptr;

                    if (@out.Shape.Dimensions.Length == 1)
                    {
                        long totalOps = @out.Shape.Dimensions[0].Length;

                        long ix1 = in1.Shape.Offset;
                        long ix2 = @out.Shape.Offset;

                        long stride1 = in1.Shape.Dimensions[0].Stride;
                        long stride2 = @out.Shape.Dimensions[0].Stride;


                        if (stride1 == stride2 && ix1 == ix2)
                        {
                            //Best case, all are equal, just keep a single counter
                            for (long i = 0; i < totalOps; i++)
                            {
                                d2[ix1] = (System.UInt64)(~(d1[ix1]));
                                ix1 += stride1;
                            }
                        }
                        else
                        {
                            for (long i = 0; i < totalOps; i++)
                            {
                                d2[ix2] = (System.UInt64)(~(d1[ix1]));
                                ix1 += stride1;
                                ix2 += stride2;
                            }
                        }
                    }
                    else if (@out.Shape.Dimensions.Length == 2)
                    {
                        long opsOuter = @out.Shape.Dimensions[0].Length;
                        long opsInner = @out.Shape.Dimensions[1].Length;

                        long ix1 = in1.Shape.Offset;
                        long ix2 = @out.Shape.Offset;

                        long outerStride1 = in1.Shape.Dimensions[0].Stride;
                        long outerStride2 = @out.Shape.Dimensions[0].Stride;

                        long innerStride1 = in1.Shape.Dimensions[1].Stride;
                        long innerStride2 = @out.Shape.Dimensions[1].Stride;

                        outerStride1 -= innerStride1 * in1.Shape.Dimensions[1].Length;
                        outerStride2 -= innerStride2 * @out.Shape.Dimensions[1].Length;

                        for (long i = 0; i < opsOuter; i++)
                        {
                            for (long j = 0; j < opsInner; j++)
                            {
                                d2[ix2] = (System.UInt64)(~(d1[ix1]));
                                ix1 += innerStride1;
                                ix2 += innerStride2;
                            }

                            ix1 += outerStride1;
                            ix2 += outerStride2;
                        }
                    }
                    else
                    {
                        long n = in1.Shape.Dimensions.LongLength - 3;
                        long[] limits = in1.Shape.Dimensions.Where(x => n-- > 0).Select(x => x.Length).ToArray();
                        long[] counters = new long[limits.LongLength];

                        long totalOps = limits.LongLength == 0 ? 1 : limits.Aggregate<long>((a, b) => a * b);

                        //This chunck of variables are used to prevent repeated calculations of offsets
                        long dimIndex0 = 0 + limits.LongLength;
                        long dimIndex1 = 1 + limits.LongLength;
                        long dimIndex2 = 2 + limits.LongLength;

                        long opsOuter = @out.Shape.Dimensions[0 + limits.LongLength].Length;
                        long opsInner = @out.Shape.Dimensions[1 + limits.LongLength].Length;
                        long opsInnerInner = @out.Shape.Dimensions[2 + limits.LongLength].Length;

                        long outerStride1 = in1.Shape.Dimensions[dimIndex0].Stride;
                        long outerStride3 = @out.Shape.Dimensions[dimIndex0].Stride;

                        long innerStride1 = in1.Shape.Dimensions[dimIndex1].Stride;
                        long innerStride3 = @out.Shape.Dimensions[dimIndex1].Stride;

                        long innerInnerStride1 = in1.Shape.Dimensions[dimIndex2].Stride;
                        long innerInnerStride3 = @out.Shape.Dimensions[dimIndex2].Stride;

                        outerStride1 -= innerStride1 * in1.Shape.Dimensions[dimIndex1].Length;
                        outerStride3 -= innerStride3 * @out.Shape.Dimensions[dimIndex1].Length;

                        innerStride1 -= innerInnerStride1 * in1.Shape.Dimensions[dimIndex2].Length;
                        innerStride3 -= innerInnerStride3 * @out.Shape.Dimensions[dimIndex2].Length;

                        for (long outer = 0; outer < totalOps; outer++)
                        {
                            //Get the array offset for the first element in the outer dimension
                            long ix1 = in1.Shape[counters];
                            long ix3 = @out.Shape[counters];


                            for (long i = 0; i < opsOuter; i++)
                            {
                                for (long j = 0; j < opsInner; j++)
                                {
                                    for (long k = 0; k < opsInnerInner; k++)
                                    {
                                        d2[ix3] = (System.UInt64)(~(d1[ix1]));
                                        ix1 += innerInnerStride1;
                                        ix3 += innerInnerStride3;
                                    }

                                    ix1 += innerStride1;
                                    ix3 += innerStride3;
                                }

                                ix1 += outerStride1;
                                ix3 += outerStride3;
                            }

                            if (counters.LongLength > 0)
                            {
                                //Basically a ripple carry adder
                                long p = counters.LongLength - 1;
                                while (++counters[p] == limits[p] && p > 0)
                                {
                                    counters[p] = 0;
                                    p--;
                                }
                            }
                        }
                    }
                }
            }
        }

        /// <summary>
        /// Unsafe implementation of applying a unary operation
        /// </summary>
        /// <typeparam name="C">The type of operation to perform</typeparam>
        /// <param name="op">The operation instance</param>
        /// <param name="scalar">The input scalar argument</param>
        /// <param name="out">The output target</param>
        internal static void UFunc_Op_Inner_Unary_Scalar_Flush_UInt64_TypedImpl<C>(NumCIL.UInt64.Invert op, System.UInt64 scalar, NdArray<System.UInt64> @out)
            where C : IUnaryOp<System.UInt64>
        {
            unsafe
            {
                using (var f2 = new Pinner(@out.DataAccessor))
                {
                    var d2 = (System.UInt64*)f2.ptr;

                    if (@out.Shape.Dimensions.Length == 1)
                    {
                        long totalOps = @out.Shape.Dimensions[0].Length;
                        long ix2 = @out.Shape.Offset;
                        long stride2 = @out.Shape.Dimensions[0].Stride;

                        for (long i = 0; i < totalOps; i++)
                        {
                            d2[ix2] = (System.UInt64)(~(scalar));
                            ix2 += stride2;
                        }
                    }
                    else if (@out.Shape.Dimensions.Length == 2)
                    {
                        long opsOuter = @out.Shape.Dimensions[0].Length;
                        long opsInner = @out.Shape.Dimensions[1].Length;

                        long ix2 = @out.Shape.Offset;
                        long outerStride2 = @out.Shape.Dimensions[0].Stride;
                        long innerStride2 = @out.Shape.Dimensions[1].Stride;
                        outerStride2 -= innerStride2 * @out.Shape.Dimensions[1].Length;

                        for (long i = 0; i < opsOuter; i++)
                        {
                            for (long j = 0; j < opsInner; j++)
                            {
                                d2[ix2] = (System.UInt64)(~(scalar));
                                ix2 += innerStride2;
                            }

                            ix2 += outerStride2;
                        }
                    }
                    else
                    {
                        long n = @out.Shape.Dimensions.LongLength - 3;
                        long[] limits = @out.Shape.Dimensions.Where(x => n-- > 0).Select(x => x.Length).ToArray();
                        long[] counters = new long[limits.LongLength];

                        long totalOps = limits.LongLength == 0 ? 1 : limits.Aggregate<long>((a, b) => a * b);

                        //This chunck of variables are used to prevent repeated calculations of offsets
                        long dimIndex0 = 0 + limits.LongLength;
                        long dimIndex1 = 1 + limits.LongLength;
                        long dimIndex2 = 2 + limits.LongLength;

                        long opsOuter = @out.Shape.Dimensions[0 + limits.LongLength].Length;
                        long opsInner = @out.Shape.Dimensions[1 + limits.LongLength].Length;
                        long opsInnerInner = @out.Shape.Dimensions[2 + limits.LongLength].Length;

                        long outerStride3 = @out.Shape.Dimensions[dimIndex0].Stride;
                        long innerStride3 = @out.Shape.Dimensions[dimIndex1].Stride;
                        long innerInnerStride3 = @out.Shape.Dimensions[dimIndex2].Stride;
                        outerStride3 -= innerStride3 * @out.Shape.Dimensions[dimIndex1].Length;
                        innerStride3 -= innerInnerStride3 * @out.Shape.Dimensions[dimIndex2].Length;

                        for (long outer = 0; outer < totalOps; outer++)
                        {
                            //Get the array offset for the first element in the outer dimension
                            long ix3 = @out.Shape[counters];

                            for (long i = 0; i < opsOuter; i++)
                            {
                                for (long j = 0; j < opsInner; j++)
                                {
                                    for (long k = 0; k < opsInnerInner; k++)
                                    {
                                        d2[ix3] = (System.UInt64)(~(scalar));
                                        ix3 += innerInnerStride3;
                                    }

                                    ix3 += innerStride3;
                                }

                                ix3 += outerStride3;
                            }

                            if (counters.LongLength > 0)
                            {
                                //Basically a ripple carry adder
                                long p = counters.LongLength - 1;
                                while (++counters[p] == limits[p] && p > 0)
                                {
                                    counters[p] = 0;
                                    p--;
                                }
                            }
                        }
                    }
                }
            }
        }
        /// <summary>
        /// Unsafe implementation of applying a unary operation
        /// </summary>
        /// <typeparam name="C">The type of operation to perform</typeparam>
        /// <param name="op">The operation instance</param>
        /// <param name="in1">The input argument</param>
        /// <param name="out">The output target</param>
        internal static void UFunc_Op_Inner_Unary_Flush_Boolean_TypedImpl<C>(NumCIL.Boolean.Not op, NdArray<System.Boolean> in1, NdArray<System.Boolean> @out)
            where C : IUnaryOp<System.Boolean>
        {
            unsafe
            {
                using (var f1 = new Pinner(in1.DataAccessor))
                using (var f2 = new Pinner(@out.DataAccessor))
                {
                    var d1 = (System.Boolean*)f1.ptr;
                    var d2 = (System.Boolean*)f2.ptr;

                    if (@out.Shape.Dimensions.Length == 1)
                    {
                        long totalOps = @out.Shape.Dimensions[0].Length;

                        long ix1 = in1.Shape.Offset;
                        long ix2 = @out.Shape.Offset;

                        long stride1 = in1.Shape.Dimensions[0].Stride;
                        long stride2 = @out.Shape.Dimensions[0].Stride;


                        if (stride1 == stride2 && ix1 == ix2)
                        {
                            //Best case, all are equal, just keep a single counter
                            for (long i = 0; i < totalOps; i++)
                            {
                                d2[ix1] = (System.Boolean)(!(d1[ix1]));
                                ix1 += stride1;
                            }
                        }
                        else
                        {
                            for (long i = 0; i < totalOps; i++)
                            {
                                d2[ix2] = (System.Boolean)(!(d1[ix1]));
                                ix1 += stride1;
                                ix2 += stride2;
                            }
                        }
                    }
                    else if (@out.Shape.Dimensions.Length == 2)
                    {
                        long opsOuter = @out.Shape.Dimensions[0].Length;
                        long opsInner = @out.Shape.Dimensions[1].Length;

                        long ix1 = in1.Shape.Offset;
                        long ix2 = @out.Shape.Offset;

                        long outerStride1 = in1.Shape.Dimensions[0].Stride;
                        long outerStride2 = @out.Shape.Dimensions[0].Stride;

                        long innerStride1 = in1.Shape.Dimensions[1].Stride;
                        long innerStride2 = @out.Shape.Dimensions[1].Stride;

                        outerStride1 -= innerStride1 * in1.Shape.Dimensions[1].Length;
                        outerStride2 -= innerStride2 * @out.Shape.Dimensions[1].Length;

                        for (long i = 0; i < opsOuter; i++)
                        {
                            for (long j = 0; j < opsInner; j++)
                            {
                                d2[ix2] = (System.Boolean)(!(d1[ix1]));
                                ix1 += innerStride1;
                                ix2 += innerStride2;
                            }

                            ix1 += outerStride1;
                            ix2 += outerStride2;
                        }
                    }
                    else
                    {
                        long n = in1.Shape.Dimensions.LongLength - 3;
                        long[] limits = in1.Shape.Dimensions.Where(x => n-- > 0).Select(x => x.Length).ToArray();
                        long[] counters = new long[limits.LongLength];

                        long totalOps = limits.LongLength == 0 ? 1 : limits.Aggregate<long>((a, b) => a * b);

                        //This chunck of variables are used to prevent repeated calculations of offsets
                        long dimIndex0 = 0 + limits.LongLength;
                        long dimIndex1 = 1 + limits.LongLength;
                        long dimIndex2 = 2 + limits.LongLength;

                        long opsOuter = @out.Shape.Dimensions[0 + limits.LongLength].Length;
                        long opsInner = @out.Shape.Dimensions[1 + limits.LongLength].Length;
                        long opsInnerInner = @out.Shape.Dimensions[2 + limits.LongLength].Length;

                        long outerStride1 = in1.Shape.Dimensions[dimIndex0].Stride;
                        long outerStride3 = @out.Shape.Dimensions[dimIndex0].Stride;

                        long innerStride1 = in1.Shape.Dimensions[dimIndex1].Stride;
                        long innerStride3 = @out.Shape.Dimensions[dimIndex1].Stride;

                        long innerInnerStride1 = in1.Shape.Dimensions[dimIndex2].Stride;
                        long innerInnerStride3 = @out.Shape.Dimensions[dimIndex2].Stride;

                        outerStride1 -= innerStride1 * in1.Shape.Dimensions[dimIndex1].Length;
                        outerStride3 -= innerStride3 * @out.Shape.Dimensions[dimIndex1].Length;

                        innerStride1 -= innerInnerStride1 * in1.Shape.Dimensions[dimIndex2].Length;
                        innerStride3 -= innerInnerStride3 * @out.Shape.Dimensions[dimIndex2].Length;

                        for (long outer = 0; outer < totalOps; outer++)
                        {
                            //Get the array offset for the first element in the outer dimension
                            long ix1 = in1.Shape[counters];
                            long ix3 = @out.Shape[counters];


                            for (long i = 0; i < opsOuter; i++)
                            {
                                for (long j = 0; j < opsInner; j++)
                                {
                                    for (long k = 0; k < opsInnerInner; k++)
                                    {
                                        d2[ix3] = (System.Boolean)(!(d1[ix1]));
                                        ix1 += innerInnerStride1;
                                        ix3 += innerInnerStride3;
                                    }

                                    ix1 += innerStride1;
                                    ix3 += innerStride3;
                                }

                                ix1 += outerStride1;
                                ix3 += outerStride3;
                            }

                            if (counters.LongLength > 0)
                            {
                                //Basically a ripple carry adder
                                long p = counters.LongLength - 1;
                                while (++counters[p] == limits[p] && p > 0)
                                {
                                    counters[p] = 0;
                                    p--;
                                }
                            }
                        }
                    }
                }
            }
        }

        /// <summary>
        /// Unsafe implementation of applying a unary operation
        /// </summary>
        /// <typeparam name="C">The type of operation to perform</typeparam>
        /// <param name="op">The operation instance</param>
        /// <param name="scalar">The input scalar argument</param>
        /// <param name="out">The output target</param>
        internal static void UFunc_Op_Inner_Unary_Scalar_Flush_Boolean_TypedImpl<C>(NumCIL.Boolean.Not op, System.Boolean scalar, NdArray<System.Boolean> @out)
            where C : IUnaryOp<System.Boolean>
        {
            unsafe
            {
                using (var f2 = new Pinner(@out.DataAccessor))
                {
                    var d2 = (System.Boolean*)f2.ptr;

                    if (@out.Shape.Dimensions.Length == 1)
                    {
                        long totalOps = @out.Shape.Dimensions[0].Length;
                        long ix2 = @out.Shape.Offset;
                        long stride2 = @out.Shape.Dimensions[0].Stride;

                        for (long i = 0; i < totalOps; i++)
                        {
                            d2[ix2] = (System.Boolean)(!(scalar));
                            ix2 += stride2;
                        }
                    }
                    else if (@out.Shape.Dimensions.Length == 2)
                    {
                        long opsOuter = @out.Shape.Dimensions[0].Length;
                        long opsInner = @out.Shape.Dimensions[1].Length;

                        long ix2 = @out.Shape.Offset;
                        long outerStride2 = @out.Shape.Dimensions[0].Stride;
                        long innerStride2 = @out.Shape.Dimensions[1].Stride;
                        outerStride2 -= innerStride2 * @out.Shape.Dimensions[1].Length;

                        for (long i = 0; i < opsOuter; i++)
                        {
                            for (long j = 0; j < opsInner; j++)
                            {
                                d2[ix2] = (System.Boolean)(!(scalar));
                                ix2 += innerStride2;
                            }

                            ix2 += outerStride2;
                        }
                    }
                    else
                    {
                        long n = @out.Shape.Dimensions.LongLength - 3;
                        long[] limits = @out.Shape.Dimensions.Where(x => n-- > 0).Select(x => x.Length).ToArray();
                        long[] counters = new long[limits.LongLength];

                        long totalOps = limits.LongLength == 0 ? 1 : limits.Aggregate<long>((a, b) => a * b);

                        //This chunck of variables are used to prevent repeated calculations of offsets
                        long dimIndex0 = 0 + limits.LongLength;
                        long dimIndex1 = 1 + limits.LongLength;
                        long dimIndex2 = 2 + limits.LongLength;

                        long opsOuter = @out.Shape.Dimensions[0 + limits.LongLength].Length;
                        long opsInner = @out.Shape.Dimensions[1 + limits.LongLength].Length;
                        long opsInnerInner = @out.Shape.Dimensions[2 + limits.LongLength].Length;

                        long outerStride3 = @out.Shape.Dimensions[dimIndex0].Stride;
                        long innerStride3 = @out.Shape.Dimensions[dimIndex1].Stride;
                        long innerInnerStride3 = @out.Shape.Dimensions[dimIndex2].Stride;
                        outerStride3 -= innerStride3 * @out.Shape.Dimensions[dimIndex1].Length;
                        innerStride3 -= innerInnerStride3 * @out.Shape.Dimensions[dimIndex2].Length;

                        for (long outer = 0; outer < totalOps; outer++)
                        {
                            //Get the array offset for the first element in the outer dimension
                            long ix3 = @out.Shape[counters];

                            for (long i = 0; i < opsOuter; i++)
                            {
                                for (long j = 0; j < opsInner; j++)
                                {
                                    for (long k = 0; k < opsInnerInner; k++)
                                    {
                                        d2[ix3] = (System.Boolean)(!(scalar));
                                        ix3 += innerInnerStride3;
                                    }

                                    ix3 += innerStride3;
                                }

                                ix3 += outerStride3;
                            }

                            if (counters.LongLength > 0)
                            {
                                //Basically a ripple carry adder
                                long p = counters.LongLength - 1;
                                while (++counters[p] == limits[p] && p > 0)
                                {
                                    counters[p] = 0;
                                    p--;
                                }
                            }
                        }
                    }
                }
            }
        }
        /// <summary>
        /// Unsafe implementation of applying a unary operation
        /// </summary>
        /// <typeparam name="C">The type of operation to perform</typeparam>
        /// <param name="op">The operation instance</param>
        /// <param name="in1">The input argument</param>
        /// <param name="out">The output target</param>
        internal static void UFunc_Op_Inner_Unary_Flush_SByte_TypedImpl<C>(NumCIL.Int8.Sign op, NdArray<System.SByte> in1, NdArray<System.SByte> @out)
            where C : IUnaryOp<System.SByte>
        {
            unsafe
            {
                using (var f1 = new Pinner(in1.DataAccessor))
                using (var f2 = new Pinner(@out.DataAccessor))
                {
                    var d1 = (System.SByte*)f1.ptr;
                    var d2 = (System.SByte*)f2.ptr;

                    if (@out.Shape.Dimensions.Length == 1)
                    {
                        long totalOps = @out.Shape.Dimensions[0].Length;

                        long ix1 = in1.Shape.Offset;
                        long ix2 = @out.Shape.Offset;

                        long stride1 = in1.Shape.Dimensions[0].Stride;
                        long stride2 = @out.Shape.Dimensions[0].Stride;


                        if (stride1 == stride2 && ix1 == ix2)
                        {
                            //Best case, all are equal, just keep a single counter
                            for (long i = 0; i < totalOps; i++)
                            {
                                d2[ix1] = (System.SByte)(Math.Sign(d1[ix1]));
                                ix1 += stride1;
                            }
                        }
                        else
                        {
                            for (long i = 0; i < totalOps; i++)
                            {
                                d2[ix2] = (System.SByte)(Math.Sign(d1[ix1]));
                                ix1 += stride1;
                                ix2 += stride2;
                            }
                        }
                    }
                    else if (@out.Shape.Dimensions.Length == 2)
                    {
                        long opsOuter = @out.Shape.Dimensions[0].Length;
                        long opsInner = @out.Shape.Dimensions[1].Length;

                        long ix1 = in1.Shape.Offset;
                        long ix2 = @out.Shape.Offset;

                        long outerStride1 = in1.Shape.Dimensions[0].Stride;
                        long outerStride2 = @out.Shape.Dimensions[0].Stride;

                        long innerStride1 = in1.Shape.Dimensions[1].Stride;
                        long innerStride2 = @out.Shape.Dimensions[1].Stride;

                        outerStride1 -= innerStride1 * in1.Shape.Dimensions[1].Length;
                        outerStride2 -= innerStride2 * @out.Shape.Dimensions[1].Length;

                        for (long i = 0; i < opsOuter; i++)
                        {
                            for (long j = 0; j < opsInner; j++)
                            {
                                d2[ix2] = (System.SByte)(Math.Sign(d1[ix1]));
                                ix1 += innerStride1;
                                ix2 += innerStride2;
                            }

                            ix1 += outerStride1;
                            ix2 += outerStride2;
                        }
                    }
                    else
                    {
                        long n = in1.Shape.Dimensions.LongLength - 3;
                        long[] limits = in1.Shape.Dimensions.Where(x => n-- > 0).Select(x => x.Length).ToArray();
                        long[] counters = new long[limits.LongLength];

                        long totalOps = limits.LongLength == 0 ? 1 : limits.Aggregate<long>((a, b) => a * b);

                        //This chunck of variables are used to prevent repeated calculations of offsets
                        long dimIndex0 = 0 + limits.LongLength;
                        long dimIndex1 = 1 + limits.LongLength;
                        long dimIndex2 = 2 + limits.LongLength;

                        long opsOuter = @out.Shape.Dimensions[0 + limits.LongLength].Length;
                        long opsInner = @out.Shape.Dimensions[1 + limits.LongLength].Length;
                        long opsInnerInner = @out.Shape.Dimensions[2 + limits.LongLength].Length;

                        long outerStride1 = in1.Shape.Dimensions[dimIndex0].Stride;
                        long outerStride3 = @out.Shape.Dimensions[dimIndex0].Stride;

                        long innerStride1 = in1.Shape.Dimensions[dimIndex1].Stride;
                        long innerStride3 = @out.Shape.Dimensions[dimIndex1].Stride;

                        long innerInnerStride1 = in1.Shape.Dimensions[dimIndex2].Stride;
                        long innerInnerStride3 = @out.Shape.Dimensions[dimIndex2].Stride;

                        outerStride1 -= innerStride1 * in1.Shape.Dimensions[dimIndex1].Length;
                        outerStride3 -= innerStride3 * @out.Shape.Dimensions[dimIndex1].Length;

                        innerStride1 -= innerInnerStride1 * in1.Shape.Dimensions[dimIndex2].Length;
                        innerStride3 -= innerInnerStride3 * @out.Shape.Dimensions[dimIndex2].Length;

                        for (long outer = 0; outer < totalOps; outer++)
                        {
                            //Get the array offset for the first element in the outer dimension
                            long ix1 = in1.Shape[counters];
                            long ix3 = @out.Shape[counters];


                            for (long i = 0; i < opsOuter; i++)
                            {
                                for (long j = 0; j < opsInner; j++)
                                {
                                    for (long k = 0; k < opsInnerInner; k++)
                                    {
                                        d2[ix3] = (System.SByte)(Math.Sign(d1[ix1]));
                                        ix1 += innerInnerStride1;
                                        ix3 += innerInnerStride3;
                                    }

                                    ix1 += innerStride1;
                                    ix3 += innerStride3;
                                }

                                ix1 += outerStride1;
                                ix3 += outerStride3;
                            }

                            if (counters.LongLength > 0)
                            {
                                //Basically a ripple carry adder
                                long p = counters.LongLength - 1;
                                while (++counters[p] == limits[p] && p > 0)
                                {
                                    counters[p] = 0;
                                    p--;
                                }
                            }
                        }
                    }
                }
            }
        }

        /// <summary>
        /// Unsafe implementation of applying a unary operation
        /// </summary>
        /// <typeparam name="C">The type of operation to perform</typeparam>
        /// <param name="op">The operation instance</param>
        /// <param name="scalar">The input scalar argument</param>
        /// <param name="out">The output target</param>
        internal static void UFunc_Op_Inner_Unary_Scalar_Flush_SByte_TypedImpl<C>(NumCIL.Int8.Sign op, System.SByte scalar, NdArray<System.SByte> @out)
            where C : IUnaryOp<System.SByte>
        {
            unsafe
            {
                using (var f2 = new Pinner(@out.DataAccessor))
                {
                    var d2 = (System.SByte*)f2.ptr;

                    if (@out.Shape.Dimensions.Length == 1)
                    {
                        long totalOps = @out.Shape.Dimensions[0].Length;
                        long ix2 = @out.Shape.Offset;
                        long stride2 = @out.Shape.Dimensions[0].Stride;

                        for (long i = 0; i < totalOps; i++)
                        {
                            d2[ix2] = (System.SByte)(Math.Sign(scalar));
                            ix2 += stride2;
                        }
                    }
                    else if (@out.Shape.Dimensions.Length == 2)
                    {
                        long opsOuter = @out.Shape.Dimensions[0].Length;
                        long opsInner = @out.Shape.Dimensions[1].Length;

                        long ix2 = @out.Shape.Offset;
                        long outerStride2 = @out.Shape.Dimensions[0].Stride;
                        long innerStride2 = @out.Shape.Dimensions[1].Stride;
                        outerStride2 -= innerStride2 * @out.Shape.Dimensions[1].Length;

                        for (long i = 0; i < opsOuter; i++)
                        {
                            for (long j = 0; j < opsInner; j++)
                            {
                                d2[ix2] = (System.SByte)(Math.Sign(scalar));
                                ix2 += innerStride2;
                            }

                            ix2 += outerStride2;
                        }
                    }
                    else
                    {
                        long n = @out.Shape.Dimensions.LongLength - 3;
                        long[] limits = @out.Shape.Dimensions.Where(x => n-- > 0).Select(x => x.Length).ToArray();
                        long[] counters = new long[limits.LongLength];

                        long totalOps = limits.LongLength == 0 ? 1 : limits.Aggregate<long>((a, b) => a * b);

                        //This chunck of variables are used to prevent repeated calculations of offsets
                        long dimIndex0 = 0 + limits.LongLength;
                        long dimIndex1 = 1 + limits.LongLength;
                        long dimIndex2 = 2 + limits.LongLength;

                        long opsOuter = @out.Shape.Dimensions[0 + limits.LongLength].Length;
                        long opsInner = @out.Shape.Dimensions[1 + limits.LongLength].Length;
                        long opsInnerInner = @out.Shape.Dimensions[2 + limits.LongLength].Length;

                        long outerStride3 = @out.Shape.Dimensions[dimIndex0].Stride;
                        long innerStride3 = @out.Shape.Dimensions[dimIndex1].Stride;
                        long innerInnerStride3 = @out.Shape.Dimensions[dimIndex2].Stride;
                        outerStride3 -= innerStride3 * @out.Shape.Dimensions[dimIndex1].Length;
                        innerStride3 -= innerInnerStride3 * @out.Shape.Dimensions[dimIndex2].Length;

                        for (long outer = 0; outer < totalOps; outer++)
                        {
                            //Get the array offset for the first element in the outer dimension
                            long ix3 = @out.Shape[counters];

                            for (long i = 0; i < opsOuter; i++)
                            {
                                for (long j = 0; j < opsInner; j++)
                                {
                                    for (long k = 0; k < opsInnerInner; k++)
                                    {
                                        d2[ix3] = (System.SByte)(Math.Sign(scalar));
                                        ix3 += innerInnerStride3;
                                    }

                                    ix3 += innerStride3;
                                }

                                ix3 += outerStride3;
                            }

                            if (counters.LongLength > 0)
                            {
                                //Basically a ripple carry adder
                                long p = counters.LongLength - 1;
                                while (++counters[p] == limits[p] && p > 0)
                                {
                                    counters[p] = 0;
                                    p--;
                                }
                            }
                        }
                    }
                }
            }
        }
        /// <summary>
        /// Unsafe implementation of applying a unary operation
        /// </summary>
        /// <typeparam name="C">The type of operation to perform</typeparam>
        /// <param name="op">The operation instance</param>
        /// <param name="in1">The input argument</param>
        /// <param name="out">The output target</param>
        internal static void UFunc_Op_Inner_Unary_Flush_Int16_TypedImpl<C>(NumCIL.Int16.Sign op, NdArray<System.Int16> in1, NdArray<System.Int16> @out)
            where C : IUnaryOp<System.Int16>
        {
            unsafe
            {
                using (var f1 = new Pinner(in1.DataAccessor))
                using (var f2 = new Pinner(@out.DataAccessor))
                {
                    var d1 = (System.Int16*)f1.ptr;
                    var d2 = (System.Int16*)f2.ptr;

                    if (@out.Shape.Dimensions.Length == 1)
                    {
                        long totalOps = @out.Shape.Dimensions[0].Length;

                        long ix1 = in1.Shape.Offset;
                        long ix2 = @out.Shape.Offset;

                        long stride1 = in1.Shape.Dimensions[0].Stride;
                        long stride2 = @out.Shape.Dimensions[0].Stride;


                        if (stride1 == stride2 && ix1 == ix2)
                        {
                            //Best case, all are equal, just keep a single counter
                            for (long i = 0; i < totalOps; i++)
                            {
                                d2[ix1] = (System.Int16)(Math.Sign(d1[ix1]));
                                ix1 += stride1;
                            }
                        }
                        else
                        {
                            for (long i = 0; i < totalOps; i++)
                            {
                                d2[ix2] = (System.Int16)(Math.Sign(d1[ix1]));
                                ix1 += stride1;
                                ix2 += stride2;
                            }
                        }
                    }
                    else if (@out.Shape.Dimensions.Length == 2)
                    {
                        long opsOuter = @out.Shape.Dimensions[0].Length;
                        long opsInner = @out.Shape.Dimensions[1].Length;

                        long ix1 = in1.Shape.Offset;
                        long ix2 = @out.Shape.Offset;

                        long outerStride1 = in1.Shape.Dimensions[0].Stride;
                        long outerStride2 = @out.Shape.Dimensions[0].Stride;

                        long innerStride1 = in1.Shape.Dimensions[1].Stride;
                        long innerStride2 = @out.Shape.Dimensions[1].Stride;

                        outerStride1 -= innerStride1 * in1.Shape.Dimensions[1].Length;
                        outerStride2 -= innerStride2 * @out.Shape.Dimensions[1].Length;

                        for (long i = 0; i < opsOuter; i++)
                        {
                            for (long j = 0; j < opsInner; j++)
                            {
                                d2[ix2] = (System.Int16)(Math.Sign(d1[ix1]));
                                ix1 += innerStride1;
                                ix2 += innerStride2;
                            }

                            ix1 += outerStride1;
                            ix2 += outerStride2;
                        }
                    }
                    else
                    {
                        long n = in1.Shape.Dimensions.LongLength - 3;
                        long[] limits = in1.Shape.Dimensions.Where(x => n-- > 0).Select(x => x.Length).ToArray();
                        long[] counters = new long[limits.LongLength];

                        long totalOps = limits.LongLength == 0 ? 1 : limits.Aggregate<long>((a, b) => a * b);

                        //This chunck of variables are used to prevent repeated calculations of offsets
                        long dimIndex0 = 0 + limits.LongLength;
                        long dimIndex1 = 1 + limits.LongLength;
                        long dimIndex2 = 2 + limits.LongLength;

                        long opsOuter = @out.Shape.Dimensions[0 + limits.LongLength].Length;
                        long opsInner = @out.Shape.Dimensions[1 + limits.LongLength].Length;
                        long opsInnerInner = @out.Shape.Dimensions[2 + limits.LongLength].Length;

                        long outerStride1 = in1.Shape.Dimensions[dimIndex0].Stride;
                        long outerStride3 = @out.Shape.Dimensions[dimIndex0].Stride;

                        long innerStride1 = in1.Shape.Dimensions[dimIndex1].Stride;
                        long innerStride3 = @out.Shape.Dimensions[dimIndex1].Stride;

                        long innerInnerStride1 = in1.Shape.Dimensions[dimIndex2].Stride;
                        long innerInnerStride3 = @out.Shape.Dimensions[dimIndex2].Stride;

                        outerStride1 -= innerStride1 * in1.Shape.Dimensions[dimIndex1].Length;
                        outerStride3 -= innerStride3 * @out.Shape.Dimensions[dimIndex1].Length;

                        innerStride1 -= innerInnerStride1 * in1.Shape.Dimensions[dimIndex2].Length;
                        innerStride3 -= innerInnerStride3 * @out.Shape.Dimensions[dimIndex2].Length;

                        for (long outer = 0; outer < totalOps; outer++)
                        {
                            //Get the array offset for the first element in the outer dimension
                            long ix1 = in1.Shape[counters];
                            long ix3 = @out.Shape[counters];


                            for (long i = 0; i < opsOuter; i++)
                            {
                                for (long j = 0; j < opsInner; j++)
                                {
                                    for (long k = 0; k < opsInnerInner; k++)
                                    {
                                        d2[ix3] = (System.Int16)(Math.Sign(d1[ix1]));
                                        ix1 += innerInnerStride1;
                                        ix3 += innerInnerStride3;
                                    }

                                    ix1 += innerStride1;
                                    ix3 += innerStride3;
                                }

                                ix1 += outerStride1;
                                ix3 += outerStride3;
                            }

                            if (counters.LongLength > 0)
                            {
                                //Basically a ripple carry adder
                                long p = counters.LongLength - 1;
                                while (++counters[p] == limits[p] && p > 0)
                                {
                                    counters[p] = 0;
                                    p--;
                                }
                            }
                        }
                    }
                }
            }
        }

        /// <summary>
        /// Unsafe implementation of applying a unary operation
        /// </summary>
        /// <typeparam name="C">The type of operation to perform</typeparam>
        /// <param name="op">The operation instance</param>
        /// <param name="scalar">The input scalar argument</param>
        /// <param name="out">The output target</param>
        internal static void UFunc_Op_Inner_Unary_Scalar_Flush_Int16_TypedImpl<C>(NumCIL.Int16.Sign op, System.Int16 scalar, NdArray<System.Int16> @out)
            where C : IUnaryOp<System.Int16>
        {
            unsafe
            {
                using (var f2 = new Pinner(@out.DataAccessor))
                {
                    var d2 = (System.Int16*)f2.ptr;

                    if (@out.Shape.Dimensions.Length == 1)
                    {
                        long totalOps = @out.Shape.Dimensions[0].Length;
                        long ix2 = @out.Shape.Offset;
                        long stride2 = @out.Shape.Dimensions[0].Stride;

                        for (long i = 0; i < totalOps; i++)
                        {
                            d2[ix2] = (System.Int16)(Math.Sign(scalar));
                            ix2 += stride2;
                        }
                    }
                    else if (@out.Shape.Dimensions.Length == 2)
                    {
                        long opsOuter = @out.Shape.Dimensions[0].Length;
                        long opsInner = @out.Shape.Dimensions[1].Length;

                        long ix2 = @out.Shape.Offset;
                        long outerStride2 = @out.Shape.Dimensions[0].Stride;
                        long innerStride2 = @out.Shape.Dimensions[1].Stride;
                        outerStride2 -= innerStride2 * @out.Shape.Dimensions[1].Length;

                        for (long i = 0; i < opsOuter; i++)
                        {
                            for (long j = 0; j < opsInner; j++)
                            {
                                d2[ix2] = (System.Int16)(Math.Sign(scalar));
                                ix2 += innerStride2;
                            }

                            ix2 += outerStride2;
                        }
                    }
                    else
                    {
                        long n = @out.Shape.Dimensions.LongLength - 3;
                        long[] limits = @out.Shape.Dimensions.Where(x => n-- > 0).Select(x => x.Length).ToArray();
                        long[] counters = new long[limits.LongLength];

                        long totalOps = limits.LongLength == 0 ? 1 : limits.Aggregate<long>((a, b) => a * b);

                        //This chunck of variables are used to prevent repeated calculations of offsets
                        long dimIndex0 = 0 + limits.LongLength;
                        long dimIndex1 = 1 + limits.LongLength;
                        long dimIndex2 = 2 + limits.LongLength;

                        long opsOuter = @out.Shape.Dimensions[0 + limits.LongLength].Length;
                        long opsInner = @out.Shape.Dimensions[1 + limits.LongLength].Length;
                        long opsInnerInner = @out.Shape.Dimensions[2 + limits.LongLength].Length;

                        long outerStride3 = @out.Shape.Dimensions[dimIndex0].Stride;
                        long innerStride3 = @out.Shape.Dimensions[dimIndex1].Stride;
                        long innerInnerStride3 = @out.Shape.Dimensions[dimIndex2].Stride;
                        outerStride3 -= innerStride3 * @out.Shape.Dimensions[dimIndex1].Length;
                        innerStride3 -= innerInnerStride3 * @out.Shape.Dimensions[dimIndex2].Length;

                        for (long outer = 0; outer < totalOps; outer++)
                        {
                            //Get the array offset for the first element in the outer dimension
                            long ix3 = @out.Shape[counters];

                            for (long i = 0; i < opsOuter; i++)
                            {
                                for (long j = 0; j < opsInner; j++)
                                {
                                    for (long k = 0; k < opsInnerInner; k++)
                                    {
                                        d2[ix3] = (System.Int16)(Math.Sign(scalar));
                                        ix3 += innerInnerStride3;
                                    }

                                    ix3 += innerStride3;
                                }

                                ix3 += outerStride3;
                            }

                            if (counters.LongLength > 0)
                            {
                                //Basically a ripple carry adder
                                long p = counters.LongLength - 1;
                                while (++counters[p] == limits[p] && p > 0)
                                {
                                    counters[p] = 0;
                                    p--;
                                }
                            }
                        }
                    }
                }
            }
        }
        /// <summary>
        /// Unsafe implementation of applying a unary operation
        /// </summary>
        /// <typeparam name="C">The type of operation to perform</typeparam>
        /// <param name="op">The operation instance</param>
        /// <param name="in1">The input argument</param>
        /// <param name="out">The output target</param>
        internal static void UFunc_Op_Inner_Unary_Flush_Int32_TypedImpl<C>(NumCIL.Int32.Sign op, NdArray<System.Int32> in1, NdArray<System.Int32> @out)
            where C : IUnaryOp<System.Int32>
        {
            unsafe
            {
                using (var f1 = new Pinner(in1.DataAccessor))
                using (var f2 = new Pinner(@out.DataAccessor))
                {
                    var d1 = (System.Int32*)f1.ptr;
                    var d2 = (System.Int32*)f2.ptr;

                    if (@out.Shape.Dimensions.Length == 1)
                    {
                        long totalOps = @out.Shape.Dimensions[0].Length;

                        long ix1 = in1.Shape.Offset;
                        long ix2 = @out.Shape.Offset;

                        long stride1 = in1.Shape.Dimensions[0].Stride;
                        long stride2 = @out.Shape.Dimensions[0].Stride;


                        if (stride1 == stride2 && ix1 == ix2)
                        {
                            //Best case, all are equal, just keep a single counter
                            for (long i = 0; i < totalOps; i++)
                            {
                                d2[ix1] = (System.Int32)(Math.Sign(d1[ix1]));
                                ix1 += stride1;
                            }
                        }
                        else
                        {
                            for (long i = 0; i < totalOps; i++)
                            {
                                d2[ix2] = (System.Int32)(Math.Sign(d1[ix1]));
                                ix1 += stride1;
                                ix2 += stride2;
                            }
                        }
                    }
                    else if (@out.Shape.Dimensions.Length == 2)
                    {
                        long opsOuter = @out.Shape.Dimensions[0].Length;
                        long opsInner = @out.Shape.Dimensions[1].Length;

                        long ix1 = in1.Shape.Offset;
                        long ix2 = @out.Shape.Offset;

                        long outerStride1 = in1.Shape.Dimensions[0].Stride;
                        long outerStride2 = @out.Shape.Dimensions[0].Stride;

                        long innerStride1 = in1.Shape.Dimensions[1].Stride;
                        long innerStride2 = @out.Shape.Dimensions[1].Stride;

                        outerStride1 -= innerStride1 * in1.Shape.Dimensions[1].Length;
                        outerStride2 -= innerStride2 * @out.Shape.Dimensions[1].Length;

                        for (long i = 0; i < opsOuter; i++)
                        {
                            for (long j = 0; j < opsInner; j++)
                            {
                                d2[ix2] = (System.Int32)(Math.Sign(d1[ix1]));
                                ix1 += innerStride1;
                                ix2 += innerStride2;
                            }

                            ix1 += outerStride1;
                            ix2 += outerStride2;
                        }
                    }
                    else
                    {
                        long n = in1.Shape.Dimensions.LongLength - 3;
                        long[] limits = in1.Shape.Dimensions.Where(x => n-- > 0).Select(x => x.Length).ToArray();
                        long[] counters = new long[limits.LongLength];

                        long totalOps = limits.LongLength == 0 ? 1 : limits.Aggregate<long>((a, b) => a * b);

                        //This chunck of variables are used to prevent repeated calculations of offsets
                        long dimIndex0 = 0 + limits.LongLength;
                        long dimIndex1 = 1 + limits.LongLength;
                        long dimIndex2 = 2 + limits.LongLength;

                        long opsOuter = @out.Shape.Dimensions[0 + limits.LongLength].Length;
                        long opsInner = @out.Shape.Dimensions[1 + limits.LongLength].Length;
                        long opsInnerInner = @out.Shape.Dimensions[2 + limits.LongLength].Length;

                        long outerStride1 = in1.Shape.Dimensions[dimIndex0].Stride;
                        long outerStride3 = @out.Shape.Dimensions[dimIndex0].Stride;

                        long innerStride1 = in1.Shape.Dimensions[dimIndex1].Stride;
                        long innerStride3 = @out.Shape.Dimensions[dimIndex1].Stride;

                        long innerInnerStride1 = in1.Shape.Dimensions[dimIndex2].Stride;
                        long innerInnerStride3 = @out.Shape.Dimensions[dimIndex2].Stride;

                        outerStride1 -= innerStride1 * in1.Shape.Dimensions[dimIndex1].Length;
                        outerStride3 -= innerStride3 * @out.Shape.Dimensions[dimIndex1].Length;

                        innerStride1 -= innerInnerStride1 * in1.Shape.Dimensions[dimIndex2].Length;
                        innerStride3 -= innerInnerStride3 * @out.Shape.Dimensions[dimIndex2].Length;

                        for (long outer = 0; outer < totalOps; outer++)
                        {
                            //Get the array offset for the first element in the outer dimension
                            long ix1 = in1.Shape[counters];
                            long ix3 = @out.Shape[counters];


                            for (long i = 0; i < opsOuter; i++)
                            {
                                for (long j = 0; j < opsInner; j++)
                                {
                                    for (long k = 0; k < opsInnerInner; k++)
                                    {
                                        d2[ix3] = (System.Int32)(Math.Sign(d1[ix1]));
                                        ix1 += innerInnerStride1;
                                        ix3 += innerInnerStride3;
                                    }

                                    ix1 += innerStride1;
                                    ix3 += innerStride3;
                                }

                                ix1 += outerStride1;
                                ix3 += outerStride3;
                            }

                            if (counters.LongLength > 0)
                            {
                                //Basically a ripple carry adder
                                long p = counters.LongLength - 1;
                                while (++counters[p] == limits[p] && p > 0)
                                {
                                    counters[p] = 0;
                                    p--;
                                }
                            }
                        }
                    }
                }
            }
        }

        /// <summary>
        /// Unsafe implementation of applying a unary operation
        /// </summary>
        /// <typeparam name="C">The type of operation to perform</typeparam>
        /// <param name="op">The operation instance</param>
        /// <param name="scalar">The input scalar argument</param>
        /// <param name="out">The output target</param>
        internal static void UFunc_Op_Inner_Unary_Scalar_Flush_Int32_TypedImpl<C>(NumCIL.Int32.Sign op, System.Int32 scalar, NdArray<System.Int32> @out)
            where C : IUnaryOp<System.Int32>
        {
            unsafe
            {
                using (var f2 = new Pinner(@out.DataAccessor))
                {
                    var d2 = (System.Int32*)f2.ptr;

                    if (@out.Shape.Dimensions.Length == 1)
                    {
                        long totalOps = @out.Shape.Dimensions[0].Length;
                        long ix2 = @out.Shape.Offset;
                        long stride2 = @out.Shape.Dimensions[0].Stride;

                        for (long i = 0; i < totalOps; i++)
                        {
                            d2[ix2] = (System.Int32)(Math.Sign(scalar));
                            ix2 += stride2;
                        }
                    }
                    else if (@out.Shape.Dimensions.Length == 2)
                    {
                        long opsOuter = @out.Shape.Dimensions[0].Length;
                        long opsInner = @out.Shape.Dimensions[1].Length;

                        long ix2 = @out.Shape.Offset;
                        long outerStride2 = @out.Shape.Dimensions[0].Stride;
                        long innerStride2 = @out.Shape.Dimensions[1].Stride;
                        outerStride2 -= innerStride2 * @out.Shape.Dimensions[1].Length;

                        for (long i = 0; i < opsOuter; i++)
                        {
                            for (long j = 0; j < opsInner; j++)
                            {
                                d2[ix2] = (System.Int32)(Math.Sign(scalar));
                                ix2 += innerStride2;
                            }

                            ix2 += outerStride2;
                        }
                    }
                    else
                    {
                        long n = @out.Shape.Dimensions.LongLength - 3;
                        long[] limits = @out.Shape.Dimensions.Where(x => n-- > 0).Select(x => x.Length).ToArray();
                        long[] counters = new long[limits.LongLength];

                        long totalOps = limits.LongLength == 0 ? 1 : limits.Aggregate<long>((a, b) => a * b);

                        //This chunck of variables are used to prevent repeated calculations of offsets
                        long dimIndex0 = 0 + limits.LongLength;
                        long dimIndex1 = 1 + limits.LongLength;
                        long dimIndex2 = 2 + limits.LongLength;

                        long opsOuter = @out.Shape.Dimensions[0 + limits.LongLength].Length;
                        long opsInner = @out.Shape.Dimensions[1 + limits.LongLength].Length;
                        long opsInnerInner = @out.Shape.Dimensions[2 + limits.LongLength].Length;

                        long outerStride3 = @out.Shape.Dimensions[dimIndex0].Stride;
                        long innerStride3 = @out.Shape.Dimensions[dimIndex1].Stride;
                        long innerInnerStride3 = @out.Shape.Dimensions[dimIndex2].Stride;
                        outerStride3 -= innerStride3 * @out.Shape.Dimensions[dimIndex1].Length;
                        innerStride3 -= innerInnerStride3 * @out.Shape.Dimensions[dimIndex2].Length;

                        for (long outer = 0; outer < totalOps; outer++)
                        {
                            //Get the array offset for the first element in the outer dimension
                            long ix3 = @out.Shape[counters];

                            for (long i = 0; i < opsOuter; i++)
                            {
                                for (long j = 0; j < opsInner; j++)
                                {
                                    for (long k = 0; k < opsInnerInner; k++)
                                    {
                                        d2[ix3] = (System.Int32)(Math.Sign(scalar));
                                        ix3 += innerInnerStride3;
                                    }

                                    ix3 += innerStride3;
                                }

                                ix3 += outerStride3;
                            }

                            if (counters.LongLength > 0)
                            {
                                //Basically a ripple carry adder
                                long p = counters.LongLength - 1;
                                while (++counters[p] == limits[p] && p > 0)
                                {
                                    counters[p] = 0;
                                    p--;
                                }
                            }
                        }
                    }
                }
            }
        }
        /// <summary>
        /// Unsafe implementation of applying a unary operation
        /// </summary>
        /// <typeparam name="C">The type of operation to perform</typeparam>
        /// <param name="op">The operation instance</param>
        /// <param name="in1">The input argument</param>
        /// <param name="out">The output target</param>
        internal static void UFunc_Op_Inner_Unary_Flush_Int64_TypedImpl<C>(NumCIL.Int64.Sign op, NdArray<System.Int64> in1, NdArray<System.Int64> @out)
            where C : IUnaryOp<System.Int64>
        {
            unsafe
            {
                using (var f1 = new Pinner(in1.DataAccessor))
                using (var f2 = new Pinner(@out.DataAccessor))
                {
                    var d1 = (System.Int64*)f1.ptr;
                    var d2 = (System.Int64*)f2.ptr;

                    if (@out.Shape.Dimensions.Length == 1)
                    {
                        long totalOps = @out.Shape.Dimensions[0].Length;

                        long ix1 = in1.Shape.Offset;
                        long ix2 = @out.Shape.Offset;

                        long stride1 = in1.Shape.Dimensions[0].Stride;
                        long stride2 = @out.Shape.Dimensions[0].Stride;


                        if (stride1 == stride2 && ix1 == ix2)
                        {
                            //Best case, all are equal, just keep a single counter
                            for (long i = 0; i < totalOps; i++)
                            {
                                d2[ix1] = (System.Int64)(Math.Sign(d1[ix1]));
                                ix1 += stride1;
                            }
                        }
                        else
                        {
                            for (long i = 0; i < totalOps; i++)
                            {
                                d2[ix2] = (System.Int64)(Math.Sign(d1[ix1]));
                                ix1 += stride1;
                                ix2 += stride2;
                            }
                        }
                    }
                    else if (@out.Shape.Dimensions.Length == 2)
                    {
                        long opsOuter = @out.Shape.Dimensions[0].Length;
                        long opsInner = @out.Shape.Dimensions[1].Length;

                        long ix1 = in1.Shape.Offset;
                        long ix2 = @out.Shape.Offset;

                        long outerStride1 = in1.Shape.Dimensions[0].Stride;
                        long outerStride2 = @out.Shape.Dimensions[0].Stride;

                        long innerStride1 = in1.Shape.Dimensions[1].Stride;
                        long innerStride2 = @out.Shape.Dimensions[1].Stride;

                        outerStride1 -= innerStride1 * in1.Shape.Dimensions[1].Length;
                        outerStride2 -= innerStride2 * @out.Shape.Dimensions[1].Length;

                        for (long i = 0; i < opsOuter; i++)
                        {
                            for (long j = 0; j < opsInner; j++)
                            {
                                d2[ix2] = (System.Int64)(Math.Sign(d1[ix1]));
                                ix1 += innerStride1;
                                ix2 += innerStride2;
                            }

                            ix1 += outerStride1;
                            ix2 += outerStride2;
                        }
                    }
                    else
                    {
                        long n = in1.Shape.Dimensions.LongLength - 3;
                        long[] limits = in1.Shape.Dimensions.Where(x => n-- > 0).Select(x => x.Length).ToArray();
                        long[] counters = new long[limits.LongLength];

                        long totalOps = limits.LongLength == 0 ? 1 : limits.Aggregate<long>((a, b) => a * b);

                        //This chunck of variables are used to prevent repeated calculations of offsets
                        long dimIndex0 = 0 + limits.LongLength;
                        long dimIndex1 = 1 + limits.LongLength;
                        long dimIndex2 = 2 + limits.LongLength;

                        long opsOuter = @out.Shape.Dimensions[0 + limits.LongLength].Length;
                        long opsInner = @out.Shape.Dimensions[1 + limits.LongLength].Length;
                        long opsInnerInner = @out.Shape.Dimensions[2 + limits.LongLength].Length;

                        long outerStride1 = in1.Shape.Dimensions[dimIndex0].Stride;
                        long outerStride3 = @out.Shape.Dimensions[dimIndex0].Stride;

                        long innerStride1 = in1.Shape.Dimensions[dimIndex1].Stride;
                        long innerStride3 = @out.Shape.Dimensions[dimIndex1].Stride;

                        long innerInnerStride1 = in1.Shape.Dimensions[dimIndex2].Stride;
                        long innerInnerStride3 = @out.Shape.Dimensions[dimIndex2].Stride;

                        outerStride1 -= innerStride1 * in1.Shape.Dimensions[dimIndex1].Length;
                        outerStride3 -= innerStride3 * @out.Shape.Dimensions[dimIndex1].Length;

                        innerStride1 -= innerInnerStride1 * in1.Shape.Dimensions[dimIndex2].Length;
                        innerStride3 -= innerInnerStride3 * @out.Shape.Dimensions[dimIndex2].Length;

                        for (long outer = 0; outer < totalOps; outer++)
                        {
                            //Get the array offset for the first element in the outer dimension
                            long ix1 = in1.Shape[counters];
                            long ix3 = @out.Shape[counters];


                            for (long i = 0; i < opsOuter; i++)
                            {
                                for (long j = 0; j < opsInner; j++)
                                {
                                    for (long k = 0; k < opsInnerInner; k++)
                                    {
                                        d2[ix3] = (System.Int64)(Math.Sign(d1[ix1]));
                                        ix1 += innerInnerStride1;
                                        ix3 += innerInnerStride3;
                                    }

                                    ix1 += innerStride1;
                                    ix3 += innerStride3;
                                }

                                ix1 += outerStride1;
                                ix3 += outerStride3;
                            }

                            if (counters.LongLength > 0)
                            {
                                //Basically a ripple carry adder
                                long p = counters.LongLength - 1;
                                while (++counters[p] == limits[p] && p > 0)
                                {
                                    counters[p] = 0;
                                    p--;
                                }
                            }
                        }
                    }
                }
            }
        }

        /// <summary>
        /// Unsafe implementation of applying a unary operation
        /// </summary>
        /// <typeparam name="C">The type of operation to perform</typeparam>
        /// <param name="op">The operation instance</param>
        /// <param name="scalar">The input scalar argument</param>
        /// <param name="out">The output target</param>
        internal static void UFunc_Op_Inner_Unary_Scalar_Flush_Int64_TypedImpl<C>(NumCIL.Int64.Sign op, System.Int64 scalar, NdArray<System.Int64> @out)
            where C : IUnaryOp<System.Int64>
        {
            unsafe
            {
                using (var f2 = new Pinner(@out.DataAccessor))
                {
                    var d2 = (System.Int64*)f2.ptr;

                    if (@out.Shape.Dimensions.Length == 1)
                    {
                        long totalOps = @out.Shape.Dimensions[0].Length;
                        long ix2 = @out.Shape.Offset;
                        long stride2 = @out.Shape.Dimensions[0].Stride;

                        for (long i = 0; i < totalOps; i++)
                        {
                            d2[ix2] = (System.Int64)(Math.Sign(scalar));
                            ix2 += stride2;
                        }
                    }
                    else if (@out.Shape.Dimensions.Length == 2)
                    {
                        long opsOuter = @out.Shape.Dimensions[0].Length;
                        long opsInner = @out.Shape.Dimensions[1].Length;

                        long ix2 = @out.Shape.Offset;
                        long outerStride2 = @out.Shape.Dimensions[0].Stride;
                        long innerStride2 = @out.Shape.Dimensions[1].Stride;
                        outerStride2 -= innerStride2 * @out.Shape.Dimensions[1].Length;

                        for (long i = 0; i < opsOuter; i++)
                        {
                            for (long j = 0; j < opsInner; j++)
                            {
                                d2[ix2] = (System.Int64)(Math.Sign(scalar));
                                ix2 += innerStride2;
                            }

                            ix2 += outerStride2;
                        }
                    }
                    else
                    {
                        long n = @out.Shape.Dimensions.LongLength - 3;
                        long[] limits = @out.Shape.Dimensions.Where(x => n-- > 0).Select(x => x.Length).ToArray();
                        long[] counters = new long[limits.LongLength];

                        long totalOps = limits.LongLength == 0 ? 1 : limits.Aggregate<long>((a, b) => a * b);

                        //This chunck of variables are used to prevent repeated calculations of offsets
                        long dimIndex0 = 0 + limits.LongLength;
                        long dimIndex1 = 1 + limits.LongLength;
                        long dimIndex2 = 2 + limits.LongLength;

                        long opsOuter = @out.Shape.Dimensions[0 + limits.LongLength].Length;
                        long opsInner = @out.Shape.Dimensions[1 + limits.LongLength].Length;
                        long opsInnerInner = @out.Shape.Dimensions[2 + limits.LongLength].Length;

                        long outerStride3 = @out.Shape.Dimensions[dimIndex0].Stride;
                        long innerStride3 = @out.Shape.Dimensions[dimIndex1].Stride;
                        long innerInnerStride3 = @out.Shape.Dimensions[dimIndex2].Stride;
                        outerStride3 -= innerStride3 * @out.Shape.Dimensions[dimIndex1].Length;
                        innerStride3 -= innerInnerStride3 * @out.Shape.Dimensions[dimIndex2].Length;

                        for (long outer = 0; outer < totalOps; outer++)
                        {
                            //Get the array offset for the first element in the outer dimension
                            long ix3 = @out.Shape[counters];

                            for (long i = 0; i < opsOuter; i++)
                            {
                                for (long j = 0; j < opsInner; j++)
                                {
                                    for (long k = 0; k < opsInnerInner; k++)
                                    {
                                        d2[ix3] = (System.Int64)(Math.Sign(scalar));
                                        ix3 += innerInnerStride3;
                                    }

                                    ix3 += innerStride3;
                                }

                                ix3 += outerStride3;
                            }

                            if (counters.LongLength > 0)
                            {
                                //Basically a ripple carry adder
                                long p = counters.LongLength - 1;
                                while (++counters[p] == limits[p] && p > 0)
                                {
                                    counters[p] = 0;
                                    p--;
                                }
                            }
                        }
                    }
                }
            }
        }
        /// <summary>
        /// Unsafe implementation of applying a unary operation
        /// </summary>
        /// <typeparam name="C">The type of operation to perform</typeparam>
        /// <param name="op">The operation instance</param>
        /// <param name="in1">The input argument</param>
        /// <param name="out">The output target</param>
        internal static void UFunc_Op_Inner_Unary_Flush_Single_TypedImpl<C>(NumCIL.Float.Sign op, NdArray<System.Single> in1, NdArray<System.Single> @out)
            where C : IUnaryOp<System.Single>
        {
            unsafe
            {
                using (var f1 = new Pinner(in1.DataAccessor))
                using (var f2 = new Pinner(@out.DataAccessor))
                {
                    var d1 = (System.Single*)f1.ptr;
                    var d2 = (System.Single*)f2.ptr;

                    if (@out.Shape.Dimensions.Length == 1)
                    {
                        long totalOps = @out.Shape.Dimensions[0].Length;

                        long ix1 = in1.Shape.Offset;
                        long ix2 = @out.Shape.Offset;

                        long stride1 = in1.Shape.Dimensions[0].Stride;
                        long stride2 = @out.Shape.Dimensions[0].Stride;


                        if (stride1 == stride2 && ix1 == ix2)
                        {
                            //Best case, all are equal, just keep a single counter
                            for (long i = 0; i < totalOps; i++)
                            {
                                d2[ix1] = (System.Single)(Math.Sign(d1[ix1]));
                                ix1 += stride1;
                            }
                        }
                        else
                        {
                            for (long i = 0; i < totalOps; i++)
                            {
                                d2[ix2] = (System.Single)(Math.Sign(d1[ix1]));
                                ix1 += stride1;
                                ix2 += stride2;
                            }
                        }
                    }
                    else if (@out.Shape.Dimensions.Length == 2)
                    {
                        long opsOuter = @out.Shape.Dimensions[0].Length;
                        long opsInner = @out.Shape.Dimensions[1].Length;

                        long ix1 = in1.Shape.Offset;
                        long ix2 = @out.Shape.Offset;

                        long outerStride1 = in1.Shape.Dimensions[0].Stride;
                        long outerStride2 = @out.Shape.Dimensions[0].Stride;

                        long innerStride1 = in1.Shape.Dimensions[1].Stride;
                        long innerStride2 = @out.Shape.Dimensions[1].Stride;

                        outerStride1 -= innerStride1 * in1.Shape.Dimensions[1].Length;
                        outerStride2 -= innerStride2 * @out.Shape.Dimensions[1].Length;

                        for (long i = 0; i < opsOuter; i++)
                        {
                            for (long j = 0; j < opsInner; j++)
                            {
                                d2[ix2] = (System.Single)(Math.Sign(d1[ix1]));
                                ix1 += innerStride1;
                                ix2 += innerStride2;
                            }

                            ix1 += outerStride1;
                            ix2 += outerStride2;
                        }
                    }
                    else
                    {
                        long n = in1.Shape.Dimensions.LongLength - 3;
                        long[] limits = in1.Shape.Dimensions.Where(x => n-- > 0).Select(x => x.Length).ToArray();
                        long[] counters = new long[limits.LongLength];

                        long totalOps = limits.LongLength == 0 ? 1 : limits.Aggregate<long>((a, b) => a * b);

                        //This chunck of variables are used to prevent repeated calculations of offsets
                        long dimIndex0 = 0 + limits.LongLength;
                        long dimIndex1 = 1 + limits.LongLength;
                        long dimIndex2 = 2 + limits.LongLength;

                        long opsOuter = @out.Shape.Dimensions[0 + limits.LongLength].Length;
                        long opsInner = @out.Shape.Dimensions[1 + limits.LongLength].Length;
                        long opsInnerInner = @out.Shape.Dimensions[2 + limits.LongLength].Length;

                        long outerStride1 = in1.Shape.Dimensions[dimIndex0].Stride;
                        long outerStride3 = @out.Shape.Dimensions[dimIndex0].Stride;

                        long innerStride1 = in1.Shape.Dimensions[dimIndex1].Stride;
                        long innerStride3 = @out.Shape.Dimensions[dimIndex1].Stride;

                        long innerInnerStride1 = in1.Shape.Dimensions[dimIndex2].Stride;
                        long innerInnerStride3 = @out.Shape.Dimensions[dimIndex2].Stride;

                        outerStride1 -= innerStride1 * in1.Shape.Dimensions[dimIndex1].Length;
                        outerStride3 -= innerStride3 * @out.Shape.Dimensions[dimIndex1].Length;

                        innerStride1 -= innerInnerStride1 * in1.Shape.Dimensions[dimIndex2].Length;
                        innerStride3 -= innerInnerStride3 * @out.Shape.Dimensions[dimIndex2].Length;

                        for (long outer = 0; outer < totalOps; outer++)
                        {
                            //Get the array offset for the first element in the outer dimension
                            long ix1 = in1.Shape[counters];
                            long ix3 = @out.Shape[counters];


                            for (long i = 0; i < opsOuter; i++)
                            {
                                for (long j = 0; j < opsInner; j++)
                                {
                                    for (long k = 0; k < opsInnerInner; k++)
                                    {
                                        d2[ix3] = (System.Single)(Math.Sign(d1[ix1]));
                                        ix1 += innerInnerStride1;
                                        ix3 += innerInnerStride3;
                                    }

                                    ix1 += innerStride1;
                                    ix3 += innerStride3;
                                }

                                ix1 += outerStride1;
                                ix3 += outerStride3;
                            }

                            if (counters.LongLength > 0)
                            {
                                //Basically a ripple carry adder
                                long p = counters.LongLength - 1;
                                while (++counters[p] == limits[p] && p > 0)
                                {
                                    counters[p] = 0;
                                    p--;
                                }
                            }
                        }
                    }
                }
            }
        }

        /// <summary>
        /// Unsafe implementation of applying a unary operation
        /// </summary>
        /// <typeparam name="C">The type of operation to perform</typeparam>
        /// <param name="op">The operation instance</param>
        /// <param name="scalar">The input scalar argument</param>
        /// <param name="out">The output target</param>
        internal static void UFunc_Op_Inner_Unary_Scalar_Flush_Single_TypedImpl<C>(NumCIL.Float.Sign op, System.Single scalar, NdArray<System.Single> @out)
            where C : IUnaryOp<System.Single>
        {
            unsafe
            {
                using (var f2 = new Pinner(@out.DataAccessor))
                {
                    var d2 = (System.Single*)f2.ptr;

                    if (@out.Shape.Dimensions.Length == 1)
                    {
                        long totalOps = @out.Shape.Dimensions[0].Length;
                        long ix2 = @out.Shape.Offset;
                        long stride2 = @out.Shape.Dimensions[0].Stride;

                        for (long i = 0; i < totalOps; i++)
                        {
                            d2[ix2] = (System.Single)(Math.Sign(scalar));
                            ix2 += stride2;
                        }
                    }
                    else if (@out.Shape.Dimensions.Length == 2)
                    {
                        long opsOuter = @out.Shape.Dimensions[0].Length;
                        long opsInner = @out.Shape.Dimensions[1].Length;

                        long ix2 = @out.Shape.Offset;
                        long outerStride2 = @out.Shape.Dimensions[0].Stride;
                        long innerStride2 = @out.Shape.Dimensions[1].Stride;
                        outerStride2 -= innerStride2 * @out.Shape.Dimensions[1].Length;

                        for (long i = 0; i < opsOuter; i++)
                        {
                            for (long j = 0; j < opsInner; j++)
                            {
                                d2[ix2] = (System.Single)(Math.Sign(scalar));
                                ix2 += innerStride2;
                            }

                            ix2 += outerStride2;
                        }
                    }
                    else
                    {
                        long n = @out.Shape.Dimensions.LongLength - 3;
                        long[] limits = @out.Shape.Dimensions.Where(x => n-- > 0).Select(x => x.Length).ToArray();
                        long[] counters = new long[limits.LongLength];

                        long totalOps = limits.LongLength == 0 ? 1 : limits.Aggregate<long>((a, b) => a * b);

                        //This chunck of variables are used to prevent repeated calculations of offsets
                        long dimIndex0 = 0 + limits.LongLength;
                        long dimIndex1 = 1 + limits.LongLength;
                        long dimIndex2 = 2 + limits.LongLength;

                        long opsOuter = @out.Shape.Dimensions[0 + limits.LongLength].Length;
                        long opsInner = @out.Shape.Dimensions[1 + limits.LongLength].Length;
                        long opsInnerInner = @out.Shape.Dimensions[2 + limits.LongLength].Length;

                        long outerStride3 = @out.Shape.Dimensions[dimIndex0].Stride;
                        long innerStride3 = @out.Shape.Dimensions[dimIndex1].Stride;
                        long innerInnerStride3 = @out.Shape.Dimensions[dimIndex2].Stride;
                        outerStride3 -= innerStride3 * @out.Shape.Dimensions[dimIndex1].Length;
                        innerStride3 -= innerInnerStride3 * @out.Shape.Dimensions[dimIndex2].Length;

                        for (long outer = 0; outer < totalOps; outer++)
                        {
                            //Get the array offset for the first element in the outer dimension
                            long ix3 = @out.Shape[counters];

                            for (long i = 0; i < opsOuter; i++)
                            {
                                for (long j = 0; j < opsInner; j++)
                                {
                                    for (long k = 0; k < opsInnerInner; k++)
                                    {
                                        d2[ix3] = (System.Single)(Math.Sign(scalar));
                                        ix3 += innerInnerStride3;
                                    }

                                    ix3 += innerStride3;
                                }

                                ix3 += outerStride3;
                            }

                            if (counters.LongLength > 0)
                            {
                                //Basically a ripple carry adder
                                long p = counters.LongLength - 1;
                                while (++counters[p] == limits[p] && p > 0)
                                {
                                    counters[p] = 0;
                                    p--;
                                }
                            }
                        }
                    }
                }
            }
        }
        /// <summary>
        /// Unsafe implementation of applying a unary operation
        /// </summary>
        /// <typeparam name="C">The type of operation to perform</typeparam>
        /// <param name="op">The operation instance</param>
        /// <param name="in1">The input argument</param>
        /// <param name="out">The output target</param>
        internal static void UFunc_Op_Inner_Unary_Flush_Double_TypedImpl<C>(NumCIL.Double.Sign op, NdArray<System.Double> in1, NdArray<System.Double> @out)
            where C : IUnaryOp<System.Double>
        {
            unsafe
            {
                using (var f1 = new Pinner(in1.DataAccessor))
                using (var f2 = new Pinner(@out.DataAccessor))
                {
                    var d1 = (System.Double*)f1.ptr;
                    var d2 = (System.Double*)f2.ptr;

                    if (@out.Shape.Dimensions.Length == 1)
                    {
                        long totalOps = @out.Shape.Dimensions[0].Length;

                        long ix1 = in1.Shape.Offset;
                        long ix2 = @out.Shape.Offset;

                        long stride1 = in1.Shape.Dimensions[0].Stride;
                        long stride2 = @out.Shape.Dimensions[0].Stride;


                        if (stride1 == stride2 && ix1 == ix2)
                        {
                            //Best case, all are equal, just keep a single counter
                            for (long i = 0; i < totalOps; i++)
                            {
                                d2[ix1] = (System.Double)(Math.Sign(d1[ix1]));
                                ix1 += stride1;
                            }
                        }
                        else
                        {
                            for (long i = 0; i < totalOps; i++)
                            {
                                d2[ix2] = (System.Double)(Math.Sign(d1[ix1]));
                                ix1 += stride1;
                                ix2 += stride2;
                            }
                        }
                    }
                    else if (@out.Shape.Dimensions.Length == 2)
                    {
                        long opsOuter = @out.Shape.Dimensions[0].Length;
                        long opsInner = @out.Shape.Dimensions[1].Length;

                        long ix1 = in1.Shape.Offset;
                        long ix2 = @out.Shape.Offset;

                        long outerStride1 = in1.Shape.Dimensions[0].Stride;
                        long outerStride2 = @out.Shape.Dimensions[0].Stride;

                        long innerStride1 = in1.Shape.Dimensions[1].Stride;
                        long innerStride2 = @out.Shape.Dimensions[1].Stride;

                        outerStride1 -= innerStride1 * in1.Shape.Dimensions[1].Length;
                        outerStride2 -= innerStride2 * @out.Shape.Dimensions[1].Length;

                        for (long i = 0; i < opsOuter; i++)
                        {
                            for (long j = 0; j < opsInner; j++)
                            {
                                d2[ix2] = (System.Double)(Math.Sign(d1[ix1]));
                                ix1 += innerStride1;
                                ix2 += innerStride2;
                            }

                            ix1 += outerStride1;
                            ix2 += outerStride2;
                        }
                    }
                    else
                    {
                        long n = in1.Shape.Dimensions.LongLength - 3;
                        long[] limits = in1.Shape.Dimensions.Where(x => n-- > 0).Select(x => x.Length).ToArray();
                        long[] counters = new long[limits.LongLength];

                        long totalOps = limits.LongLength == 0 ? 1 : limits.Aggregate<long>((a, b) => a * b);

                        //This chunck of variables are used to prevent repeated calculations of offsets
                        long dimIndex0 = 0 + limits.LongLength;
                        long dimIndex1 = 1 + limits.LongLength;
                        long dimIndex2 = 2 + limits.LongLength;

                        long opsOuter = @out.Shape.Dimensions[0 + limits.LongLength].Length;
                        long opsInner = @out.Shape.Dimensions[1 + limits.LongLength].Length;
                        long opsInnerInner = @out.Shape.Dimensions[2 + limits.LongLength].Length;

                        long outerStride1 = in1.Shape.Dimensions[dimIndex0].Stride;
                        long outerStride3 = @out.Shape.Dimensions[dimIndex0].Stride;

                        long innerStride1 = in1.Shape.Dimensions[dimIndex1].Stride;
                        long innerStride3 = @out.Shape.Dimensions[dimIndex1].Stride;

                        long innerInnerStride1 = in1.Shape.Dimensions[dimIndex2].Stride;
                        long innerInnerStride3 = @out.Shape.Dimensions[dimIndex2].Stride;

                        outerStride1 -= innerStride1 * in1.Shape.Dimensions[dimIndex1].Length;
                        outerStride3 -= innerStride3 * @out.Shape.Dimensions[dimIndex1].Length;

                        innerStride1 -= innerInnerStride1 * in1.Shape.Dimensions[dimIndex2].Length;
                        innerStride3 -= innerInnerStride3 * @out.Shape.Dimensions[dimIndex2].Length;

                        for (long outer = 0; outer < totalOps; outer++)
                        {
                            //Get the array offset for the first element in the outer dimension
                            long ix1 = in1.Shape[counters];
                            long ix3 = @out.Shape[counters];


                            for (long i = 0; i < opsOuter; i++)
                            {
                                for (long j = 0; j < opsInner; j++)
                                {
                                    for (long k = 0; k < opsInnerInner; k++)
                                    {
                                        d2[ix3] = (System.Double)(Math.Sign(d1[ix1]));
                                        ix1 += innerInnerStride1;
                                        ix3 += innerInnerStride3;
                                    }

                                    ix1 += innerStride1;
                                    ix3 += innerStride3;
                                }

                                ix1 += outerStride1;
                                ix3 += outerStride3;
                            }

                            if (counters.LongLength > 0)
                            {
                                //Basically a ripple carry adder
                                long p = counters.LongLength - 1;
                                while (++counters[p] == limits[p] && p > 0)
                                {
                                    counters[p] = 0;
                                    p--;
                                }
                            }
                        }
                    }
                }
            }
        }

        /// <summary>
        /// Unsafe implementation of applying a unary operation
        /// </summary>
        /// <typeparam name="C">The type of operation to perform</typeparam>
        /// <param name="op">The operation instance</param>
        /// <param name="scalar">The input scalar argument</param>
        /// <param name="out">The output target</param>
        internal static void UFunc_Op_Inner_Unary_Scalar_Flush_Double_TypedImpl<C>(NumCIL.Double.Sign op, System.Double scalar, NdArray<System.Double> @out)
            where C : IUnaryOp<System.Double>
        {
            unsafe
            {
                using (var f2 = new Pinner(@out.DataAccessor))
                {
                    var d2 = (System.Double*)f2.ptr;

                    if (@out.Shape.Dimensions.Length == 1)
                    {
                        long totalOps = @out.Shape.Dimensions[0].Length;
                        long ix2 = @out.Shape.Offset;
                        long stride2 = @out.Shape.Dimensions[0].Stride;

                        for (long i = 0; i < totalOps; i++)
                        {
                            d2[ix2] = (System.Double)(Math.Sign(scalar));
                            ix2 += stride2;
                        }
                    }
                    else if (@out.Shape.Dimensions.Length == 2)
                    {
                        long opsOuter = @out.Shape.Dimensions[0].Length;
                        long opsInner = @out.Shape.Dimensions[1].Length;

                        long ix2 = @out.Shape.Offset;
                        long outerStride2 = @out.Shape.Dimensions[0].Stride;
                        long innerStride2 = @out.Shape.Dimensions[1].Stride;
                        outerStride2 -= innerStride2 * @out.Shape.Dimensions[1].Length;

                        for (long i = 0; i < opsOuter; i++)
                        {
                            for (long j = 0; j < opsInner; j++)
                            {
                                d2[ix2] = (System.Double)(Math.Sign(scalar));
                                ix2 += innerStride2;
                            }

                            ix2 += outerStride2;
                        }
                    }
                    else
                    {
                        long n = @out.Shape.Dimensions.LongLength - 3;
                        long[] limits = @out.Shape.Dimensions.Where(x => n-- > 0).Select(x => x.Length).ToArray();
                        long[] counters = new long[limits.LongLength];

                        long totalOps = limits.LongLength == 0 ? 1 : limits.Aggregate<long>((a, b) => a * b);

                        //This chunck of variables are used to prevent repeated calculations of offsets
                        long dimIndex0 = 0 + limits.LongLength;
                        long dimIndex1 = 1 + limits.LongLength;
                        long dimIndex2 = 2 + limits.LongLength;

                        long opsOuter = @out.Shape.Dimensions[0 + limits.LongLength].Length;
                        long opsInner = @out.Shape.Dimensions[1 + limits.LongLength].Length;
                        long opsInnerInner = @out.Shape.Dimensions[2 + limits.LongLength].Length;

                        long outerStride3 = @out.Shape.Dimensions[dimIndex0].Stride;
                        long innerStride3 = @out.Shape.Dimensions[dimIndex1].Stride;
                        long innerInnerStride3 = @out.Shape.Dimensions[dimIndex2].Stride;
                        outerStride3 -= innerStride3 * @out.Shape.Dimensions[dimIndex1].Length;
                        innerStride3 -= innerInnerStride3 * @out.Shape.Dimensions[dimIndex2].Length;

                        for (long outer = 0; outer < totalOps; outer++)
                        {
                            //Get the array offset for the first element in the outer dimension
                            long ix3 = @out.Shape[counters];

                            for (long i = 0; i < opsOuter; i++)
                            {
                                for (long j = 0; j < opsInner; j++)
                                {
                                    for (long k = 0; k < opsInnerInner; k++)
                                    {
                                        d2[ix3] = (System.Double)(Math.Sign(scalar));
                                        ix3 += innerInnerStride3;
                                    }

                                    ix3 += innerStride3;
                                }

                                ix3 += outerStride3;
                            }

                            if (counters.LongLength > 0)
                            {
                                //Basically a ripple carry adder
                                long p = counters.LongLength - 1;
                                while (++counters[p] == limits[p] && p > 0)
                                {
                                    counters[p] = 0;
                                    p--;
                                }
                            }
                        }
                    }
                }
            }
        }
        /// <summary>
        /// Unsafe implementation of applying a unary operation
        /// </summary>
        /// <typeparam name="C">The type of operation to perform</typeparam>
        /// <param name="op">The operation instance</param>
        /// <param name="in1">The input argument</param>
        /// <param name="out">The output target</param>
        internal static void UFunc_Op_Inner_Unary_Flush_SByte_TypedImpl<C>(NumCIL.CopyOp<System.SByte> op, NdArray<System.SByte> in1, NdArray<System.SByte> @out)
            where C : IUnaryOp<System.SByte>
        {
            unsafe
            {
                using (var f1 = new Pinner(in1.DataAccessor))
                using (var f2 = new Pinner(@out.DataAccessor))
                {
                    var d1 = (System.SByte*)f1.ptr;
                    var d2 = (System.SByte*)f2.ptr;

                    if (@out.Shape.Dimensions.Length == 1)
                    {
                        long totalOps = @out.Shape.Dimensions[0].Length;

                        long ix1 = in1.Shape.Offset;
                        long ix2 = @out.Shape.Offset;

                        long stride1 = in1.Shape.Dimensions[0].Stride;
                        long stride2 = @out.Shape.Dimensions[0].Stride;


                        if (stride1 == stride2 && ix1 == ix2)
                        {
                            //Best case, all are equal, just keep a single counter
                            for (long i = 0; i < totalOps; i++)
                            {
                                d2[ix1] = (System.SByte)(d1[ix1]);
                                ix1 += stride1;
                            }
                        }
                        else
                        {
                            for (long i = 0; i < totalOps; i++)
                            {
                                d2[ix2] = (System.SByte)(d1[ix1]);
                                ix1 += stride1;
                                ix2 += stride2;
                            }
                        }
                    }
                    else if (@out.Shape.Dimensions.Length == 2)
                    {
                        long opsOuter = @out.Shape.Dimensions[0].Length;
                        long opsInner = @out.Shape.Dimensions[1].Length;

                        long ix1 = in1.Shape.Offset;
                        long ix2 = @out.Shape.Offset;

                        long outerStride1 = in1.Shape.Dimensions[0].Stride;
                        long outerStride2 = @out.Shape.Dimensions[0].Stride;

                        long innerStride1 = in1.Shape.Dimensions[1].Stride;
                        long innerStride2 = @out.Shape.Dimensions[1].Stride;

                        outerStride1 -= innerStride1 * in1.Shape.Dimensions[1].Length;
                        outerStride2 -= innerStride2 * @out.Shape.Dimensions[1].Length;

                        for (long i = 0; i < opsOuter; i++)
                        {
                            for (long j = 0; j < opsInner; j++)
                            {
                                d2[ix2] = (System.SByte)(d1[ix1]);
                                ix1 += innerStride1;
                                ix2 += innerStride2;
                            }

                            ix1 += outerStride1;
                            ix2 += outerStride2;
                        }
                    }
                    else
                    {
                        long n = in1.Shape.Dimensions.LongLength - 3;
                        long[] limits = in1.Shape.Dimensions.Where(x => n-- > 0).Select(x => x.Length).ToArray();
                        long[] counters = new long[limits.LongLength];

                        long totalOps = limits.LongLength == 0 ? 1 : limits.Aggregate<long>((a, b) => a * b);

                        //This chunck of variables are used to prevent repeated calculations of offsets
                        long dimIndex0 = 0 + limits.LongLength;
                        long dimIndex1 = 1 + limits.LongLength;
                        long dimIndex2 = 2 + limits.LongLength;

                        long opsOuter = @out.Shape.Dimensions[0 + limits.LongLength].Length;
                        long opsInner = @out.Shape.Dimensions[1 + limits.LongLength].Length;
                        long opsInnerInner = @out.Shape.Dimensions[2 + limits.LongLength].Length;

                        long outerStride1 = in1.Shape.Dimensions[dimIndex0].Stride;
                        long outerStride3 = @out.Shape.Dimensions[dimIndex0].Stride;

                        long innerStride1 = in1.Shape.Dimensions[dimIndex1].Stride;
                        long innerStride3 = @out.Shape.Dimensions[dimIndex1].Stride;

                        long innerInnerStride1 = in1.Shape.Dimensions[dimIndex2].Stride;
                        long innerInnerStride3 = @out.Shape.Dimensions[dimIndex2].Stride;

                        outerStride1 -= innerStride1 * in1.Shape.Dimensions[dimIndex1].Length;
                        outerStride3 -= innerStride3 * @out.Shape.Dimensions[dimIndex1].Length;

                        innerStride1 -= innerInnerStride1 * in1.Shape.Dimensions[dimIndex2].Length;
                        innerStride3 -= innerInnerStride3 * @out.Shape.Dimensions[dimIndex2].Length;

                        for (long outer = 0; outer < totalOps; outer++)
                        {
                            //Get the array offset for the first element in the outer dimension
                            long ix1 = in1.Shape[counters];
                            long ix3 = @out.Shape[counters];


                            for (long i = 0; i < opsOuter; i++)
                            {
                                for (long j = 0; j < opsInner; j++)
                                {
                                    for (long k = 0; k < opsInnerInner; k++)
                                    {
                                        d2[ix3] = (System.SByte)(d1[ix1]);
                                        ix1 += innerInnerStride1;
                                        ix3 += innerInnerStride3;
                                    }

                                    ix1 += innerStride1;
                                    ix3 += innerStride3;
                                }

                                ix1 += outerStride1;
                                ix3 += outerStride3;
                            }

                            if (counters.LongLength > 0)
                            {
                                //Basically a ripple carry adder
                                long p = counters.LongLength - 1;
                                while (++counters[p] == limits[p] && p > 0)
                                {
                                    counters[p] = 0;
                                    p--;
                                }
                            }
                        }
                    }
                }
            }
        }

        /// <summary>
        /// Unsafe implementation of applying a unary operation
        /// </summary>
        /// <typeparam name="C">The type of operation to perform</typeparam>
        /// <param name="op">The operation instance</param>
        /// <param name="scalar">The input scalar argument</param>
        /// <param name="out">The output target</param>
        internal static void UFunc_Op_Inner_Unary_Scalar_Flush_SByte_TypedImpl<C>(NumCIL.CopyOp<System.SByte> op, System.SByte scalar, NdArray<System.SByte> @out)
            where C : IUnaryOp<System.SByte>
        {
            unsafe
            {
                using (var f2 = new Pinner(@out.DataAccessor))
                {
                    var d2 = (System.SByte*)f2.ptr;

                    if (@out.Shape.Dimensions.Length == 1)
                    {
                        long totalOps = @out.Shape.Dimensions[0].Length;
                        long ix2 = @out.Shape.Offset;
                        long stride2 = @out.Shape.Dimensions[0].Stride;

                        for (long i = 0; i < totalOps; i++)
                        {
                            d2[ix2] = (System.SByte)(scalar);
                            ix2 += stride2;
                        }
                    }
                    else if (@out.Shape.Dimensions.Length == 2)
                    {
                        long opsOuter = @out.Shape.Dimensions[0].Length;
                        long opsInner = @out.Shape.Dimensions[1].Length;

                        long ix2 = @out.Shape.Offset;
                        long outerStride2 = @out.Shape.Dimensions[0].Stride;
                        long innerStride2 = @out.Shape.Dimensions[1].Stride;
                        outerStride2 -= innerStride2 * @out.Shape.Dimensions[1].Length;

                        for (long i = 0; i < opsOuter; i++)
                        {
                            for (long j = 0; j < opsInner; j++)
                            {
                                d2[ix2] = (System.SByte)(scalar);
                                ix2 += innerStride2;
                            }

                            ix2 += outerStride2;
                        }
                    }
                    else
                    {
                        long n = @out.Shape.Dimensions.LongLength - 3;
                        long[] limits = @out.Shape.Dimensions.Where(x => n-- > 0).Select(x => x.Length).ToArray();
                        long[] counters = new long[limits.LongLength];

                        long totalOps = limits.LongLength == 0 ? 1 : limits.Aggregate<long>((a, b) => a * b);

                        //This chunck of variables are used to prevent repeated calculations of offsets
                        long dimIndex0 = 0 + limits.LongLength;
                        long dimIndex1 = 1 + limits.LongLength;
                        long dimIndex2 = 2 + limits.LongLength;

                        long opsOuter = @out.Shape.Dimensions[0 + limits.LongLength].Length;
                        long opsInner = @out.Shape.Dimensions[1 + limits.LongLength].Length;
                        long opsInnerInner = @out.Shape.Dimensions[2 + limits.LongLength].Length;

                        long outerStride3 = @out.Shape.Dimensions[dimIndex0].Stride;
                        long innerStride3 = @out.Shape.Dimensions[dimIndex1].Stride;
                        long innerInnerStride3 = @out.Shape.Dimensions[dimIndex2].Stride;
                        outerStride3 -= innerStride3 * @out.Shape.Dimensions[dimIndex1].Length;
                        innerStride3 -= innerInnerStride3 * @out.Shape.Dimensions[dimIndex2].Length;

                        for (long outer = 0; outer < totalOps; outer++)
                        {
                            //Get the array offset for the first element in the outer dimension
                            long ix3 = @out.Shape[counters];

                            for (long i = 0; i < opsOuter; i++)
                            {
                                for (long j = 0; j < opsInner; j++)
                                {
                                    for (long k = 0; k < opsInnerInner; k++)
                                    {
                                        d2[ix3] = (System.SByte)(scalar);
                                        ix3 += innerInnerStride3;
                                    }

                                    ix3 += innerStride3;
                                }

                                ix3 += outerStride3;
                            }

                            if (counters.LongLength > 0)
                            {
                                //Basically a ripple carry adder
                                long p = counters.LongLength - 1;
                                while (++counters[p] == limits[p] && p > 0)
                                {
                                    counters[p] = 0;
                                    p--;
                                }
                            }
                        }
                    }
                }
            }
        }
        /// <summary>
        /// Unsafe implementation of applying a unary operation
        /// </summary>
        /// <typeparam name="C">The type of operation to perform</typeparam>
        /// <param name="op">The operation instance</param>
        /// <param name="in1">The input argument</param>
        /// <param name="out">The output target</param>
        internal static void UFunc_Op_Inner_Unary_Flush_Byte_TypedImpl<C>(NumCIL.CopyOp<System.Byte> op, NdArray<System.Byte> in1, NdArray<System.Byte> @out)
            where C : IUnaryOp<System.Byte>
        {
            unsafe
            {
                using (var f1 = new Pinner(in1.DataAccessor))
                using (var f2 = new Pinner(@out.DataAccessor))
                {
                    var d1 = (System.Byte*)f1.ptr;
                    var d2 = (System.Byte*)f2.ptr;

                    if (@out.Shape.Dimensions.Length == 1)
                    {
                        long totalOps = @out.Shape.Dimensions[0].Length;

                        long ix1 = in1.Shape.Offset;
                        long ix2 = @out.Shape.Offset;

                        long stride1 = in1.Shape.Dimensions[0].Stride;
                        long stride2 = @out.Shape.Dimensions[0].Stride;


                        if (stride1 == stride2 && ix1 == ix2)
                        {
                            //Best case, all are equal, just keep a single counter
                            for (long i = 0; i < totalOps; i++)
                            {
                                d2[ix1] = (System.Byte)(d1[ix1]);
                                ix1 += stride1;
                            }
                        }
                        else
                        {
                            for (long i = 0; i < totalOps; i++)
                            {
                                d2[ix2] = (System.Byte)(d1[ix1]);
                                ix1 += stride1;
                                ix2 += stride2;
                            }
                        }
                    }
                    else if (@out.Shape.Dimensions.Length == 2)
                    {
                        long opsOuter = @out.Shape.Dimensions[0].Length;
                        long opsInner = @out.Shape.Dimensions[1].Length;

                        long ix1 = in1.Shape.Offset;
                        long ix2 = @out.Shape.Offset;

                        long outerStride1 = in1.Shape.Dimensions[0].Stride;
                        long outerStride2 = @out.Shape.Dimensions[0].Stride;

                        long innerStride1 = in1.Shape.Dimensions[1].Stride;
                        long innerStride2 = @out.Shape.Dimensions[1].Stride;

                        outerStride1 -= innerStride1 * in1.Shape.Dimensions[1].Length;
                        outerStride2 -= innerStride2 * @out.Shape.Dimensions[1].Length;

                        for (long i = 0; i < opsOuter; i++)
                        {
                            for (long j = 0; j < opsInner; j++)
                            {
                                d2[ix2] = (System.Byte)(d1[ix1]);
                                ix1 += innerStride1;
                                ix2 += innerStride2;
                            }

                            ix1 += outerStride1;
                            ix2 += outerStride2;
                        }
                    }
                    else
                    {
                        long n = in1.Shape.Dimensions.LongLength - 3;
                        long[] limits = in1.Shape.Dimensions.Where(x => n-- > 0).Select(x => x.Length).ToArray();
                        long[] counters = new long[limits.LongLength];

                        long totalOps = limits.LongLength == 0 ? 1 : limits.Aggregate<long>((a, b) => a * b);

                        //This chunck of variables are used to prevent repeated calculations of offsets
                        long dimIndex0 = 0 + limits.LongLength;
                        long dimIndex1 = 1 + limits.LongLength;
                        long dimIndex2 = 2 + limits.LongLength;

                        long opsOuter = @out.Shape.Dimensions[0 + limits.LongLength].Length;
                        long opsInner = @out.Shape.Dimensions[1 + limits.LongLength].Length;
                        long opsInnerInner = @out.Shape.Dimensions[2 + limits.LongLength].Length;

                        long outerStride1 = in1.Shape.Dimensions[dimIndex0].Stride;
                        long outerStride3 = @out.Shape.Dimensions[dimIndex0].Stride;

                        long innerStride1 = in1.Shape.Dimensions[dimIndex1].Stride;
                        long innerStride3 = @out.Shape.Dimensions[dimIndex1].Stride;

                        long innerInnerStride1 = in1.Shape.Dimensions[dimIndex2].Stride;
                        long innerInnerStride3 = @out.Shape.Dimensions[dimIndex2].Stride;

                        outerStride1 -= innerStride1 * in1.Shape.Dimensions[dimIndex1].Length;
                        outerStride3 -= innerStride3 * @out.Shape.Dimensions[dimIndex1].Length;

                        innerStride1 -= innerInnerStride1 * in1.Shape.Dimensions[dimIndex2].Length;
                        innerStride3 -= innerInnerStride3 * @out.Shape.Dimensions[dimIndex2].Length;

                        for (long outer = 0; outer < totalOps; outer++)
                        {
                            //Get the array offset for the first element in the outer dimension
                            long ix1 = in1.Shape[counters];
                            long ix3 = @out.Shape[counters];


                            for (long i = 0; i < opsOuter; i++)
                            {
                                for (long j = 0; j < opsInner; j++)
                                {
                                    for (long k = 0; k < opsInnerInner; k++)
                                    {
                                        d2[ix3] = (System.Byte)(d1[ix1]);
                                        ix1 += innerInnerStride1;
                                        ix3 += innerInnerStride3;
                                    }

                                    ix1 += innerStride1;
                                    ix3 += innerStride3;
                                }

                                ix1 += outerStride1;
                                ix3 += outerStride3;
                            }

                            if (counters.LongLength > 0)
                            {
                                //Basically a ripple carry adder
                                long p = counters.LongLength - 1;
                                while (++counters[p] == limits[p] && p > 0)
                                {
                                    counters[p] = 0;
                                    p--;
                                }
                            }
                        }
                    }
                }
            }
        }

        /// <summary>
        /// Unsafe implementation of applying a unary operation
        /// </summary>
        /// <typeparam name="C">The type of operation to perform</typeparam>
        /// <param name="op">The operation instance</param>
        /// <param name="scalar">The input scalar argument</param>
        /// <param name="out">The output target</param>
        internal static void UFunc_Op_Inner_Unary_Scalar_Flush_Byte_TypedImpl<C>(NumCIL.CopyOp<System.Byte> op, System.Byte scalar, NdArray<System.Byte> @out)
            where C : IUnaryOp<System.Byte>
        {
            unsafe
            {
                using (var f2 = new Pinner(@out.DataAccessor))
                {
                    var d2 = (System.Byte*)f2.ptr;

                    if (@out.Shape.Dimensions.Length == 1)
                    {
                        long totalOps = @out.Shape.Dimensions[0].Length;
                        long ix2 = @out.Shape.Offset;
                        long stride2 = @out.Shape.Dimensions[0].Stride;

                        for (long i = 0; i < totalOps; i++)
                        {
                            d2[ix2] = (System.Byte)(scalar);
                            ix2 += stride2;
                        }
                    }
                    else if (@out.Shape.Dimensions.Length == 2)
                    {
                        long opsOuter = @out.Shape.Dimensions[0].Length;
                        long opsInner = @out.Shape.Dimensions[1].Length;

                        long ix2 = @out.Shape.Offset;
                        long outerStride2 = @out.Shape.Dimensions[0].Stride;
                        long innerStride2 = @out.Shape.Dimensions[1].Stride;
                        outerStride2 -= innerStride2 * @out.Shape.Dimensions[1].Length;

                        for (long i = 0; i < opsOuter; i++)
                        {
                            for (long j = 0; j < opsInner; j++)
                            {
                                d2[ix2] = (System.Byte)(scalar);
                                ix2 += innerStride2;
                            }

                            ix2 += outerStride2;
                        }
                    }
                    else
                    {
                        long n = @out.Shape.Dimensions.LongLength - 3;
                        long[] limits = @out.Shape.Dimensions.Where(x => n-- > 0).Select(x => x.Length).ToArray();
                        long[] counters = new long[limits.LongLength];

                        long totalOps = limits.LongLength == 0 ? 1 : limits.Aggregate<long>((a, b) => a * b);

                        //This chunck of variables are used to prevent repeated calculations of offsets
                        long dimIndex0 = 0 + limits.LongLength;
                        long dimIndex1 = 1 + limits.LongLength;
                        long dimIndex2 = 2 + limits.LongLength;

                        long opsOuter = @out.Shape.Dimensions[0 + limits.LongLength].Length;
                        long opsInner = @out.Shape.Dimensions[1 + limits.LongLength].Length;
                        long opsInnerInner = @out.Shape.Dimensions[2 + limits.LongLength].Length;

                        long outerStride3 = @out.Shape.Dimensions[dimIndex0].Stride;
                        long innerStride3 = @out.Shape.Dimensions[dimIndex1].Stride;
                        long innerInnerStride3 = @out.Shape.Dimensions[dimIndex2].Stride;
                        outerStride3 -= innerStride3 * @out.Shape.Dimensions[dimIndex1].Length;
                        innerStride3 -= innerInnerStride3 * @out.Shape.Dimensions[dimIndex2].Length;

                        for (long outer = 0; outer < totalOps; outer++)
                        {
                            //Get the array offset for the first element in the outer dimension
                            long ix3 = @out.Shape[counters];

                            for (long i = 0; i < opsOuter; i++)
                            {
                                for (long j = 0; j < opsInner; j++)
                                {
                                    for (long k = 0; k < opsInnerInner; k++)
                                    {
                                        d2[ix3] = (System.Byte)(scalar);
                                        ix3 += innerInnerStride3;
                                    }

                                    ix3 += innerStride3;
                                }

                                ix3 += outerStride3;
                            }

                            if (counters.LongLength > 0)
                            {
                                //Basically a ripple carry adder
                                long p = counters.LongLength - 1;
                                while (++counters[p] == limits[p] && p > 0)
                                {
                                    counters[p] = 0;
                                    p--;
                                }
                            }
                        }
                    }
                }
            }
        }
        /// <summary>
        /// Unsafe implementation of applying a unary operation
        /// </summary>
        /// <typeparam name="C">The type of operation to perform</typeparam>
        /// <param name="op">The operation instance</param>
        /// <param name="in1">The input argument</param>
        /// <param name="out">The output target</param>
        internal static void UFunc_Op_Inner_Unary_Flush_Int16_TypedImpl<C>(NumCIL.CopyOp<System.Int16> op, NdArray<System.Int16> in1, NdArray<System.Int16> @out)
            where C : IUnaryOp<System.Int16>
        {
            unsafe
            {
                using (var f1 = new Pinner(in1.DataAccessor))
                using (var f2 = new Pinner(@out.DataAccessor))
                {
                    var d1 = (System.Int16*)f1.ptr;
                    var d2 = (System.Int16*)f2.ptr;

                    if (@out.Shape.Dimensions.Length == 1)
                    {
                        long totalOps = @out.Shape.Dimensions[0].Length;

                        long ix1 = in1.Shape.Offset;
                        long ix2 = @out.Shape.Offset;

                        long stride1 = in1.Shape.Dimensions[0].Stride;
                        long stride2 = @out.Shape.Dimensions[0].Stride;


                        if (stride1 == stride2 && ix1 == ix2)
                        {
                            //Best case, all are equal, just keep a single counter
                            for (long i = 0; i < totalOps; i++)
                            {
                                d2[ix1] = (System.Int16)(d1[ix1]);
                                ix1 += stride1;
                            }
                        }
                        else
                        {
                            for (long i = 0; i < totalOps; i++)
                            {
                                d2[ix2] = (System.Int16)(d1[ix1]);
                                ix1 += stride1;
                                ix2 += stride2;
                            }
                        }
                    }
                    else if (@out.Shape.Dimensions.Length == 2)
                    {
                        long opsOuter = @out.Shape.Dimensions[0].Length;
                        long opsInner = @out.Shape.Dimensions[1].Length;

                        long ix1 = in1.Shape.Offset;
                        long ix2 = @out.Shape.Offset;

                        long outerStride1 = in1.Shape.Dimensions[0].Stride;
                        long outerStride2 = @out.Shape.Dimensions[0].Stride;

                        long innerStride1 = in1.Shape.Dimensions[1].Stride;
                        long innerStride2 = @out.Shape.Dimensions[1].Stride;

                        outerStride1 -= innerStride1 * in1.Shape.Dimensions[1].Length;
                        outerStride2 -= innerStride2 * @out.Shape.Dimensions[1].Length;

                        for (long i = 0; i < opsOuter; i++)
                        {
                            for (long j = 0; j < opsInner; j++)
                            {
                                d2[ix2] = (System.Int16)(d1[ix1]);
                                ix1 += innerStride1;
                                ix2 += innerStride2;
                            }

                            ix1 += outerStride1;
                            ix2 += outerStride2;
                        }
                    }
                    else
                    {
                        long n = in1.Shape.Dimensions.LongLength - 3;
                        long[] limits = in1.Shape.Dimensions.Where(x => n-- > 0).Select(x => x.Length).ToArray();
                        long[] counters = new long[limits.LongLength];

                        long totalOps = limits.LongLength == 0 ? 1 : limits.Aggregate<long>((a, b) => a * b);

                        //This chunck of variables are used to prevent repeated calculations of offsets
                        long dimIndex0 = 0 + limits.LongLength;
                        long dimIndex1 = 1 + limits.LongLength;
                        long dimIndex2 = 2 + limits.LongLength;

                        long opsOuter = @out.Shape.Dimensions[0 + limits.LongLength].Length;
                        long opsInner = @out.Shape.Dimensions[1 + limits.LongLength].Length;
                        long opsInnerInner = @out.Shape.Dimensions[2 + limits.LongLength].Length;

                        long outerStride1 = in1.Shape.Dimensions[dimIndex0].Stride;
                        long outerStride3 = @out.Shape.Dimensions[dimIndex0].Stride;

                        long innerStride1 = in1.Shape.Dimensions[dimIndex1].Stride;
                        long innerStride3 = @out.Shape.Dimensions[dimIndex1].Stride;

                        long innerInnerStride1 = in1.Shape.Dimensions[dimIndex2].Stride;
                        long innerInnerStride3 = @out.Shape.Dimensions[dimIndex2].Stride;

                        outerStride1 -= innerStride1 * in1.Shape.Dimensions[dimIndex1].Length;
                        outerStride3 -= innerStride3 * @out.Shape.Dimensions[dimIndex1].Length;

                        innerStride1 -= innerInnerStride1 * in1.Shape.Dimensions[dimIndex2].Length;
                        innerStride3 -= innerInnerStride3 * @out.Shape.Dimensions[dimIndex2].Length;

                        for (long outer = 0; outer < totalOps; outer++)
                        {
                            //Get the array offset for the first element in the outer dimension
                            long ix1 = in1.Shape[counters];
                            long ix3 = @out.Shape[counters];


                            for (long i = 0; i < opsOuter; i++)
                            {
                                for (long j = 0; j < opsInner; j++)
                                {
                                    for (long k = 0; k < opsInnerInner; k++)
                                    {
                                        d2[ix3] = (System.Int16)(d1[ix1]);
                                        ix1 += innerInnerStride1;
                                        ix3 += innerInnerStride3;
                                    }

                                    ix1 += innerStride1;
                                    ix3 += innerStride3;
                                }

                                ix1 += outerStride1;
                                ix3 += outerStride3;
                            }

                            if (counters.LongLength > 0)
                            {
                                //Basically a ripple carry adder
                                long p = counters.LongLength - 1;
                                while (++counters[p] == limits[p] && p > 0)
                                {
                                    counters[p] = 0;
                                    p--;
                                }
                            }
                        }
                    }
                }
            }
        }

        /// <summary>
        /// Unsafe implementation of applying a unary operation
        /// </summary>
        /// <typeparam name="C">The type of operation to perform</typeparam>
        /// <param name="op">The operation instance</param>
        /// <param name="scalar">The input scalar argument</param>
        /// <param name="out">The output target</param>
        internal static void UFunc_Op_Inner_Unary_Scalar_Flush_Int16_TypedImpl<C>(NumCIL.CopyOp<System.Int16> op, System.Int16 scalar, NdArray<System.Int16> @out)
            where C : IUnaryOp<System.Int16>
        {
            unsafe
            {
                using (var f2 = new Pinner(@out.DataAccessor))
                {
                    var d2 = (System.Int16*)f2.ptr;

                    if (@out.Shape.Dimensions.Length == 1)
                    {
                        long totalOps = @out.Shape.Dimensions[0].Length;
                        long ix2 = @out.Shape.Offset;
                        long stride2 = @out.Shape.Dimensions[0].Stride;

                        for (long i = 0; i < totalOps; i++)
                        {
                            d2[ix2] = (System.Int16)(scalar);
                            ix2 += stride2;
                        }
                    }
                    else if (@out.Shape.Dimensions.Length == 2)
                    {
                        long opsOuter = @out.Shape.Dimensions[0].Length;
                        long opsInner = @out.Shape.Dimensions[1].Length;

                        long ix2 = @out.Shape.Offset;
                        long outerStride2 = @out.Shape.Dimensions[0].Stride;
                        long innerStride2 = @out.Shape.Dimensions[1].Stride;
                        outerStride2 -= innerStride2 * @out.Shape.Dimensions[1].Length;

                        for (long i = 0; i < opsOuter; i++)
                        {
                            for (long j = 0; j < opsInner; j++)
                            {
                                d2[ix2] = (System.Int16)(scalar);
                                ix2 += innerStride2;
                            }

                            ix2 += outerStride2;
                        }
                    }
                    else
                    {
                        long n = @out.Shape.Dimensions.LongLength - 3;
                        long[] limits = @out.Shape.Dimensions.Where(x => n-- > 0).Select(x => x.Length).ToArray();
                        long[] counters = new long[limits.LongLength];

                        long totalOps = limits.LongLength == 0 ? 1 : limits.Aggregate<long>((a, b) => a * b);

                        //This chunck of variables are used to prevent repeated calculations of offsets
                        long dimIndex0 = 0 + limits.LongLength;
                        long dimIndex1 = 1 + limits.LongLength;
                        long dimIndex2 = 2 + limits.LongLength;

                        long opsOuter = @out.Shape.Dimensions[0 + limits.LongLength].Length;
                        long opsInner = @out.Shape.Dimensions[1 + limits.LongLength].Length;
                        long opsInnerInner = @out.Shape.Dimensions[2 + limits.LongLength].Length;

                        long outerStride3 = @out.Shape.Dimensions[dimIndex0].Stride;
                        long innerStride3 = @out.Shape.Dimensions[dimIndex1].Stride;
                        long innerInnerStride3 = @out.Shape.Dimensions[dimIndex2].Stride;
                        outerStride3 -= innerStride3 * @out.Shape.Dimensions[dimIndex1].Length;
                        innerStride3 -= innerInnerStride3 * @out.Shape.Dimensions[dimIndex2].Length;

                        for (long outer = 0; outer < totalOps; outer++)
                        {
                            //Get the array offset for the first element in the outer dimension
                            long ix3 = @out.Shape[counters];

                            for (long i = 0; i < opsOuter; i++)
                            {
                                for (long j = 0; j < opsInner; j++)
                                {
                                    for (long k = 0; k < opsInnerInner; k++)
                                    {
                                        d2[ix3] = (System.Int16)(scalar);
                                        ix3 += innerInnerStride3;
                                    }

                                    ix3 += innerStride3;
                                }

                                ix3 += outerStride3;
                            }

                            if (counters.LongLength > 0)
                            {
                                //Basically a ripple carry adder
                                long p = counters.LongLength - 1;
                                while (++counters[p] == limits[p] && p > 0)
                                {
                                    counters[p] = 0;
                                    p--;
                                }
                            }
                        }
                    }
                }
            }
        }
        /// <summary>
        /// Unsafe implementation of applying a unary operation
        /// </summary>
        /// <typeparam name="C">The type of operation to perform</typeparam>
        /// <param name="op">The operation instance</param>
        /// <param name="in1">The input argument</param>
        /// <param name="out">The output target</param>
        internal static void UFunc_Op_Inner_Unary_Flush_UInt16_TypedImpl<C>(NumCIL.CopyOp<System.UInt16> op, NdArray<System.UInt16> in1, NdArray<System.UInt16> @out)
            where C : IUnaryOp<System.UInt16>
        {
            unsafe
            {
                using (var f1 = new Pinner(in1.DataAccessor))
                using (var f2 = new Pinner(@out.DataAccessor))
                {
                    var d1 = (System.UInt16*)f1.ptr;
                    var d2 = (System.UInt16*)f2.ptr;

                    if (@out.Shape.Dimensions.Length == 1)
                    {
                        long totalOps = @out.Shape.Dimensions[0].Length;

                        long ix1 = in1.Shape.Offset;
                        long ix2 = @out.Shape.Offset;

                        long stride1 = in1.Shape.Dimensions[0].Stride;
                        long stride2 = @out.Shape.Dimensions[0].Stride;


                        if (stride1 == stride2 && ix1 == ix2)
                        {
                            //Best case, all are equal, just keep a single counter
                            for (long i = 0; i < totalOps; i++)
                            {
                                d2[ix1] = (System.UInt16)(d1[ix1]);
                                ix1 += stride1;
                            }
                        }
                        else
                        {
                            for (long i = 0; i < totalOps; i++)
                            {
                                d2[ix2] = (System.UInt16)(d1[ix1]);
                                ix1 += stride1;
                                ix2 += stride2;
                            }
                        }
                    }
                    else if (@out.Shape.Dimensions.Length == 2)
                    {
                        long opsOuter = @out.Shape.Dimensions[0].Length;
                        long opsInner = @out.Shape.Dimensions[1].Length;

                        long ix1 = in1.Shape.Offset;
                        long ix2 = @out.Shape.Offset;

                        long outerStride1 = in1.Shape.Dimensions[0].Stride;
                        long outerStride2 = @out.Shape.Dimensions[0].Stride;

                        long innerStride1 = in1.Shape.Dimensions[1].Stride;
                        long innerStride2 = @out.Shape.Dimensions[1].Stride;

                        outerStride1 -= innerStride1 * in1.Shape.Dimensions[1].Length;
                        outerStride2 -= innerStride2 * @out.Shape.Dimensions[1].Length;

                        for (long i = 0; i < opsOuter; i++)
                        {
                            for (long j = 0; j < opsInner; j++)
                            {
                                d2[ix2] = (System.UInt16)(d1[ix1]);
                                ix1 += innerStride1;
                                ix2 += innerStride2;
                            }

                            ix1 += outerStride1;
                            ix2 += outerStride2;
                        }
                    }
                    else
                    {
                        long n = in1.Shape.Dimensions.LongLength - 3;
                        long[] limits = in1.Shape.Dimensions.Where(x => n-- > 0).Select(x => x.Length).ToArray();
                        long[] counters = new long[limits.LongLength];

                        long totalOps = limits.LongLength == 0 ? 1 : limits.Aggregate<long>((a, b) => a * b);

                        //This chunck of variables are used to prevent repeated calculations of offsets
                        long dimIndex0 = 0 + limits.LongLength;
                        long dimIndex1 = 1 + limits.LongLength;
                        long dimIndex2 = 2 + limits.LongLength;

                        long opsOuter = @out.Shape.Dimensions[0 + limits.LongLength].Length;
                        long opsInner = @out.Shape.Dimensions[1 + limits.LongLength].Length;
                        long opsInnerInner = @out.Shape.Dimensions[2 + limits.LongLength].Length;

                        long outerStride1 = in1.Shape.Dimensions[dimIndex0].Stride;
                        long outerStride3 = @out.Shape.Dimensions[dimIndex0].Stride;

                        long innerStride1 = in1.Shape.Dimensions[dimIndex1].Stride;
                        long innerStride3 = @out.Shape.Dimensions[dimIndex1].Stride;

                        long innerInnerStride1 = in1.Shape.Dimensions[dimIndex2].Stride;
                        long innerInnerStride3 = @out.Shape.Dimensions[dimIndex2].Stride;

                        outerStride1 -= innerStride1 * in1.Shape.Dimensions[dimIndex1].Length;
                        outerStride3 -= innerStride3 * @out.Shape.Dimensions[dimIndex1].Length;

                        innerStride1 -= innerInnerStride1 * in1.Shape.Dimensions[dimIndex2].Length;
                        innerStride3 -= innerInnerStride3 * @out.Shape.Dimensions[dimIndex2].Length;

                        for (long outer = 0; outer < totalOps; outer++)
                        {
                            //Get the array offset for the first element in the outer dimension
                            long ix1 = in1.Shape[counters];
                            long ix3 = @out.Shape[counters];


                            for (long i = 0; i < opsOuter; i++)
                            {
                                for (long j = 0; j < opsInner; j++)
                                {
                                    for (long k = 0; k < opsInnerInner; k++)
                                    {
                                        d2[ix3] = (System.UInt16)(d1[ix1]);
                                        ix1 += innerInnerStride1;
                                        ix3 += innerInnerStride3;
                                    }

                                    ix1 += innerStride1;
                                    ix3 += innerStride3;
                                }

                                ix1 += outerStride1;
                                ix3 += outerStride3;
                            }

                            if (counters.LongLength > 0)
                            {
                                //Basically a ripple carry adder
                                long p = counters.LongLength - 1;
                                while (++counters[p] == limits[p] && p > 0)
                                {
                                    counters[p] = 0;
                                    p--;
                                }
                            }
                        }
                    }
                }
            }
        }

        /// <summary>
        /// Unsafe implementation of applying a unary operation
        /// </summary>
        /// <typeparam name="C">The type of operation to perform</typeparam>
        /// <param name="op">The operation instance</param>
        /// <param name="scalar">The input scalar argument</param>
        /// <param name="out">The output target</param>
        internal static void UFunc_Op_Inner_Unary_Scalar_Flush_UInt16_TypedImpl<C>(NumCIL.CopyOp<System.UInt16> op, System.UInt16 scalar, NdArray<System.UInt16> @out)
            where C : IUnaryOp<System.UInt16>
        {
            unsafe
            {
                using (var f2 = new Pinner(@out.DataAccessor))
                {
                    var d2 = (System.UInt16*)f2.ptr;

                    if (@out.Shape.Dimensions.Length == 1)
                    {
                        long totalOps = @out.Shape.Dimensions[0].Length;
                        long ix2 = @out.Shape.Offset;
                        long stride2 = @out.Shape.Dimensions[0].Stride;

                        for (long i = 0; i < totalOps; i++)
                        {
                            d2[ix2] = (System.UInt16)(scalar);
                            ix2 += stride2;
                        }
                    }
                    else if (@out.Shape.Dimensions.Length == 2)
                    {
                        long opsOuter = @out.Shape.Dimensions[0].Length;
                        long opsInner = @out.Shape.Dimensions[1].Length;

                        long ix2 = @out.Shape.Offset;
                        long outerStride2 = @out.Shape.Dimensions[0].Stride;
                        long innerStride2 = @out.Shape.Dimensions[1].Stride;
                        outerStride2 -= innerStride2 * @out.Shape.Dimensions[1].Length;

                        for (long i = 0; i < opsOuter; i++)
                        {
                            for (long j = 0; j < opsInner; j++)
                            {
                                d2[ix2] = (System.UInt16)(scalar);
                                ix2 += innerStride2;
                            }

                            ix2 += outerStride2;
                        }
                    }
                    else
                    {
                        long n = @out.Shape.Dimensions.LongLength - 3;
                        long[] limits = @out.Shape.Dimensions.Where(x => n-- > 0).Select(x => x.Length).ToArray();
                        long[] counters = new long[limits.LongLength];

                        long totalOps = limits.LongLength == 0 ? 1 : limits.Aggregate<long>((a, b) => a * b);

                        //This chunck of variables are used to prevent repeated calculations of offsets
                        long dimIndex0 = 0 + limits.LongLength;
                        long dimIndex1 = 1 + limits.LongLength;
                        long dimIndex2 = 2 + limits.LongLength;

                        long opsOuter = @out.Shape.Dimensions[0 + limits.LongLength].Length;
                        long opsInner = @out.Shape.Dimensions[1 + limits.LongLength].Length;
                        long opsInnerInner = @out.Shape.Dimensions[2 + limits.LongLength].Length;

                        long outerStride3 = @out.Shape.Dimensions[dimIndex0].Stride;
                        long innerStride3 = @out.Shape.Dimensions[dimIndex1].Stride;
                        long innerInnerStride3 = @out.Shape.Dimensions[dimIndex2].Stride;
                        outerStride3 -= innerStride3 * @out.Shape.Dimensions[dimIndex1].Length;
                        innerStride3 -= innerInnerStride3 * @out.Shape.Dimensions[dimIndex2].Length;

                        for (long outer = 0; outer < totalOps; outer++)
                        {
                            //Get the array offset for the first element in the outer dimension
                            long ix3 = @out.Shape[counters];

                            for (long i = 0; i < opsOuter; i++)
                            {
                                for (long j = 0; j < opsInner; j++)
                                {
                                    for (long k = 0; k < opsInnerInner; k++)
                                    {
                                        d2[ix3] = (System.UInt16)(scalar);
                                        ix3 += innerInnerStride3;
                                    }

                                    ix3 += innerStride3;
                                }

                                ix3 += outerStride3;
                            }

                            if (counters.LongLength > 0)
                            {
                                //Basically a ripple carry adder
                                long p = counters.LongLength - 1;
                                while (++counters[p] == limits[p] && p > 0)
                                {
                                    counters[p] = 0;
                                    p--;
                                }
                            }
                        }
                    }
                }
            }
        }
        /// <summary>
        /// Unsafe implementation of applying a unary operation
        /// </summary>
        /// <typeparam name="C">The type of operation to perform</typeparam>
        /// <param name="op">The operation instance</param>
        /// <param name="in1">The input argument</param>
        /// <param name="out">The output target</param>
        internal static void UFunc_Op_Inner_Unary_Flush_Int32_TypedImpl<C>(NumCIL.CopyOp<System.Int32> op, NdArray<System.Int32> in1, NdArray<System.Int32> @out)
            where C : IUnaryOp<System.Int32>
        {
            unsafe
            {
                using (var f1 = new Pinner(in1.DataAccessor))
                using (var f2 = new Pinner(@out.DataAccessor))
                {
                    var d1 = (System.Int32*)f1.ptr;
                    var d2 = (System.Int32*)f2.ptr;

                    if (@out.Shape.Dimensions.Length == 1)
                    {
                        long totalOps = @out.Shape.Dimensions[0].Length;

                        long ix1 = in1.Shape.Offset;
                        long ix2 = @out.Shape.Offset;

                        long stride1 = in1.Shape.Dimensions[0].Stride;
                        long stride2 = @out.Shape.Dimensions[0].Stride;


                        if (stride1 == stride2 && ix1 == ix2)
                        {
                            //Best case, all are equal, just keep a single counter
                            for (long i = 0; i < totalOps; i++)
                            {
                                d2[ix1] = (System.Int32)(d1[ix1]);
                                ix1 += stride1;
                            }
                        }
                        else
                        {
                            for (long i = 0; i < totalOps; i++)
                            {
                                d2[ix2] = (System.Int32)(d1[ix1]);
                                ix1 += stride1;
                                ix2 += stride2;
                            }
                        }
                    }
                    else if (@out.Shape.Dimensions.Length == 2)
                    {
                        long opsOuter = @out.Shape.Dimensions[0].Length;
                        long opsInner = @out.Shape.Dimensions[1].Length;

                        long ix1 = in1.Shape.Offset;
                        long ix2 = @out.Shape.Offset;

                        long outerStride1 = in1.Shape.Dimensions[0].Stride;
                        long outerStride2 = @out.Shape.Dimensions[0].Stride;

                        long innerStride1 = in1.Shape.Dimensions[1].Stride;
                        long innerStride2 = @out.Shape.Dimensions[1].Stride;

                        outerStride1 -= innerStride1 * in1.Shape.Dimensions[1].Length;
                        outerStride2 -= innerStride2 * @out.Shape.Dimensions[1].Length;

                        for (long i = 0; i < opsOuter; i++)
                        {
                            for (long j = 0; j < opsInner; j++)
                            {
                                d2[ix2] = (System.Int32)(d1[ix1]);
                                ix1 += innerStride1;
                                ix2 += innerStride2;
                            }

                            ix1 += outerStride1;
                            ix2 += outerStride2;
                        }
                    }
                    else
                    {
                        long n = in1.Shape.Dimensions.LongLength - 3;
                        long[] limits = in1.Shape.Dimensions.Where(x => n-- > 0).Select(x => x.Length).ToArray();
                        long[] counters = new long[limits.LongLength];

                        long totalOps = limits.LongLength == 0 ? 1 : limits.Aggregate<long>((a, b) => a * b);

                        //This chunck of variables are used to prevent repeated calculations of offsets
                        long dimIndex0 = 0 + limits.LongLength;
                        long dimIndex1 = 1 + limits.LongLength;
                        long dimIndex2 = 2 + limits.LongLength;

                        long opsOuter = @out.Shape.Dimensions[0 + limits.LongLength].Length;
                        long opsInner = @out.Shape.Dimensions[1 + limits.LongLength].Length;
                        long opsInnerInner = @out.Shape.Dimensions[2 + limits.LongLength].Length;

                        long outerStride1 = in1.Shape.Dimensions[dimIndex0].Stride;
                        long outerStride3 = @out.Shape.Dimensions[dimIndex0].Stride;

                        long innerStride1 = in1.Shape.Dimensions[dimIndex1].Stride;
                        long innerStride3 = @out.Shape.Dimensions[dimIndex1].Stride;

                        long innerInnerStride1 = in1.Shape.Dimensions[dimIndex2].Stride;
                        long innerInnerStride3 = @out.Shape.Dimensions[dimIndex2].Stride;

                        outerStride1 -= innerStride1 * in1.Shape.Dimensions[dimIndex1].Length;
                        outerStride3 -= innerStride3 * @out.Shape.Dimensions[dimIndex1].Length;

                        innerStride1 -= innerInnerStride1 * in1.Shape.Dimensions[dimIndex2].Length;
                        innerStride3 -= innerInnerStride3 * @out.Shape.Dimensions[dimIndex2].Length;

                        for (long outer = 0; outer < totalOps; outer++)
                        {
                            //Get the array offset for the first element in the outer dimension
                            long ix1 = in1.Shape[counters];
                            long ix3 = @out.Shape[counters];


                            for (long i = 0; i < opsOuter; i++)
                            {
                                for (long j = 0; j < opsInner; j++)
                                {
                                    for (long k = 0; k < opsInnerInner; k++)
                                    {
                                        d2[ix3] = (System.Int32)(d1[ix1]);
                                        ix1 += innerInnerStride1;
                                        ix3 += innerInnerStride3;
                                    }

                                    ix1 += innerStride1;
                                    ix3 += innerStride3;
                                }

                                ix1 += outerStride1;
                                ix3 += outerStride3;
                            }

                            if (counters.LongLength > 0)
                            {
                                //Basically a ripple carry adder
                                long p = counters.LongLength - 1;
                                while (++counters[p] == limits[p] && p > 0)
                                {
                                    counters[p] = 0;
                                    p--;
                                }
                            }
                        }
                    }
                }
            }
        }

        /// <summary>
        /// Unsafe implementation of applying a unary operation
        /// </summary>
        /// <typeparam name="C">The type of operation to perform</typeparam>
        /// <param name="op">The operation instance</param>
        /// <param name="scalar">The input scalar argument</param>
        /// <param name="out">The output target</param>
        internal static void UFunc_Op_Inner_Unary_Scalar_Flush_Int32_TypedImpl<C>(NumCIL.CopyOp<System.Int32> op, System.Int32 scalar, NdArray<System.Int32> @out)
            where C : IUnaryOp<System.Int32>
        {
            unsafe
            {
                using (var f2 = new Pinner(@out.DataAccessor))
                {
                    var d2 = (System.Int32*)f2.ptr;

                    if (@out.Shape.Dimensions.Length == 1)
                    {
                        long totalOps = @out.Shape.Dimensions[0].Length;
                        long ix2 = @out.Shape.Offset;
                        long stride2 = @out.Shape.Dimensions[0].Stride;

                        for (long i = 0; i < totalOps; i++)
                        {
                            d2[ix2] = (System.Int32)(scalar);
                            ix2 += stride2;
                        }
                    }
                    else if (@out.Shape.Dimensions.Length == 2)
                    {
                        long opsOuter = @out.Shape.Dimensions[0].Length;
                        long opsInner = @out.Shape.Dimensions[1].Length;

                        long ix2 = @out.Shape.Offset;
                        long outerStride2 = @out.Shape.Dimensions[0].Stride;
                        long innerStride2 = @out.Shape.Dimensions[1].Stride;
                        outerStride2 -= innerStride2 * @out.Shape.Dimensions[1].Length;

                        for (long i = 0; i < opsOuter; i++)
                        {
                            for (long j = 0; j < opsInner; j++)
                            {
                                d2[ix2] = (System.Int32)(scalar);
                                ix2 += innerStride2;
                            }

                            ix2 += outerStride2;
                        }
                    }
                    else
                    {
                        long n = @out.Shape.Dimensions.LongLength - 3;
                        long[] limits = @out.Shape.Dimensions.Where(x => n-- > 0).Select(x => x.Length).ToArray();
                        long[] counters = new long[limits.LongLength];

                        long totalOps = limits.LongLength == 0 ? 1 : limits.Aggregate<long>((a, b) => a * b);

                        //This chunck of variables are used to prevent repeated calculations of offsets
                        long dimIndex0 = 0 + limits.LongLength;
                        long dimIndex1 = 1 + limits.LongLength;
                        long dimIndex2 = 2 + limits.LongLength;

                        long opsOuter = @out.Shape.Dimensions[0 + limits.LongLength].Length;
                        long opsInner = @out.Shape.Dimensions[1 + limits.LongLength].Length;
                        long opsInnerInner = @out.Shape.Dimensions[2 + limits.LongLength].Length;

                        long outerStride3 = @out.Shape.Dimensions[dimIndex0].Stride;
                        long innerStride3 = @out.Shape.Dimensions[dimIndex1].Stride;
                        long innerInnerStride3 = @out.Shape.Dimensions[dimIndex2].Stride;
                        outerStride3 -= innerStride3 * @out.Shape.Dimensions[dimIndex1].Length;
                        innerStride3 -= innerInnerStride3 * @out.Shape.Dimensions[dimIndex2].Length;

                        for (long outer = 0; outer < totalOps; outer++)
                        {
                            //Get the array offset for the first element in the outer dimension
                            long ix3 = @out.Shape[counters];

                            for (long i = 0; i < opsOuter; i++)
                            {
                                for (long j = 0; j < opsInner; j++)
                                {
                                    for (long k = 0; k < opsInnerInner; k++)
                                    {
                                        d2[ix3] = (System.Int32)(scalar);
                                        ix3 += innerInnerStride3;
                                    }

                                    ix3 += innerStride3;
                                }

                                ix3 += outerStride3;
                            }

                            if (counters.LongLength > 0)
                            {
                                //Basically a ripple carry adder
                                long p = counters.LongLength - 1;
                                while (++counters[p] == limits[p] && p > 0)
                                {
                                    counters[p] = 0;
                                    p--;
                                }
                            }
                        }
                    }
                }
            }
        }
        /// <summary>
        /// Unsafe implementation of applying a unary operation
        /// </summary>
        /// <typeparam name="C">The type of operation to perform</typeparam>
        /// <param name="op">The operation instance</param>
        /// <param name="in1">The input argument</param>
        /// <param name="out">The output target</param>
        internal static void UFunc_Op_Inner_Unary_Flush_UInt32_TypedImpl<C>(NumCIL.CopyOp<System.UInt32> op, NdArray<System.UInt32> in1, NdArray<System.UInt32> @out)
            where C : IUnaryOp<System.UInt32>
        {
            unsafe
            {
                using (var f1 = new Pinner(in1.DataAccessor))
                using (var f2 = new Pinner(@out.DataAccessor))
                {
                    var d1 = (System.UInt32*)f1.ptr;
                    var d2 = (System.UInt32*)f2.ptr;

                    if (@out.Shape.Dimensions.Length == 1)
                    {
                        long totalOps = @out.Shape.Dimensions[0].Length;

                        long ix1 = in1.Shape.Offset;
                        long ix2 = @out.Shape.Offset;

                        long stride1 = in1.Shape.Dimensions[0].Stride;
                        long stride2 = @out.Shape.Dimensions[0].Stride;


                        if (stride1 == stride2 && ix1 == ix2)
                        {
                            //Best case, all are equal, just keep a single counter
                            for (long i = 0; i < totalOps; i++)
                            {
                                d2[ix1] = (System.UInt32)(d1[ix1]);
                                ix1 += stride1;
                            }
                        }
                        else
                        {
                            for (long i = 0; i < totalOps; i++)
                            {
                                d2[ix2] = (System.UInt32)(d1[ix1]);
                                ix1 += stride1;
                                ix2 += stride2;
                            }
                        }
                    }
                    else if (@out.Shape.Dimensions.Length == 2)
                    {
                        long opsOuter = @out.Shape.Dimensions[0].Length;
                        long opsInner = @out.Shape.Dimensions[1].Length;

                        long ix1 = in1.Shape.Offset;
                        long ix2 = @out.Shape.Offset;

                        long outerStride1 = in1.Shape.Dimensions[0].Stride;
                        long outerStride2 = @out.Shape.Dimensions[0].Stride;

                        long innerStride1 = in1.Shape.Dimensions[1].Stride;
                        long innerStride2 = @out.Shape.Dimensions[1].Stride;

                        outerStride1 -= innerStride1 * in1.Shape.Dimensions[1].Length;
                        outerStride2 -= innerStride2 * @out.Shape.Dimensions[1].Length;

                        for (long i = 0; i < opsOuter; i++)
                        {
                            for (long j = 0; j < opsInner; j++)
                            {
                                d2[ix2] = (System.UInt32)(d1[ix1]);
                                ix1 += innerStride1;
                                ix2 += innerStride2;
                            }

                            ix1 += outerStride1;
                            ix2 += outerStride2;
                        }
                    }
                    else
                    {
                        long n = in1.Shape.Dimensions.LongLength - 3;
                        long[] limits = in1.Shape.Dimensions.Where(x => n-- > 0).Select(x => x.Length).ToArray();
                        long[] counters = new long[limits.LongLength];

                        long totalOps = limits.LongLength == 0 ? 1 : limits.Aggregate<long>((a, b) => a * b);

                        //This chunck of variables are used to prevent repeated calculations of offsets
                        long dimIndex0 = 0 + limits.LongLength;
                        long dimIndex1 = 1 + limits.LongLength;
                        long dimIndex2 = 2 + limits.LongLength;

                        long opsOuter = @out.Shape.Dimensions[0 + limits.LongLength].Length;
                        long opsInner = @out.Shape.Dimensions[1 + limits.LongLength].Length;
                        long opsInnerInner = @out.Shape.Dimensions[2 + limits.LongLength].Length;

                        long outerStride1 = in1.Shape.Dimensions[dimIndex0].Stride;
                        long outerStride3 = @out.Shape.Dimensions[dimIndex0].Stride;

                        long innerStride1 = in1.Shape.Dimensions[dimIndex1].Stride;
                        long innerStride3 = @out.Shape.Dimensions[dimIndex1].Stride;

                        long innerInnerStride1 = in1.Shape.Dimensions[dimIndex2].Stride;
                        long innerInnerStride3 = @out.Shape.Dimensions[dimIndex2].Stride;

                        outerStride1 -= innerStride1 * in1.Shape.Dimensions[dimIndex1].Length;
                        outerStride3 -= innerStride3 * @out.Shape.Dimensions[dimIndex1].Length;

                        innerStride1 -= innerInnerStride1 * in1.Shape.Dimensions[dimIndex2].Length;
                        innerStride3 -= innerInnerStride3 * @out.Shape.Dimensions[dimIndex2].Length;

                        for (long outer = 0; outer < totalOps; outer++)
                        {
                            //Get the array offset for the first element in the outer dimension
                            long ix1 = in1.Shape[counters];
                            long ix3 = @out.Shape[counters];


                            for (long i = 0; i < opsOuter; i++)
                            {
                                for (long j = 0; j < opsInner; j++)
                                {
                                    for (long k = 0; k < opsInnerInner; k++)
                                    {
                                        d2[ix3] = (System.UInt32)(d1[ix1]);
                                        ix1 += innerInnerStride1;
                                        ix3 += innerInnerStride3;
                                    }

                                    ix1 += innerStride1;
                                    ix3 += innerStride3;
                                }

                                ix1 += outerStride1;
                                ix3 += outerStride3;
                            }

                            if (counters.LongLength > 0)
                            {
                                //Basically a ripple carry adder
                                long p = counters.LongLength - 1;
                                while (++counters[p] == limits[p] && p > 0)
                                {
                                    counters[p] = 0;
                                    p--;
                                }
                            }
                        }
                    }
                }
            }
        }

        /// <summary>
        /// Unsafe implementation of applying a unary operation
        /// </summary>
        /// <typeparam name="C">The type of operation to perform</typeparam>
        /// <param name="op">The operation instance</param>
        /// <param name="scalar">The input scalar argument</param>
        /// <param name="out">The output target</param>
        internal static void UFunc_Op_Inner_Unary_Scalar_Flush_UInt32_TypedImpl<C>(NumCIL.CopyOp<System.UInt32> op, System.UInt32 scalar, NdArray<System.UInt32> @out)
            where C : IUnaryOp<System.UInt32>
        {
            unsafe
            {
                using (var f2 = new Pinner(@out.DataAccessor))
                {
                    var d2 = (System.UInt32*)f2.ptr;

                    if (@out.Shape.Dimensions.Length == 1)
                    {
                        long totalOps = @out.Shape.Dimensions[0].Length;
                        long ix2 = @out.Shape.Offset;
                        long stride2 = @out.Shape.Dimensions[0].Stride;

                        for (long i = 0; i < totalOps; i++)
                        {
                            d2[ix2] = (System.UInt32)(scalar);
                            ix2 += stride2;
                        }
                    }
                    else if (@out.Shape.Dimensions.Length == 2)
                    {
                        long opsOuter = @out.Shape.Dimensions[0].Length;
                        long opsInner = @out.Shape.Dimensions[1].Length;

                        long ix2 = @out.Shape.Offset;
                        long outerStride2 = @out.Shape.Dimensions[0].Stride;
                        long innerStride2 = @out.Shape.Dimensions[1].Stride;
                        outerStride2 -= innerStride2 * @out.Shape.Dimensions[1].Length;

                        for (long i = 0; i < opsOuter; i++)
                        {
                            for (long j = 0; j < opsInner; j++)
                            {
                                d2[ix2] = (System.UInt32)(scalar);
                                ix2 += innerStride2;
                            }

                            ix2 += outerStride2;
                        }
                    }
                    else
                    {
                        long n = @out.Shape.Dimensions.LongLength - 3;
                        long[] limits = @out.Shape.Dimensions.Where(x => n-- > 0).Select(x => x.Length).ToArray();
                        long[] counters = new long[limits.LongLength];

                        long totalOps = limits.LongLength == 0 ? 1 : limits.Aggregate<long>((a, b) => a * b);

                        //This chunck of variables are used to prevent repeated calculations of offsets
                        long dimIndex0 = 0 + limits.LongLength;
                        long dimIndex1 = 1 + limits.LongLength;
                        long dimIndex2 = 2 + limits.LongLength;

                        long opsOuter = @out.Shape.Dimensions[0 + limits.LongLength].Length;
                        long opsInner = @out.Shape.Dimensions[1 + limits.LongLength].Length;
                        long opsInnerInner = @out.Shape.Dimensions[2 + limits.LongLength].Length;

                        long outerStride3 = @out.Shape.Dimensions[dimIndex0].Stride;
                        long innerStride3 = @out.Shape.Dimensions[dimIndex1].Stride;
                        long innerInnerStride3 = @out.Shape.Dimensions[dimIndex2].Stride;
                        outerStride3 -= innerStride3 * @out.Shape.Dimensions[dimIndex1].Length;
                        innerStride3 -= innerInnerStride3 * @out.Shape.Dimensions[dimIndex2].Length;

                        for (long outer = 0; outer < totalOps; outer++)
                        {
                            //Get the array offset for the first element in the outer dimension
                            long ix3 = @out.Shape[counters];

                            for (long i = 0; i < opsOuter; i++)
                            {
                                for (long j = 0; j < opsInner; j++)
                                {
                                    for (long k = 0; k < opsInnerInner; k++)
                                    {
                                        d2[ix3] = (System.UInt32)(scalar);
                                        ix3 += innerInnerStride3;
                                    }

                                    ix3 += innerStride3;
                                }

                                ix3 += outerStride3;
                            }

                            if (counters.LongLength > 0)
                            {
                                //Basically a ripple carry adder
                                long p = counters.LongLength - 1;
                                while (++counters[p] == limits[p] && p > 0)
                                {
                                    counters[p] = 0;
                                    p--;
                                }
                            }
                        }
                    }
                }
            }
        }
        /// <summary>
        /// Unsafe implementation of applying a unary operation
        /// </summary>
        /// <typeparam name="C">The type of operation to perform</typeparam>
        /// <param name="op">The operation instance</param>
        /// <param name="in1">The input argument</param>
        /// <param name="out">The output target</param>
        internal static void UFunc_Op_Inner_Unary_Flush_Int64_TypedImpl<C>(NumCIL.CopyOp<System.Int64> op, NdArray<System.Int64> in1, NdArray<System.Int64> @out)
            where C : IUnaryOp<System.Int64>
        {
            unsafe
            {
                using (var f1 = new Pinner(in1.DataAccessor))
                using (var f2 = new Pinner(@out.DataAccessor))
                {
                    var d1 = (System.Int64*)f1.ptr;
                    var d2 = (System.Int64*)f2.ptr;

                    if (@out.Shape.Dimensions.Length == 1)
                    {
                        long totalOps = @out.Shape.Dimensions[0].Length;

                        long ix1 = in1.Shape.Offset;
                        long ix2 = @out.Shape.Offset;

                        long stride1 = in1.Shape.Dimensions[0].Stride;
                        long stride2 = @out.Shape.Dimensions[0].Stride;


                        if (stride1 == stride2 && ix1 == ix2)
                        {
                            //Best case, all are equal, just keep a single counter
                            for (long i = 0; i < totalOps; i++)
                            {
                                d2[ix1] = (System.Int64)(d1[ix1]);
                                ix1 += stride1;
                            }
                        }
                        else
                        {
                            for (long i = 0; i < totalOps; i++)
                            {
                                d2[ix2] = (System.Int64)(d1[ix1]);
                                ix1 += stride1;
                                ix2 += stride2;
                            }
                        }
                    }
                    else if (@out.Shape.Dimensions.Length == 2)
                    {
                        long opsOuter = @out.Shape.Dimensions[0].Length;
                        long opsInner = @out.Shape.Dimensions[1].Length;

                        long ix1 = in1.Shape.Offset;
                        long ix2 = @out.Shape.Offset;

                        long outerStride1 = in1.Shape.Dimensions[0].Stride;
                        long outerStride2 = @out.Shape.Dimensions[0].Stride;

                        long innerStride1 = in1.Shape.Dimensions[1].Stride;
                        long innerStride2 = @out.Shape.Dimensions[1].Stride;

                        outerStride1 -= innerStride1 * in1.Shape.Dimensions[1].Length;
                        outerStride2 -= innerStride2 * @out.Shape.Dimensions[1].Length;

                        for (long i = 0; i < opsOuter; i++)
                        {
                            for (long j = 0; j < opsInner; j++)
                            {
                                d2[ix2] = (System.Int64)(d1[ix1]);
                                ix1 += innerStride1;
                                ix2 += innerStride2;
                            }

                            ix1 += outerStride1;
                            ix2 += outerStride2;
                        }
                    }
                    else
                    {
                        long n = in1.Shape.Dimensions.LongLength - 3;
                        long[] limits = in1.Shape.Dimensions.Where(x => n-- > 0).Select(x => x.Length).ToArray();
                        long[] counters = new long[limits.LongLength];

                        long totalOps = limits.LongLength == 0 ? 1 : limits.Aggregate<long>((a, b) => a * b);

                        //This chunck of variables are used to prevent repeated calculations of offsets
                        long dimIndex0 = 0 + limits.LongLength;
                        long dimIndex1 = 1 + limits.LongLength;
                        long dimIndex2 = 2 + limits.LongLength;

                        long opsOuter = @out.Shape.Dimensions[0 + limits.LongLength].Length;
                        long opsInner = @out.Shape.Dimensions[1 + limits.LongLength].Length;
                        long opsInnerInner = @out.Shape.Dimensions[2 + limits.LongLength].Length;

                        long outerStride1 = in1.Shape.Dimensions[dimIndex0].Stride;
                        long outerStride3 = @out.Shape.Dimensions[dimIndex0].Stride;

                        long innerStride1 = in1.Shape.Dimensions[dimIndex1].Stride;
                        long innerStride3 = @out.Shape.Dimensions[dimIndex1].Stride;

                        long innerInnerStride1 = in1.Shape.Dimensions[dimIndex2].Stride;
                        long innerInnerStride3 = @out.Shape.Dimensions[dimIndex2].Stride;

                        outerStride1 -= innerStride1 * in1.Shape.Dimensions[dimIndex1].Length;
                        outerStride3 -= innerStride3 * @out.Shape.Dimensions[dimIndex1].Length;

                        innerStride1 -= innerInnerStride1 * in1.Shape.Dimensions[dimIndex2].Length;
                        innerStride3 -= innerInnerStride3 * @out.Shape.Dimensions[dimIndex2].Length;

                        for (long outer = 0; outer < totalOps; outer++)
                        {
                            //Get the array offset for the first element in the outer dimension
                            long ix1 = in1.Shape[counters];
                            long ix3 = @out.Shape[counters];


                            for (long i = 0; i < opsOuter; i++)
                            {
                                for (long j = 0; j < opsInner; j++)
                                {
                                    for (long k = 0; k < opsInnerInner; k++)
                                    {
                                        d2[ix3] = (System.Int64)(d1[ix1]);
                                        ix1 += innerInnerStride1;
                                        ix3 += innerInnerStride3;
                                    }

                                    ix1 += innerStride1;
                                    ix3 += innerStride3;
                                }

                                ix1 += outerStride1;
                                ix3 += outerStride3;
                            }

                            if (counters.LongLength > 0)
                            {
                                //Basically a ripple carry adder
                                long p = counters.LongLength - 1;
                                while (++counters[p] == limits[p] && p > 0)
                                {
                                    counters[p] = 0;
                                    p--;
                                }
                            }
                        }
                    }
                }
            }
        }

        /// <summary>
        /// Unsafe implementation of applying a unary operation
        /// </summary>
        /// <typeparam name="C">The type of operation to perform</typeparam>
        /// <param name="op">The operation instance</param>
        /// <param name="scalar">The input scalar argument</param>
        /// <param name="out">The output target</param>
        internal static void UFunc_Op_Inner_Unary_Scalar_Flush_Int64_TypedImpl<C>(NumCIL.CopyOp<System.Int64> op, System.Int64 scalar, NdArray<System.Int64> @out)
            where C : IUnaryOp<System.Int64>
        {
            unsafe
            {
                using (var f2 = new Pinner(@out.DataAccessor))
                {
                    var d2 = (System.Int64*)f2.ptr;

                    if (@out.Shape.Dimensions.Length == 1)
                    {
                        long totalOps = @out.Shape.Dimensions[0].Length;
                        long ix2 = @out.Shape.Offset;
                        long stride2 = @out.Shape.Dimensions[0].Stride;

                        for (long i = 0; i < totalOps; i++)
                        {
                            d2[ix2] = (System.Int64)(scalar);
                            ix2 += stride2;
                        }
                    }
                    else if (@out.Shape.Dimensions.Length == 2)
                    {
                        long opsOuter = @out.Shape.Dimensions[0].Length;
                        long opsInner = @out.Shape.Dimensions[1].Length;

                        long ix2 = @out.Shape.Offset;
                        long outerStride2 = @out.Shape.Dimensions[0].Stride;
                        long innerStride2 = @out.Shape.Dimensions[1].Stride;
                        outerStride2 -= innerStride2 * @out.Shape.Dimensions[1].Length;

                        for (long i = 0; i < opsOuter; i++)
                        {
                            for (long j = 0; j < opsInner; j++)
                            {
                                d2[ix2] = (System.Int64)(scalar);
                                ix2 += innerStride2;
                            }

                            ix2 += outerStride2;
                        }
                    }
                    else
                    {
                        long n = @out.Shape.Dimensions.LongLength - 3;
                        long[] limits = @out.Shape.Dimensions.Where(x => n-- > 0).Select(x => x.Length).ToArray();
                        long[] counters = new long[limits.LongLength];

                        long totalOps = limits.LongLength == 0 ? 1 : limits.Aggregate<long>((a, b) => a * b);

                        //This chunck of variables are used to prevent repeated calculations of offsets
                        long dimIndex0 = 0 + limits.LongLength;
                        long dimIndex1 = 1 + limits.LongLength;
                        long dimIndex2 = 2 + limits.LongLength;

                        long opsOuter = @out.Shape.Dimensions[0 + limits.LongLength].Length;
                        long opsInner = @out.Shape.Dimensions[1 + limits.LongLength].Length;
                        long opsInnerInner = @out.Shape.Dimensions[2 + limits.LongLength].Length;

                        long outerStride3 = @out.Shape.Dimensions[dimIndex0].Stride;
                        long innerStride3 = @out.Shape.Dimensions[dimIndex1].Stride;
                        long innerInnerStride3 = @out.Shape.Dimensions[dimIndex2].Stride;
                        outerStride3 -= innerStride3 * @out.Shape.Dimensions[dimIndex1].Length;
                        innerStride3 -= innerInnerStride3 * @out.Shape.Dimensions[dimIndex2].Length;

                        for (long outer = 0; outer < totalOps; outer++)
                        {
                            //Get the array offset for the first element in the outer dimension
                            long ix3 = @out.Shape[counters];

                            for (long i = 0; i < opsOuter; i++)
                            {
                                for (long j = 0; j < opsInner; j++)
                                {
                                    for (long k = 0; k < opsInnerInner; k++)
                                    {
                                        d2[ix3] = (System.Int64)(scalar);
                                        ix3 += innerInnerStride3;
                                    }

                                    ix3 += innerStride3;
                                }

                                ix3 += outerStride3;
                            }

                            if (counters.LongLength > 0)
                            {
                                //Basically a ripple carry adder
                                long p = counters.LongLength - 1;
                                while (++counters[p] == limits[p] && p > 0)
                                {
                                    counters[p] = 0;
                                    p--;
                                }
                            }
                        }
                    }
                }
            }
        }
        /// <summary>
        /// Unsafe implementation of applying a unary operation
        /// </summary>
        /// <typeparam name="C">The type of operation to perform</typeparam>
        /// <param name="op">The operation instance</param>
        /// <param name="in1">The input argument</param>
        /// <param name="out">The output target</param>
        internal static void UFunc_Op_Inner_Unary_Flush_UInt64_TypedImpl<C>(NumCIL.CopyOp<System.UInt64> op, NdArray<System.UInt64> in1, NdArray<System.UInt64> @out)
            where C : IUnaryOp<System.UInt64>
        {
            unsafe
            {
                using (var f1 = new Pinner(in1.DataAccessor))
                using (var f2 = new Pinner(@out.DataAccessor))
                {
                    var d1 = (System.UInt64*)f1.ptr;
                    var d2 = (System.UInt64*)f2.ptr;

                    if (@out.Shape.Dimensions.Length == 1)
                    {
                        long totalOps = @out.Shape.Dimensions[0].Length;

                        long ix1 = in1.Shape.Offset;
                        long ix2 = @out.Shape.Offset;

                        long stride1 = in1.Shape.Dimensions[0].Stride;
                        long stride2 = @out.Shape.Dimensions[0].Stride;


                        if (stride1 == stride2 && ix1 == ix2)
                        {
                            //Best case, all are equal, just keep a single counter
                            for (long i = 0; i < totalOps; i++)
                            {
                                d2[ix1] = (System.UInt64)(d1[ix1]);
                                ix1 += stride1;
                            }
                        }
                        else
                        {
                            for (long i = 0; i < totalOps; i++)
                            {
                                d2[ix2] = (System.UInt64)(d1[ix1]);
                                ix1 += stride1;
                                ix2 += stride2;
                            }
                        }
                    }
                    else if (@out.Shape.Dimensions.Length == 2)
                    {
                        long opsOuter = @out.Shape.Dimensions[0].Length;
                        long opsInner = @out.Shape.Dimensions[1].Length;

                        long ix1 = in1.Shape.Offset;
                        long ix2 = @out.Shape.Offset;

                        long outerStride1 = in1.Shape.Dimensions[0].Stride;
                        long outerStride2 = @out.Shape.Dimensions[0].Stride;

                        long innerStride1 = in1.Shape.Dimensions[1].Stride;
                        long innerStride2 = @out.Shape.Dimensions[1].Stride;

                        outerStride1 -= innerStride1 * in1.Shape.Dimensions[1].Length;
                        outerStride2 -= innerStride2 * @out.Shape.Dimensions[1].Length;

                        for (long i = 0; i < opsOuter; i++)
                        {
                            for (long j = 0; j < opsInner; j++)
                            {
                                d2[ix2] = (System.UInt64)(d1[ix1]);
                                ix1 += innerStride1;
                                ix2 += innerStride2;
                            }

                            ix1 += outerStride1;
                            ix2 += outerStride2;
                        }
                    }
                    else
                    {
                        long n = in1.Shape.Dimensions.LongLength - 3;
                        long[] limits = in1.Shape.Dimensions.Where(x => n-- > 0).Select(x => x.Length).ToArray();
                        long[] counters = new long[limits.LongLength];

                        long totalOps = limits.LongLength == 0 ? 1 : limits.Aggregate<long>((a, b) => a * b);

                        //This chunck of variables are used to prevent repeated calculations of offsets
                        long dimIndex0 = 0 + limits.LongLength;
                        long dimIndex1 = 1 + limits.LongLength;
                        long dimIndex2 = 2 + limits.LongLength;

                        long opsOuter = @out.Shape.Dimensions[0 + limits.LongLength].Length;
                        long opsInner = @out.Shape.Dimensions[1 + limits.LongLength].Length;
                        long opsInnerInner = @out.Shape.Dimensions[2 + limits.LongLength].Length;

                        long outerStride1 = in1.Shape.Dimensions[dimIndex0].Stride;
                        long outerStride3 = @out.Shape.Dimensions[dimIndex0].Stride;

                        long innerStride1 = in1.Shape.Dimensions[dimIndex1].Stride;
                        long innerStride3 = @out.Shape.Dimensions[dimIndex1].Stride;

                        long innerInnerStride1 = in1.Shape.Dimensions[dimIndex2].Stride;
                        long innerInnerStride3 = @out.Shape.Dimensions[dimIndex2].Stride;

                        outerStride1 -= innerStride1 * in1.Shape.Dimensions[dimIndex1].Length;
                        outerStride3 -= innerStride3 * @out.Shape.Dimensions[dimIndex1].Length;

                        innerStride1 -= innerInnerStride1 * in1.Shape.Dimensions[dimIndex2].Length;
                        innerStride3 -= innerInnerStride3 * @out.Shape.Dimensions[dimIndex2].Length;

                        for (long outer = 0; outer < totalOps; outer++)
                        {
                            //Get the array offset for the first element in the outer dimension
                            long ix1 = in1.Shape[counters];
                            long ix3 = @out.Shape[counters];


                            for (long i = 0; i < opsOuter; i++)
                            {
                                for (long j = 0; j < opsInner; j++)
                                {
                                    for (long k = 0; k < opsInnerInner; k++)
                                    {
                                        d2[ix3] = (System.UInt64)(d1[ix1]);
                                        ix1 += innerInnerStride1;
                                        ix3 += innerInnerStride3;
                                    }

                                    ix1 += innerStride1;
                                    ix3 += innerStride3;
                                }

                                ix1 += outerStride1;
                                ix3 += outerStride3;
                            }

                            if (counters.LongLength > 0)
                            {
                                //Basically a ripple carry adder
                                long p = counters.LongLength - 1;
                                while (++counters[p] == limits[p] && p > 0)
                                {
                                    counters[p] = 0;
                                    p--;
                                }
                            }
                        }
                    }
                }
            }
        }

        /// <summary>
        /// Unsafe implementation of applying a unary operation
        /// </summary>
        /// <typeparam name="C">The type of operation to perform</typeparam>
        /// <param name="op">The operation instance</param>
        /// <param name="scalar">The input scalar argument</param>
        /// <param name="out">The output target</param>
        internal static void UFunc_Op_Inner_Unary_Scalar_Flush_UInt64_TypedImpl<C>(NumCIL.CopyOp<System.UInt64> op, System.UInt64 scalar, NdArray<System.UInt64> @out)
            where C : IUnaryOp<System.UInt64>
        {
            unsafe
            {
                using (var f2 = new Pinner(@out.DataAccessor))
                {
                    var d2 = (System.UInt64*)f2.ptr;

                    if (@out.Shape.Dimensions.Length == 1)
                    {
                        long totalOps = @out.Shape.Dimensions[0].Length;
                        long ix2 = @out.Shape.Offset;
                        long stride2 = @out.Shape.Dimensions[0].Stride;

                        for (long i = 0; i < totalOps; i++)
                        {
                            d2[ix2] = (System.UInt64)(scalar);
                            ix2 += stride2;
                        }
                    }
                    else if (@out.Shape.Dimensions.Length == 2)
                    {
                        long opsOuter = @out.Shape.Dimensions[0].Length;
                        long opsInner = @out.Shape.Dimensions[1].Length;

                        long ix2 = @out.Shape.Offset;
                        long outerStride2 = @out.Shape.Dimensions[0].Stride;
                        long innerStride2 = @out.Shape.Dimensions[1].Stride;
                        outerStride2 -= innerStride2 * @out.Shape.Dimensions[1].Length;

                        for (long i = 0; i < opsOuter; i++)
                        {
                            for (long j = 0; j < opsInner; j++)
                            {
                                d2[ix2] = (System.UInt64)(scalar);
                                ix2 += innerStride2;
                            }

                            ix2 += outerStride2;
                        }
                    }
                    else
                    {
                        long n = @out.Shape.Dimensions.LongLength - 3;
                        long[] limits = @out.Shape.Dimensions.Where(x => n-- > 0).Select(x => x.Length).ToArray();
                        long[] counters = new long[limits.LongLength];

                        long totalOps = limits.LongLength == 0 ? 1 : limits.Aggregate<long>((a, b) => a * b);

                        //This chunck of variables are used to prevent repeated calculations of offsets
                        long dimIndex0 = 0 + limits.LongLength;
                        long dimIndex1 = 1 + limits.LongLength;
                        long dimIndex2 = 2 + limits.LongLength;

                        long opsOuter = @out.Shape.Dimensions[0 + limits.LongLength].Length;
                        long opsInner = @out.Shape.Dimensions[1 + limits.LongLength].Length;
                        long opsInnerInner = @out.Shape.Dimensions[2 + limits.LongLength].Length;

                        long outerStride3 = @out.Shape.Dimensions[dimIndex0].Stride;
                        long innerStride3 = @out.Shape.Dimensions[dimIndex1].Stride;
                        long innerInnerStride3 = @out.Shape.Dimensions[dimIndex2].Stride;
                        outerStride3 -= innerStride3 * @out.Shape.Dimensions[dimIndex1].Length;
                        innerStride3 -= innerInnerStride3 * @out.Shape.Dimensions[dimIndex2].Length;

                        for (long outer = 0; outer < totalOps; outer++)
                        {
                            //Get the array offset for the first element in the outer dimension
                            long ix3 = @out.Shape[counters];

                            for (long i = 0; i < opsOuter; i++)
                            {
                                for (long j = 0; j < opsInner; j++)
                                {
                                    for (long k = 0; k < opsInnerInner; k++)
                                    {
                                        d2[ix3] = (System.UInt64)(scalar);
                                        ix3 += innerInnerStride3;
                                    }

                                    ix3 += innerStride3;
                                }

                                ix3 += outerStride3;
                            }

                            if (counters.LongLength > 0)
                            {
                                //Basically a ripple carry adder
                                long p = counters.LongLength - 1;
                                while (++counters[p] == limits[p] && p > 0)
                                {
                                    counters[p] = 0;
                                    p--;
                                }
                            }
                        }
                    }
                }
            }
        }
        /// <summary>
        /// Unsafe implementation of applying a unary operation
        /// </summary>
        /// <typeparam name="C">The type of operation to perform</typeparam>
        /// <param name="op">The operation instance</param>
        /// <param name="in1">The input argument</param>
        /// <param name="out">The output target</param>
        internal static void UFunc_Op_Inner_Unary_Flush_Single_TypedImpl<C>(NumCIL.CopyOp<System.Single> op, NdArray<System.Single> in1, NdArray<System.Single> @out)
            where C : IUnaryOp<System.Single>
        {
            unsafe
            {
                using (var f1 = new Pinner(in1.DataAccessor))
                using (var f2 = new Pinner(@out.DataAccessor))
                {
                    var d1 = (System.Single*)f1.ptr;
                    var d2 = (System.Single*)f2.ptr;

                    if (@out.Shape.Dimensions.Length == 1)
                    {
                        long totalOps = @out.Shape.Dimensions[0].Length;

                        long ix1 = in1.Shape.Offset;
                        long ix2 = @out.Shape.Offset;

                        long stride1 = in1.Shape.Dimensions[0].Stride;
                        long stride2 = @out.Shape.Dimensions[0].Stride;


                        if (stride1 == stride2 && ix1 == ix2)
                        {
                            //Best case, all are equal, just keep a single counter
                            for (long i = 0; i < totalOps; i++)
                            {
                                d2[ix1] = (System.Single)(d1[ix1]);
                                ix1 += stride1;
                            }
                        }
                        else
                        {
                            for (long i = 0; i < totalOps; i++)
                            {
                                d2[ix2] = (System.Single)(d1[ix1]);
                                ix1 += stride1;
                                ix2 += stride2;
                            }
                        }
                    }
                    else if (@out.Shape.Dimensions.Length == 2)
                    {
                        long opsOuter = @out.Shape.Dimensions[0].Length;
                        long opsInner = @out.Shape.Dimensions[1].Length;

                        long ix1 = in1.Shape.Offset;
                        long ix2 = @out.Shape.Offset;

                        long outerStride1 = in1.Shape.Dimensions[0].Stride;
                        long outerStride2 = @out.Shape.Dimensions[0].Stride;

                        long innerStride1 = in1.Shape.Dimensions[1].Stride;
                        long innerStride2 = @out.Shape.Dimensions[1].Stride;

                        outerStride1 -= innerStride1 * in1.Shape.Dimensions[1].Length;
                        outerStride2 -= innerStride2 * @out.Shape.Dimensions[1].Length;

                        for (long i = 0; i < opsOuter; i++)
                        {
                            for (long j = 0; j < opsInner; j++)
                            {
                                d2[ix2] = (System.Single)(d1[ix1]);
                                ix1 += innerStride1;
                                ix2 += innerStride2;
                            }

                            ix1 += outerStride1;
                            ix2 += outerStride2;
                        }
                    }
                    else
                    {
                        long n = in1.Shape.Dimensions.LongLength - 3;
                        long[] limits = in1.Shape.Dimensions.Where(x => n-- > 0).Select(x => x.Length).ToArray();
                        long[] counters = new long[limits.LongLength];

                        long totalOps = limits.LongLength == 0 ? 1 : limits.Aggregate<long>((a, b) => a * b);

                        //This chunck of variables are used to prevent repeated calculations of offsets
                        long dimIndex0 = 0 + limits.LongLength;
                        long dimIndex1 = 1 + limits.LongLength;
                        long dimIndex2 = 2 + limits.LongLength;

                        long opsOuter = @out.Shape.Dimensions[0 + limits.LongLength].Length;
                        long opsInner = @out.Shape.Dimensions[1 + limits.LongLength].Length;
                        long opsInnerInner = @out.Shape.Dimensions[2 + limits.LongLength].Length;

                        long outerStride1 = in1.Shape.Dimensions[dimIndex0].Stride;
                        long outerStride3 = @out.Shape.Dimensions[dimIndex0].Stride;

                        long innerStride1 = in1.Shape.Dimensions[dimIndex1].Stride;
                        long innerStride3 = @out.Shape.Dimensions[dimIndex1].Stride;

                        long innerInnerStride1 = in1.Shape.Dimensions[dimIndex2].Stride;
                        long innerInnerStride3 = @out.Shape.Dimensions[dimIndex2].Stride;

                        outerStride1 -= innerStride1 * in1.Shape.Dimensions[dimIndex1].Length;
                        outerStride3 -= innerStride3 * @out.Shape.Dimensions[dimIndex1].Length;

                        innerStride1 -= innerInnerStride1 * in1.Shape.Dimensions[dimIndex2].Length;
                        innerStride3 -= innerInnerStride3 * @out.Shape.Dimensions[dimIndex2].Length;

                        for (long outer = 0; outer < totalOps; outer++)
                        {
                            //Get the array offset for the first element in the outer dimension
                            long ix1 = in1.Shape[counters];
                            long ix3 = @out.Shape[counters];


                            for (long i = 0; i < opsOuter; i++)
                            {
                                for (long j = 0; j < opsInner; j++)
                                {
                                    for (long k = 0; k < opsInnerInner; k++)
                                    {
                                        d2[ix3] = (System.Single)(d1[ix1]);
                                        ix1 += innerInnerStride1;
                                        ix3 += innerInnerStride3;
                                    }

                                    ix1 += innerStride1;
                                    ix3 += innerStride3;
                                }

                                ix1 += outerStride1;
                                ix3 += outerStride3;
                            }

                            if (counters.LongLength > 0)
                            {
                                //Basically a ripple carry adder
                                long p = counters.LongLength - 1;
                                while (++counters[p] == limits[p] && p > 0)
                                {
                                    counters[p] = 0;
                                    p--;
                                }
                            }
                        }
                    }
                }
            }
        }

        /// <summary>
        /// Unsafe implementation of applying a unary operation
        /// </summary>
        /// <typeparam name="C">The type of operation to perform</typeparam>
        /// <param name="op">The operation instance</param>
        /// <param name="scalar">The input scalar argument</param>
        /// <param name="out">The output target</param>
        internal static void UFunc_Op_Inner_Unary_Scalar_Flush_Single_TypedImpl<C>(NumCIL.CopyOp<System.Single> op, System.Single scalar, NdArray<System.Single> @out)
            where C : IUnaryOp<System.Single>
        {
            unsafe
            {
                using (var f2 = new Pinner(@out.DataAccessor))
                {
                    var d2 = (System.Single*)f2.ptr;

                    if (@out.Shape.Dimensions.Length == 1)
                    {
                        long totalOps = @out.Shape.Dimensions[0].Length;
                        long ix2 = @out.Shape.Offset;
                        long stride2 = @out.Shape.Dimensions[0].Stride;

                        for (long i = 0; i < totalOps; i++)
                        {
                            d2[ix2] = (System.Single)(scalar);
                            ix2 += stride2;
                        }
                    }
                    else if (@out.Shape.Dimensions.Length == 2)
                    {
                        long opsOuter = @out.Shape.Dimensions[0].Length;
                        long opsInner = @out.Shape.Dimensions[1].Length;

                        long ix2 = @out.Shape.Offset;
                        long outerStride2 = @out.Shape.Dimensions[0].Stride;
                        long innerStride2 = @out.Shape.Dimensions[1].Stride;
                        outerStride2 -= innerStride2 * @out.Shape.Dimensions[1].Length;

                        for (long i = 0; i < opsOuter; i++)
                        {
                            for (long j = 0; j < opsInner; j++)
                            {
                                d2[ix2] = (System.Single)(scalar);
                                ix2 += innerStride2;
                            }

                            ix2 += outerStride2;
                        }
                    }
                    else
                    {
                        long n = @out.Shape.Dimensions.LongLength - 3;
                        long[] limits = @out.Shape.Dimensions.Where(x => n-- > 0).Select(x => x.Length).ToArray();
                        long[] counters = new long[limits.LongLength];

                        long totalOps = limits.LongLength == 0 ? 1 : limits.Aggregate<long>((a, b) => a * b);

                        //This chunck of variables are used to prevent repeated calculations of offsets
                        long dimIndex0 = 0 + limits.LongLength;
                        long dimIndex1 = 1 + limits.LongLength;
                        long dimIndex2 = 2 + limits.LongLength;

                        long opsOuter = @out.Shape.Dimensions[0 + limits.LongLength].Length;
                        long opsInner = @out.Shape.Dimensions[1 + limits.LongLength].Length;
                        long opsInnerInner = @out.Shape.Dimensions[2 + limits.LongLength].Length;

                        long outerStride3 = @out.Shape.Dimensions[dimIndex0].Stride;
                        long innerStride3 = @out.Shape.Dimensions[dimIndex1].Stride;
                        long innerInnerStride3 = @out.Shape.Dimensions[dimIndex2].Stride;
                        outerStride3 -= innerStride3 * @out.Shape.Dimensions[dimIndex1].Length;
                        innerStride3 -= innerInnerStride3 * @out.Shape.Dimensions[dimIndex2].Length;

                        for (long outer = 0; outer < totalOps; outer++)
                        {
                            //Get the array offset for the first element in the outer dimension
                            long ix3 = @out.Shape[counters];

                            for (long i = 0; i < opsOuter; i++)
                            {
                                for (long j = 0; j < opsInner; j++)
                                {
                                    for (long k = 0; k < opsInnerInner; k++)
                                    {
                                        d2[ix3] = (System.Single)(scalar);
                                        ix3 += innerInnerStride3;
                                    }

                                    ix3 += innerStride3;
                                }

                                ix3 += outerStride3;
                            }

                            if (counters.LongLength > 0)
                            {
                                //Basically a ripple carry adder
                                long p = counters.LongLength - 1;
                                while (++counters[p] == limits[p] && p > 0)
                                {
                                    counters[p] = 0;
                                    p--;
                                }
                            }
                        }
                    }
                }
            }
        }
        /// <summary>
        /// Unsafe implementation of applying a unary operation
        /// </summary>
        /// <typeparam name="C">The type of operation to perform</typeparam>
        /// <param name="op">The operation instance</param>
        /// <param name="in1">The input argument</param>
        /// <param name="out">The output target</param>
        internal static void UFunc_Op_Inner_Unary_Flush_Double_TypedImpl<C>(NumCIL.CopyOp<System.Double> op, NdArray<System.Double> in1, NdArray<System.Double> @out)
            where C : IUnaryOp<System.Double>
        {
            unsafe
            {
                using (var f1 = new Pinner(in1.DataAccessor))
                using (var f2 = new Pinner(@out.DataAccessor))
                {
                    var d1 = (System.Double*)f1.ptr;
                    var d2 = (System.Double*)f2.ptr;

                    if (@out.Shape.Dimensions.Length == 1)
                    {
                        long totalOps = @out.Shape.Dimensions[0].Length;

                        long ix1 = in1.Shape.Offset;
                        long ix2 = @out.Shape.Offset;

                        long stride1 = in1.Shape.Dimensions[0].Stride;
                        long stride2 = @out.Shape.Dimensions[0].Stride;


                        if (stride1 == stride2 && ix1 == ix2)
                        {
                            //Best case, all are equal, just keep a single counter
                            for (long i = 0; i < totalOps; i++)
                            {
                                d2[ix1] = (System.Double)(d1[ix1]);
                                ix1 += stride1;
                            }
                        }
                        else
                        {
                            for (long i = 0; i < totalOps; i++)
                            {
                                d2[ix2] = (System.Double)(d1[ix1]);
                                ix1 += stride1;
                                ix2 += stride2;
                            }
                        }
                    }
                    else if (@out.Shape.Dimensions.Length == 2)
                    {
                        long opsOuter = @out.Shape.Dimensions[0].Length;
                        long opsInner = @out.Shape.Dimensions[1].Length;

                        long ix1 = in1.Shape.Offset;
                        long ix2 = @out.Shape.Offset;

                        long outerStride1 = in1.Shape.Dimensions[0].Stride;
                        long outerStride2 = @out.Shape.Dimensions[0].Stride;

                        long innerStride1 = in1.Shape.Dimensions[1].Stride;
                        long innerStride2 = @out.Shape.Dimensions[1].Stride;

                        outerStride1 -= innerStride1 * in1.Shape.Dimensions[1].Length;
                        outerStride2 -= innerStride2 * @out.Shape.Dimensions[1].Length;

                        for (long i = 0; i < opsOuter; i++)
                        {
                            for (long j = 0; j < opsInner; j++)
                            {
                                d2[ix2] = (System.Double)(d1[ix1]);
                                ix1 += innerStride1;
                                ix2 += innerStride2;
                            }

                            ix1 += outerStride1;
                            ix2 += outerStride2;
                        }
                    }
                    else
                    {
                        long n = in1.Shape.Dimensions.LongLength - 3;
                        long[] limits = in1.Shape.Dimensions.Where(x => n-- > 0).Select(x => x.Length).ToArray();
                        long[] counters = new long[limits.LongLength];

                        long totalOps = limits.LongLength == 0 ? 1 : limits.Aggregate<long>((a, b) => a * b);

                        //This chunck of variables are used to prevent repeated calculations of offsets
                        long dimIndex0 = 0 + limits.LongLength;
                        long dimIndex1 = 1 + limits.LongLength;
                        long dimIndex2 = 2 + limits.LongLength;

                        long opsOuter = @out.Shape.Dimensions[0 + limits.LongLength].Length;
                        long opsInner = @out.Shape.Dimensions[1 + limits.LongLength].Length;
                        long opsInnerInner = @out.Shape.Dimensions[2 + limits.LongLength].Length;

                        long outerStride1 = in1.Shape.Dimensions[dimIndex0].Stride;
                        long outerStride3 = @out.Shape.Dimensions[dimIndex0].Stride;

                        long innerStride1 = in1.Shape.Dimensions[dimIndex1].Stride;
                        long innerStride3 = @out.Shape.Dimensions[dimIndex1].Stride;

                        long innerInnerStride1 = in1.Shape.Dimensions[dimIndex2].Stride;
                        long innerInnerStride3 = @out.Shape.Dimensions[dimIndex2].Stride;

                        outerStride1 -= innerStride1 * in1.Shape.Dimensions[dimIndex1].Length;
                        outerStride3 -= innerStride3 * @out.Shape.Dimensions[dimIndex1].Length;

                        innerStride1 -= innerInnerStride1 * in1.Shape.Dimensions[dimIndex2].Length;
                        innerStride3 -= innerInnerStride3 * @out.Shape.Dimensions[dimIndex2].Length;

                        for (long outer = 0; outer < totalOps; outer++)
                        {
                            //Get the array offset for the first element in the outer dimension
                            long ix1 = in1.Shape[counters];
                            long ix3 = @out.Shape[counters];


                            for (long i = 0; i < opsOuter; i++)
                            {
                                for (long j = 0; j < opsInner; j++)
                                {
                                    for (long k = 0; k < opsInnerInner; k++)
                                    {
                                        d2[ix3] = (System.Double)(d1[ix1]);
                                        ix1 += innerInnerStride1;
                                        ix3 += innerInnerStride3;
                                    }

                                    ix1 += innerStride1;
                                    ix3 += innerStride3;
                                }

                                ix1 += outerStride1;
                                ix3 += outerStride3;
                            }

                            if (counters.LongLength > 0)
                            {
                                //Basically a ripple carry adder
                                long p = counters.LongLength - 1;
                                while (++counters[p] == limits[p] && p > 0)
                                {
                                    counters[p] = 0;
                                    p--;
                                }
                            }
                        }
                    }
                }
            }
        }

        /// <summary>
        /// Unsafe implementation of applying a unary operation
        /// </summary>
        /// <typeparam name="C">The type of operation to perform</typeparam>
        /// <param name="op">The operation instance</param>
        /// <param name="scalar">The input scalar argument</param>
        /// <param name="out">The output target</param>
        internal static void UFunc_Op_Inner_Unary_Scalar_Flush_Double_TypedImpl<C>(NumCIL.CopyOp<System.Double> op, System.Double scalar, NdArray<System.Double> @out)
            where C : IUnaryOp<System.Double>
        {
            unsafe
            {
                using (var f2 = new Pinner(@out.DataAccessor))
                {
                    var d2 = (System.Double*)f2.ptr;

                    if (@out.Shape.Dimensions.Length == 1)
                    {
                        long totalOps = @out.Shape.Dimensions[0].Length;
                        long ix2 = @out.Shape.Offset;
                        long stride2 = @out.Shape.Dimensions[0].Stride;

                        for (long i = 0; i < totalOps; i++)
                        {
                            d2[ix2] = (System.Double)(scalar);
                            ix2 += stride2;
                        }
                    }
                    else if (@out.Shape.Dimensions.Length == 2)
                    {
                        long opsOuter = @out.Shape.Dimensions[0].Length;
                        long opsInner = @out.Shape.Dimensions[1].Length;

                        long ix2 = @out.Shape.Offset;
                        long outerStride2 = @out.Shape.Dimensions[0].Stride;
                        long innerStride2 = @out.Shape.Dimensions[1].Stride;
                        outerStride2 -= innerStride2 * @out.Shape.Dimensions[1].Length;

                        for (long i = 0; i < opsOuter; i++)
                        {
                            for (long j = 0; j < opsInner; j++)
                            {
                                d2[ix2] = (System.Double)(scalar);
                                ix2 += innerStride2;
                            }

                            ix2 += outerStride2;
                        }
                    }
                    else
                    {
                        long n = @out.Shape.Dimensions.LongLength - 3;
                        long[] limits = @out.Shape.Dimensions.Where(x => n-- > 0).Select(x => x.Length).ToArray();
                        long[] counters = new long[limits.LongLength];

                        long totalOps = limits.LongLength == 0 ? 1 : limits.Aggregate<long>((a, b) => a * b);

                        //This chunck of variables are used to prevent repeated calculations of offsets
                        long dimIndex0 = 0 + limits.LongLength;
                        long dimIndex1 = 1 + limits.LongLength;
                        long dimIndex2 = 2 + limits.LongLength;

                        long opsOuter = @out.Shape.Dimensions[0 + limits.LongLength].Length;
                        long opsInner = @out.Shape.Dimensions[1 + limits.LongLength].Length;
                        long opsInnerInner = @out.Shape.Dimensions[2 + limits.LongLength].Length;

                        long outerStride3 = @out.Shape.Dimensions[dimIndex0].Stride;
                        long innerStride3 = @out.Shape.Dimensions[dimIndex1].Stride;
                        long innerInnerStride3 = @out.Shape.Dimensions[dimIndex2].Stride;
                        outerStride3 -= innerStride3 * @out.Shape.Dimensions[dimIndex1].Length;
                        innerStride3 -= innerInnerStride3 * @out.Shape.Dimensions[dimIndex2].Length;

                        for (long outer = 0; outer < totalOps; outer++)
                        {
                            //Get the array offset for the first element in the outer dimension
                            long ix3 = @out.Shape[counters];

                            for (long i = 0; i < opsOuter; i++)
                            {
                                for (long j = 0; j < opsInner; j++)
                                {
                                    for (long k = 0; k < opsInnerInner; k++)
                                    {
                                        d2[ix3] = (System.Double)(scalar);
                                        ix3 += innerInnerStride3;
                                    }

                                    ix3 += innerStride3;
                                }

                                ix3 += outerStride3;
                            }

                            if (counters.LongLength > 0)
                            {
                                //Basically a ripple carry adder
                                long p = counters.LongLength - 1;
                                while (++counters[p] == limits[p] && p > 0)
                                {
                                    counters[p] = 0;
                                    p--;
                                }
                            }
                        }
                    }
                }
            }
        }
        /// <summary>
        /// Unsafe implementation of applying a unary operation
        /// </summary>
        /// <typeparam name="C">The type of operation to perform</typeparam>
        /// <param name="op">The operation instance</param>
        /// <param name="in1">The input argument</param>
        /// <param name="out">The output target</param>
        internal static void UFunc_Op_Inner_Unary_Flush_SByte_TypedImpl<C>(NumCIL.UInt8.ToUInt8 op, NdArray<System.SByte> in1, NdArray<System.Byte> @out)
            where C : IUnaryOp<System.SByte>
        {
            unsafe
            {
                using (var f1 = new Pinner(in1.DataAccessor))
                using (var f2 = new Pinner(@out.DataAccessor))
                {
                    var d1 = (System.SByte*)f1.ptr;
                    var d2 = (System.Byte*)f2.ptr;

                    if (@out.Shape.Dimensions.Length == 1)
                    {
                        long totalOps = @out.Shape.Dimensions[0].Length;

                        long ix1 = in1.Shape.Offset;
                        long ix2 = @out.Shape.Offset;

                        long stride1 = in1.Shape.Dimensions[0].Stride;
                        long stride2 = @out.Shape.Dimensions[0].Stride;


                        if (stride1 == stride2 && ix1 == ix2)
                        {
                            //Best case, all are equal, just keep a single counter
                            for (long i = 0; i < totalOps; i++)
                            {
                                d2[ix1] = (System.Byte)(d1[ix1]);
                                ix1 += stride1;
                            }
                        }
                        else
                        {
                            for (long i = 0; i < totalOps; i++)
                            {
                                d2[ix2] = (System.Byte)(d1[ix1]);
                                ix1 += stride1;
                                ix2 += stride2;
                            }
                        }
                    }
                    else if (@out.Shape.Dimensions.Length == 2)
                    {
                        long opsOuter = @out.Shape.Dimensions[0].Length;
                        long opsInner = @out.Shape.Dimensions[1].Length;

                        long ix1 = in1.Shape.Offset;
                        long ix2 = @out.Shape.Offset;

                        long outerStride1 = in1.Shape.Dimensions[0].Stride;
                        long outerStride2 = @out.Shape.Dimensions[0].Stride;

                        long innerStride1 = in1.Shape.Dimensions[1].Stride;
                        long innerStride2 = @out.Shape.Dimensions[1].Stride;

                        outerStride1 -= innerStride1 * in1.Shape.Dimensions[1].Length;
                        outerStride2 -= innerStride2 * @out.Shape.Dimensions[1].Length;

                        for (long i = 0; i < opsOuter; i++)
                        {
                            for (long j = 0; j < opsInner; j++)
                            {
                                d2[ix2] = (System.Byte)(d1[ix1]);
                                ix1 += innerStride1;
                                ix2 += innerStride2;
                            }

                            ix1 += outerStride1;
                            ix2 += outerStride2;
                        }
                    }
                    else
                    {
                        long n = in1.Shape.Dimensions.LongLength - 3;
                        long[] limits = in1.Shape.Dimensions.Where(x => n-- > 0).Select(x => x.Length).ToArray();
                        long[] counters = new long[limits.LongLength];

                        long totalOps = limits.LongLength == 0 ? 1 : limits.Aggregate<long>((a, b) => a * b);

                        //This chunck of variables are used to prevent repeated calculations of offsets
                        long dimIndex0 = 0 + limits.LongLength;
                        long dimIndex1 = 1 + limits.LongLength;
                        long dimIndex2 = 2 + limits.LongLength;

                        long opsOuter = @out.Shape.Dimensions[0 + limits.LongLength].Length;
                        long opsInner = @out.Shape.Dimensions[1 + limits.LongLength].Length;
                        long opsInnerInner = @out.Shape.Dimensions[2 + limits.LongLength].Length;

                        long outerStride1 = in1.Shape.Dimensions[dimIndex0].Stride;
                        long outerStride3 = @out.Shape.Dimensions[dimIndex0].Stride;

                        long innerStride1 = in1.Shape.Dimensions[dimIndex1].Stride;
                        long innerStride3 = @out.Shape.Dimensions[dimIndex1].Stride;

                        long innerInnerStride1 = in1.Shape.Dimensions[dimIndex2].Stride;
                        long innerInnerStride3 = @out.Shape.Dimensions[dimIndex2].Stride;

                        outerStride1 -= innerStride1 * in1.Shape.Dimensions[dimIndex1].Length;
                        outerStride3 -= innerStride3 * @out.Shape.Dimensions[dimIndex1].Length;

                        innerStride1 -= innerInnerStride1 * in1.Shape.Dimensions[dimIndex2].Length;
                        innerStride3 -= innerInnerStride3 * @out.Shape.Dimensions[dimIndex2].Length;

                        for (long outer = 0; outer < totalOps; outer++)
                        {
                            //Get the array offset for the first element in the outer dimension
                            long ix1 = in1.Shape[counters];
                            long ix3 = @out.Shape[counters];


                            for (long i = 0; i < opsOuter; i++)
                            {
                                for (long j = 0; j < opsInner; j++)
                                {
                                    for (long k = 0; k < opsInnerInner; k++)
                                    {
                                        d2[ix3] = (System.Byte)(d1[ix1]);
                                        ix1 += innerInnerStride1;
                                        ix3 += innerInnerStride3;
                                    }

                                    ix1 += innerStride1;
                                    ix3 += innerStride3;
                                }

                                ix1 += outerStride1;
                                ix3 += outerStride3;
                            }

                            if (counters.LongLength > 0)
                            {
                                //Basically a ripple carry adder
                                long p = counters.LongLength - 1;
                                while (++counters[p] == limits[p] && p > 0)
                                {
                                    counters[p] = 0;
                                    p--;
                                }
                            }
                        }
                    }
                }
            }
        }

        /// <summary>
        /// Unsafe implementation of applying a unary operation
        /// </summary>
        /// <typeparam name="C">The type of operation to perform</typeparam>
        /// <param name="op">The operation instance</param>
        /// <param name="scalar">The input scalar argument</param>
        /// <param name="out">The output target</param>
        internal static void UFunc_Op_Inner_Unary_Scalar_Flush_SByte_TypedImpl<C>(NumCIL.UInt8.ToUInt8 op, System.SByte scalar, NdArray<System.Byte> @out)
            where C : IUnaryOp<System.SByte>
        {
            unsafe
            {
                using (var f2 = new Pinner(@out.DataAccessor))
                {
                    var d2 = (System.Byte*)f2.ptr;

                    if (@out.Shape.Dimensions.Length == 1)
                    {
                        long totalOps = @out.Shape.Dimensions[0].Length;
                        long ix2 = @out.Shape.Offset;
                        long stride2 = @out.Shape.Dimensions[0].Stride;

                        for (long i = 0; i < totalOps; i++)
                        {
                            d2[ix2] = (System.Byte)(scalar);
                            ix2 += stride2;
                        }
                    }
                    else if (@out.Shape.Dimensions.Length == 2)
                    {
                        long opsOuter = @out.Shape.Dimensions[0].Length;
                        long opsInner = @out.Shape.Dimensions[1].Length;

                        long ix2 = @out.Shape.Offset;
                        long outerStride2 = @out.Shape.Dimensions[0].Stride;
                        long innerStride2 = @out.Shape.Dimensions[1].Stride;
                        outerStride2 -= innerStride2 * @out.Shape.Dimensions[1].Length;

                        for (long i = 0; i < opsOuter; i++)
                        {
                            for (long j = 0; j < opsInner; j++)
                            {
                                d2[ix2] = (System.Byte)(scalar);
                                ix2 += innerStride2;
                            }

                            ix2 += outerStride2;
                        }
                    }
                    else
                    {
                        long n = @out.Shape.Dimensions.LongLength - 3;
                        long[] limits = @out.Shape.Dimensions.Where(x => n-- > 0).Select(x => x.Length).ToArray();
                        long[] counters = new long[limits.LongLength];

                        long totalOps = limits.LongLength == 0 ? 1 : limits.Aggregate<long>((a, b) => a * b);

                        //This chunck of variables are used to prevent repeated calculations of offsets
                        long dimIndex0 = 0 + limits.LongLength;
                        long dimIndex1 = 1 + limits.LongLength;
                        long dimIndex2 = 2 + limits.LongLength;

                        long opsOuter = @out.Shape.Dimensions[0 + limits.LongLength].Length;
                        long opsInner = @out.Shape.Dimensions[1 + limits.LongLength].Length;
                        long opsInnerInner = @out.Shape.Dimensions[2 + limits.LongLength].Length;

                        long outerStride3 = @out.Shape.Dimensions[dimIndex0].Stride;
                        long innerStride3 = @out.Shape.Dimensions[dimIndex1].Stride;
                        long innerInnerStride3 = @out.Shape.Dimensions[dimIndex2].Stride;
                        outerStride3 -= innerStride3 * @out.Shape.Dimensions[dimIndex1].Length;
                        innerStride3 -= innerInnerStride3 * @out.Shape.Dimensions[dimIndex2].Length;

                        for (long outer = 0; outer < totalOps; outer++)
                        {
                            //Get the array offset for the first element in the outer dimension
                            long ix3 = @out.Shape[counters];

                            for (long i = 0; i < opsOuter; i++)
                            {
                                for (long j = 0; j < opsInner; j++)
                                {
                                    for (long k = 0; k < opsInnerInner; k++)
                                    {
                                        d2[ix3] = (System.Byte)(scalar);
                                        ix3 += innerInnerStride3;
                                    }

                                    ix3 += innerStride3;
                                }

                                ix3 += outerStride3;
                            }

                            if (counters.LongLength > 0)
                            {
                                //Basically a ripple carry adder
                                long p = counters.LongLength - 1;
                                while (++counters[p] == limits[p] && p > 0)
                                {
                                    counters[p] = 0;
                                    p--;
                                }
                            }
                        }
                    }
                }
            }
        }
        /// <summary>
        /// Unsafe implementation of applying a unary operation
        /// </summary>
        /// <typeparam name="C">The type of operation to perform</typeparam>
        /// <param name="op">The operation instance</param>
        /// <param name="in1">The input argument</param>
        /// <param name="out">The output target</param>
        internal static void UFunc_Op_Inner_Unary_Flush_Byte_TypedImpl<C>(NumCIL.UInt8.ToUInt8 op, NdArray<System.Byte> in1, NdArray<System.Byte> @out)
            where C : IUnaryOp<System.Byte>
        {
            unsafe
            {
                using (var f1 = new Pinner(in1.DataAccessor))
                using (var f2 = new Pinner(@out.DataAccessor))
                {
                    var d1 = (System.Byte*)f1.ptr;
                    var d2 = (System.Byte*)f2.ptr;

                    if (@out.Shape.Dimensions.Length == 1)
                    {
                        long totalOps = @out.Shape.Dimensions[0].Length;

                        long ix1 = in1.Shape.Offset;
                        long ix2 = @out.Shape.Offset;

                        long stride1 = in1.Shape.Dimensions[0].Stride;
                        long stride2 = @out.Shape.Dimensions[0].Stride;


                        if (stride1 == stride2 && ix1 == ix2)
                        {
                            //Best case, all are equal, just keep a single counter
                            for (long i = 0; i < totalOps; i++)
                            {
                                d2[ix1] = (System.Byte)(d1[ix1]);
                                ix1 += stride1;
                            }
                        }
                        else
                        {
                            for (long i = 0; i < totalOps; i++)
                            {
                                d2[ix2] = (System.Byte)(d1[ix1]);
                                ix1 += stride1;
                                ix2 += stride2;
                            }
                        }
                    }
                    else if (@out.Shape.Dimensions.Length == 2)
                    {
                        long opsOuter = @out.Shape.Dimensions[0].Length;
                        long opsInner = @out.Shape.Dimensions[1].Length;

                        long ix1 = in1.Shape.Offset;
                        long ix2 = @out.Shape.Offset;

                        long outerStride1 = in1.Shape.Dimensions[0].Stride;
                        long outerStride2 = @out.Shape.Dimensions[0].Stride;

                        long innerStride1 = in1.Shape.Dimensions[1].Stride;
                        long innerStride2 = @out.Shape.Dimensions[1].Stride;

                        outerStride1 -= innerStride1 * in1.Shape.Dimensions[1].Length;
                        outerStride2 -= innerStride2 * @out.Shape.Dimensions[1].Length;

                        for (long i = 0; i < opsOuter; i++)
                        {
                            for (long j = 0; j < opsInner; j++)
                            {
                                d2[ix2] = (System.Byte)(d1[ix1]);
                                ix1 += innerStride1;
                                ix2 += innerStride2;
                            }

                            ix1 += outerStride1;
                            ix2 += outerStride2;
                        }
                    }
                    else
                    {
                        long n = in1.Shape.Dimensions.LongLength - 3;
                        long[] limits = in1.Shape.Dimensions.Where(x => n-- > 0).Select(x => x.Length).ToArray();
                        long[] counters = new long[limits.LongLength];

                        long totalOps = limits.LongLength == 0 ? 1 : limits.Aggregate<long>((a, b) => a * b);

                        //This chunck of variables are used to prevent repeated calculations of offsets
                        long dimIndex0 = 0 + limits.LongLength;
                        long dimIndex1 = 1 + limits.LongLength;
                        long dimIndex2 = 2 + limits.LongLength;

                        long opsOuter = @out.Shape.Dimensions[0 + limits.LongLength].Length;
                        long opsInner = @out.Shape.Dimensions[1 + limits.LongLength].Length;
                        long opsInnerInner = @out.Shape.Dimensions[2 + limits.LongLength].Length;

                        long outerStride1 = in1.Shape.Dimensions[dimIndex0].Stride;
                        long outerStride3 = @out.Shape.Dimensions[dimIndex0].Stride;

                        long innerStride1 = in1.Shape.Dimensions[dimIndex1].Stride;
                        long innerStride3 = @out.Shape.Dimensions[dimIndex1].Stride;

                        long innerInnerStride1 = in1.Shape.Dimensions[dimIndex2].Stride;
                        long innerInnerStride3 = @out.Shape.Dimensions[dimIndex2].Stride;

                        outerStride1 -= innerStride1 * in1.Shape.Dimensions[dimIndex1].Length;
                        outerStride3 -= innerStride3 * @out.Shape.Dimensions[dimIndex1].Length;

                        innerStride1 -= innerInnerStride1 * in1.Shape.Dimensions[dimIndex2].Length;
                        innerStride3 -= innerInnerStride3 * @out.Shape.Dimensions[dimIndex2].Length;

                        for (long outer = 0; outer < totalOps; outer++)
                        {
                            //Get the array offset for the first element in the outer dimension
                            long ix1 = in1.Shape[counters];
                            long ix3 = @out.Shape[counters];


                            for (long i = 0; i < opsOuter; i++)
                            {
                                for (long j = 0; j < opsInner; j++)
                                {
                                    for (long k = 0; k < opsInnerInner; k++)
                                    {
                                        d2[ix3] = (System.Byte)(d1[ix1]);
                                        ix1 += innerInnerStride1;
                                        ix3 += innerInnerStride3;
                                    }

                                    ix1 += innerStride1;
                                    ix3 += innerStride3;
                                }

                                ix1 += outerStride1;
                                ix3 += outerStride3;
                            }

                            if (counters.LongLength > 0)
                            {
                                //Basically a ripple carry adder
                                long p = counters.LongLength - 1;
                                while (++counters[p] == limits[p] && p > 0)
                                {
                                    counters[p] = 0;
                                    p--;
                                }
                            }
                        }
                    }
                }
            }
        }

        /// <summary>
        /// Unsafe implementation of applying a unary operation
        /// </summary>
        /// <typeparam name="C">The type of operation to perform</typeparam>
        /// <param name="op">The operation instance</param>
        /// <param name="scalar">The input scalar argument</param>
        /// <param name="out">The output target</param>
        internal static void UFunc_Op_Inner_Unary_Scalar_Flush_Byte_TypedImpl<C>(NumCIL.UInt8.ToUInt8 op, System.Byte scalar, NdArray<System.Byte> @out)
            where C : IUnaryOp<System.Byte>
        {
            unsafe
            {
                using (var f2 = new Pinner(@out.DataAccessor))
                {
                    var d2 = (System.Byte*)f2.ptr;

                    if (@out.Shape.Dimensions.Length == 1)
                    {
                        long totalOps = @out.Shape.Dimensions[0].Length;
                        long ix2 = @out.Shape.Offset;
                        long stride2 = @out.Shape.Dimensions[0].Stride;

                        for (long i = 0; i < totalOps; i++)
                        {
                            d2[ix2] = (System.Byte)(scalar);
                            ix2 += stride2;
                        }
                    }
                    else if (@out.Shape.Dimensions.Length == 2)
                    {
                        long opsOuter = @out.Shape.Dimensions[0].Length;
                        long opsInner = @out.Shape.Dimensions[1].Length;

                        long ix2 = @out.Shape.Offset;
                        long outerStride2 = @out.Shape.Dimensions[0].Stride;
                        long innerStride2 = @out.Shape.Dimensions[1].Stride;
                        outerStride2 -= innerStride2 * @out.Shape.Dimensions[1].Length;

                        for (long i = 0; i < opsOuter; i++)
                        {
                            for (long j = 0; j < opsInner; j++)
                            {
                                d2[ix2] = (System.Byte)(scalar);
                                ix2 += innerStride2;
                            }

                            ix2 += outerStride2;
                        }
                    }
                    else
                    {
                        long n = @out.Shape.Dimensions.LongLength - 3;
                        long[] limits = @out.Shape.Dimensions.Where(x => n-- > 0).Select(x => x.Length).ToArray();
                        long[] counters = new long[limits.LongLength];

                        long totalOps = limits.LongLength == 0 ? 1 : limits.Aggregate<long>((a, b) => a * b);

                        //This chunck of variables are used to prevent repeated calculations of offsets
                        long dimIndex0 = 0 + limits.LongLength;
                        long dimIndex1 = 1 + limits.LongLength;
                        long dimIndex2 = 2 + limits.LongLength;

                        long opsOuter = @out.Shape.Dimensions[0 + limits.LongLength].Length;
                        long opsInner = @out.Shape.Dimensions[1 + limits.LongLength].Length;
                        long opsInnerInner = @out.Shape.Dimensions[2 + limits.LongLength].Length;

                        long outerStride3 = @out.Shape.Dimensions[dimIndex0].Stride;
                        long innerStride3 = @out.Shape.Dimensions[dimIndex1].Stride;
                        long innerInnerStride3 = @out.Shape.Dimensions[dimIndex2].Stride;
                        outerStride3 -= innerStride3 * @out.Shape.Dimensions[dimIndex1].Length;
                        innerStride3 -= innerInnerStride3 * @out.Shape.Dimensions[dimIndex2].Length;

                        for (long outer = 0; outer < totalOps; outer++)
                        {
                            //Get the array offset for the first element in the outer dimension
                            long ix3 = @out.Shape[counters];

                            for (long i = 0; i < opsOuter; i++)
                            {
                                for (long j = 0; j < opsInner; j++)
                                {
                                    for (long k = 0; k < opsInnerInner; k++)
                                    {
                                        d2[ix3] = (System.Byte)(scalar);
                                        ix3 += innerInnerStride3;
                                    }

                                    ix3 += innerStride3;
                                }

                                ix3 += outerStride3;
                            }

                            if (counters.LongLength > 0)
                            {
                                //Basically a ripple carry adder
                                long p = counters.LongLength - 1;
                                while (++counters[p] == limits[p] && p > 0)
                                {
                                    counters[p] = 0;
                                    p--;
                                }
                            }
                        }
                    }
                }
            }
        }
        /// <summary>
        /// Unsafe implementation of applying a unary operation
        /// </summary>
        /// <typeparam name="C">The type of operation to perform</typeparam>
        /// <param name="op">The operation instance</param>
        /// <param name="in1">The input argument</param>
        /// <param name="out">The output target</param>
        internal static void UFunc_Op_Inner_Unary_Flush_Int16_TypedImpl<C>(NumCIL.UInt8.ToUInt8 op, NdArray<System.Int16> in1, NdArray<System.Byte> @out)
            where C : IUnaryOp<System.Int16>
        {
            unsafe
            {
                using (var f1 = new Pinner(in1.DataAccessor))
                using (var f2 = new Pinner(@out.DataAccessor))
                {
                    var d1 = (System.Int16*)f1.ptr;
                    var d2 = (System.Byte*)f2.ptr;

                    if (@out.Shape.Dimensions.Length == 1)
                    {
                        long totalOps = @out.Shape.Dimensions[0].Length;

                        long ix1 = in1.Shape.Offset;
                        long ix2 = @out.Shape.Offset;

                        long stride1 = in1.Shape.Dimensions[0].Stride;
                        long stride2 = @out.Shape.Dimensions[0].Stride;


                        if (stride1 == stride2 && ix1 == ix2)
                        {
                            //Best case, all are equal, just keep a single counter
                            for (long i = 0; i < totalOps; i++)
                            {
                                d2[ix1] = (System.Byte)(d1[ix1]);
                                ix1 += stride1;
                            }
                        }
                        else
                        {
                            for (long i = 0; i < totalOps; i++)
                            {
                                d2[ix2] = (System.Byte)(d1[ix1]);
                                ix1 += stride1;
                                ix2 += stride2;
                            }
                        }
                    }
                    else if (@out.Shape.Dimensions.Length == 2)
                    {
                        long opsOuter = @out.Shape.Dimensions[0].Length;
                        long opsInner = @out.Shape.Dimensions[1].Length;

                        long ix1 = in1.Shape.Offset;
                        long ix2 = @out.Shape.Offset;

                        long outerStride1 = in1.Shape.Dimensions[0].Stride;
                        long outerStride2 = @out.Shape.Dimensions[0].Stride;

                        long innerStride1 = in1.Shape.Dimensions[1].Stride;
                        long innerStride2 = @out.Shape.Dimensions[1].Stride;

                        outerStride1 -= innerStride1 * in1.Shape.Dimensions[1].Length;
                        outerStride2 -= innerStride2 * @out.Shape.Dimensions[1].Length;

                        for (long i = 0; i < opsOuter; i++)
                        {
                            for (long j = 0; j < opsInner; j++)
                            {
                                d2[ix2] = (System.Byte)(d1[ix1]);
                                ix1 += innerStride1;
                                ix2 += innerStride2;
                            }

                            ix1 += outerStride1;
                            ix2 += outerStride2;
                        }
                    }
                    else
                    {
                        long n = in1.Shape.Dimensions.LongLength - 3;
                        long[] limits = in1.Shape.Dimensions.Where(x => n-- > 0).Select(x => x.Length).ToArray();
                        long[] counters = new long[limits.LongLength];

                        long totalOps = limits.LongLength == 0 ? 1 : limits.Aggregate<long>((a, b) => a * b);

                        //This chunck of variables are used to prevent repeated calculations of offsets
                        long dimIndex0 = 0 + limits.LongLength;
                        long dimIndex1 = 1 + limits.LongLength;
                        long dimIndex2 = 2 + limits.LongLength;

                        long opsOuter = @out.Shape.Dimensions[0 + limits.LongLength].Length;
                        long opsInner = @out.Shape.Dimensions[1 + limits.LongLength].Length;
                        long opsInnerInner = @out.Shape.Dimensions[2 + limits.LongLength].Length;

                        long outerStride1 = in1.Shape.Dimensions[dimIndex0].Stride;
                        long outerStride3 = @out.Shape.Dimensions[dimIndex0].Stride;

                        long innerStride1 = in1.Shape.Dimensions[dimIndex1].Stride;
                        long innerStride3 = @out.Shape.Dimensions[dimIndex1].Stride;

                        long innerInnerStride1 = in1.Shape.Dimensions[dimIndex2].Stride;
                        long innerInnerStride3 = @out.Shape.Dimensions[dimIndex2].Stride;

                        outerStride1 -= innerStride1 * in1.Shape.Dimensions[dimIndex1].Length;
                        outerStride3 -= innerStride3 * @out.Shape.Dimensions[dimIndex1].Length;

                        innerStride1 -= innerInnerStride1 * in1.Shape.Dimensions[dimIndex2].Length;
                        innerStride3 -= innerInnerStride3 * @out.Shape.Dimensions[dimIndex2].Length;

                        for (long outer = 0; outer < totalOps; outer++)
                        {
                            //Get the array offset for the first element in the outer dimension
                            long ix1 = in1.Shape[counters];
                            long ix3 = @out.Shape[counters];


                            for (long i = 0; i < opsOuter; i++)
                            {
                                for (long j = 0; j < opsInner; j++)
                                {
                                    for (long k = 0; k < opsInnerInner; k++)
                                    {
                                        d2[ix3] = (System.Byte)(d1[ix1]);
                                        ix1 += innerInnerStride1;
                                        ix3 += innerInnerStride3;
                                    }

                                    ix1 += innerStride1;
                                    ix3 += innerStride3;
                                }

                                ix1 += outerStride1;
                                ix3 += outerStride3;
                            }

                            if (counters.LongLength > 0)
                            {
                                //Basically a ripple carry adder
                                long p = counters.LongLength - 1;
                                while (++counters[p] == limits[p] && p > 0)
                                {
                                    counters[p] = 0;
                                    p--;
                                }
                            }
                        }
                    }
                }
            }
        }

        /// <summary>
        /// Unsafe implementation of applying a unary operation
        /// </summary>
        /// <typeparam name="C">The type of operation to perform</typeparam>
        /// <param name="op">The operation instance</param>
        /// <param name="scalar">The input scalar argument</param>
        /// <param name="out">The output target</param>
        internal static void UFunc_Op_Inner_Unary_Scalar_Flush_Int16_TypedImpl<C>(NumCIL.UInt8.ToUInt8 op, System.Int16 scalar, NdArray<System.Byte> @out)
            where C : IUnaryOp<System.Int16>
        {
            unsafe
            {
                using (var f2 = new Pinner(@out.DataAccessor))
                {
                    var d2 = (System.Byte*)f2.ptr;

                    if (@out.Shape.Dimensions.Length == 1)
                    {
                        long totalOps = @out.Shape.Dimensions[0].Length;
                        long ix2 = @out.Shape.Offset;
                        long stride2 = @out.Shape.Dimensions[0].Stride;

                        for (long i = 0; i < totalOps; i++)
                        {
                            d2[ix2] = (System.Byte)(scalar);
                            ix2 += stride2;
                        }
                    }
                    else if (@out.Shape.Dimensions.Length == 2)
                    {
                        long opsOuter = @out.Shape.Dimensions[0].Length;
                        long opsInner = @out.Shape.Dimensions[1].Length;

                        long ix2 = @out.Shape.Offset;
                        long outerStride2 = @out.Shape.Dimensions[0].Stride;
                        long innerStride2 = @out.Shape.Dimensions[1].Stride;
                        outerStride2 -= innerStride2 * @out.Shape.Dimensions[1].Length;

                        for (long i = 0; i < opsOuter; i++)
                        {
                            for (long j = 0; j < opsInner; j++)
                            {
                                d2[ix2] = (System.Byte)(scalar);
                                ix2 += innerStride2;
                            }

                            ix2 += outerStride2;
                        }
                    }
                    else
                    {
                        long n = @out.Shape.Dimensions.LongLength - 3;
                        long[] limits = @out.Shape.Dimensions.Where(x => n-- > 0).Select(x => x.Length).ToArray();
                        long[] counters = new long[limits.LongLength];

                        long totalOps = limits.LongLength == 0 ? 1 : limits.Aggregate<long>((a, b) => a * b);

                        //This chunck of variables are used to prevent repeated calculations of offsets
                        long dimIndex0 = 0 + limits.LongLength;
                        long dimIndex1 = 1 + limits.LongLength;
                        long dimIndex2 = 2 + limits.LongLength;

                        long opsOuter = @out.Shape.Dimensions[0 + limits.LongLength].Length;
                        long opsInner = @out.Shape.Dimensions[1 + limits.LongLength].Length;
                        long opsInnerInner = @out.Shape.Dimensions[2 + limits.LongLength].Length;

                        long outerStride3 = @out.Shape.Dimensions[dimIndex0].Stride;
                        long innerStride3 = @out.Shape.Dimensions[dimIndex1].Stride;
                        long innerInnerStride3 = @out.Shape.Dimensions[dimIndex2].Stride;
                        outerStride3 -= innerStride3 * @out.Shape.Dimensions[dimIndex1].Length;
                        innerStride3 -= innerInnerStride3 * @out.Shape.Dimensions[dimIndex2].Length;

                        for (long outer = 0; outer < totalOps; outer++)
                        {
                            //Get the array offset for the first element in the outer dimension
                            long ix3 = @out.Shape[counters];

                            for (long i = 0; i < opsOuter; i++)
                            {
                                for (long j = 0; j < opsInner; j++)
                                {
                                    for (long k = 0; k < opsInnerInner; k++)
                                    {
                                        d2[ix3] = (System.Byte)(scalar);
                                        ix3 += innerInnerStride3;
                                    }

                                    ix3 += innerStride3;
                                }

                                ix3 += outerStride3;
                            }

                            if (counters.LongLength > 0)
                            {
                                //Basically a ripple carry adder
                                long p = counters.LongLength - 1;
                                while (++counters[p] == limits[p] && p > 0)
                                {
                                    counters[p] = 0;
                                    p--;
                                }
                            }
                        }
                    }
                }
            }
        }
        /// <summary>
        /// Unsafe implementation of applying a unary operation
        /// </summary>
        /// <typeparam name="C">The type of operation to perform</typeparam>
        /// <param name="op">The operation instance</param>
        /// <param name="in1">The input argument</param>
        /// <param name="out">The output target</param>
        internal static void UFunc_Op_Inner_Unary_Flush_UInt16_TypedImpl<C>(NumCIL.UInt8.ToUInt8 op, NdArray<System.UInt16> in1, NdArray<System.Byte> @out)
            where C : IUnaryOp<System.UInt16>
        {
            unsafe
            {
                using (var f1 = new Pinner(in1.DataAccessor))
                using (var f2 = new Pinner(@out.DataAccessor))
                {
                    var d1 = (System.UInt16*)f1.ptr;
                    var d2 = (System.Byte*)f2.ptr;

                    if (@out.Shape.Dimensions.Length == 1)
                    {
                        long totalOps = @out.Shape.Dimensions[0].Length;

                        long ix1 = in1.Shape.Offset;
                        long ix2 = @out.Shape.Offset;

                        long stride1 = in1.Shape.Dimensions[0].Stride;
                        long stride2 = @out.Shape.Dimensions[0].Stride;


                        if (stride1 == stride2 && ix1 == ix2)
                        {
                            //Best case, all are equal, just keep a single counter
                            for (long i = 0; i < totalOps; i++)
                            {
                                d2[ix1] = (System.Byte)(d1[ix1]);
                                ix1 += stride1;
                            }
                        }
                        else
                        {
                            for (long i = 0; i < totalOps; i++)
                            {
                                d2[ix2] = (System.Byte)(d1[ix1]);
                                ix1 += stride1;
                                ix2 += stride2;
                            }
                        }
                    }
                    else if (@out.Shape.Dimensions.Length == 2)
                    {
                        long opsOuter = @out.Shape.Dimensions[0].Length;
                        long opsInner = @out.Shape.Dimensions[1].Length;

                        long ix1 = in1.Shape.Offset;
                        long ix2 = @out.Shape.Offset;

                        long outerStride1 = in1.Shape.Dimensions[0].Stride;
                        long outerStride2 = @out.Shape.Dimensions[0].Stride;

                        long innerStride1 = in1.Shape.Dimensions[1].Stride;
                        long innerStride2 = @out.Shape.Dimensions[1].Stride;

                        outerStride1 -= innerStride1 * in1.Shape.Dimensions[1].Length;
                        outerStride2 -= innerStride2 * @out.Shape.Dimensions[1].Length;

                        for (long i = 0; i < opsOuter; i++)
                        {
                            for (long j = 0; j < opsInner; j++)
                            {
                                d2[ix2] = (System.Byte)(d1[ix1]);
                                ix1 += innerStride1;
                                ix2 += innerStride2;
                            }

                            ix1 += outerStride1;
                            ix2 += outerStride2;
                        }
                    }
                    else
                    {
                        long n = in1.Shape.Dimensions.LongLength - 3;
                        long[] limits = in1.Shape.Dimensions.Where(x => n-- > 0).Select(x => x.Length).ToArray();
                        long[] counters = new long[limits.LongLength];

                        long totalOps = limits.LongLength == 0 ? 1 : limits.Aggregate<long>((a, b) => a * b);

                        //This chunck of variables are used to prevent repeated calculations of offsets
                        long dimIndex0 = 0 + limits.LongLength;
                        long dimIndex1 = 1 + limits.LongLength;
                        long dimIndex2 = 2 + limits.LongLength;

                        long opsOuter = @out.Shape.Dimensions[0 + limits.LongLength].Length;
                        long opsInner = @out.Shape.Dimensions[1 + limits.LongLength].Length;
                        long opsInnerInner = @out.Shape.Dimensions[2 + limits.LongLength].Length;

                        long outerStride1 = in1.Shape.Dimensions[dimIndex0].Stride;
                        long outerStride3 = @out.Shape.Dimensions[dimIndex0].Stride;

                        long innerStride1 = in1.Shape.Dimensions[dimIndex1].Stride;
                        long innerStride3 = @out.Shape.Dimensions[dimIndex1].Stride;

                        long innerInnerStride1 = in1.Shape.Dimensions[dimIndex2].Stride;
                        long innerInnerStride3 = @out.Shape.Dimensions[dimIndex2].Stride;

                        outerStride1 -= innerStride1 * in1.Shape.Dimensions[dimIndex1].Length;
                        outerStride3 -= innerStride3 * @out.Shape.Dimensions[dimIndex1].Length;

                        innerStride1 -= innerInnerStride1 * in1.Shape.Dimensions[dimIndex2].Length;
                        innerStride3 -= innerInnerStride3 * @out.Shape.Dimensions[dimIndex2].Length;

                        for (long outer = 0; outer < totalOps; outer++)
                        {
                            //Get the array offset for the first element in the outer dimension
                            long ix1 = in1.Shape[counters];
                            long ix3 = @out.Shape[counters];


                            for (long i = 0; i < opsOuter; i++)
                            {
                                for (long j = 0; j < opsInner; j++)
                                {
                                    for (long k = 0; k < opsInnerInner; k++)
                                    {
                                        d2[ix3] = (System.Byte)(d1[ix1]);
                                        ix1 += innerInnerStride1;
                                        ix3 += innerInnerStride3;
                                    }

                                    ix1 += innerStride1;
                                    ix3 += innerStride3;
                                }

                                ix1 += outerStride1;
                                ix3 += outerStride3;
                            }

                            if (counters.LongLength > 0)
                            {
                                //Basically a ripple carry adder
                                long p = counters.LongLength - 1;
                                while (++counters[p] == limits[p] && p > 0)
                                {
                                    counters[p] = 0;
                                    p--;
                                }
                            }
                        }
                    }
                }
            }
        }

        /// <summary>
        /// Unsafe implementation of applying a unary operation
        /// </summary>
        /// <typeparam name="C">The type of operation to perform</typeparam>
        /// <param name="op">The operation instance</param>
        /// <param name="scalar">The input scalar argument</param>
        /// <param name="out">The output target</param>
        internal static void UFunc_Op_Inner_Unary_Scalar_Flush_UInt16_TypedImpl<C>(NumCIL.UInt8.ToUInt8 op, System.UInt16 scalar, NdArray<System.Byte> @out)
            where C : IUnaryOp<System.UInt16>
        {
            unsafe
            {
                using (var f2 = new Pinner(@out.DataAccessor))
                {
                    var d2 = (System.Byte*)f2.ptr;

                    if (@out.Shape.Dimensions.Length == 1)
                    {
                        long totalOps = @out.Shape.Dimensions[0].Length;
                        long ix2 = @out.Shape.Offset;
                        long stride2 = @out.Shape.Dimensions[0].Stride;

                        for (long i = 0; i < totalOps; i++)
                        {
                            d2[ix2] = (System.Byte)(scalar);
                            ix2 += stride2;
                        }
                    }
                    else if (@out.Shape.Dimensions.Length == 2)
                    {
                        long opsOuter = @out.Shape.Dimensions[0].Length;
                        long opsInner = @out.Shape.Dimensions[1].Length;

                        long ix2 = @out.Shape.Offset;
                        long outerStride2 = @out.Shape.Dimensions[0].Stride;
                        long innerStride2 = @out.Shape.Dimensions[1].Stride;
                        outerStride2 -= innerStride2 * @out.Shape.Dimensions[1].Length;

                        for (long i = 0; i < opsOuter; i++)
                        {
                            for (long j = 0; j < opsInner; j++)
                            {
                                d2[ix2] = (System.Byte)(scalar);
                                ix2 += innerStride2;
                            }

                            ix2 += outerStride2;
                        }
                    }
                    else
                    {
                        long n = @out.Shape.Dimensions.LongLength - 3;
                        long[] limits = @out.Shape.Dimensions.Where(x => n-- > 0).Select(x => x.Length).ToArray();
                        long[] counters = new long[limits.LongLength];

                        long totalOps = limits.LongLength == 0 ? 1 : limits.Aggregate<long>((a, b) => a * b);

                        //This chunck of variables are used to prevent repeated calculations of offsets
                        long dimIndex0 = 0 + limits.LongLength;
                        long dimIndex1 = 1 + limits.LongLength;
                        long dimIndex2 = 2 + limits.LongLength;

                        long opsOuter = @out.Shape.Dimensions[0 + limits.LongLength].Length;
                        long opsInner = @out.Shape.Dimensions[1 + limits.LongLength].Length;
                        long opsInnerInner = @out.Shape.Dimensions[2 + limits.LongLength].Length;

                        long outerStride3 = @out.Shape.Dimensions[dimIndex0].Stride;
                        long innerStride3 = @out.Shape.Dimensions[dimIndex1].Stride;
                        long innerInnerStride3 = @out.Shape.Dimensions[dimIndex2].Stride;
                        outerStride3 -= innerStride3 * @out.Shape.Dimensions[dimIndex1].Length;
                        innerStride3 -= innerInnerStride3 * @out.Shape.Dimensions[dimIndex2].Length;

                        for (long outer = 0; outer < totalOps; outer++)
                        {
                            //Get the array offset for the first element in the outer dimension
                            long ix3 = @out.Shape[counters];

                            for (long i = 0; i < opsOuter; i++)
                            {
                                for (long j = 0; j < opsInner; j++)
                                {
                                    for (long k = 0; k < opsInnerInner; k++)
                                    {
                                        d2[ix3] = (System.Byte)(scalar);
                                        ix3 += innerInnerStride3;
                                    }

                                    ix3 += innerStride3;
                                }

                                ix3 += outerStride3;
                            }

                            if (counters.LongLength > 0)
                            {
                                //Basically a ripple carry adder
                                long p = counters.LongLength - 1;
                                while (++counters[p] == limits[p] && p > 0)
                                {
                                    counters[p] = 0;
                                    p--;
                                }
                            }
                        }
                    }
                }
            }
        }
        /// <summary>
        /// Unsafe implementation of applying a unary operation
        /// </summary>
        /// <typeparam name="C">The type of operation to perform</typeparam>
        /// <param name="op">The operation instance</param>
        /// <param name="in1">The input argument</param>
        /// <param name="out">The output target</param>
        internal static void UFunc_Op_Inner_Unary_Flush_Int32_TypedImpl<C>(NumCIL.UInt8.ToUInt8 op, NdArray<System.Int32> in1, NdArray<System.Byte> @out)
            where C : IUnaryOp<System.Int32>
        {
            unsafe
            {
                using (var f1 = new Pinner(in1.DataAccessor))
                using (var f2 = new Pinner(@out.DataAccessor))
                {
                    var d1 = (System.Int32*)f1.ptr;
                    var d2 = (System.Byte*)f2.ptr;

                    if (@out.Shape.Dimensions.Length == 1)
                    {
                        long totalOps = @out.Shape.Dimensions[0].Length;

                        long ix1 = in1.Shape.Offset;
                        long ix2 = @out.Shape.Offset;

                        long stride1 = in1.Shape.Dimensions[0].Stride;
                        long stride2 = @out.Shape.Dimensions[0].Stride;


                        if (stride1 == stride2 && ix1 == ix2)
                        {
                            //Best case, all are equal, just keep a single counter
                            for (long i = 0; i < totalOps; i++)
                            {
                                d2[ix1] = (System.Byte)(d1[ix1]);
                                ix1 += stride1;
                            }
                        }
                        else
                        {
                            for (long i = 0; i < totalOps; i++)
                            {
                                d2[ix2] = (System.Byte)(d1[ix1]);
                                ix1 += stride1;
                                ix2 += stride2;
                            }
                        }
                    }
                    else if (@out.Shape.Dimensions.Length == 2)
                    {
                        long opsOuter = @out.Shape.Dimensions[0].Length;
                        long opsInner = @out.Shape.Dimensions[1].Length;

                        long ix1 = in1.Shape.Offset;
                        long ix2 = @out.Shape.Offset;

                        long outerStride1 = in1.Shape.Dimensions[0].Stride;
                        long outerStride2 = @out.Shape.Dimensions[0].Stride;

                        long innerStride1 = in1.Shape.Dimensions[1].Stride;
                        long innerStride2 = @out.Shape.Dimensions[1].Stride;

                        outerStride1 -= innerStride1 * in1.Shape.Dimensions[1].Length;
                        outerStride2 -= innerStride2 * @out.Shape.Dimensions[1].Length;

                        for (long i = 0; i < opsOuter; i++)
                        {
                            for (long j = 0; j < opsInner; j++)
                            {
                                d2[ix2] = (System.Byte)(d1[ix1]);
                                ix1 += innerStride1;
                                ix2 += innerStride2;
                            }

                            ix1 += outerStride1;
                            ix2 += outerStride2;
                        }
                    }
                    else
                    {
                        long n = in1.Shape.Dimensions.LongLength - 3;
                        long[] limits = in1.Shape.Dimensions.Where(x => n-- > 0).Select(x => x.Length).ToArray();
                        long[] counters = new long[limits.LongLength];

                        long totalOps = limits.LongLength == 0 ? 1 : limits.Aggregate<long>((a, b) => a * b);

                        //This chunck of variables are used to prevent repeated calculations of offsets
                        long dimIndex0 = 0 + limits.LongLength;
                        long dimIndex1 = 1 + limits.LongLength;
                        long dimIndex2 = 2 + limits.LongLength;

                        long opsOuter = @out.Shape.Dimensions[0 + limits.LongLength].Length;
                        long opsInner = @out.Shape.Dimensions[1 + limits.LongLength].Length;
                        long opsInnerInner = @out.Shape.Dimensions[2 + limits.LongLength].Length;

                        long outerStride1 = in1.Shape.Dimensions[dimIndex0].Stride;
                        long outerStride3 = @out.Shape.Dimensions[dimIndex0].Stride;

                        long innerStride1 = in1.Shape.Dimensions[dimIndex1].Stride;
                        long innerStride3 = @out.Shape.Dimensions[dimIndex1].Stride;

                        long innerInnerStride1 = in1.Shape.Dimensions[dimIndex2].Stride;
                        long innerInnerStride3 = @out.Shape.Dimensions[dimIndex2].Stride;

                        outerStride1 -= innerStride1 * in1.Shape.Dimensions[dimIndex1].Length;
                        outerStride3 -= innerStride3 * @out.Shape.Dimensions[dimIndex1].Length;

                        innerStride1 -= innerInnerStride1 * in1.Shape.Dimensions[dimIndex2].Length;
                        innerStride3 -= innerInnerStride3 * @out.Shape.Dimensions[dimIndex2].Length;

                        for (long outer = 0; outer < totalOps; outer++)
                        {
                            //Get the array offset for the first element in the outer dimension
                            long ix1 = in1.Shape[counters];
                            long ix3 = @out.Shape[counters];


                            for (long i = 0; i < opsOuter; i++)
                            {
                                for (long j = 0; j < opsInner; j++)
                                {
                                    for (long k = 0; k < opsInnerInner; k++)
                                    {
                                        d2[ix3] = (System.Byte)(d1[ix1]);
                                        ix1 += innerInnerStride1;
                                        ix3 += innerInnerStride3;
                                    }

                                    ix1 += innerStride1;
                                    ix3 += innerStride3;
                                }

                                ix1 += outerStride1;
                                ix3 += outerStride3;
                            }

                            if (counters.LongLength > 0)
                            {
                                //Basically a ripple carry adder
                                long p = counters.LongLength - 1;
                                while (++counters[p] == limits[p] && p > 0)
                                {
                                    counters[p] = 0;
                                    p--;
                                }
                            }
                        }
                    }
                }
            }
        }

        /// <summary>
        /// Unsafe implementation of applying a unary operation
        /// </summary>
        /// <typeparam name="C">The type of operation to perform</typeparam>
        /// <param name="op">The operation instance</param>
        /// <param name="scalar">The input scalar argument</param>
        /// <param name="out">The output target</param>
        internal static void UFunc_Op_Inner_Unary_Scalar_Flush_Int32_TypedImpl<C>(NumCIL.UInt8.ToUInt8 op, System.Int32 scalar, NdArray<System.Byte> @out)
            where C : IUnaryOp<System.Int32>
        {
            unsafe
            {
                using (var f2 = new Pinner(@out.DataAccessor))
                {
                    var d2 = (System.Byte*)f2.ptr;

                    if (@out.Shape.Dimensions.Length == 1)
                    {
                        long totalOps = @out.Shape.Dimensions[0].Length;
                        long ix2 = @out.Shape.Offset;
                        long stride2 = @out.Shape.Dimensions[0].Stride;

                        for (long i = 0; i < totalOps; i++)
                        {
                            d2[ix2] = (System.Byte)(scalar);
                            ix2 += stride2;
                        }
                    }
                    else if (@out.Shape.Dimensions.Length == 2)
                    {
                        long opsOuter = @out.Shape.Dimensions[0].Length;
                        long opsInner = @out.Shape.Dimensions[1].Length;

                        long ix2 = @out.Shape.Offset;
                        long outerStride2 = @out.Shape.Dimensions[0].Stride;
                        long innerStride2 = @out.Shape.Dimensions[1].Stride;
                        outerStride2 -= innerStride2 * @out.Shape.Dimensions[1].Length;

                        for (long i = 0; i < opsOuter; i++)
                        {
                            for (long j = 0; j < opsInner; j++)
                            {
                                d2[ix2] = (System.Byte)(scalar);
                                ix2 += innerStride2;
                            }

                            ix2 += outerStride2;
                        }
                    }
                    else
                    {
                        long n = @out.Shape.Dimensions.LongLength - 3;
                        long[] limits = @out.Shape.Dimensions.Where(x => n-- > 0).Select(x => x.Length).ToArray();
                        long[] counters = new long[limits.LongLength];

                        long totalOps = limits.LongLength == 0 ? 1 : limits.Aggregate<long>((a, b) => a * b);

                        //This chunck of variables are used to prevent repeated calculations of offsets
                        long dimIndex0 = 0 + limits.LongLength;
                        long dimIndex1 = 1 + limits.LongLength;
                        long dimIndex2 = 2 + limits.LongLength;

                        long opsOuter = @out.Shape.Dimensions[0 + limits.LongLength].Length;
                        long opsInner = @out.Shape.Dimensions[1 + limits.LongLength].Length;
                        long opsInnerInner = @out.Shape.Dimensions[2 + limits.LongLength].Length;

                        long outerStride3 = @out.Shape.Dimensions[dimIndex0].Stride;
                        long innerStride3 = @out.Shape.Dimensions[dimIndex1].Stride;
                        long innerInnerStride3 = @out.Shape.Dimensions[dimIndex2].Stride;
                        outerStride3 -= innerStride3 * @out.Shape.Dimensions[dimIndex1].Length;
                        innerStride3 -= innerInnerStride3 * @out.Shape.Dimensions[dimIndex2].Length;

                        for (long outer = 0; outer < totalOps; outer++)
                        {
                            //Get the array offset for the first element in the outer dimension
                            long ix3 = @out.Shape[counters];

                            for (long i = 0; i < opsOuter; i++)
                            {
                                for (long j = 0; j < opsInner; j++)
                                {
                                    for (long k = 0; k < opsInnerInner; k++)
                                    {
                                        d2[ix3] = (System.Byte)(scalar);
                                        ix3 += innerInnerStride3;
                                    }

                                    ix3 += innerStride3;
                                }

                                ix3 += outerStride3;
                            }

                            if (counters.LongLength > 0)
                            {
                                //Basically a ripple carry adder
                                long p = counters.LongLength - 1;
                                while (++counters[p] == limits[p] && p > 0)
                                {
                                    counters[p] = 0;
                                    p--;
                                }
                            }
                        }
                    }
                }
            }
        }
        /// <summary>
        /// Unsafe implementation of applying a unary operation
        /// </summary>
        /// <typeparam name="C">The type of operation to perform</typeparam>
        /// <param name="op">The operation instance</param>
        /// <param name="in1">The input argument</param>
        /// <param name="out">The output target</param>
        internal static void UFunc_Op_Inner_Unary_Flush_UInt32_TypedImpl<C>(NumCIL.UInt8.ToUInt8 op, NdArray<System.UInt32> in1, NdArray<System.Byte> @out)
            where C : IUnaryOp<System.UInt32>
        {
            unsafe
            {
                using (var f1 = new Pinner(in1.DataAccessor))
                using (var f2 = new Pinner(@out.DataAccessor))
                {
                    var d1 = (System.UInt32*)f1.ptr;
                    var d2 = (System.Byte*)f2.ptr;

                    if (@out.Shape.Dimensions.Length == 1)
                    {
                        long totalOps = @out.Shape.Dimensions[0].Length;

                        long ix1 = in1.Shape.Offset;
                        long ix2 = @out.Shape.Offset;

                        long stride1 = in1.Shape.Dimensions[0].Stride;
                        long stride2 = @out.Shape.Dimensions[0].Stride;


                        if (stride1 == stride2 && ix1 == ix2)
                        {
                            //Best case, all are equal, just keep a single counter
                            for (long i = 0; i < totalOps; i++)
                            {
                                d2[ix1] = (System.Byte)(d1[ix1]);
                                ix1 += stride1;
                            }
                        }
                        else
                        {
                            for (long i = 0; i < totalOps; i++)
                            {
                                d2[ix2] = (System.Byte)(d1[ix1]);
                                ix1 += stride1;
                                ix2 += stride2;
                            }
                        }
                    }
                    else if (@out.Shape.Dimensions.Length == 2)
                    {
                        long opsOuter = @out.Shape.Dimensions[0].Length;
                        long opsInner = @out.Shape.Dimensions[1].Length;

                        long ix1 = in1.Shape.Offset;
                        long ix2 = @out.Shape.Offset;

                        long outerStride1 = in1.Shape.Dimensions[0].Stride;
                        long outerStride2 = @out.Shape.Dimensions[0].Stride;

                        long innerStride1 = in1.Shape.Dimensions[1].Stride;
                        long innerStride2 = @out.Shape.Dimensions[1].Stride;

                        outerStride1 -= innerStride1 * in1.Shape.Dimensions[1].Length;
                        outerStride2 -= innerStride2 * @out.Shape.Dimensions[1].Length;

                        for (long i = 0; i < opsOuter; i++)
                        {
                            for (long j = 0; j < opsInner; j++)
                            {
                                d2[ix2] = (System.Byte)(d1[ix1]);
                                ix1 += innerStride1;
                                ix2 += innerStride2;
                            }

                            ix1 += outerStride1;
                            ix2 += outerStride2;
                        }
                    }
                    else
                    {
                        long n = in1.Shape.Dimensions.LongLength - 3;
                        long[] limits = in1.Shape.Dimensions.Where(x => n-- > 0).Select(x => x.Length).ToArray();
                        long[] counters = new long[limits.LongLength];

                        long totalOps = limits.LongLength == 0 ? 1 : limits.Aggregate<long>((a, b) => a * b);

                        //This chunck of variables are used to prevent repeated calculations of offsets
                        long dimIndex0 = 0 + limits.LongLength;
                        long dimIndex1 = 1 + limits.LongLength;
                        long dimIndex2 = 2 + limits.LongLength;

                        long opsOuter = @out.Shape.Dimensions[0 + limits.LongLength].Length;
                        long opsInner = @out.Shape.Dimensions[1 + limits.LongLength].Length;
                        long opsInnerInner = @out.Shape.Dimensions[2 + limits.LongLength].Length;

                        long outerStride1 = in1.Shape.Dimensions[dimIndex0].Stride;
                        long outerStride3 = @out.Shape.Dimensions[dimIndex0].Stride;

                        long innerStride1 = in1.Shape.Dimensions[dimIndex1].Stride;
                        long innerStride3 = @out.Shape.Dimensions[dimIndex1].Stride;

                        long innerInnerStride1 = in1.Shape.Dimensions[dimIndex2].Stride;
                        long innerInnerStride3 = @out.Shape.Dimensions[dimIndex2].Stride;

                        outerStride1 -= innerStride1 * in1.Shape.Dimensions[dimIndex1].Length;
                        outerStride3 -= innerStride3 * @out.Shape.Dimensions[dimIndex1].Length;

                        innerStride1 -= innerInnerStride1 * in1.Shape.Dimensions[dimIndex2].Length;
                        innerStride3 -= innerInnerStride3 * @out.Shape.Dimensions[dimIndex2].Length;

                        for (long outer = 0; outer < totalOps; outer++)
                        {
                            //Get the array offset for the first element in the outer dimension
                            long ix1 = in1.Shape[counters];
                            long ix3 = @out.Shape[counters];


                            for (long i = 0; i < opsOuter; i++)
                            {
                                for (long j = 0; j < opsInner; j++)
                                {
                                    for (long k = 0; k < opsInnerInner; k++)
                                    {
                                        d2[ix3] = (System.Byte)(d1[ix1]);
                                        ix1 += innerInnerStride1;
                                        ix3 += innerInnerStride3;
                                    }

                                    ix1 += innerStride1;
                                    ix3 += innerStride3;
                                }

                                ix1 += outerStride1;
                                ix3 += outerStride3;
                            }

                            if (counters.LongLength > 0)
                            {
                                //Basically a ripple carry adder
                                long p = counters.LongLength - 1;
                                while (++counters[p] == limits[p] && p > 0)
                                {
                                    counters[p] = 0;
                                    p--;
                                }
                            }
                        }
                    }
                }
            }
        }

        /// <summary>
        /// Unsafe implementation of applying a unary operation
        /// </summary>
        /// <typeparam name="C">The type of operation to perform</typeparam>
        /// <param name="op">The operation instance</param>
        /// <param name="scalar">The input scalar argument</param>
        /// <param name="out">The output target</param>
        internal static void UFunc_Op_Inner_Unary_Scalar_Flush_UInt32_TypedImpl<C>(NumCIL.UInt8.ToUInt8 op, System.UInt32 scalar, NdArray<System.Byte> @out)
            where C : IUnaryOp<System.UInt32>
        {
            unsafe
            {
                using (var f2 = new Pinner(@out.DataAccessor))
                {
                    var d2 = (System.Byte*)f2.ptr;

                    if (@out.Shape.Dimensions.Length == 1)
                    {
                        long totalOps = @out.Shape.Dimensions[0].Length;
                        long ix2 = @out.Shape.Offset;
                        long stride2 = @out.Shape.Dimensions[0].Stride;

                        for (long i = 0; i < totalOps; i++)
                        {
                            d2[ix2] = (System.Byte)(scalar);
                            ix2 += stride2;
                        }
                    }
                    else if (@out.Shape.Dimensions.Length == 2)
                    {
                        long opsOuter = @out.Shape.Dimensions[0].Length;
                        long opsInner = @out.Shape.Dimensions[1].Length;

                        long ix2 = @out.Shape.Offset;
                        long outerStride2 = @out.Shape.Dimensions[0].Stride;
                        long innerStride2 = @out.Shape.Dimensions[1].Stride;
                        outerStride2 -= innerStride2 * @out.Shape.Dimensions[1].Length;

                        for (long i = 0; i < opsOuter; i++)
                        {
                            for (long j = 0; j < opsInner; j++)
                            {
                                d2[ix2] = (System.Byte)(scalar);
                                ix2 += innerStride2;
                            }

                            ix2 += outerStride2;
                        }
                    }
                    else
                    {
                        long n = @out.Shape.Dimensions.LongLength - 3;
                        long[] limits = @out.Shape.Dimensions.Where(x => n-- > 0).Select(x => x.Length).ToArray();
                        long[] counters = new long[limits.LongLength];

                        long totalOps = limits.LongLength == 0 ? 1 : limits.Aggregate<long>((a, b) => a * b);

                        //This chunck of variables are used to prevent repeated calculations of offsets
                        long dimIndex0 = 0 + limits.LongLength;
                        long dimIndex1 = 1 + limits.LongLength;
                        long dimIndex2 = 2 + limits.LongLength;

                        long opsOuter = @out.Shape.Dimensions[0 + limits.LongLength].Length;
                        long opsInner = @out.Shape.Dimensions[1 + limits.LongLength].Length;
                        long opsInnerInner = @out.Shape.Dimensions[2 + limits.LongLength].Length;

                        long outerStride3 = @out.Shape.Dimensions[dimIndex0].Stride;
                        long innerStride3 = @out.Shape.Dimensions[dimIndex1].Stride;
                        long innerInnerStride3 = @out.Shape.Dimensions[dimIndex2].Stride;
                        outerStride3 -= innerStride3 * @out.Shape.Dimensions[dimIndex1].Length;
                        innerStride3 -= innerInnerStride3 * @out.Shape.Dimensions[dimIndex2].Length;

                        for (long outer = 0; outer < totalOps; outer++)
                        {
                            //Get the array offset for the first element in the outer dimension
                            long ix3 = @out.Shape[counters];

                            for (long i = 0; i < opsOuter; i++)
                            {
                                for (long j = 0; j < opsInner; j++)
                                {
                                    for (long k = 0; k < opsInnerInner; k++)
                                    {
                                        d2[ix3] = (System.Byte)(scalar);
                                        ix3 += innerInnerStride3;
                                    }

                                    ix3 += innerStride3;
                                }

                                ix3 += outerStride3;
                            }

                            if (counters.LongLength > 0)
                            {
                                //Basically a ripple carry adder
                                long p = counters.LongLength - 1;
                                while (++counters[p] == limits[p] && p > 0)
                                {
                                    counters[p] = 0;
                                    p--;
                                }
                            }
                        }
                    }
                }
            }
        }
        /// <summary>
        /// Unsafe implementation of applying a unary operation
        /// </summary>
        /// <typeparam name="C">The type of operation to perform</typeparam>
        /// <param name="op">The operation instance</param>
        /// <param name="in1">The input argument</param>
        /// <param name="out">The output target</param>
        internal static void UFunc_Op_Inner_Unary_Flush_Int64_TypedImpl<C>(NumCIL.UInt8.ToUInt8 op, NdArray<System.Int64> in1, NdArray<System.Byte> @out)
            where C : IUnaryOp<System.Int64>
        {
            unsafe
            {
                using (var f1 = new Pinner(in1.DataAccessor))
                using (var f2 = new Pinner(@out.DataAccessor))
                {
                    var d1 = (System.Int64*)f1.ptr;
                    var d2 = (System.Byte*)f2.ptr;

                    if (@out.Shape.Dimensions.Length == 1)
                    {
                        long totalOps = @out.Shape.Dimensions[0].Length;

                        long ix1 = in1.Shape.Offset;
                        long ix2 = @out.Shape.Offset;

                        long stride1 = in1.Shape.Dimensions[0].Stride;
                        long stride2 = @out.Shape.Dimensions[0].Stride;


                        if (stride1 == stride2 && ix1 == ix2)
                        {
                            //Best case, all are equal, just keep a single counter
                            for (long i = 0; i < totalOps; i++)
                            {
                                d2[ix1] = (System.Byte)(d1[ix1]);
                                ix1 += stride1;
                            }
                        }
                        else
                        {
                            for (long i = 0; i < totalOps; i++)
                            {
                                d2[ix2] = (System.Byte)(d1[ix1]);
                                ix1 += stride1;
                                ix2 += stride2;
                            }
                        }
                    }
                    else if (@out.Shape.Dimensions.Length == 2)
                    {
                        long opsOuter = @out.Shape.Dimensions[0].Length;
                        long opsInner = @out.Shape.Dimensions[1].Length;

                        long ix1 = in1.Shape.Offset;
                        long ix2 = @out.Shape.Offset;

                        long outerStride1 = in1.Shape.Dimensions[0].Stride;
                        long outerStride2 = @out.Shape.Dimensions[0].Stride;

                        long innerStride1 = in1.Shape.Dimensions[1].Stride;
                        long innerStride2 = @out.Shape.Dimensions[1].Stride;

                        outerStride1 -= innerStride1 * in1.Shape.Dimensions[1].Length;
                        outerStride2 -= innerStride2 * @out.Shape.Dimensions[1].Length;

                        for (long i = 0; i < opsOuter; i++)
                        {
                            for (long j = 0; j < opsInner; j++)
                            {
                                d2[ix2] = (System.Byte)(d1[ix1]);
                                ix1 += innerStride1;
                                ix2 += innerStride2;
                            }

                            ix1 += outerStride1;
                            ix2 += outerStride2;
                        }
                    }
                    else
                    {
                        long n = in1.Shape.Dimensions.LongLength - 3;
                        long[] limits = in1.Shape.Dimensions.Where(x => n-- > 0).Select(x => x.Length).ToArray();
                        long[] counters = new long[limits.LongLength];

                        long totalOps = limits.LongLength == 0 ? 1 : limits.Aggregate<long>((a, b) => a * b);

                        //This chunck of variables are used to prevent repeated calculations of offsets
                        long dimIndex0 = 0 + limits.LongLength;
                        long dimIndex1 = 1 + limits.LongLength;
                        long dimIndex2 = 2 + limits.LongLength;

                        long opsOuter = @out.Shape.Dimensions[0 + limits.LongLength].Length;
                        long opsInner = @out.Shape.Dimensions[1 + limits.LongLength].Length;
                        long opsInnerInner = @out.Shape.Dimensions[2 + limits.LongLength].Length;

                        long outerStride1 = in1.Shape.Dimensions[dimIndex0].Stride;
                        long outerStride3 = @out.Shape.Dimensions[dimIndex0].Stride;

                        long innerStride1 = in1.Shape.Dimensions[dimIndex1].Stride;
                        long innerStride3 = @out.Shape.Dimensions[dimIndex1].Stride;

                        long innerInnerStride1 = in1.Shape.Dimensions[dimIndex2].Stride;
                        long innerInnerStride3 = @out.Shape.Dimensions[dimIndex2].Stride;

                        outerStride1 -= innerStride1 * in1.Shape.Dimensions[dimIndex1].Length;
                        outerStride3 -= innerStride3 * @out.Shape.Dimensions[dimIndex1].Length;

                        innerStride1 -= innerInnerStride1 * in1.Shape.Dimensions[dimIndex2].Length;
                        innerStride3 -= innerInnerStride3 * @out.Shape.Dimensions[dimIndex2].Length;

                        for (long outer = 0; outer < totalOps; outer++)
                        {
                            //Get the array offset for the first element in the outer dimension
                            long ix1 = in1.Shape[counters];
                            long ix3 = @out.Shape[counters];


                            for (long i = 0; i < opsOuter; i++)
                            {
                                for (long j = 0; j < opsInner; j++)
                                {
                                    for (long k = 0; k < opsInnerInner; k++)
                                    {
                                        d2[ix3] = (System.Byte)(d1[ix1]);
                                        ix1 += innerInnerStride1;
                                        ix3 += innerInnerStride3;
                                    }

                                    ix1 += innerStride1;
                                    ix3 += innerStride3;
                                }

                                ix1 += outerStride1;
                                ix3 += outerStride3;
                            }

                            if (counters.LongLength > 0)
                            {
                                //Basically a ripple carry adder
                                long p = counters.LongLength - 1;
                                while (++counters[p] == limits[p] && p > 0)
                                {
                                    counters[p] = 0;
                                    p--;
                                }
                            }
                        }
                    }
                }
            }
        }

        /// <summary>
        /// Unsafe implementation of applying a unary operation
        /// </summary>
        /// <typeparam name="C">The type of operation to perform</typeparam>
        /// <param name="op">The operation instance</param>
        /// <param name="scalar">The input scalar argument</param>
        /// <param name="out">The output target</param>
        internal static void UFunc_Op_Inner_Unary_Scalar_Flush_Int64_TypedImpl<C>(NumCIL.UInt8.ToUInt8 op, System.Int64 scalar, NdArray<System.Byte> @out)
            where C : IUnaryOp<System.Int64>
        {
            unsafe
            {
                using (var f2 = new Pinner(@out.DataAccessor))
                {
                    var d2 = (System.Byte*)f2.ptr;

                    if (@out.Shape.Dimensions.Length == 1)
                    {
                        long totalOps = @out.Shape.Dimensions[0].Length;
                        long ix2 = @out.Shape.Offset;
                        long stride2 = @out.Shape.Dimensions[0].Stride;

                        for (long i = 0; i < totalOps; i++)
                        {
                            d2[ix2] = (System.Byte)(scalar);
                            ix2 += stride2;
                        }
                    }
                    else if (@out.Shape.Dimensions.Length == 2)
                    {
                        long opsOuter = @out.Shape.Dimensions[0].Length;
                        long opsInner = @out.Shape.Dimensions[1].Length;

                        long ix2 = @out.Shape.Offset;
                        long outerStride2 = @out.Shape.Dimensions[0].Stride;
                        long innerStride2 = @out.Shape.Dimensions[1].Stride;
                        outerStride2 -= innerStride2 * @out.Shape.Dimensions[1].Length;

                        for (long i = 0; i < opsOuter; i++)
                        {
                            for (long j = 0; j < opsInner; j++)
                            {
                                d2[ix2] = (System.Byte)(scalar);
                                ix2 += innerStride2;
                            }

                            ix2 += outerStride2;
                        }
                    }
                    else
                    {
                        long n = @out.Shape.Dimensions.LongLength - 3;
                        long[] limits = @out.Shape.Dimensions.Where(x => n-- > 0).Select(x => x.Length).ToArray();
                        long[] counters = new long[limits.LongLength];

                        long totalOps = limits.LongLength == 0 ? 1 : limits.Aggregate<long>((a, b) => a * b);

                        //This chunck of variables are used to prevent repeated calculations of offsets
                        long dimIndex0 = 0 + limits.LongLength;
                        long dimIndex1 = 1 + limits.LongLength;
                        long dimIndex2 = 2 + limits.LongLength;

                        long opsOuter = @out.Shape.Dimensions[0 + limits.LongLength].Length;
                        long opsInner = @out.Shape.Dimensions[1 + limits.LongLength].Length;
                        long opsInnerInner = @out.Shape.Dimensions[2 + limits.LongLength].Length;

                        long outerStride3 = @out.Shape.Dimensions[dimIndex0].Stride;
                        long innerStride3 = @out.Shape.Dimensions[dimIndex1].Stride;
                        long innerInnerStride3 = @out.Shape.Dimensions[dimIndex2].Stride;
                        outerStride3 -= innerStride3 * @out.Shape.Dimensions[dimIndex1].Length;
                        innerStride3 -= innerInnerStride3 * @out.Shape.Dimensions[dimIndex2].Length;

                        for (long outer = 0; outer < totalOps; outer++)
                        {
                            //Get the array offset for the first element in the outer dimension
                            long ix3 = @out.Shape[counters];

                            for (long i = 0; i < opsOuter; i++)
                            {
                                for (long j = 0; j < opsInner; j++)
                                {
                                    for (long k = 0; k < opsInnerInner; k++)
                                    {
                                        d2[ix3] = (System.Byte)(scalar);
                                        ix3 += innerInnerStride3;
                                    }

                                    ix3 += innerStride3;
                                }

                                ix3 += outerStride3;
                            }

                            if (counters.LongLength > 0)
                            {
                                //Basically a ripple carry adder
                                long p = counters.LongLength - 1;
                                while (++counters[p] == limits[p] && p > 0)
                                {
                                    counters[p] = 0;
                                    p--;
                                }
                            }
                        }
                    }
                }
            }
        }
        /// <summary>
        /// Unsafe implementation of applying a unary operation
        /// </summary>
        /// <typeparam name="C">The type of operation to perform</typeparam>
        /// <param name="op">The operation instance</param>
        /// <param name="in1">The input argument</param>
        /// <param name="out">The output target</param>
        internal static void UFunc_Op_Inner_Unary_Flush_UInt64_TypedImpl<C>(NumCIL.UInt8.ToUInt8 op, NdArray<System.UInt64> in1, NdArray<System.Byte> @out)
            where C : IUnaryOp<System.UInt64>
        {
            unsafe
            {
                using (var f1 = new Pinner(in1.DataAccessor))
                using (var f2 = new Pinner(@out.DataAccessor))
                {
                    var d1 = (System.UInt64*)f1.ptr;
                    var d2 = (System.Byte*)f2.ptr;

                    if (@out.Shape.Dimensions.Length == 1)
                    {
                        long totalOps = @out.Shape.Dimensions[0].Length;

                        long ix1 = in1.Shape.Offset;
                        long ix2 = @out.Shape.Offset;

                        long stride1 = in1.Shape.Dimensions[0].Stride;
                        long stride2 = @out.Shape.Dimensions[0].Stride;


                        if (stride1 == stride2 && ix1 == ix2)
                        {
                            //Best case, all are equal, just keep a single counter
                            for (long i = 0; i < totalOps; i++)
                            {
                                d2[ix1] = (System.Byte)(d1[ix1]);
                                ix1 += stride1;
                            }
                        }
                        else
                        {
                            for (long i = 0; i < totalOps; i++)
                            {
                                d2[ix2] = (System.Byte)(d1[ix1]);
                                ix1 += stride1;
                                ix2 += stride2;
                            }
                        }
                    }
                    else if (@out.Shape.Dimensions.Length == 2)
                    {
                        long opsOuter = @out.Shape.Dimensions[0].Length;
                        long opsInner = @out.Shape.Dimensions[1].Length;

                        long ix1 = in1.Shape.Offset;
                        long ix2 = @out.Shape.Offset;

                        long outerStride1 = in1.Shape.Dimensions[0].Stride;
                        long outerStride2 = @out.Shape.Dimensions[0].Stride;

                        long innerStride1 = in1.Shape.Dimensions[1].Stride;
                        long innerStride2 = @out.Shape.Dimensions[1].Stride;

                        outerStride1 -= innerStride1 * in1.Shape.Dimensions[1].Length;
                        outerStride2 -= innerStride2 * @out.Shape.Dimensions[1].Length;

                        for (long i = 0; i < opsOuter; i++)
                        {
                            for (long j = 0; j < opsInner; j++)
                            {
                                d2[ix2] = (System.Byte)(d1[ix1]);
                                ix1 += innerStride1;
                                ix2 += innerStride2;
                            }

                            ix1 += outerStride1;
                            ix2 += outerStride2;
                        }
                    }
                    else
                    {
                        long n = in1.Shape.Dimensions.LongLength - 3;
                        long[] limits = in1.Shape.Dimensions.Where(x => n-- > 0).Select(x => x.Length).ToArray();
                        long[] counters = new long[limits.LongLength];

                        long totalOps = limits.LongLength == 0 ? 1 : limits.Aggregate<long>((a, b) => a * b);

                        //This chunck of variables are used to prevent repeated calculations of offsets
                        long dimIndex0 = 0 + limits.LongLength;
                        long dimIndex1 = 1 + limits.LongLength;
                        long dimIndex2 = 2 + limits.LongLength;

                        long opsOuter = @out.Shape.Dimensions[0 + limits.LongLength].Length;
                        long opsInner = @out.Shape.Dimensions[1 + limits.LongLength].Length;
                        long opsInnerInner = @out.Shape.Dimensions[2 + limits.LongLength].Length;

                        long outerStride1 = in1.Shape.Dimensions[dimIndex0].Stride;
                        long outerStride3 = @out.Shape.Dimensions[dimIndex0].Stride;

                        long innerStride1 = in1.Shape.Dimensions[dimIndex1].Stride;
                        long innerStride3 = @out.Shape.Dimensions[dimIndex1].Stride;

                        long innerInnerStride1 = in1.Shape.Dimensions[dimIndex2].Stride;
                        long innerInnerStride3 = @out.Shape.Dimensions[dimIndex2].Stride;

                        outerStride1 -= innerStride1 * in1.Shape.Dimensions[dimIndex1].Length;
                        outerStride3 -= innerStride3 * @out.Shape.Dimensions[dimIndex1].Length;

                        innerStride1 -= innerInnerStride1 * in1.Shape.Dimensions[dimIndex2].Length;
                        innerStride3 -= innerInnerStride3 * @out.Shape.Dimensions[dimIndex2].Length;

                        for (long outer = 0; outer < totalOps; outer++)
                        {
                            //Get the array offset for the first element in the outer dimension
                            long ix1 = in1.Shape[counters];
                            long ix3 = @out.Shape[counters];


                            for (long i = 0; i < opsOuter; i++)
                            {
                                for (long j = 0; j < opsInner; j++)
                                {
                                    for (long k = 0; k < opsInnerInner; k++)
                                    {
                                        d2[ix3] = (System.Byte)(d1[ix1]);
                                        ix1 += innerInnerStride1;
                                        ix3 += innerInnerStride3;
                                    }

                                    ix1 += innerStride1;
                                    ix3 += innerStride3;
                                }

                                ix1 += outerStride1;
                                ix3 += outerStride3;
                            }

                            if (counters.LongLength > 0)
                            {
                                //Basically a ripple carry adder
                                long p = counters.LongLength - 1;
                                while (++counters[p] == limits[p] && p > 0)
                                {
                                    counters[p] = 0;
                                    p--;
                                }
                            }
                        }
                    }
                }
            }
        }

        /// <summary>
        /// Unsafe implementation of applying a unary operation
        /// </summary>
        /// <typeparam name="C">The type of operation to perform</typeparam>
        /// <param name="op">The operation instance</param>
        /// <param name="scalar">The input scalar argument</param>
        /// <param name="out">The output target</param>
        internal static void UFunc_Op_Inner_Unary_Scalar_Flush_UInt64_TypedImpl<C>(NumCIL.UInt8.ToUInt8 op, System.UInt64 scalar, NdArray<System.Byte> @out)
            where C : IUnaryOp<System.UInt64>
        {
            unsafe
            {
                using (var f2 = new Pinner(@out.DataAccessor))
                {
                    var d2 = (System.Byte*)f2.ptr;

                    if (@out.Shape.Dimensions.Length == 1)
                    {
                        long totalOps = @out.Shape.Dimensions[0].Length;
                        long ix2 = @out.Shape.Offset;
                        long stride2 = @out.Shape.Dimensions[0].Stride;

                        for (long i = 0; i < totalOps; i++)
                        {
                            d2[ix2] = (System.Byte)(scalar);
                            ix2 += stride2;
                        }
                    }
                    else if (@out.Shape.Dimensions.Length == 2)
                    {
                        long opsOuter = @out.Shape.Dimensions[0].Length;
                        long opsInner = @out.Shape.Dimensions[1].Length;

                        long ix2 = @out.Shape.Offset;
                        long outerStride2 = @out.Shape.Dimensions[0].Stride;
                        long innerStride2 = @out.Shape.Dimensions[1].Stride;
                        outerStride2 -= innerStride2 * @out.Shape.Dimensions[1].Length;

                        for (long i = 0; i < opsOuter; i++)
                        {
                            for (long j = 0; j < opsInner; j++)
                            {
                                d2[ix2] = (System.Byte)(scalar);
                                ix2 += innerStride2;
                            }

                            ix2 += outerStride2;
                        }
                    }
                    else
                    {
                        long n = @out.Shape.Dimensions.LongLength - 3;
                        long[] limits = @out.Shape.Dimensions.Where(x => n-- > 0).Select(x => x.Length).ToArray();
                        long[] counters = new long[limits.LongLength];

                        long totalOps = limits.LongLength == 0 ? 1 : limits.Aggregate<long>((a, b) => a * b);

                        //This chunck of variables are used to prevent repeated calculations of offsets
                        long dimIndex0 = 0 + limits.LongLength;
                        long dimIndex1 = 1 + limits.LongLength;
                        long dimIndex2 = 2 + limits.LongLength;

                        long opsOuter = @out.Shape.Dimensions[0 + limits.LongLength].Length;
                        long opsInner = @out.Shape.Dimensions[1 + limits.LongLength].Length;
                        long opsInnerInner = @out.Shape.Dimensions[2 + limits.LongLength].Length;

                        long outerStride3 = @out.Shape.Dimensions[dimIndex0].Stride;
                        long innerStride3 = @out.Shape.Dimensions[dimIndex1].Stride;
                        long innerInnerStride3 = @out.Shape.Dimensions[dimIndex2].Stride;
                        outerStride3 -= innerStride3 * @out.Shape.Dimensions[dimIndex1].Length;
                        innerStride3 -= innerInnerStride3 * @out.Shape.Dimensions[dimIndex2].Length;

                        for (long outer = 0; outer < totalOps; outer++)
                        {
                            //Get the array offset for the first element in the outer dimension
                            long ix3 = @out.Shape[counters];

                            for (long i = 0; i < opsOuter; i++)
                            {
                                for (long j = 0; j < opsInner; j++)
                                {
                                    for (long k = 0; k < opsInnerInner; k++)
                                    {
                                        d2[ix3] = (System.Byte)(scalar);
                                        ix3 += innerInnerStride3;
                                    }

                                    ix3 += innerStride3;
                                }

                                ix3 += outerStride3;
                            }

                            if (counters.LongLength > 0)
                            {
                                //Basically a ripple carry adder
                                long p = counters.LongLength - 1;
                                while (++counters[p] == limits[p] && p > 0)
                                {
                                    counters[p] = 0;
                                    p--;
                                }
                            }
                        }
                    }
                }
            }
        }
        /// <summary>
        /// Unsafe implementation of applying a unary operation
        /// </summary>
        /// <typeparam name="C">The type of operation to perform</typeparam>
        /// <param name="op">The operation instance</param>
        /// <param name="in1">The input argument</param>
        /// <param name="out">The output target</param>
        internal static void UFunc_Op_Inner_Unary_Flush_Single_TypedImpl<C>(NumCIL.UInt8.ToUInt8 op, NdArray<System.Single> in1, NdArray<System.Byte> @out)
            where C : IUnaryOp<System.Single>
        {
            unsafe
            {
                using (var f1 = new Pinner(in1.DataAccessor))
                using (var f2 = new Pinner(@out.DataAccessor))
                {
                    var d1 = (System.Single*)f1.ptr;
                    var d2 = (System.Byte*)f2.ptr;

                    if (@out.Shape.Dimensions.Length == 1)
                    {
                        long totalOps = @out.Shape.Dimensions[0].Length;

                        long ix1 = in1.Shape.Offset;
                        long ix2 = @out.Shape.Offset;

                        long stride1 = in1.Shape.Dimensions[0].Stride;
                        long stride2 = @out.Shape.Dimensions[0].Stride;


                        if (stride1 == stride2 && ix1 == ix2)
                        {
                            //Best case, all are equal, just keep a single counter
                            for (long i = 0; i < totalOps; i++)
                            {
                                d2[ix1] = (System.Byte)(d1[ix1]);
                                ix1 += stride1;
                            }
                        }
                        else
                        {
                            for (long i = 0; i < totalOps; i++)
                            {
                                d2[ix2] = (System.Byte)(d1[ix1]);
                                ix1 += stride1;
                                ix2 += stride2;
                            }
                        }
                    }
                    else if (@out.Shape.Dimensions.Length == 2)
                    {
                        long opsOuter = @out.Shape.Dimensions[0].Length;
                        long opsInner = @out.Shape.Dimensions[1].Length;

                        long ix1 = in1.Shape.Offset;
                        long ix2 = @out.Shape.Offset;

                        long outerStride1 = in1.Shape.Dimensions[0].Stride;
                        long outerStride2 = @out.Shape.Dimensions[0].Stride;

                        long innerStride1 = in1.Shape.Dimensions[1].Stride;
                        long innerStride2 = @out.Shape.Dimensions[1].Stride;

                        outerStride1 -= innerStride1 * in1.Shape.Dimensions[1].Length;
                        outerStride2 -= innerStride2 * @out.Shape.Dimensions[1].Length;

                        for (long i = 0; i < opsOuter; i++)
                        {
                            for (long j = 0; j < opsInner; j++)
                            {
                                d2[ix2] = (System.Byte)(d1[ix1]);
                                ix1 += innerStride1;
                                ix2 += innerStride2;
                            }

                            ix1 += outerStride1;
                            ix2 += outerStride2;
                        }
                    }
                    else
                    {
                        long n = in1.Shape.Dimensions.LongLength - 3;
                        long[] limits = in1.Shape.Dimensions.Where(x => n-- > 0).Select(x => x.Length).ToArray();
                        long[] counters = new long[limits.LongLength];

                        long totalOps = limits.LongLength == 0 ? 1 : limits.Aggregate<long>((a, b) => a * b);

                        //This chunck of variables are used to prevent repeated calculations of offsets
                        long dimIndex0 = 0 + limits.LongLength;
                        long dimIndex1 = 1 + limits.LongLength;
                        long dimIndex2 = 2 + limits.LongLength;

                        long opsOuter = @out.Shape.Dimensions[0 + limits.LongLength].Length;
                        long opsInner = @out.Shape.Dimensions[1 + limits.LongLength].Length;
                        long opsInnerInner = @out.Shape.Dimensions[2 + limits.LongLength].Length;

                        long outerStride1 = in1.Shape.Dimensions[dimIndex0].Stride;
                        long outerStride3 = @out.Shape.Dimensions[dimIndex0].Stride;

                        long innerStride1 = in1.Shape.Dimensions[dimIndex1].Stride;
                        long innerStride3 = @out.Shape.Dimensions[dimIndex1].Stride;

                        long innerInnerStride1 = in1.Shape.Dimensions[dimIndex2].Stride;
                        long innerInnerStride3 = @out.Shape.Dimensions[dimIndex2].Stride;

                        outerStride1 -= innerStride1 * in1.Shape.Dimensions[dimIndex1].Length;
                        outerStride3 -= innerStride3 * @out.Shape.Dimensions[dimIndex1].Length;

                        innerStride1 -= innerInnerStride1 * in1.Shape.Dimensions[dimIndex2].Length;
                        innerStride3 -= innerInnerStride3 * @out.Shape.Dimensions[dimIndex2].Length;

                        for (long outer = 0; outer < totalOps; outer++)
                        {
                            //Get the array offset for the first element in the outer dimension
                            long ix1 = in1.Shape[counters];
                            long ix3 = @out.Shape[counters];


                            for (long i = 0; i < opsOuter; i++)
                            {
                                for (long j = 0; j < opsInner; j++)
                                {
                                    for (long k = 0; k < opsInnerInner; k++)
                                    {
                                        d2[ix3] = (System.Byte)(d1[ix1]);
                                        ix1 += innerInnerStride1;
                                        ix3 += innerInnerStride3;
                                    }

                                    ix1 += innerStride1;
                                    ix3 += innerStride3;
                                }

                                ix1 += outerStride1;
                                ix3 += outerStride3;
                            }

                            if (counters.LongLength > 0)
                            {
                                //Basically a ripple carry adder
                                long p = counters.LongLength - 1;
                                while (++counters[p] == limits[p] && p > 0)
                                {
                                    counters[p] = 0;
                                    p--;
                                }
                            }
                        }
                    }
                }
            }
        }

        /// <summary>
        /// Unsafe implementation of applying a unary operation
        /// </summary>
        /// <typeparam name="C">The type of operation to perform</typeparam>
        /// <param name="op">The operation instance</param>
        /// <param name="scalar">The input scalar argument</param>
        /// <param name="out">The output target</param>
        internal static void UFunc_Op_Inner_Unary_Scalar_Flush_Single_TypedImpl<C>(NumCIL.UInt8.ToUInt8 op, System.Single scalar, NdArray<System.Byte> @out)
            where C : IUnaryOp<System.Single>
        {
            unsafe
            {
                using (var f2 = new Pinner(@out.DataAccessor))
                {
                    var d2 = (System.Byte*)f2.ptr;

                    if (@out.Shape.Dimensions.Length == 1)
                    {
                        long totalOps = @out.Shape.Dimensions[0].Length;
                        long ix2 = @out.Shape.Offset;
                        long stride2 = @out.Shape.Dimensions[0].Stride;

                        for (long i = 0; i < totalOps; i++)
                        {
                            d2[ix2] = (System.Byte)(scalar);
                            ix2 += stride2;
                        }
                    }
                    else if (@out.Shape.Dimensions.Length == 2)
                    {
                        long opsOuter = @out.Shape.Dimensions[0].Length;
                        long opsInner = @out.Shape.Dimensions[1].Length;

                        long ix2 = @out.Shape.Offset;
                        long outerStride2 = @out.Shape.Dimensions[0].Stride;
                        long innerStride2 = @out.Shape.Dimensions[1].Stride;
                        outerStride2 -= innerStride2 * @out.Shape.Dimensions[1].Length;

                        for (long i = 0; i < opsOuter; i++)
                        {
                            for (long j = 0; j < opsInner; j++)
                            {
                                d2[ix2] = (System.Byte)(scalar);
                                ix2 += innerStride2;
                            }

                            ix2 += outerStride2;
                        }
                    }
                    else
                    {
                        long n = @out.Shape.Dimensions.LongLength - 3;
                        long[] limits = @out.Shape.Dimensions.Where(x => n-- > 0).Select(x => x.Length).ToArray();
                        long[] counters = new long[limits.LongLength];

                        long totalOps = limits.LongLength == 0 ? 1 : limits.Aggregate<long>((a, b) => a * b);

                        //This chunck of variables are used to prevent repeated calculations of offsets
                        long dimIndex0 = 0 + limits.LongLength;
                        long dimIndex1 = 1 + limits.LongLength;
                        long dimIndex2 = 2 + limits.LongLength;

                        long opsOuter = @out.Shape.Dimensions[0 + limits.LongLength].Length;
                        long opsInner = @out.Shape.Dimensions[1 + limits.LongLength].Length;
                        long opsInnerInner = @out.Shape.Dimensions[2 + limits.LongLength].Length;

                        long outerStride3 = @out.Shape.Dimensions[dimIndex0].Stride;
                        long innerStride3 = @out.Shape.Dimensions[dimIndex1].Stride;
                        long innerInnerStride3 = @out.Shape.Dimensions[dimIndex2].Stride;
                        outerStride3 -= innerStride3 * @out.Shape.Dimensions[dimIndex1].Length;
                        innerStride3 -= innerInnerStride3 * @out.Shape.Dimensions[dimIndex2].Length;

                        for (long outer = 0; outer < totalOps; outer++)
                        {
                            //Get the array offset for the first element in the outer dimension
                            long ix3 = @out.Shape[counters];

                            for (long i = 0; i < opsOuter; i++)
                            {
                                for (long j = 0; j < opsInner; j++)
                                {
                                    for (long k = 0; k < opsInnerInner; k++)
                                    {
                                        d2[ix3] = (System.Byte)(scalar);
                                        ix3 += innerInnerStride3;
                                    }

                                    ix3 += innerStride3;
                                }

                                ix3 += outerStride3;
                            }

                            if (counters.LongLength > 0)
                            {
                                //Basically a ripple carry adder
                                long p = counters.LongLength - 1;
                                while (++counters[p] == limits[p] && p > 0)
                                {
                                    counters[p] = 0;
                                    p--;
                                }
                            }
                        }
                    }
                }
            }
        }
        /// <summary>
        /// Unsafe implementation of applying a unary operation
        /// </summary>
        /// <typeparam name="C">The type of operation to perform</typeparam>
        /// <param name="op">The operation instance</param>
        /// <param name="in1">The input argument</param>
        /// <param name="out">The output target</param>
        internal static void UFunc_Op_Inner_Unary_Flush_Double_TypedImpl<C>(NumCIL.UInt8.ToUInt8 op, NdArray<System.Double> in1, NdArray<System.Byte> @out)
            where C : IUnaryOp<System.Double>
        {
            unsafe
            {
                using (var f1 = new Pinner(in1.DataAccessor))
                using (var f2 = new Pinner(@out.DataAccessor))
                {
                    var d1 = (System.Double*)f1.ptr;
                    var d2 = (System.Byte*)f2.ptr;

                    if (@out.Shape.Dimensions.Length == 1)
                    {
                        long totalOps = @out.Shape.Dimensions[0].Length;

                        long ix1 = in1.Shape.Offset;
                        long ix2 = @out.Shape.Offset;

                        long stride1 = in1.Shape.Dimensions[0].Stride;
                        long stride2 = @out.Shape.Dimensions[0].Stride;


                        if (stride1 == stride2 && ix1 == ix2)
                        {
                            //Best case, all are equal, just keep a single counter
                            for (long i = 0; i < totalOps; i++)
                            {
                                d2[ix1] = (System.Byte)(d1[ix1]);
                                ix1 += stride1;
                            }
                        }
                        else
                        {
                            for (long i = 0; i < totalOps; i++)
                            {
                                d2[ix2] = (System.Byte)(d1[ix1]);
                                ix1 += stride1;
                                ix2 += stride2;
                            }
                        }
                    }
                    else if (@out.Shape.Dimensions.Length == 2)
                    {
                        long opsOuter = @out.Shape.Dimensions[0].Length;
                        long opsInner = @out.Shape.Dimensions[1].Length;

                        long ix1 = in1.Shape.Offset;
                        long ix2 = @out.Shape.Offset;

                        long outerStride1 = in1.Shape.Dimensions[0].Stride;
                        long outerStride2 = @out.Shape.Dimensions[0].Stride;

                        long innerStride1 = in1.Shape.Dimensions[1].Stride;
                        long innerStride2 = @out.Shape.Dimensions[1].Stride;

                        outerStride1 -= innerStride1 * in1.Shape.Dimensions[1].Length;
                        outerStride2 -= innerStride2 * @out.Shape.Dimensions[1].Length;

                        for (long i = 0; i < opsOuter; i++)
                        {
                            for (long j = 0; j < opsInner; j++)
                            {
                                d2[ix2] = (System.Byte)(d1[ix1]);
                                ix1 += innerStride1;
                                ix2 += innerStride2;
                            }

                            ix1 += outerStride1;
                            ix2 += outerStride2;
                        }
                    }
                    else
                    {
                        long n = in1.Shape.Dimensions.LongLength - 3;
                        long[] limits = in1.Shape.Dimensions.Where(x => n-- > 0).Select(x => x.Length).ToArray();
                        long[] counters = new long[limits.LongLength];

                        long totalOps = limits.LongLength == 0 ? 1 : limits.Aggregate<long>((a, b) => a * b);

                        //This chunck of variables are used to prevent repeated calculations of offsets
                        long dimIndex0 = 0 + limits.LongLength;
                        long dimIndex1 = 1 + limits.LongLength;
                        long dimIndex2 = 2 + limits.LongLength;

                        long opsOuter = @out.Shape.Dimensions[0 + limits.LongLength].Length;
                        long opsInner = @out.Shape.Dimensions[1 + limits.LongLength].Length;
                        long opsInnerInner = @out.Shape.Dimensions[2 + limits.LongLength].Length;

                        long outerStride1 = in1.Shape.Dimensions[dimIndex0].Stride;
                        long outerStride3 = @out.Shape.Dimensions[dimIndex0].Stride;

                        long innerStride1 = in1.Shape.Dimensions[dimIndex1].Stride;
                        long innerStride3 = @out.Shape.Dimensions[dimIndex1].Stride;

                        long innerInnerStride1 = in1.Shape.Dimensions[dimIndex2].Stride;
                        long innerInnerStride3 = @out.Shape.Dimensions[dimIndex2].Stride;

                        outerStride1 -= innerStride1 * in1.Shape.Dimensions[dimIndex1].Length;
                        outerStride3 -= innerStride3 * @out.Shape.Dimensions[dimIndex1].Length;

                        innerStride1 -= innerInnerStride1 * in1.Shape.Dimensions[dimIndex2].Length;
                        innerStride3 -= innerInnerStride3 * @out.Shape.Dimensions[dimIndex2].Length;

                        for (long outer = 0; outer < totalOps; outer++)
                        {
                            //Get the array offset for the first element in the outer dimension
                            long ix1 = in1.Shape[counters];
                            long ix3 = @out.Shape[counters];


                            for (long i = 0; i < opsOuter; i++)
                            {
                                for (long j = 0; j < opsInner; j++)
                                {
                                    for (long k = 0; k < opsInnerInner; k++)
                                    {
                                        d2[ix3] = (System.Byte)(d1[ix1]);
                                        ix1 += innerInnerStride1;
                                        ix3 += innerInnerStride3;
                                    }

                                    ix1 += innerStride1;
                                    ix3 += innerStride3;
                                }

                                ix1 += outerStride1;
                                ix3 += outerStride3;
                            }

                            if (counters.LongLength > 0)
                            {
                                //Basically a ripple carry adder
                                long p = counters.LongLength - 1;
                                while (++counters[p] == limits[p] && p > 0)
                                {
                                    counters[p] = 0;
                                    p--;
                                }
                            }
                        }
                    }
                }
            }
        }

        /// <summary>
        /// Unsafe implementation of applying a unary operation
        /// </summary>
        /// <typeparam name="C">The type of operation to perform</typeparam>
        /// <param name="op">The operation instance</param>
        /// <param name="scalar">The input scalar argument</param>
        /// <param name="out">The output target</param>
        internal static void UFunc_Op_Inner_Unary_Scalar_Flush_Double_TypedImpl<C>(NumCIL.UInt8.ToUInt8 op, System.Double scalar, NdArray<System.Byte> @out)
            where C : IUnaryOp<System.Double>
        {
            unsafe
            {
                using (var f2 = new Pinner(@out.DataAccessor))
                {
                    var d2 = (System.Byte*)f2.ptr;

                    if (@out.Shape.Dimensions.Length == 1)
                    {
                        long totalOps = @out.Shape.Dimensions[0].Length;
                        long ix2 = @out.Shape.Offset;
                        long stride2 = @out.Shape.Dimensions[0].Stride;

                        for (long i = 0; i < totalOps; i++)
                        {
                            d2[ix2] = (System.Byte)(scalar);
                            ix2 += stride2;
                        }
                    }
                    else if (@out.Shape.Dimensions.Length == 2)
                    {
                        long opsOuter = @out.Shape.Dimensions[0].Length;
                        long opsInner = @out.Shape.Dimensions[1].Length;

                        long ix2 = @out.Shape.Offset;
                        long outerStride2 = @out.Shape.Dimensions[0].Stride;
                        long innerStride2 = @out.Shape.Dimensions[1].Stride;
                        outerStride2 -= innerStride2 * @out.Shape.Dimensions[1].Length;

                        for (long i = 0; i < opsOuter; i++)
                        {
                            for (long j = 0; j < opsInner; j++)
                            {
                                d2[ix2] = (System.Byte)(scalar);
                                ix2 += innerStride2;
                            }

                            ix2 += outerStride2;
                        }
                    }
                    else
                    {
                        long n = @out.Shape.Dimensions.LongLength - 3;
                        long[] limits = @out.Shape.Dimensions.Where(x => n-- > 0).Select(x => x.Length).ToArray();
                        long[] counters = new long[limits.LongLength];

                        long totalOps = limits.LongLength == 0 ? 1 : limits.Aggregate<long>((a, b) => a * b);

                        //This chunck of variables are used to prevent repeated calculations of offsets
                        long dimIndex0 = 0 + limits.LongLength;
                        long dimIndex1 = 1 + limits.LongLength;
                        long dimIndex2 = 2 + limits.LongLength;

                        long opsOuter = @out.Shape.Dimensions[0 + limits.LongLength].Length;
                        long opsInner = @out.Shape.Dimensions[1 + limits.LongLength].Length;
                        long opsInnerInner = @out.Shape.Dimensions[2 + limits.LongLength].Length;

                        long outerStride3 = @out.Shape.Dimensions[dimIndex0].Stride;
                        long innerStride3 = @out.Shape.Dimensions[dimIndex1].Stride;
                        long innerInnerStride3 = @out.Shape.Dimensions[dimIndex2].Stride;
                        outerStride3 -= innerStride3 * @out.Shape.Dimensions[dimIndex1].Length;
                        innerStride3 -= innerInnerStride3 * @out.Shape.Dimensions[dimIndex2].Length;

                        for (long outer = 0; outer < totalOps; outer++)
                        {
                            //Get the array offset for the first element in the outer dimension
                            long ix3 = @out.Shape[counters];

                            for (long i = 0; i < opsOuter; i++)
                            {
                                for (long j = 0; j < opsInner; j++)
                                {
                                    for (long k = 0; k < opsInnerInner; k++)
                                    {
                                        d2[ix3] = (System.Byte)(scalar);
                                        ix3 += innerInnerStride3;
                                    }

                                    ix3 += innerStride3;
                                }

                                ix3 += outerStride3;
                            }

                            if (counters.LongLength > 0)
                            {
                                //Basically a ripple carry adder
                                long p = counters.LongLength - 1;
                                while (++counters[p] == limits[p] && p > 0)
                                {
                                    counters[p] = 0;
                                    p--;
                                }
                            }
                        }
                    }
                }
            }
        }
        /// <summary>
        /// Unsafe implementation of applying a unary operation
        /// </summary>
        /// <typeparam name="C">The type of operation to perform</typeparam>
        /// <param name="op">The operation instance</param>
        /// <param name="in1">The input argument</param>
        /// <param name="out">The output target</param>
        internal static void UFunc_Op_Inner_Unary_Flush_Boolean_TypedImpl<C>(NumCIL.Boolean.ToUInt8 op, NdArray<System.Boolean> in1, NdArray<System.Byte> @out)
            where C : IUnaryOp<System.Boolean>
        {
            unsafe
            {
                using (var f1 = new Pinner(in1.DataAccessor))
                using (var f2 = new Pinner(@out.DataAccessor))
                {
                    var d1 = (System.Boolean*)f1.ptr;
                    var d2 = (System.Byte*)f2.ptr;

                    if (@out.Shape.Dimensions.Length == 1)
                    {
                        long totalOps = @out.Shape.Dimensions[0].Length;

                        long ix1 = in1.Shape.Offset;
                        long ix2 = @out.Shape.Offset;

                        long stride1 = in1.Shape.Dimensions[0].Stride;
                        long stride2 = @out.Shape.Dimensions[0].Stride;


                        if (stride1 == stride2 && ix1 == ix2)
                        {
                            //Best case, all are equal, just keep a single counter
                            for (long i = 0; i < totalOps; i++)
                            {
                                d2[ix1] = (System.Byte)(d1[ix1] ? 1 : 0 );
                                ix1 += stride1;
                            }
                        }
                        else
                        {
                            for (long i = 0; i < totalOps; i++)
                            {
                                d2[ix2] = (System.Byte)(d1[ix1] ? 1 : 0 );
                                ix1 += stride1;
                                ix2 += stride2;
                            }
                        }
                    }
                    else if (@out.Shape.Dimensions.Length == 2)
                    {
                        long opsOuter = @out.Shape.Dimensions[0].Length;
                        long opsInner = @out.Shape.Dimensions[1].Length;

                        long ix1 = in1.Shape.Offset;
                        long ix2 = @out.Shape.Offset;

                        long outerStride1 = in1.Shape.Dimensions[0].Stride;
                        long outerStride2 = @out.Shape.Dimensions[0].Stride;

                        long innerStride1 = in1.Shape.Dimensions[1].Stride;
                        long innerStride2 = @out.Shape.Dimensions[1].Stride;

                        outerStride1 -= innerStride1 * in1.Shape.Dimensions[1].Length;
                        outerStride2 -= innerStride2 * @out.Shape.Dimensions[1].Length;

                        for (long i = 0; i < opsOuter; i++)
                        {
                            for (long j = 0; j < opsInner; j++)
                            {
                                d2[ix2] = (System.Byte)(d1[ix1] ? 1 : 0 );
                                ix1 += innerStride1;
                                ix2 += innerStride2;
                            }

                            ix1 += outerStride1;
                            ix2 += outerStride2;
                        }
                    }
                    else
                    {
                        long n = in1.Shape.Dimensions.LongLength - 3;
                        long[] limits = in1.Shape.Dimensions.Where(x => n-- > 0).Select(x => x.Length).ToArray();
                        long[] counters = new long[limits.LongLength];

                        long totalOps = limits.LongLength == 0 ? 1 : limits.Aggregate<long>((a, b) => a * b);

                        //This chunck of variables are used to prevent repeated calculations of offsets
                        long dimIndex0 = 0 + limits.LongLength;
                        long dimIndex1 = 1 + limits.LongLength;
                        long dimIndex2 = 2 + limits.LongLength;

                        long opsOuter = @out.Shape.Dimensions[0 + limits.LongLength].Length;
                        long opsInner = @out.Shape.Dimensions[1 + limits.LongLength].Length;
                        long opsInnerInner = @out.Shape.Dimensions[2 + limits.LongLength].Length;

                        long outerStride1 = in1.Shape.Dimensions[dimIndex0].Stride;
                        long outerStride3 = @out.Shape.Dimensions[dimIndex0].Stride;

                        long innerStride1 = in1.Shape.Dimensions[dimIndex1].Stride;
                        long innerStride3 = @out.Shape.Dimensions[dimIndex1].Stride;

                        long innerInnerStride1 = in1.Shape.Dimensions[dimIndex2].Stride;
                        long innerInnerStride3 = @out.Shape.Dimensions[dimIndex2].Stride;

                        outerStride1 -= innerStride1 * in1.Shape.Dimensions[dimIndex1].Length;
                        outerStride3 -= innerStride3 * @out.Shape.Dimensions[dimIndex1].Length;

                        innerStride1 -= innerInnerStride1 * in1.Shape.Dimensions[dimIndex2].Length;
                        innerStride3 -= innerInnerStride3 * @out.Shape.Dimensions[dimIndex2].Length;

                        for (long outer = 0; outer < totalOps; outer++)
                        {
                            //Get the array offset for the first element in the outer dimension
                            long ix1 = in1.Shape[counters];
                            long ix3 = @out.Shape[counters];


                            for (long i = 0; i < opsOuter; i++)
                            {
                                for (long j = 0; j < opsInner; j++)
                                {
                                    for (long k = 0; k < opsInnerInner; k++)
                                    {
                                        d2[ix3] = (System.Byte)(d1[ix1] ? 1 : 0 );
                                        ix1 += innerInnerStride1;
                                        ix3 += innerInnerStride3;
                                    }

                                    ix1 += innerStride1;
                                    ix3 += innerStride3;
                                }

                                ix1 += outerStride1;
                                ix3 += outerStride3;
                            }

                            if (counters.LongLength > 0)
                            {
                                //Basically a ripple carry adder
                                long p = counters.LongLength - 1;
                                while (++counters[p] == limits[p] && p > 0)
                                {
                                    counters[p] = 0;
                                    p--;
                                }
                            }
                        }
                    }
                }
            }
        }

        /// <summary>
        /// Unsafe implementation of applying a unary operation
        /// </summary>
        /// <typeparam name="C">The type of operation to perform</typeparam>
        /// <param name="op">The operation instance</param>
        /// <param name="scalar">The input scalar argument</param>
        /// <param name="out">The output target</param>
        internal static void UFunc_Op_Inner_Unary_Scalar_Flush_Boolean_TypedImpl<C>(NumCIL.Boolean.ToUInt8 op, System.Boolean scalar, NdArray<System.Byte> @out)
            where C : IUnaryOp<System.Boolean>
        {
            unsafe
            {
                using (var f2 = new Pinner(@out.DataAccessor))
                {
                    var d2 = (System.Byte*)f2.ptr;

                    if (@out.Shape.Dimensions.Length == 1)
                    {
                        long totalOps = @out.Shape.Dimensions[0].Length;
                        long ix2 = @out.Shape.Offset;
                        long stride2 = @out.Shape.Dimensions[0].Stride;

                        for (long i = 0; i < totalOps; i++)
                        {
                            d2[ix2] = (System.Byte)(scalar ? 1 : 0 );
                            ix2 += stride2;
                        }
                    }
                    else if (@out.Shape.Dimensions.Length == 2)
                    {
                        long opsOuter = @out.Shape.Dimensions[0].Length;
                        long opsInner = @out.Shape.Dimensions[1].Length;

                        long ix2 = @out.Shape.Offset;
                        long outerStride2 = @out.Shape.Dimensions[0].Stride;
                        long innerStride2 = @out.Shape.Dimensions[1].Stride;
                        outerStride2 -= innerStride2 * @out.Shape.Dimensions[1].Length;

                        for (long i = 0; i < opsOuter; i++)
                        {
                            for (long j = 0; j < opsInner; j++)
                            {
                                d2[ix2] = (System.Byte)(scalar ? 1 : 0 );
                                ix2 += innerStride2;
                            }

                            ix2 += outerStride2;
                        }
                    }
                    else
                    {
                        long n = @out.Shape.Dimensions.LongLength - 3;
                        long[] limits = @out.Shape.Dimensions.Where(x => n-- > 0).Select(x => x.Length).ToArray();
                        long[] counters = new long[limits.LongLength];

                        long totalOps = limits.LongLength == 0 ? 1 : limits.Aggregate<long>((a, b) => a * b);

                        //This chunck of variables are used to prevent repeated calculations of offsets
                        long dimIndex0 = 0 + limits.LongLength;
                        long dimIndex1 = 1 + limits.LongLength;
                        long dimIndex2 = 2 + limits.LongLength;

                        long opsOuter = @out.Shape.Dimensions[0 + limits.LongLength].Length;
                        long opsInner = @out.Shape.Dimensions[1 + limits.LongLength].Length;
                        long opsInnerInner = @out.Shape.Dimensions[2 + limits.LongLength].Length;

                        long outerStride3 = @out.Shape.Dimensions[dimIndex0].Stride;
                        long innerStride3 = @out.Shape.Dimensions[dimIndex1].Stride;
                        long innerInnerStride3 = @out.Shape.Dimensions[dimIndex2].Stride;
                        outerStride3 -= innerStride3 * @out.Shape.Dimensions[dimIndex1].Length;
                        innerStride3 -= innerInnerStride3 * @out.Shape.Dimensions[dimIndex2].Length;

                        for (long outer = 0; outer < totalOps; outer++)
                        {
                            //Get the array offset for the first element in the outer dimension
                            long ix3 = @out.Shape[counters];

                            for (long i = 0; i < opsOuter; i++)
                            {
                                for (long j = 0; j < opsInner; j++)
                                {
                                    for (long k = 0; k < opsInnerInner; k++)
                                    {
                                        d2[ix3] = (System.Byte)(scalar ? 1 : 0 );
                                        ix3 += innerInnerStride3;
                                    }

                                    ix3 += innerStride3;
                                }

                                ix3 += outerStride3;
                            }

                            if (counters.LongLength > 0)
                            {
                                //Basically a ripple carry adder
                                long p = counters.LongLength - 1;
                                while (++counters[p] == limits[p] && p > 0)
                                {
                                    counters[p] = 0;
                                    p--;
                                }
                            }
                        }
                    }
                }
            }
        }
        /// <summary>
        /// Unsafe implementation of applying a unary operation
        /// </summary>
        /// <typeparam name="C">The type of operation to perform</typeparam>
        /// <param name="op">The operation instance</param>
        /// <param name="in1">The input argument</param>
        /// <param name="out">The output target</param>
        internal static void UFunc_Op_Inner_Unary_Flush_SByte_TypedImpl<C>(NumCIL.Int8.ToInt8 op, NdArray<System.SByte> in1, NdArray<System.SByte> @out)
            where C : IUnaryOp<System.SByte>
        {
            unsafe
            {
                using (var f1 = new Pinner(in1.DataAccessor))
                using (var f2 = new Pinner(@out.DataAccessor))
                {
                    var d1 = (System.SByte*)f1.ptr;
                    var d2 = (System.SByte*)f2.ptr;

                    if (@out.Shape.Dimensions.Length == 1)
                    {
                        long totalOps = @out.Shape.Dimensions[0].Length;

                        long ix1 = in1.Shape.Offset;
                        long ix2 = @out.Shape.Offset;

                        long stride1 = in1.Shape.Dimensions[0].Stride;
                        long stride2 = @out.Shape.Dimensions[0].Stride;


                        if (stride1 == stride2 && ix1 == ix2)
                        {
                            //Best case, all are equal, just keep a single counter
                            for (long i = 0; i < totalOps; i++)
                            {
                                d2[ix1] = (System.SByte)(d1[ix1]);
                                ix1 += stride1;
                            }
                        }
                        else
                        {
                            for (long i = 0; i < totalOps; i++)
                            {
                                d2[ix2] = (System.SByte)(d1[ix1]);
                                ix1 += stride1;
                                ix2 += stride2;
                            }
                        }
                    }
                    else if (@out.Shape.Dimensions.Length == 2)
                    {
                        long opsOuter = @out.Shape.Dimensions[0].Length;
                        long opsInner = @out.Shape.Dimensions[1].Length;

                        long ix1 = in1.Shape.Offset;
                        long ix2 = @out.Shape.Offset;

                        long outerStride1 = in1.Shape.Dimensions[0].Stride;
                        long outerStride2 = @out.Shape.Dimensions[0].Stride;

                        long innerStride1 = in1.Shape.Dimensions[1].Stride;
                        long innerStride2 = @out.Shape.Dimensions[1].Stride;

                        outerStride1 -= innerStride1 * in1.Shape.Dimensions[1].Length;
                        outerStride2 -= innerStride2 * @out.Shape.Dimensions[1].Length;

                        for (long i = 0; i < opsOuter; i++)
                        {
                            for (long j = 0; j < opsInner; j++)
                            {
                                d2[ix2] = (System.SByte)(d1[ix1]);
                                ix1 += innerStride1;
                                ix2 += innerStride2;
                            }

                            ix1 += outerStride1;
                            ix2 += outerStride2;
                        }
                    }
                    else
                    {
                        long n = in1.Shape.Dimensions.LongLength - 3;
                        long[] limits = in1.Shape.Dimensions.Where(x => n-- > 0).Select(x => x.Length).ToArray();
                        long[] counters = new long[limits.LongLength];

                        long totalOps = limits.LongLength == 0 ? 1 : limits.Aggregate<long>((a, b) => a * b);

                        //This chunck of variables are used to prevent repeated calculations of offsets
                        long dimIndex0 = 0 + limits.LongLength;
                        long dimIndex1 = 1 + limits.LongLength;
                        long dimIndex2 = 2 + limits.LongLength;

                        long opsOuter = @out.Shape.Dimensions[0 + limits.LongLength].Length;
                        long opsInner = @out.Shape.Dimensions[1 + limits.LongLength].Length;
                        long opsInnerInner = @out.Shape.Dimensions[2 + limits.LongLength].Length;

                        long outerStride1 = in1.Shape.Dimensions[dimIndex0].Stride;
                        long outerStride3 = @out.Shape.Dimensions[dimIndex0].Stride;

                        long innerStride1 = in1.Shape.Dimensions[dimIndex1].Stride;
                        long innerStride3 = @out.Shape.Dimensions[dimIndex1].Stride;

                        long innerInnerStride1 = in1.Shape.Dimensions[dimIndex2].Stride;
                        long innerInnerStride3 = @out.Shape.Dimensions[dimIndex2].Stride;

                        outerStride1 -= innerStride1 * in1.Shape.Dimensions[dimIndex1].Length;
                        outerStride3 -= innerStride3 * @out.Shape.Dimensions[dimIndex1].Length;

                        innerStride1 -= innerInnerStride1 * in1.Shape.Dimensions[dimIndex2].Length;
                        innerStride3 -= innerInnerStride3 * @out.Shape.Dimensions[dimIndex2].Length;

                        for (long outer = 0; outer < totalOps; outer++)
                        {
                            //Get the array offset for the first element in the outer dimension
                            long ix1 = in1.Shape[counters];
                            long ix3 = @out.Shape[counters];


                            for (long i = 0; i < opsOuter; i++)
                            {
                                for (long j = 0; j < opsInner; j++)
                                {
                                    for (long k = 0; k < opsInnerInner; k++)
                                    {
                                        d2[ix3] = (System.SByte)(d1[ix1]);
                                        ix1 += innerInnerStride1;
                                        ix3 += innerInnerStride3;
                                    }

                                    ix1 += innerStride1;
                                    ix3 += innerStride3;
                                }

                                ix1 += outerStride1;
                                ix3 += outerStride3;
                            }

                            if (counters.LongLength > 0)
                            {
                                //Basically a ripple carry adder
                                long p = counters.LongLength - 1;
                                while (++counters[p] == limits[p] && p > 0)
                                {
                                    counters[p] = 0;
                                    p--;
                                }
                            }
                        }
                    }
                }
            }
        }

        /// <summary>
        /// Unsafe implementation of applying a unary operation
        /// </summary>
        /// <typeparam name="C">The type of operation to perform</typeparam>
        /// <param name="op">The operation instance</param>
        /// <param name="scalar">The input scalar argument</param>
        /// <param name="out">The output target</param>
        internal static void UFunc_Op_Inner_Unary_Scalar_Flush_SByte_TypedImpl<C>(NumCIL.Int8.ToInt8 op, System.SByte scalar, NdArray<System.SByte> @out)
            where C : IUnaryOp<System.SByte>
        {
            unsafe
            {
                using (var f2 = new Pinner(@out.DataAccessor))
                {
                    var d2 = (System.SByte*)f2.ptr;

                    if (@out.Shape.Dimensions.Length == 1)
                    {
                        long totalOps = @out.Shape.Dimensions[0].Length;
                        long ix2 = @out.Shape.Offset;
                        long stride2 = @out.Shape.Dimensions[0].Stride;

                        for (long i = 0; i < totalOps; i++)
                        {
                            d2[ix2] = (System.SByte)(scalar);
                            ix2 += stride2;
                        }
                    }
                    else if (@out.Shape.Dimensions.Length == 2)
                    {
                        long opsOuter = @out.Shape.Dimensions[0].Length;
                        long opsInner = @out.Shape.Dimensions[1].Length;

                        long ix2 = @out.Shape.Offset;
                        long outerStride2 = @out.Shape.Dimensions[0].Stride;
                        long innerStride2 = @out.Shape.Dimensions[1].Stride;
                        outerStride2 -= innerStride2 * @out.Shape.Dimensions[1].Length;

                        for (long i = 0; i < opsOuter; i++)
                        {
                            for (long j = 0; j < opsInner; j++)
                            {
                                d2[ix2] = (System.SByte)(scalar);
                                ix2 += innerStride2;
                            }

                            ix2 += outerStride2;
                        }
                    }
                    else
                    {
                        long n = @out.Shape.Dimensions.LongLength - 3;
                        long[] limits = @out.Shape.Dimensions.Where(x => n-- > 0).Select(x => x.Length).ToArray();
                        long[] counters = new long[limits.LongLength];

                        long totalOps = limits.LongLength == 0 ? 1 : limits.Aggregate<long>((a, b) => a * b);

                        //This chunck of variables are used to prevent repeated calculations of offsets
                        long dimIndex0 = 0 + limits.LongLength;
                        long dimIndex1 = 1 + limits.LongLength;
                        long dimIndex2 = 2 + limits.LongLength;

                        long opsOuter = @out.Shape.Dimensions[0 + limits.LongLength].Length;
                        long opsInner = @out.Shape.Dimensions[1 + limits.LongLength].Length;
                        long opsInnerInner = @out.Shape.Dimensions[2 + limits.LongLength].Length;

                        long outerStride3 = @out.Shape.Dimensions[dimIndex0].Stride;
                        long innerStride3 = @out.Shape.Dimensions[dimIndex1].Stride;
                        long innerInnerStride3 = @out.Shape.Dimensions[dimIndex2].Stride;
                        outerStride3 -= innerStride3 * @out.Shape.Dimensions[dimIndex1].Length;
                        innerStride3 -= innerInnerStride3 * @out.Shape.Dimensions[dimIndex2].Length;

                        for (long outer = 0; outer < totalOps; outer++)
                        {
                            //Get the array offset for the first element in the outer dimension
                            long ix3 = @out.Shape[counters];

                            for (long i = 0; i < opsOuter; i++)
                            {
                                for (long j = 0; j < opsInner; j++)
                                {
                                    for (long k = 0; k < opsInnerInner; k++)
                                    {
                                        d2[ix3] = (System.SByte)(scalar);
                                        ix3 += innerInnerStride3;
                                    }

                                    ix3 += innerStride3;
                                }

                                ix3 += outerStride3;
                            }

                            if (counters.LongLength > 0)
                            {
                                //Basically a ripple carry adder
                                long p = counters.LongLength - 1;
                                while (++counters[p] == limits[p] && p > 0)
                                {
                                    counters[p] = 0;
                                    p--;
                                }
                            }
                        }
                    }
                }
            }
        }
        /// <summary>
        /// Unsafe implementation of applying a unary operation
        /// </summary>
        /// <typeparam name="C">The type of operation to perform</typeparam>
        /// <param name="op">The operation instance</param>
        /// <param name="in1">The input argument</param>
        /// <param name="out">The output target</param>
        internal static void UFunc_Op_Inner_Unary_Flush_Byte_TypedImpl<C>(NumCIL.Int8.ToInt8 op, NdArray<System.Byte> in1, NdArray<System.SByte> @out)
            where C : IUnaryOp<System.Byte>
        {
            unsafe
            {
                using (var f1 = new Pinner(in1.DataAccessor))
                using (var f2 = new Pinner(@out.DataAccessor))
                {
                    var d1 = (System.Byte*)f1.ptr;
                    var d2 = (System.SByte*)f2.ptr;

                    if (@out.Shape.Dimensions.Length == 1)
                    {
                        long totalOps = @out.Shape.Dimensions[0].Length;

                        long ix1 = in1.Shape.Offset;
                        long ix2 = @out.Shape.Offset;

                        long stride1 = in1.Shape.Dimensions[0].Stride;
                        long stride2 = @out.Shape.Dimensions[0].Stride;


                        if (stride1 == stride2 && ix1 == ix2)
                        {
                            //Best case, all are equal, just keep a single counter
                            for (long i = 0; i < totalOps; i++)
                            {
                                d2[ix1] = (System.SByte)(d1[ix1]);
                                ix1 += stride1;
                            }
                        }
                        else
                        {
                            for (long i = 0; i < totalOps; i++)
                            {
                                d2[ix2] = (System.SByte)(d1[ix1]);
                                ix1 += stride1;
                                ix2 += stride2;
                            }
                        }
                    }
                    else if (@out.Shape.Dimensions.Length == 2)
                    {
                        long opsOuter = @out.Shape.Dimensions[0].Length;
                        long opsInner = @out.Shape.Dimensions[1].Length;

                        long ix1 = in1.Shape.Offset;
                        long ix2 = @out.Shape.Offset;

                        long outerStride1 = in1.Shape.Dimensions[0].Stride;
                        long outerStride2 = @out.Shape.Dimensions[0].Stride;

                        long innerStride1 = in1.Shape.Dimensions[1].Stride;
                        long innerStride2 = @out.Shape.Dimensions[1].Stride;

                        outerStride1 -= innerStride1 * in1.Shape.Dimensions[1].Length;
                        outerStride2 -= innerStride2 * @out.Shape.Dimensions[1].Length;

                        for (long i = 0; i < opsOuter; i++)
                        {
                            for (long j = 0; j < opsInner; j++)
                            {
                                d2[ix2] = (System.SByte)(d1[ix1]);
                                ix1 += innerStride1;
                                ix2 += innerStride2;
                            }

                            ix1 += outerStride1;
                            ix2 += outerStride2;
                        }
                    }
                    else
                    {
                        long n = in1.Shape.Dimensions.LongLength - 3;
                        long[] limits = in1.Shape.Dimensions.Where(x => n-- > 0).Select(x => x.Length).ToArray();
                        long[] counters = new long[limits.LongLength];

                        long totalOps = limits.LongLength == 0 ? 1 : limits.Aggregate<long>((a, b) => a * b);

                        //This chunck of variables are used to prevent repeated calculations of offsets
                        long dimIndex0 = 0 + limits.LongLength;
                        long dimIndex1 = 1 + limits.LongLength;
                        long dimIndex2 = 2 + limits.LongLength;

                        long opsOuter = @out.Shape.Dimensions[0 + limits.LongLength].Length;
                        long opsInner = @out.Shape.Dimensions[1 + limits.LongLength].Length;
                        long opsInnerInner = @out.Shape.Dimensions[2 + limits.LongLength].Length;

                        long outerStride1 = in1.Shape.Dimensions[dimIndex0].Stride;
                        long outerStride3 = @out.Shape.Dimensions[dimIndex0].Stride;

                        long innerStride1 = in1.Shape.Dimensions[dimIndex1].Stride;
                        long innerStride3 = @out.Shape.Dimensions[dimIndex1].Stride;

                        long innerInnerStride1 = in1.Shape.Dimensions[dimIndex2].Stride;
                        long innerInnerStride3 = @out.Shape.Dimensions[dimIndex2].Stride;

                        outerStride1 -= innerStride1 * in1.Shape.Dimensions[dimIndex1].Length;
                        outerStride3 -= innerStride3 * @out.Shape.Dimensions[dimIndex1].Length;

                        innerStride1 -= innerInnerStride1 * in1.Shape.Dimensions[dimIndex2].Length;
                        innerStride3 -= innerInnerStride3 * @out.Shape.Dimensions[dimIndex2].Length;

                        for (long outer = 0; outer < totalOps; outer++)
                        {
                            //Get the array offset for the first element in the outer dimension
                            long ix1 = in1.Shape[counters];
                            long ix3 = @out.Shape[counters];


                            for (long i = 0; i < opsOuter; i++)
                            {
                                for (long j = 0; j < opsInner; j++)
                                {
                                    for (long k = 0; k < opsInnerInner; k++)
                                    {
                                        d2[ix3] = (System.SByte)(d1[ix1]);
                                        ix1 += innerInnerStride1;
                                        ix3 += innerInnerStride3;
                                    }

                                    ix1 += innerStride1;
                                    ix3 += innerStride3;
                                }

                                ix1 += outerStride1;
                                ix3 += outerStride3;
                            }

                            if (counters.LongLength > 0)
                            {
                                //Basically a ripple carry adder
                                long p = counters.LongLength - 1;
                                while (++counters[p] == limits[p] && p > 0)
                                {
                                    counters[p] = 0;
                                    p--;
                                }
                            }
                        }
                    }
                }
            }
        }

        /// <summary>
        /// Unsafe implementation of applying a unary operation
        /// </summary>
        /// <typeparam name="C">The type of operation to perform</typeparam>
        /// <param name="op">The operation instance</param>
        /// <param name="scalar">The input scalar argument</param>
        /// <param name="out">The output target</param>
        internal static void UFunc_Op_Inner_Unary_Scalar_Flush_Byte_TypedImpl<C>(NumCIL.Int8.ToInt8 op, System.Byte scalar, NdArray<System.SByte> @out)
            where C : IUnaryOp<System.Byte>
        {
            unsafe
            {
                using (var f2 = new Pinner(@out.DataAccessor))
                {
                    var d2 = (System.SByte*)f2.ptr;

                    if (@out.Shape.Dimensions.Length == 1)
                    {
                        long totalOps = @out.Shape.Dimensions[0].Length;
                        long ix2 = @out.Shape.Offset;
                        long stride2 = @out.Shape.Dimensions[0].Stride;

                        for (long i = 0; i < totalOps; i++)
                        {
                            d2[ix2] = (System.SByte)(scalar);
                            ix2 += stride2;
                        }
                    }
                    else if (@out.Shape.Dimensions.Length == 2)
                    {
                        long opsOuter = @out.Shape.Dimensions[0].Length;
                        long opsInner = @out.Shape.Dimensions[1].Length;

                        long ix2 = @out.Shape.Offset;
                        long outerStride2 = @out.Shape.Dimensions[0].Stride;
                        long innerStride2 = @out.Shape.Dimensions[1].Stride;
                        outerStride2 -= innerStride2 * @out.Shape.Dimensions[1].Length;

                        for (long i = 0; i < opsOuter; i++)
                        {
                            for (long j = 0; j < opsInner; j++)
                            {
                                d2[ix2] = (System.SByte)(scalar);
                                ix2 += innerStride2;
                            }

                            ix2 += outerStride2;
                        }
                    }
                    else
                    {
                        long n = @out.Shape.Dimensions.LongLength - 3;
                        long[] limits = @out.Shape.Dimensions.Where(x => n-- > 0).Select(x => x.Length).ToArray();
                        long[] counters = new long[limits.LongLength];

                        long totalOps = limits.LongLength == 0 ? 1 : limits.Aggregate<long>((a, b) => a * b);

                        //This chunck of variables are used to prevent repeated calculations of offsets
                        long dimIndex0 = 0 + limits.LongLength;
                        long dimIndex1 = 1 + limits.LongLength;
                        long dimIndex2 = 2 + limits.LongLength;

                        long opsOuter = @out.Shape.Dimensions[0 + limits.LongLength].Length;
                        long opsInner = @out.Shape.Dimensions[1 + limits.LongLength].Length;
                        long opsInnerInner = @out.Shape.Dimensions[2 + limits.LongLength].Length;

                        long outerStride3 = @out.Shape.Dimensions[dimIndex0].Stride;
                        long innerStride3 = @out.Shape.Dimensions[dimIndex1].Stride;
                        long innerInnerStride3 = @out.Shape.Dimensions[dimIndex2].Stride;
                        outerStride3 -= innerStride3 * @out.Shape.Dimensions[dimIndex1].Length;
                        innerStride3 -= innerInnerStride3 * @out.Shape.Dimensions[dimIndex2].Length;

                        for (long outer = 0; outer < totalOps; outer++)
                        {
                            //Get the array offset for the first element in the outer dimension
                            long ix3 = @out.Shape[counters];

                            for (long i = 0; i < opsOuter; i++)
                            {
                                for (long j = 0; j < opsInner; j++)
                                {
                                    for (long k = 0; k < opsInnerInner; k++)
                                    {
                                        d2[ix3] = (System.SByte)(scalar);
                                        ix3 += innerInnerStride3;
                                    }

                                    ix3 += innerStride3;
                                }

                                ix3 += outerStride3;
                            }

                            if (counters.LongLength > 0)
                            {
                                //Basically a ripple carry adder
                                long p = counters.LongLength - 1;
                                while (++counters[p] == limits[p] && p > 0)
                                {
                                    counters[p] = 0;
                                    p--;
                                }
                            }
                        }
                    }
                }
            }
        }
        /// <summary>
        /// Unsafe implementation of applying a unary operation
        /// </summary>
        /// <typeparam name="C">The type of operation to perform</typeparam>
        /// <param name="op">The operation instance</param>
        /// <param name="in1">The input argument</param>
        /// <param name="out">The output target</param>
        internal static void UFunc_Op_Inner_Unary_Flush_Int16_TypedImpl<C>(NumCIL.Int8.ToInt8 op, NdArray<System.Int16> in1, NdArray<System.SByte> @out)
            where C : IUnaryOp<System.Int16>
        {
            unsafe
            {
                using (var f1 = new Pinner(in1.DataAccessor))
                using (var f2 = new Pinner(@out.DataAccessor))
                {
                    var d1 = (System.Int16*)f1.ptr;
                    var d2 = (System.SByte*)f2.ptr;

                    if (@out.Shape.Dimensions.Length == 1)
                    {
                        long totalOps = @out.Shape.Dimensions[0].Length;

                        long ix1 = in1.Shape.Offset;
                        long ix2 = @out.Shape.Offset;

                        long stride1 = in1.Shape.Dimensions[0].Stride;
                        long stride2 = @out.Shape.Dimensions[0].Stride;


                        if (stride1 == stride2 && ix1 == ix2)
                        {
                            //Best case, all are equal, just keep a single counter
                            for (long i = 0; i < totalOps; i++)
                            {
                                d2[ix1] = (System.SByte)(d1[ix1]);
                                ix1 += stride1;
                            }
                        }
                        else
                        {
                            for (long i = 0; i < totalOps; i++)
                            {
                                d2[ix2] = (System.SByte)(d1[ix1]);
                                ix1 += stride1;
                                ix2 += stride2;
                            }
                        }
                    }
                    else if (@out.Shape.Dimensions.Length == 2)
                    {
                        long opsOuter = @out.Shape.Dimensions[0].Length;
                        long opsInner = @out.Shape.Dimensions[1].Length;

                        long ix1 = in1.Shape.Offset;
                        long ix2 = @out.Shape.Offset;

                        long outerStride1 = in1.Shape.Dimensions[0].Stride;
                        long outerStride2 = @out.Shape.Dimensions[0].Stride;

                        long innerStride1 = in1.Shape.Dimensions[1].Stride;
                        long innerStride2 = @out.Shape.Dimensions[1].Stride;

                        outerStride1 -= innerStride1 * in1.Shape.Dimensions[1].Length;
                        outerStride2 -= innerStride2 * @out.Shape.Dimensions[1].Length;

                        for (long i = 0; i < opsOuter; i++)
                        {
                            for (long j = 0; j < opsInner; j++)
                            {
                                d2[ix2] = (System.SByte)(d1[ix1]);
                                ix1 += innerStride1;
                                ix2 += innerStride2;
                            }

                            ix1 += outerStride1;
                            ix2 += outerStride2;
                        }
                    }
                    else
                    {
                        long n = in1.Shape.Dimensions.LongLength - 3;
                        long[] limits = in1.Shape.Dimensions.Where(x => n-- > 0).Select(x => x.Length).ToArray();
                        long[] counters = new long[limits.LongLength];

                        long totalOps = limits.LongLength == 0 ? 1 : limits.Aggregate<long>((a, b) => a * b);

                        //This chunck of variables are used to prevent repeated calculations of offsets
                        long dimIndex0 = 0 + limits.LongLength;
                        long dimIndex1 = 1 + limits.LongLength;
                        long dimIndex2 = 2 + limits.LongLength;

                        long opsOuter = @out.Shape.Dimensions[0 + limits.LongLength].Length;
                        long opsInner = @out.Shape.Dimensions[1 + limits.LongLength].Length;
                        long opsInnerInner = @out.Shape.Dimensions[2 + limits.LongLength].Length;

                        long outerStride1 = in1.Shape.Dimensions[dimIndex0].Stride;
                        long outerStride3 = @out.Shape.Dimensions[dimIndex0].Stride;

                        long innerStride1 = in1.Shape.Dimensions[dimIndex1].Stride;
                        long innerStride3 = @out.Shape.Dimensions[dimIndex1].Stride;

                        long innerInnerStride1 = in1.Shape.Dimensions[dimIndex2].Stride;
                        long innerInnerStride3 = @out.Shape.Dimensions[dimIndex2].Stride;

                        outerStride1 -= innerStride1 * in1.Shape.Dimensions[dimIndex1].Length;
                        outerStride3 -= innerStride3 * @out.Shape.Dimensions[dimIndex1].Length;

                        innerStride1 -= innerInnerStride1 * in1.Shape.Dimensions[dimIndex2].Length;
                        innerStride3 -= innerInnerStride3 * @out.Shape.Dimensions[dimIndex2].Length;

                        for (long outer = 0; outer < totalOps; outer++)
                        {
                            //Get the array offset for the first element in the outer dimension
                            long ix1 = in1.Shape[counters];
                            long ix3 = @out.Shape[counters];


                            for (long i = 0; i < opsOuter; i++)
                            {
                                for (long j = 0; j < opsInner; j++)
                                {
                                    for (long k = 0; k < opsInnerInner; k++)
                                    {
                                        d2[ix3] = (System.SByte)(d1[ix1]);
                                        ix1 += innerInnerStride1;
                                        ix3 += innerInnerStride3;
                                    }

                                    ix1 += innerStride1;
                                    ix3 += innerStride3;
                                }

                                ix1 += outerStride1;
                                ix3 += outerStride3;
                            }

                            if (counters.LongLength > 0)
                            {
                                //Basically a ripple carry adder
                                long p = counters.LongLength - 1;
                                while (++counters[p] == limits[p] && p > 0)
                                {
                                    counters[p] = 0;
                                    p--;
                                }
                            }
                        }
                    }
                }
            }
        }

        /// <summary>
        /// Unsafe implementation of applying a unary operation
        /// </summary>
        /// <typeparam name="C">The type of operation to perform</typeparam>
        /// <param name="op">The operation instance</param>
        /// <param name="scalar">The input scalar argument</param>
        /// <param name="out">The output target</param>
        internal static void UFunc_Op_Inner_Unary_Scalar_Flush_Int16_TypedImpl<C>(NumCIL.Int8.ToInt8 op, System.Int16 scalar, NdArray<System.SByte> @out)
            where C : IUnaryOp<System.Int16>
        {
            unsafe
            {
                using (var f2 = new Pinner(@out.DataAccessor))
                {
                    var d2 = (System.SByte*)f2.ptr;

                    if (@out.Shape.Dimensions.Length == 1)
                    {
                        long totalOps = @out.Shape.Dimensions[0].Length;
                        long ix2 = @out.Shape.Offset;
                        long stride2 = @out.Shape.Dimensions[0].Stride;

                        for (long i = 0; i < totalOps; i++)
                        {
                            d2[ix2] = (System.SByte)(scalar);
                            ix2 += stride2;
                        }
                    }
                    else if (@out.Shape.Dimensions.Length == 2)
                    {
                        long opsOuter = @out.Shape.Dimensions[0].Length;
                        long opsInner = @out.Shape.Dimensions[1].Length;

                        long ix2 = @out.Shape.Offset;
                        long outerStride2 = @out.Shape.Dimensions[0].Stride;
                        long innerStride2 = @out.Shape.Dimensions[1].Stride;
                        outerStride2 -= innerStride2 * @out.Shape.Dimensions[1].Length;

                        for (long i = 0; i < opsOuter; i++)
                        {
                            for (long j = 0; j < opsInner; j++)
                            {
                                d2[ix2] = (System.SByte)(scalar);
                                ix2 += innerStride2;
                            }

                            ix2 += outerStride2;
                        }
                    }
                    else
                    {
                        long n = @out.Shape.Dimensions.LongLength - 3;
                        long[] limits = @out.Shape.Dimensions.Where(x => n-- > 0).Select(x => x.Length).ToArray();
                        long[] counters = new long[limits.LongLength];

                        long totalOps = limits.LongLength == 0 ? 1 : limits.Aggregate<long>((a, b) => a * b);

                        //This chunck of variables are used to prevent repeated calculations of offsets
                        long dimIndex0 = 0 + limits.LongLength;
                        long dimIndex1 = 1 + limits.LongLength;
                        long dimIndex2 = 2 + limits.LongLength;

                        long opsOuter = @out.Shape.Dimensions[0 + limits.LongLength].Length;
                        long opsInner = @out.Shape.Dimensions[1 + limits.LongLength].Length;
                        long opsInnerInner = @out.Shape.Dimensions[2 + limits.LongLength].Length;

                        long outerStride3 = @out.Shape.Dimensions[dimIndex0].Stride;
                        long innerStride3 = @out.Shape.Dimensions[dimIndex1].Stride;
                        long innerInnerStride3 = @out.Shape.Dimensions[dimIndex2].Stride;
                        outerStride3 -= innerStride3 * @out.Shape.Dimensions[dimIndex1].Length;
                        innerStride3 -= innerInnerStride3 * @out.Shape.Dimensions[dimIndex2].Length;

                        for (long outer = 0; outer < totalOps; outer++)
                        {
                            //Get the array offset for the first element in the outer dimension
                            long ix3 = @out.Shape[counters];

                            for (long i = 0; i < opsOuter; i++)
                            {
                                for (long j = 0; j < opsInner; j++)
                                {
                                    for (long k = 0; k < opsInnerInner; k++)
                                    {
                                        d2[ix3] = (System.SByte)(scalar);
                                        ix3 += innerInnerStride3;
                                    }

                                    ix3 += innerStride3;
                                }

                                ix3 += outerStride3;
                            }

                            if (counters.LongLength > 0)
                            {
                                //Basically a ripple carry adder
                                long p = counters.LongLength - 1;
                                while (++counters[p] == limits[p] && p > 0)
                                {
                                    counters[p] = 0;
                                    p--;
                                }
                            }
                        }
                    }
                }
            }
        }
        /// <summary>
        /// Unsafe implementation of applying a unary operation
        /// </summary>
        /// <typeparam name="C">The type of operation to perform</typeparam>
        /// <param name="op">The operation instance</param>
        /// <param name="in1">The input argument</param>
        /// <param name="out">The output target</param>
        internal static void UFunc_Op_Inner_Unary_Flush_UInt16_TypedImpl<C>(NumCIL.Int8.ToInt8 op, NdArray<System.UInt16> in1, NdArray<System.SByte> @out)
            where C : IUnaryOp<System.UInt16>
        {
            unsafe
            {
                using (var f1 = new Pinner(in1.DataAccessor))
                using (var f2 = new Pinner(@out.DataAccessor))
                {
                    var d1 = (System.UInt16*)f1.ptr;
                    var d2 = (System.SByte*)f2.ptr;

                    if (@out.Shape.Dimensions.Length == 1)
                    {
                        long totalOps = @out.Shape.Dimensions[0].Length;

                        long ix1 = in1.Shape.Offset;
                        long ix2 = @out.Shape.Offset;

                        long stride1 = in1.Shape.Dimensions[0].Stride;
                        long stride2 = @out.Shape.Dimensions[0].Stride;


                        if (stride1 == stride2 && ix1 == ix2)
                        {
                            //Best case, all are equal, just keep a single counter
                            for (long i = 0; i < totalOps; i++)
                            {
                                d2[ix1] = (System.SByte)(d1[ix1]);
                                ix1 += stride1;
                            }
                        }
                        else
                        {
                            for (long i = 0; i < totalOps; i++)
                            {
                                d2[ix2] = (System.SByte)(d1[ix1]);
                                ix1 += stride1;
                                ix2 += stride2;
                            }
                        }
                    }
                    else if (@out.Shape.Dimensions.Length == 2)
                    {
                        long opsOuter = @out.Shape.Dimensions[0].Length;
                        long opsInner = @out.Shape.Dimensions[1].Length;

                        long ix1 = in1.Shape.Offset;
                        long ix2 = @out.Shape.Offset;

                        long outerStride1 = in1.Shape.Dimensions[0].Stride;
                        long outerStride2 = @out.Shape.Dimensions[0].Stride;

                        long innerStride1 = in1.Shape.Dimensions[1].Stride;
                        long innerStride2 = @out.Shape.Dimensions[1].Stride;

                        outerStride1 -= innerStride1 * in1.Shape.Dimensions[1].Length;
                        outerStride2 -= innerStride2 * @out.Shape.Dimensions[1].Length;

                        for (long i = 0; i < opsOuter; i++)
                        {
                            for (long j = 0; j < opsInner; j++)
                            {
                                d2[ix2] = (System.SByte)(d1[ix1]);
                                ix1 += innerStride1;
                                ix2 += innerStride2;
                            }

                            ix1 += outerStride1;
                            ix2 += outerStride2;
                        }
                    }
                    else
                    {
                        long n = in1.Shape.Dimensions.LongLength - 3;
                        long[] limits = in1.Shape.Dimensions.Where(x => n-- > 0).Select(x => x.Length).ToArray();
                        long[] counters = new long[limits.LongLength];

                        long totalOps = limits.LongLength == 0 ? 1 : limits.Aggregate<long>((a, b) => a * b);

                        //This chunck of variables are used to prevent repeated calculations of offsets
                        long dimIndex0 = 0 + limits.LongLength;
                        long dimIndex1 = 1 + limits.LongLength;
                        long dimIndex2 = 2 + limits.LongLength;

                        long opsOuter = @out.Shape.Dimensions[0 + limits.LongLength].Length;
                        long opsInner = @out.Shape.Dimensions[1 + limits.LongLength].Length;
                        long opsInnerInner = @out.Shape.Dimensions[2 + limits.LongLength].Length;

                        long outerStride1 = in1.Shape.Dimensions[dimIndex0].Stride;
                        long outerStride3 = @out.Shape.Dimensions[dimIndex0].Stride;

                        long innerStride1 = in1.Shape.Dimensions[dimIndex1].Stride;
                        long innerStride3 = @out.Shape.Dimensions[dimIndex1].Stride;

                        long innerInnerStride1 = in1.Shape.Dimensions[dimIndex2].Stride;
                        long innerInnerStride3 = @out.Shape.Dimensions[dimIndex2].Stride;

                        outerStride1 -= innerStride1 * in1.Shape.Dimensions[dimIndex1].Length;
                        outerStride3 -= innerStride3 * @out.Shape.Dimensions[dimIndex1].Length;

                        innerStride1 -= innerInnerStride1 * in1.Shape.Dimensions[dimIndex2].Length;
                        innerStride3 -= innerInnerStride3 * @out.Shape.Dimensions[dimIndex2].Length;

                        for (long outer = 0; outer < totalOps; outer++)
                        {
                            //Get the array offset for the first element in the outer dimension
                            long ix1 = in1.Shape[counters];
                            long ix3 = @out.Shape[counters];


                            for (long i = 0; i < opsOuter; i++)
                            {
                                for (long j = 0; j < opsInner; j++)
                                {
                                    for (long k = 0; k < opsInnerInner; k++)
                                    {
                                        d2[ix3] = (System.SByte)(d1[ix1]);
                                        ix1 += innerInnerStride1;
                                        ix3 += innerInnerStride3;
                                    }

                                    ix1 += innerStride1;
                                    ix3 += innerStride3;
                                }

                                ix1 += outerStride1;
                                ix3 += outerStride3;
                            }

                            if (counters.LongLength > 0)
                            {
                                //Basically a ripple carry adder
                                long p = counters.LongLength - 1;
                                while (++counters[p] == limits[p] && p > 0)
                                {
                                    counters[p] = 0;
                                    p--;
                                }
                            }
                        }
                    }
                }
            }
        }

        /// <summary>
        /// Unsafe implementation of applying a unary operation
        /// </summary>
        /// <typeparam name="C">The type of operation to perform</typeparam>
        /// <param name="op">The operation instance</param>
        /// <param name="scalar">The input scalar argument</param>
        /// <param name="out">The output target</param>
        internal static void UFunc_Op_Inner_Unary_Scalar_Flush_UInt16_TypedImpl<C>(NumCIL.Int8.ToInt8 op, System.UInt16 scalar, NdArray<System.SByte> @out)
            where C : IUnaryOp<System.UInt16>
        {
            unsafe
            {
                using (var f2 = new Pinner(@out.DataAccessor))
                {
                    var d2 = (System.SByte*)f2.ptr;

                    if (@out.Shape.Dimensions.Length == 1)
                    {
                        long totalOps = @out.Shape.Dimensions[0].Length;
                        long ix2 = @out.Shape.Offset;
                        long stride2 = @out.Shape.Dimensions[0].Stride;

                        for (long i = 0; i < totalOps; i++)
                        {
                            d2[ix2] = (System.SByte)(scalar);
                            ix2 += stride2;
                        }
                    }
                    else if (@out.Shape.Dimensions.Length == 2)
                    {
                        long opsOuter = @out.Shape.Dimensions[0].Length;
                        long opsInner = @out.Shape.Dimensions[1].Length;

                        long ix2 = @out.Shape.Offset;
                        long outerStride2 = @out.Shape.Dimensions[0].Stride;
                        long innerStride2 = @out.Shape.Dimensions[1].Stride;
                        outerStride2 -= innerStride2 * @out.Shape.Dimensions[1].Length;

                        for (long i = 0; i < opsOuter; i++)
                        {
                            for (long j = 0; j < opsInner; j++)
                            {
                                d2[ix2] = (System.SByte)(scalar);
                                ix2 += innerStride2;
                            }

                            ix2 += outerStride2;
                        }
                    }
                    else
                    {
                        long n = @out.Shape.Dimensions.LongLength - 3;
                        long[] limits = @out.Shape.Dimensions.Where(x => n-- > 0).Select(x => x.Length).ToArray();
                        long[] counters = new long[limits.LongLength];

                        long totalOps = limits.LongLength == 0 ? 1 : limits.Aggregate<long>((a, b) => a * b);

                        //This chunck of variables are used to prevent repeated calculations of offsets
                        long dimIndex0 = 0 + limits.LongLength;
                        long dimIndex1 = 1 + limits.LongLength;
                        long dimIndex2 = 2 + limits.LongLength;

                        long opsOuter = @out.Shape.Dimensions[0 + limits.LongLength].Length;
                        long opsInner = @out.Shape.Dimensions[1 + limits.LongLength].Length;
                        long opsInnerInner = @out.Shape.Dimensions[2 + limits.LongLength].Length;

                        long outerStride3 = @out.Shape.Dimensions[dimIndex0].Stride;
                        long innerStride3 = @out.Shape.Dimensions[dimIndex1].Stride;
                        long innerInnerStride3 = @out.Shape.Dimensions[dimIndex2].Stride;
                        outerStride3 -= innerStride3 * @out.Shape.Dimensions[dimIndex1].Length;
                        innerStride3 -= innerInnerStride3 * @out.Shape.Dimensions[dimIndex2].Length;

                        for (long outer = 0; outer < totalOps; outer++)
                        {
                            //Get the array offset for the first element in the outer dimension
                            long ix3 = @out.Shape[counters];

                            for (long i = 0; i < opsOuter; i++)
                            {
                                for (long j = 0; j < opsInner; j++)
                                {
                                    for (long k = 0; k < opsInnerInner; k++)
                                    {
                                        d2[ix3] = (System.SByte)(scalar);
                                        ix3 += innerInnerStride3;
                                    }

                                    ix3 += innerStride3;
                                }

                                ix3 += outerStride3;
                            }

                            if (counters.LongLength > 0)
                            {
                                //Basically a ripple carry adder
                                long p = counters.LongLength - 1;
                                while (++counters[p] == limits[p] && p > 0)
                                {
                                    counters[p] = 0;
                                    p--;
                                }
                            }
                        }
                    }
                }
            }
        }
        /// <summary>
        /// Unsafe implementation of applying a unary operation
        /// </summary>
        /// <typeparam name="C">The type of operation to perform</typeparam>
        /// <param name="op">The operation instance</param>
        /// <param name="in1">The input argument</param>
        /// <param name="out">The output target</param>
        internal static void UFunc_Op_Inner_Unary_Flush_Int32_TypedImpl<C>(NumCIL.Int8.ToInt8 op, NdArray<System.Int32> in1, NdArray<System.SByte> @out)
            where C : IUnaryOp<System.Int32>
        {
            unsafe
            {
                using (var f1 = new Pinner(in1.DataAccessor))
                using (var f2 = new Pinner(@out.DataAccessor))
                {
                    var d1 = (System.Int32*)f1.ptr;
                    var d2 = (System.SByte*)f2.ptr;

                    if (@out.Shape.Dimensions.Length == 1)
                    {
                        long totalOps = @out.Shape.Dimensions[0].Length;

                        long ix1 = in1.Shape.Offset;
                        long ix2 = @out.Shape.Offset;

                        long stride1 = in1.Shape.Dimensions[0].Stride;
                        long stride2 = @out.Shape.Dimensions[0].Stride;


                        if (stride1 == stride2 && ix1 == ix2)
                        {
                            //Best case, all are equal, just keep a single counter
                            for (long i = 0; i < totalOps; i++)
                            {
                                d2[ix1] = (System.SByte)(d1[ix1]);
                                ix1 += stride1;
                            }
                        }
                        else
                        {
                            for (long i = 0; i < totalOps; i++)
                            {
                                d2[ix2] = (System.SByte)(d1[ix1]);
                                ix1 += stride1;
                                ix2 += stride2;
                            }
                        }
                    }
                    else if (@out.Shape.Dimensions.Length == 2)
                    {
                        long opsOuter = @out.Shape.Dimensions[0].Length;
                        long opsInner = @out.Shape.Dimensions[1].Length;

                        long ix1 = in1.Shape.Offset;
                        long ix2 = @out.Shape.Offset;

                        long outerStride1 = in1.Shape.Dimensions[0].Stride;
                        long outerStride2 = @out.Shape.Dimensions[0].Stride;

                        long innerStride1 = in1.Shape.Dimensions[1].Stride;
                        long innerStride2 = @out.Shape.Dimensions[1].Stride;

                        outerStride1 -= innerStride1 * in1.Shape.Dimensions[1].Length;
                        outerStride2 -= innerStride2 * @out.Shape.Dimensions[1].Length;

                        for (long i = 0; i < opsOuter; i++)
                        {
                            for (long j = 0; j < opsInner; j++)
                            {
                                d2[ix2] = (System.SByte)(d1[ix1]);
                                ix1 += innerStride1;
                                ix2 += innerStride2;
                            }

                            ix1 += outerStride1;
                            ix2 += outerStride2;
                        }
                    }
                    else
                    {
                        long n = in1.Shape.Dimensions.LongLength - 3;
                        long[] limits = in1.Shape.Dimensions.Where(x => n-- > 0).Select(x => x.Length).ToArray();
                        long[] counters = new long[limits.LongLength];

                        long totalOps = limits.LongLength == 0 ? 1 : limits.Aggregate<long>((a, b) => a * b);

                        //This chunck of variables are used to prevent repeated calculations of offsets
                        long dimIndex0 = 0 + limits.LongLength;
                        long dimIndex1 = 1 + limits.LongLength;
                        long dimIndex2 = 2 + limits.LongLength;

                        long opsOuter = @out.Shape.Dimensions[0 + limits.LongLength].Length;
                        long opsInner = @out.Shape.Dimensions[1 + limits.LongLength].Length;
                        long opsInnerInner = @out.Shape.Dimensions[2 + limits.LongLength].Length;

                        long outerStride1 = in1.Shape.Dimensions[dimIndex0].Stride;
                        long outerStride3 = @out.Shape.Dimensions[dimIndex0].Stride;

                        long innerStride1 = in1.Shape.Dimensions[dimIndex1].Stride;
                        long innerStride3 = @out.Shape.Dimensions[dimIndex1].Stride;

                        long innerInnerStride1 = in1.Shape.Dimensions[dimIndex2].Stride;
                        long innerInnerStride3 = @out.Shape.Dimensions[dimIndex2].Stride;

                        outerStride1 -= innerStride1 * in1.Shape.Dimensions[dimIndex1].Length;
                        outerStride3 -= innerStride3 * @out.Shape.Dimensions[dimIndex1].Length;

                        innerStride1 -= innerInnerStride1 * in1.Shape.Dimensions[dimIndex2].Length;
                        innerStride3 -= innerInnerStride3 * @out.Shape.Dimensions[dimIndex2].Length;

                        for (long outer = 0; outer < totalOps; outer++)
                        {
                            //Get the array offset for the first element in the outer dimension
                            long ix1 = in1.Shape[counters];
                            long ix3 = @out.Shape[counters];


                            for (long i = 0; i < opsOuter; i++)
                            {
                                for (long j = 0; j < opsInner; j++)
                                {
                                    for (long k = 0; k < opsInnerInner; k++)
                                    {
                                        d2[ix3] = (System.SByte)(d1[ix1]);
                                        ix1 += innerInnerStride1;
                                        ix3 += innerInnerStride3;
                                    }

                                    ix1 += innerStride1;
                                    ix3 += innerStride3;
                                }

                                ix1 += outerStride1;
                                ix3 += outerStride3;
                            }

                            if (counters.LongLength > 0)
                            {
                                //Basically a ripple carry adder
                                long p = counters.LongLength - 1;
                                while (++counters[p] == limits[p] && p > 0)
                                {
                                    counters[p] = 0;
                                    p--;
                                }
                            }
                        }
                    }
                }
            }
        }

        /// <summary>
        /// Unsafe implementation of applying a unary operation
        /// </summary>
        /// <typeparam name="C">The type of operation to perform</typeparam>
        /// <param name="op">The operation instance</param>
        /// <param name="scalar">The input scalar argument</param>
        /// <param name="out">The output target</param>
        internal static void UFunc_Op_Inner_Unary_Scalar_Flush_Int32_TypedImpl<C>(NumCIL.Int8.ToInt8 op, System.Int32 scalar, NdArray<System.SByte> @out)
            where C : IUnaryOp<System.Int32>
        {
            unsafe
            {
                using (var f2 = new Pinner(@out.DataAccessor))
                {
                    var d2 = (System.SByte*)f2.ptr;

                    if (@out.Shape.Dimensions.Length == 1)
                    {
                        long totalOps = @out.Shape.Dimensions[0].Length;
                        long ix2 = @out.Shape.Offset;
                        long stride2 = @out.Shape.Dimensions[0].Stride;

                        for (long i = 0; i < totalOps; i++)
                        {
                            d2[ix2] = (System.SByte)(scalar);
                            ix2 += stride2;
                        }
                    }
                    else if (@out.Shape.Dimensions.Length == 2)
                    {
                        long opsOuter = @out.Shape.Dimensions[0].Length;
                        long opsInner = @out.Shape.Dimensions[1].Length;

                        long ix2 = @out.Shape.Offset;
                        long outerStride2 = @out.Shape.Dimensions[0].Stride;
                        long innerStride2 = @out.Shape.Dimensions[1].Stride;
                        outerStride2 -= innerStride2 * @out.Shape.Dimensions[1].Length;

                        for (long i = 0; i < opsOuter; i++)
                        {
                            for (long j = 0; j < opsInner; j++)
                            {
                                d2[ix2] = (System.SByte)(scalar);
                                ix2 += innerStride2;
                            }

                            ix2 += outerStride2;
                        }
                    }
                    else
                    {
                        long n = @out.Shape.Dimensions.LongLength - 3;
                        long[] limits = @out.Shape.Dimensions.Where(x => n-- > 0).Select(x => x.Length).ToArray();
                        long[] counters = new long[limits.LongLength];

                        long totalOps = limits.LongLength == 0 ? 1 : limits.Aggregate<long>((a, b) => a * b);

                        //This chunck of variables are used to prevent repeated calculations of offsets
                        long dimIndex0 = 0 + limits.LongLength;
                        long dimIndex1 = 1 + limits.LongLength;
                        long dimIndex2 = 2 + limits.LongLength;

                        long opsOuter = @out.Shape.Dimensions[0 + limits.LongLength].Length;
                        long opsInner = @out.Shape.Dimensions[1 + limits.LongLength].Length;
                        long opsInnerInner = @out.Shape.Dimensions[2 + limits.LongLength].Length;

                        long outerStride3 = @out.Shape.Dimensions[dimIndex0].Stride;
                        long innerStride3 = @out.Shape.Dimensions[dimIndex1].Stride;
                        long innerInnerStride3 = @out.Shape.Dimensions[dimIndex2].Stride;
                        outerStride3 -= innerStride3 * @out.Shape.Dimensions[dimIndex1].Length;
                        innerStride3 -= innerInnerStride3 * @out.Shape.Dimensions[dimIndex2].Length;

                        for (long outer = 0; outer < totalOps; outer++)
                        {
                            //Get the array offset for the first element in the outer dimension
                            long ix3 = @out.Shape[counters];

                            for (long i = 0; i < opsOuter; i++)
                            {
                                for (long j = 0; j < opsInner; j++)
                                {
                                    for (long k = 0; k < opsInnerInner; k++)
                                    {
                                        d2[ix3] = (System.SByte)(scalar);
                                        ix3 += innerInnerStride3;
                                    }

                                    ix3 += innerStride3;
                                }

                                ix3 += outerStride3;
                            }

                            if (counters.LongLength > 0)
                            {
                                //Basically a ripple carry adder
                                long p = counters.LongLength - 1;
                                while (++counters[p] == limits[p] && p > 0)
                                {
                                    counters[p] = 0;
                                    p--;
                                }
                            }
                        }
                    }
                }
            }
        }
        /// <summary>
        /// Unsafe implementation of applying a unary operation
        /// </summary>
        /// <typeparam name="C">The type of operation to perform</typeparam>
        /// <param name="op">The operation instance</param>
        /// <param name="in1">The input argument</param>
        /// <param name="out">The output target</param>
        internal static void UFunc_Op_Inner_Unary_Flush_UInt32_TypedImpl<C>(NumCIL.Int8.ToInt8 op, NdArray<System.UInt32> in1, NdArray<System.SByte> @out)
            where C : IUnaryOp<System.UInt32>
        {
            unsafe
            {
                using (var f1 = new Pinner(in1.DataAccessor))
                using (var f2 = new Pinner(@out.DataAccessor))
                {
                    var d1 = (System.UInt32*)f1.ptr;
                    var d2 = (System.SByte*)f2.ptr;

                    if (@out.Shape.Dimensions.Length == 1)
                    {
                        long totalOps = @out.Shape.Dimensions[0].Length;

                        long ix1 = in1.Shape.Offset;
                        long ix2 = @out.Shape.Offset;

                        long stride1 = in1.Shape.Dimensions[0].Stride;
                        long stride2 = @out.Shape.Dimensions[0].Stride;


                        if (stride1 == stride2 && ix1 == ix2)
                        {
                            //Best case, all are equal, just keep a single counter
                            for (long i = 0; i < totalOps; i++)
                            {
                                d2[ix1] = (System.SByte)(d1[ix1]);
                                ix1 += stride1;
                            }
                        }
                        else
                        {
                            for (long i = 0; i < totalOps; i++)
                            {
                                d2[ix2] = (System.SByte)(d1[ix1]);
                                ix1 += stride1;
                                ix2 += stride2;
                            }
                        }
                    }
                    else if (@out.Shape.Dimensions.Length == 2)
                    {
                        long opsOuter = @out.Shape.Dimensions[0].Length;
                        long opsInner = @out.Shape.Dimensions[1].Length;

                        long ix1 = in1.Shape.Offset;
                        long ix2 = @out.Shape.Offset;

                        long outerStride1 = in1.Shape.Dimensions[0].Stride;
                        long outerStride2 = @out.Shape.Dimensions[0].Stride;

                        long innerStride1 = in1.Shape.Dimensions[1].Stride;
                        long innerStride2 = @out.Shape.Dimensions[1].Stride;

                        outerStride1 -= innerStride1 * in1.Shape.Dimensions[1].Length;
                        outerStride2 -= innerStride2 * @out.Shape.Dimensions[1].Length;

                        for (long i = 0; i < opsOuter; i++)
                        {
                            for (long j = 0; j < opsInner; j++)
                            {
                                d2[ix2] = (System.SByte)(d1[ix1]);
                                ix1 += innerStride1;
                                ix2 += innerStride2;
                            }

                            ix1 += outerStride1;
                            ix2 += outerStride2;
                        }
                    }
                    else
                    {
                        long n = in1.Shape.Dimensions.LongLength - 3;
                        long[] limits = in1.Shape.Dimensions.Where(x => n-- > 0).Select(x => x.Length).ToArray();
                        long[] counters = new long[limits.LongLength];

                        long totalOps = limits.LongLength == 0 ? 1 : limits.Aggregate<long>((a, b) => a * b);

                        //This chunck of variables are used to prevent repeated calculations of offsets
                        long dimIndex0 = 0 + limits.LongLength;
                        long dimIndex1 = 1 + limits.LongLength;
                        long dimIndex2 = 2 + limits.LongLength;

                        long opsOuter = @out.Shape.Dimensions[0 + limits.LongLength].Length;
                        long opsInner = @out.Shape.Dimensions[1 + limits.LongLength].Length;
                        long opsInnerInner = @out.Shape.Dimensions[2 + limits.LongLength].Length;

                        long outerStride1 = in1.Shape.Dimensions[dimIndex0].Stride;
                        long outerStride3 = @out.Shape.Dimensions[dimIndex0].Stride;

                        long innerStride1 = in1.Shape.Dimensions[dimIndex1].Stride;
                        long innerStride3 = @out.Shape.Dimensions[dimIndex1].Stride;

                        long innerInnerStride1 = in1.Shape.Dimensions[dimIndex2].Stride;
                        long innerInnerStride3 = @out.Shape.Dimensions[dimIndex2].Stride;

                        outerStride1 -= innerStride1 * in1.Shape.Dimensions[dimIndex1].Length;
                        outerStride3 -= innerStride3 * @out.Shape.Dimensions[dimIndex1].Length;

                        innerStride1 -= innerInnerStride1 * in1.Shape.Dimensions[dimIndex2].Length;
                        innerStride3 -= innerInnerStride3 * @out.Shape.Dimensions[dimIndex2].Length;

                        for (long outer = 0; outer < totalOps; outer++)
                        {
                            //Get the array offset for the first element in the outer dimension
                            long ix1 = in1.Shape[counters];
                            long ix3 = @out.Shape[counters];


                            for (long i = 0; i < opsOuter; i++)
                            {
                                for (long j = 0; j < opsInner; j++)
                                {
                                    for (long k = 0; k < opsInnerInner; k++)
                                    {
                                        d2[ix3] = (System.SByte)(d1[ix1]);
                                        ix1 += innerInnerStride1;
                                        ix3 += innerInnerStride3;
                                    }

                                    ix1 += innerStride1;
                                    ix3 += innerStride3;
                                }

                                ix1 += outerStride1;
                                ix3 += outerStride3;
                            }

                            if (counters.LongLength > 0)
                            {
                                //Basically a ripple carry adder
                                long p = counters.LongLength - 1;
                                while (++counters[p] == limits[p] && p > 0)
                                {
                                    counters[p] = 0;
                                    p--;
                                }
                            }
                        }
                    }
                }
            }
        }

        /// <summary>
        /// Unsafe implementation of applying a unary operation
        /// </summary>
        /// <typeparam name="C">The type of operation to perform</typeparam>
        /// <param name="op">The operation instance</param>
        /// <param name="scalar">The input scalar argument</param>
        /// <param name="out">The output target</param>
        internal static void UFunc_Op_Inner_Unary_Scalar_Flush_UInt32_TypedImpl<C>(NumCIL.Int8.ToInt8 op, System.UInt32 scalar, NdArray<System.SByte> @out)
            where C : IUnaryOp<System.UInt32>
        {
            unsafe
            {
                using (var f2 = new Pinner(@out.DataAccessor))
                {
                    var d2 = (System.SByte*)f2.ptr;

                    if (@out.Shape.Dimensions.Length == 1)
                    {
                        long totalOps = @out.Shape.Dimensions[0].Length;
                        long ix2 = @out.Shape.Offset;
                        long stride2 = @out.Shape.Dimensions[0].Stride;

                        for (long i = 0; i < totalOps; i++)
                        {
                            d2[ix2] = (System.SByte)(scalar);
                            ix2 += stride2;
                        }
                    }
                    else if (@out.Shape.Dimensions.Length == 2)
                    {
                        long opsOuter = @out.Shape.Dimensions[0].Length;
                        long opsInner = @out.Shape.Dimensions[1].Length;

                        long ix2 = @out.Shape.Offset;
                        long outerStride2 = @out.Shape.Dimensions[0].Stride;
                        long innerStride2 = @out.Shape.Dimensions[1].Stride;
                        outerStride2 -= innerStride2 * @out.Shape.Dimensions[1].Length;

                        for (long i = 0; i < opsOuter; i++)
                        {
                            for (long j = 0; j < opsInner; j++)
                            {
                                d2[ix2] = (System.SByte)(scalar);
                                ix2 += innerStride2;
                            }

                            ix2 += outerStride2;
                        }
                    }
                    else
                    {
                        long n = @out.Shape.Dimensions.LongLength - 3;
                        long[] limits = @out.Shape.Dimensions.Where(x => n-- > 0).Select(x => x.Length).ToArray();
                        long[] counters = new long[limits.LongLength];

                        long totalOps = limits.LongLength == 0 ? 1 : limits.Aggregate<long>((a, b) => a * b);

                        //This chunck of variables are used to prevent repeated calculations of offsets
                        long dimIndex0 = 0 + limits.LongLength;
                        long dimIndex1 = 1 + limits.LongLength;
                        long dimIndex2 = 2 + limits.LongLength;

                        long opsOuter = @out.Shape.Dimensions[0 + limits.LongLength].Length;
                        long opsInner = @out.Shape.Dimensions[1 + limits.LongLength].Length;
                        long opsInnerInner = @out.Shape.Dimensions[2 + limits.LongLength].Length;

                        long outerStride3 = @out.Shape.Dimensions[dimIndex0].Stride;
                        long innerStride3 = @out.Shape.Dimensions[dimIndex1].Stride;
                        long innerInnerStride3 = @out.Shape.Dimensions[dimIndex2].Stride;
                        outerStride3 -= innerStride3 * @out.Shape.Dimensions[dimIndex1].Length;
                        innerStride3 -= innerInnerStride3 * @out.Shape.Dimensions[dimIndex2].Length;

                        for (long outer = 0; outer < totalOps; outer++)
                        {
                            //Get the array offset for the first element in the outer dimension
                            long ix3 = @out.Shape[counters];

                            for (long i = 0; i < opsOuter; i++)
                            {
                                for (long j = 0; j < opsInner; j++)
                                {
                                    for (long k = 0; k < opsInnerInner; k++)
                                    {
                                        d2[ix3] = (System.SByte)(scalar);
                                        ix3 += innerInnerStride3;
                                    }

                                    ix3 += innerStride3;
                                }

                                ix3 += outerStride3;
                            }

                            if (counters.LongLength > 0)
                            {
                                //Basically a ripple carry adder
                                long p = counters.LongLength - 1;
                                while (++counters[p] == limits[p] && p > 0)
                                {
                                    counters[p] = 0;
                                    p--;
                                }
                            }
                        }
                    }
                }
            }
        }
        /// <summary>
        /// Unsafe implementation of applying a unary operation
        /// </summary>
        /// <typeparam name="C">The type of operation to perform</typeparam>
        /// <param name="op">The operation instance</param>
        /// <param name="in1">The input argument</param>
        /// <param name="out">The output target</param>
        internal static void UFunc_Op_Inner_Unary_Flush_Int64_TypedImpl<C>(NumCIL.Int8.ToInt8 op, NdArray<System.Int64> in1, NdArray<System.SByte> @out)
            where C : IUnaryOp<System.Int64>
        {
            unsafe
            {
                using (var f1 = new Pinner(in1.DataAccessor))
                using (var f2 = new Pinner(@out.DataAccessor))
                {
                    var d1 = (System.Int64*)f1.ptr;
                    var d2 = (System.SByte*)f2.ptr;

                    if (@out.Shape.Dimensions.Length == 1)
                    {
                        long totalOps = @out.Shape.Dimensions[0].Length;

                        long ix1 = in1.Shape.Offset;
                        long ix2 = @out.Shape.Offset;

                        long stride1 = in1.Shape.Dimensions[0].Stride;
                        long stride2 = @out.Shape.Dimensions[0].Stride;


                        if (stride1 == stride2 && ix1 == ix2)
                        {
                            //Best case, all are equal, just keep a single counter
                            for (long i = 0; i < totalOps; i++)
                            {
                                d2[ix1] = (System.SByte)(d1[ix1]);
                                ix1 += stride1;
                            }
                        }
                        else
                        {
                            for (long i = 0; i < totalOps; i++)
                            {
                                d2[ix2] = (System.SByte)(d1[ix1]);
                                ix1 += stride1;
                                ix2 += stride2;
                            }
                        }
                    }
                    else if (@out.Shape.Dimensions.Length == 2)
                    {
                        long opsOuter = @out.Shape.Dimensions[0].Length;
                        long opsInner = @out.Shape.Dimensions[1].Length;

                        long ix1 = in1.Shape.Offset;
                        long ix2 = @out.Shape.Offset;

                        long outerStride1 = in1.Shape.Dimensions[0].Stride;
                        long outerStride2 = @out.Shape.Dimensions[0].Stride;

                        long innerStride1 = in1.Shape.Dimensions[1].Stride;
                        long innerStride2 = @out.Shape.Dimensions[1].Stride;

                        outerStride1 -= innerStride1 * in1.Shape.Dimensions[1].Length;
                        outerStride2 -= innerStride2 * @out.Shape.Dimensions[1].Length;

                        for (long i = 0; i < opsOuter; i++)
                        {
                            for (long j = 0; j < opsInner; j++)
                            {
                                d2[ix2] = (System.SByte)(d1[ix1]);
                                ix1 += innerStride1;
                                ix2 += innerStride2;
                            }

                            ix1 += outerStride1;
                            ix2 += outerStride2;
                        }
                    }
                    else
                    {
                        long n = in1.Shape.Dimensions.LongLength - 3;
                        long[] limits = in1.Shape.Dimensions.Where(x => n-- > 0).Select(x => x.Length).ToArray();
                        long[] counters = new long[limits.LongLength];

                        long totalOps = limits.LongLength == 0 ? 1 : limits.Aggregate<long>((a, b) => a * b);

                        //This chunck of variables are used to prevent repeated calculations of offsets
                        long dimIndex0 = 0 + limits.LongLength;
                        long dimIndex1 = 1 + limits.LongLength;
                        long dimIndex2 = 2 + limits.LongLength;

                        long opsOuter = @out.Shape.Dimensions[0 + limits.LongLength].Length;
                        long opsInner = @out.Shape.Dimensions[1 + limits.LongLength].Length;
                        long opsInnerInner = @out.Shape.Dimensions[2 + limits.LongLength].Length;

                        long outerStride1 = in1.Shape.Dimensions[dimIndex0].Stride;
                        long outerStride3 = @out.Shape.Dimensions[dimIndex0].Stride;

                        long innerStride1 = in1.Shape.Dimensions[dimIndex1].Stride;
                        long innerStride3 = @out.Shape.Dimensions[dimIndex1].Stride;

                        long innerInnerStride1 = in1.Shape.Dimensions[dimIndex2].Stride;
                        long innerInnerStride3 = @out.Shape.Dimensions[dimIndex2].Stride;

                        outerStride1 -= innerStride1 * in1.Shape.Dimensions[dimIndex1].Length;
                        outerStride3 -= innerStride3 * @out.Shape.Dimensions[dimIndex1].Length;

                        innerStride1 -= innerInnerStride1 * in1.Shape.Dimensions[dimIndex2].Length;
                        innerStride3 -= innerInnerStride3 * @out.Shape.Dimensions[dimIndex2].Length;

                        for (long outer = 0; outer < totalOps; outer++)
                        {
                            //Get the array offset for the first element in the outer dimension
                            long ix1 = in1.Shape[counters];
                            long ix3 = @out.Shape[counters];


                            for (long i = 0; i < opsOuter; i++)
                            {
                                for (long j = 0; j < opsInner; j++)
                                {
                                    for (long k = 0; k < opsInnerInner; k++)
                                    {
                                        d2[ix3] = (System.SByte)(d1[ix1]);
                                        ix1 += innerInnerStride1;
                                        ix3 += innerInnerStride3;
                                    }

                                    ix1 += innerStride1;
                                    ix3 += innerStride3;
                                }

                                ix1 += outerStride1;
                                ix3 += outerStride3;
                            }

                            if (counters.LongLength > 0)
                            {
                                //Basically a ripple carry adder
                                long p = counters.LongLength - 1;
                                while (++counters[p] == limits[p] && p > 0)
                                {
                                    counters[p] = 0;
                                    p--;
                                }
                            }
                        }
                    }
                }
            }
        }

        /// <summary>
        /// Unsafe implementation of applying a unary operation
        /// </summary>
        /// <typeparam name="C">The type of operation to perform</typeparam>
        /// <param name="op">The operation instance</param>
        /// <param name="scalar">The input scalar argument</param>
        /// <param name="out">The output target</param>
        internal static void UFunc_Op_Inner_Unary_Scalar_Flush_Int64_TypedImpl<C>(NumCIL.Int8.ToInt8 op, System.Int64 scalar, NdArray<System.SByte> @out)
            where C : IUnaryOp<System.Int64>
        {
            unsafe
            {
                using (var f2 = new Pinner(@out.DataAccessor))
                {
                    var d2 = (System.SByte*)f2.ptr;

                    if (@out.Shape.Dimensions.Length == 1)
                    {
                        long totalOps = @out.Shape.Dimensions[0].Length;
                        long ix2 = @out.Shape.Offset;
                        long stride2 = @out.Shape.Dimensions[0].Stride;

                        for (long i = 0; i < totalOps; i++)
                        {
                            d2[ix2] = (System.SByte)(scalar);
                            ix2 += stride2;
                        }
                    }
                    else if (@out.Shape.Dimensions.Length == 2)
                    {
                        long opsOuter = @out.Shape.Dimensions[0].Length;
                        long opsInner = @out.Shape.Dimensions[1].Length;

                        long ix2 = @out.Shape.Offset;
                        long outerStride2 = @out.Shape.Dimensions[0].Stride;
                        long innerStride2 = @out.Shape.Dimensions[1].Stride;
                        outerStride2 -= innerStride2 * @out.Shape.Dimensions[1].Length;

                        for (long i = 0; i < opsOuter; i++)
                        {
                            for (long j = 0; j < opsInner; j++)
                            {
                                d2[ix2] = (System.SByte)(scalar);
                                ix2 += innerStride2;
                            }

                            ix2 += outerStride2;
                        }
                    }
                    else
                    {
                        long n = @out.Shape.Dimensions.LongLength - 3;
                        long[] limits = @out.Shape.Dimensions.Where(x => n-- > 0).Select(x => x.Length).ToArray();
                        long[] counters = new long[limits.LongLength];

                        long totalOps = limits.LongLength == 0 ? 1 : limits.Aggregate<long>((a, b) => a * b);

                        //This chunck of variables are used to prevent repeated calculations of offsets
                        long dimIndex0 = 0 + limits.LongLength;
                        long dimIndex1 = 1 + limits.LongLength;
                        long dimIndex2 = 2 + limits.LongLength;

                        long opsOuter = @out.Shape.Dimensions[0 + limits.LongLength].Length;
                        long opsInner = @out.Shape.Dimensions[1 + limits.LongLength].Length;
                        long opsInnerInner = @out.Shape.Dimensions[2 + limits.LongLength].Length;

                        long outerStride3 = @out.Shape.Dimensions[dimIndex0].Stride;
                        long innerStride3 = @out.Shape.Dimensions[dimIndex1].Stride;
                        long innerInnerStride3 = @out.Shape.Dimensions[dimIndex2].Stride;
                        outerStride3 -= innerStride3 * @out.Shape.Dimensions[dimIndex1].Length;
                        innerStride3 -= innerInnerStride3 * @out.Shape.Dimensions[dimIndex2].Length;

                        for (long outer = 0; outer < totalOps; outer++)
                        {
                            //Get the array offset for the first element in the outer dimension
                            long ix3 = @out.Shape[counters];

                            for (long i = 0; i < opsOuter; i++)
                            {
                                for (long j = 0; j < opsInner; j++)
                                {
                                    for (long k = 0; k < opsInnerInner; k++)
                                    {
                                        d2[ix3] = (System.SByte)(scalar);
                                        ix3 += innerInnerStride3;
                                    }

                                    ix3 += innerStride3;
                                }

                                ix3 += outerStride3;
                            }

                            if (counters.LongLength > 0)
                            {
                                //Basically a ripple carry adder
                                long p = counters.LongLength - 1;
                                while (++counters[p] == limits[p] && p > 0)
                                {
                                    counters[p] = 0;
                                    p--;
                                }
                            }
                        }
                    }
                }
            }
        }
        /// <summary>
        /// Unsafe implementation of applying a unary operation
        /// </summary>
        /// <typeparam name="C">The type of operation to perform</typeparam>
        /// <param name="op">The operation instance</param>
        /// <param name="in1">The input argument</param>
        /// <param name="out">The output target</param>
        internal static void UFunc_Op_Inner_Unary_Flush_UInt64_TypedImpl<C>(NumCIL.Int8.ToInt8 op, NdArray<System.UInt64> in1, NdArray<System.SByte> @out)
            where C : IUnaryOp<System.UInt64>
        {
            unsafe
            {
                using (var f1 = new Pinner(in1.DataAccessor))
                using (var f2 = new Pinner(@out.DataAccessor))
                {
                    var d1 = (System.UInt64*)f1.ptr;
                    var d2 = (System.SByte*)f2.ptr;

                    if (@out.Shape.Dimensions.Length == 1)
                    {
                        long totalOps = @out.Shape.Dimensions[0].Length;

                        long ix1 = in1.Shape.Offset;
                        long ix2 = @out.Shape.Offset;

                        long stride1 = in1.Shape.Dimensions[0].Stride;
                        long stride2 = @out.Shape.Dimensions[0].Stride;


                        if (stride1 == stride2 && ix1 == ix2)
                        {
                            //Best case, all are equal, just keep a single counter
                            for (long i = 0; i < totalOps; i++)
                            {
                                d2[ix1] = (System.SByte)(d1[ix1]);
                                ix1 += stride1;
                            }
                        }
                        else
                        {
                            for (long i = 0; i < totalOps; i++)
                            {
                                d2[ix2] = (System.SByte)(d1[ix1]);
                                ix1 += stride1;
                                ix2 += stride2;
                            }
                        }
                    }
                    else if (@out.Shape.Dimensions.Length == 2)
                    {
                        long opsOuter = @out.Shape.Dimensions[0].Length;
                        long opsInner = @out.Shape.Dimensions[1].Length;

                        long ix1 = in1.Shape.Offset;
                        long ix2 = @out.Shape.Offset;

                        long outerStride1 = in1.Shape.Dimensions[0].Stride;
                        long outerStride2 = @out.Shape.Dimensions[0].Stride;

                        long innerStride1 = in1.Shape.Dimensions[1].Stride;
                        long innerStride2 = @out.Shape.Dimensions[1].Stride;

                        outerStride1 -= innerStride1 * in1.Shape.Dimensions[1].Length;
                        outerStride2 -= innerStride2 * @out.Shape.Dimensions[1].Length;

                        for (long i = 0; i < opsOuter; i++)
                        {
                            for (long j = 0; j < opsInner; j++)
                            {
                                d2[ix2] = (System.SByte)(d1[ix1]);
                                ix1 += innerStride1;
                                ix2 += innerStride2;
                            }

                            ix1 += outerStride1;
                            ix2 += outerStride2;
                        }
                    }
                    else
                    {
                        long n = in1.Shape.Dimensions.LongLength - 3;
                        long[] limits = in1.Shape.Dimensions.Where(x => n-- > 0).Select(x => x.Length).ToArray();
                        long[] counters = new long[limits.LongLength];

                        long totalOps = limits.LongLength == 0 ? 1 : limits.Aggregate<long>((a, b) => a * b);

                        //This chunck of variables are used to prevent repeated calculations of offsets
                        long dimIndex0 = 0 + limits.LongLength;
                        long dimIndex1 = 1 + limits.LongLength;
                        long dimIndex2 = 2 + limits.LongLength;

                        long opsOuter = @out.Shape.Dimensions[0 + limits.LongLength].Length;
                        long opsInner = @out.Shape.Dimensions[1 + limits.LongLength].Length;
                        long opsInnerInner = @out.Shape.Dimensions[2 + limits.LongLength].Length;

                        long outerStride1 = in1.Shape.Dimensions[dimIndex0].Stride;
                        long outerStride3 = @out.Shape.Dimensions[dimIndex0].Stride;

                        long innerStride1 = in1.Shape.Dimensions[dimIndex1].Stride;
                        long innerStride3 = @out.Shape.Dimensions[dimIndex1].Stride;

                        long innerInnerStride1 = in1.Shape.Dimensions[dimIndex2].Stride;
                        long innerInnerStride3 = @out.Shape.Dimensions[dimIndex2].Stride;

                        outerStride1 -= innerStride1 * in1.Shape.Dimensions[dimIndex1].Length;
                        outerStride3 -= innerStride3 * @out.Shape.Dimensions[dimIndex1].Length;

                        innerStride1 -= innerInnerStride1 * in1.Shape.Dimensions[dimIndex2].Length;
                        innerStride3 -= innerInnerStride3 * @out.Shape.Dimensions[dimIndex2].Length;

                        for (long outer = 0; outer < totalOps; outer++)
                        {
                            //Get the array offset for the first element in the outer dimension
                            long ix1 = in1.Shape[counters];
                            long ix3 = @out.Shape[counters];


                            for (long i = 0; i < opsOuter; i++)
                            {
                                for (long j = 0; j < opsInner; j++)
                                {
                                    for (long k = 0; k < opsInnerInner; k++)
                                    {
                                        d2[ix3] = (System.SByte)(d1[ix1]);
                                        ix1 += innerInnerStride1;
                                        ix3 += innerInnerStride3;
                                    }

                                    ix1 += innerStride1;
                                    ix3 += innerStride3;
                                }

                                ix1 += outerStride1;
                                ix3 += outerStride3;
                            }

                            if (counters.LongLength > 0)
                            {
                                //Basically a ripple carry adder
                                long p = counters.LongLength - 1;
                                while (++counters[p] == limits[p] && p > 0)
                                {
                                    counters[p] = 0;
                                    p--;
                                }
                            }
                        }
                    }
                }
            }
        }

        /// <summary>
        /// Unsafe implementation of applying a unary operation
        /// </summary>
        /// <typeparam name="C">The type of operation to perform</typeparam>
        /// <param name="op">The operation instance</param>
        /// <param name="scalar">The input scalar argument</param>
        /// <param name="out">The output target</param>
        internal static void UFunc_Op_Inner_Unary_Scalar_Flush_UInt64_TypedImpl<C>(NumCIL.Int8.ToInt8 op, System.UInt64 scalar, NdArray<System.SByte> @out)
            where C : IUnaryOp<System.UInt64>
        {
            unsafe
            {
                using (var f2 = new Pinner(@out.DataAccessor))
                {
                    var d2 = (System.SByte*)f2.ptr;

                    if (@out.Shape.Dimensions.Length == 1)
                    {
                        long totalOps = @out.Shape.Dimensions[0].Length;
                        long ix2 = @out.Shape.Offset;
                        long stride2 = @out.Shape.Dimensions[0].Stride;

                        for (long i = 0; i < totalOps; i++)
                        {
                            d2[ix2] = (System.SByte)(scalar);
                            ix2 += stride2;
                        }
                    }
                    else if (@out.Shape.Dimensions.Length == 2)
                    {
                        long opsOuter = @out.Shape.Dimensions[0].Length;
                        long opsInner = @out.Shape.Dimensions[1].Length;

                        long ix2 = @out.Shape.Offset;
                        long outerStride2 = @out.Shape.Dimensions[0].Stride;
                        long innerStride2 = @out.Shape.Dimensions[1].Stride;
                        outerStride2 -= innerStride2 * @out.Shape.Dimensions[1].Length;

                        for (long i = 0; i < opsOuter; i++)
                        {
                            for (long j = 0; j < opsInner; j++)
                            {
                                d2[ix2] = (System.SByte)(scalar);
                                ix2 += innerStride2;
                            }

                            ix2 += outerStride2;
                        }
                    }
                    else
                    {
                        long n = @out.Shape.Dimensions.LongLength - 3;
                        long[] limits = @out.Shape.Dimensions.Where(x => n-- > 0).Select(x => x.Length).ToArray();
                        long[] counters = new long[limits.LongLength];

                        long totalOps = limits.LongLength == 0 ? 1 : limits.Aggregate<long>((a, b) => a * b);

                        //This chunck of variables are used to prevent repeated calculations of offsets
                        long dimIndex0 = 0 + limits.LongLength;
                        long dimIndex1 = 1 + limits.LongLength;
                        long dimIndex2 = 2 + limits.LongLength;

                        long opsOuter = @out.Shape.Dimensions[0 + limits.LongLength].Length;
                        long opsInner = @out.Shape.Dimensions[1 + limits.LongLength].Length;
                        long opsInnerInner = @out.Shape.Dimensions[2 + limits.LongLength].Length;

                        long outerStride3 = @out.Shape.Dimensions[dimIndex0].Stride;
                        long innerStride3 = @out.Shape.Dimensions[dimIndex1].Stride;
                        long innerInnerStride3 = @out.Shape.Dimensions[dimIndex2].Stride;
                        outerStride3 -= innerStride3 * @out.Shape.Dimensions[dimIndex1].Length;
                        innerStride3 -= innerInnerStride3 * @out.Shape.Dimensions[dimIndex2].Length;

                        for (long outer = 0; outer < totalOps; outer++)
                        {
                            //Get the array offset for the first element in the outer dimension
                            long ix3 = @out.Shape[counters];

                            for (long i = 0; i < opsOuter; i++)
                            {
                                for (long j = 0; j < opsInner; j++)
                                {
                                    for (long k = 0; k < opsInnerInner; k++)
                                    {
                                        d2[ix3] = (System.SByte)(scalar);
                                        ix3 += innerInnerStride3;
                                    }

                                    ix3 += innerStride3;
                                }

                                ix3 += outerStride3;
                            }

                            if (counters.LongLength > 0)
                            {
                                //Basically a ripple carry adder
                                long p = counters.LongLength - 1;
                                while (++counters[p] == limits[p] && p > 0)
                                {
                                    counters[p] = 0;
                                    p--;
                                }
                            }
                        }
                    }
                }
            }
        }
        /// <summary>
        /// Unsafe implementation of applying a unary operation
        /// </summary>
        /// <typeparam name="C">The type of operation to perform</typeparam>
        /// <param name="op">The operation instance</param>
        /// <param name="in1">The input argument</param>
        /// <param name="out">The output target</param>
        internal static void UFunc_Op_Inner_Unary_Flush_Single_TypedImpl<C>(NumCIL.Int8.ToInt8 op, NdArray<System.Single> in1, NdArray<System.SByte> @out)
            where C : IUnaryOp<System.Single>
        {
            unsafe
            {
                using (var f1 = new Pinner(in1.DataAccessor))
                using (var f2 = new Pinner(@out.DataAccessor))
                {
                    var d1 = (System.Single*)f1.ptr;
                    var d2 = (System.SByte*)f2.ptr;

                    if (@out.Shape.Dimensions.Length == 1)
                    {
                        long totalOps = @out.Shape.Dimensions[0].Length;

                        long ix1 = in1.Shape.Offset;
                        long ix2 = @out.Shape.Offset;

                        long stride1 = in1.Shape.Dimensions[0].Stride;
                        long stride2 = @out.Shape.Dimensions[0].Stride;


                        if (stride1 == stride2 && ix1 == ix2)
                        {
                            //Best case, all are equal, just keep a single counter
                            for (long i = 0; i < totalOps; i++)
                            {
                                d2[ix1] = (System.SByte)(d1[ix1]);
                                ix1 += stride1;
                            }
                        }
                        else
                        {
                            for (long i = 0; i < totalOps; i++)
                            {
                                d2[ix2] = (System.SByte)(d1[ix1]);
                                ix1 += stride1;
                                ix2 += stride2;
                            }
                        }
                    }
                    else if (@out.Shape.Dimensions.Length == 2)
                    {
                        long opsOuter = @out.Shape.Dimensions[0].Length;
                        long opsInner = @out.Shape.Dimensions[1].Length;

                        long ix1 = in1.Shape.Offset;
                        long ix2 = @out.Shape.Offset;

                        long outerStride1 = in1.Shape.Dimensions[0].Stride;
                        long outerStride2 = @out.Shape.Dimensions[0].Stride;

                        long innerStride1 = in1.Shape.Dimensions[1].Stride;
                        long innerStride2 = @out.Shape.Dimensions[1].Stride;

                        outerStride1 -= innerStride1 * in1.Shape.Dimensions[1].Length;
                        outerStride2 -= innerStride2 * @out.Shape.Dimensions[1].Length;

                        for (long i = 0; i < opsOuter; i++)
                        {
                            for (long j = 0; j < opsInner; j++)
                            {
                                d2[ix2] = (System.SByte)(d1[ix1]);
                                ix1 += innerStride1;
                                ix2 += innerStride2;
                            }

                            ix1 += outerStride1;
                            ix2 += outerStride2;
                        }
                    }
                    else
                    {
                        long n = in1.Shape.Dimensions.LongLength - 3;
                        long[] limits = in1.Shape.Dimensions.Where(x => n-- > 0).Select(x => x.Length).ToArray();
                        long[] counters = new long[limits.LongLength];

                        long totalOps = limits.LongLength == 0 ? 1 : limits.Aggregate<long>((a, b) => a * b);

                        //This chunck of variables are used to prevent repeated calculations of offsets
                        long dimIndex0 = 0 + limits.LongLength;
                        long dimIndex1 = 1 + limits.LongLength;
                        long dimIndex2 = 2 + limits.LongLength;

                        long opsOuter = @out.Shape.Dimensions[0 + limits.LongLength].Length;
                        long opsInner = @out.Shape.Dimensions[1 + limits.LongLength].Length;
                        long opsInnerInner = @out.Shape.Dimensions[2 + limits.LongLength].Length;

                        long outerStride1 = in1.Shape.Dimensions[dimIndex0].Stride;
                        long outerStride3 = @out.Shape.Dimensions[dimIndex0].Stride;

                        long innerStride1 = in1.Shape.Dimensions[dimIndex1].Stride;
                        long innerStride3 = @out.Shape.Dimensions[dimIndex1].Stride;

                        long innerInnerStride1 = in1.Shape.Dimensions[dimIndex2].Stride;
                        long innerInnerStride3 = @out.Shape.Dimensions[dimIndex2].Stride;

                        outerStride1 -= innerStride1 * in1.Shape.Dimensions[dimIndex1].Length;
                        outerStride3 -= innerStride3 * @out.Shape.Dimensions[dimIndex1].Length;

                        innerStride1 -= innerInnerStride1 * in1.Shape.Dimensions[dimIndex2].Length;
                        innerStride3 -= innerInnerStride3 * @out.Shape.Dimensions[dimIndex2].Length;

                        for (long outer = 0; outer < totalOps; outer++)
                        {
                            //Get the array offset for the first element in the outer dimension
                            long ix1 = in1.Shape[counters];
                            long ix3 = @out.Shape[counters];


                            for (long i = 0; i < opsOuter; i++)
                            {
                                for (long j = 0; j < opsInner; j++)
                                {
                                    for (long k = 0; k < opsInnerInner; k++)
                                    {
                                        d2[ix3] = (System.SByte)(d1[ix1]);
                                        ix1 += innerInnerStride1;
                                        ix3 += innerInnerStride3;
                                    }

                                    ix1 += innerStride1;
                                    ix3 += innerStride3;
                                }

                                ix1 += outerStride1;
                                ix3 += outerStride3;
                            }

                            if (counters.LongLength > 0)
                            {
                                //Basically a ripple carry adder
                                long p = counters.LongLength - 1;
                                while (++counters[p] == limits[p] && p > 0)
                                {
                                    counters[p] = 0;
                                    p--;
                                }
                            }
                        }
                    }
                }
            }
        }

        /// <summary>
        /// Unsafe implementation of applying a unary operation
        /// </summary>
        /// <typeparam name="C">The type of operation to perform</typeparam>
        /// <param name="op">The operation instance</param>
        /// <param name="scalar">The input scalar argument</param>
        /// <param name="out">The output target</param>
        internal static void UFunc_Op_Inner_Unary_Scalar_Flush_Single_TypedImpl<C>(NumCIL.Int8.ToInt8 op, System.Single scalar, NdArray<System.SByte> @out)
            where C : IUnaryOp<System.Single>
        {
            unsafe
            {
                using (var f2 = new Pinner(@out.DataAccessor))
                {
                    var d2 = (System.SByte*)f2.ptr;

                    if (@out.Shape.Dimensions.Length == 1)
                    {
                        long totalOps = @out.Shape.Dimensions[0].Length;
                        long ix2 = @out.Shape.Offset;
                        long stride2 = @out.Shape.Dimensions[0].Stride;

                        for (long i = 0; i < totalOps; i++)
                        {
                            d2[ix2] = (System.SByte)(scalar);
                            ix2 += stride2;
                        }
                    }
                    else if (@out.Shape.Dimensions.Length == 2)
                    {
                        long opsOuter = @out.Shape.Dimensions[0].Length;
                        long opsInner = @out.Shape.Dimensions[1].Length;

                        long ix2 = @out.Shape.Offset;
                        long outerStride2 = @out.Shape.Dimensions[0].Stride;
                        long innerStride2 = @out.Shape.Dimensions[1].Stride;
                        outerStride2 -= innerStride2 * @out.Shape.Dimensions[1].Length;

                        for (long i = 0; i < opsOuter; i++)
                        {
                            for (long j = 0; j < opsInner; j++)
                            {
                                d2[ix2] = (System.SByte)(scalar);
                                ix2 += innerStride2;
                            }

                            ix2 += outerStride2;
                        }
                    }
                    else
                    {
                        long n = @out.Shape.Dimensions.LongLength - 3;
                        long[] limits = @out.Shape.Dimensions.Where(x => n-- > 0).Select(x => x.Length).ToArray();
                        long[] counters = new long[limits.LongLength];

                        long totalOps = limits.LongLength == 0 ? 1 : limits.Aggregate<long>((a, b) => a * b);

                        //This chunck of variables are used to prevent repeated calculations of offsets
                        long dimIndex0 = 0 + limits.LongLength;
                        long dimIndex1 = 1 + limits.LongLength;
                        long dimIndex2 = 2 + limits.LongLength;

                        long opsOuter = @out.Shape.Dimensions[0 + limits.LongLength].Length;
                        long opsInner = @out.Shape.Dimensions[1 + limits.LongLength].Length;
                        long opsInnerInner = @out.Shape.Dimensions[2 + limits.LongLength].Length;

                        long outerStride3 = @out.Shape.Dimensions[dimIndex0].Stride;
                        long innerStride3 = @out.Shape.Dimensions[dimIndex1].Stride;
                        long innerInnerStride3 = @out.Shape.Dimensions[dimIndex2].Stride;
                        outerStride3 -= innerStride3 * @out.Shape.Dimensions[dimIndex1].Length;
                        innerStride3 -= innerInnerStride3 * @out.Shape.Dimensions[dimIndex2].Length;

                        for (long outer = 0; outer < totalOps; outer++)
                        {
                            //Get the array offset for the first element in the outer dimension
                            long ix3 = @out.Shape[counters];

                            for (long i = 0; i < opsOuter; i++)
                            {
                                for (long j = 0; j < opsInner; j++)
                                {
                                    for (long k = 0; k < opsInnerInner; k++)
                                    {
                                        d2[ix3] = (System.SByte)(scalar);
                                        ix3 += innerInnerStride3;
                                    }

                                    ix3 += innerStride3;
                                }

                                ix3 += outerStride3;
                            }

                            if (counters.LongLength > 0)
                            {
                                //Basically a ripple carry adder
                                long p = counters.LongLength - 1;
                                while (++counters[p] == limits[p] && p > 0)
                                {
                                    counters[p] = 0;
                                    p--;
                                }
                            }
                        }
                    }
                }
            }
        }
        /// <summary>
        /// Unsafe implementation of applying a unary operation
        /// </summary>
        /// <typeparam name="C">The type of operation to perform</typeparam>
        /// <param name="op">The operation instance</param>
        /// <param name="in1">The input argument</param>
        /// <param name="out">The output target</param>
        internal static void UFunc_Op_Inner_Unary_Flush_Double_TypedImpl<C>(NumCIL.Int8.ToInt8 op, NdArray<System.Double> in1, NdArray<System.SByte> @out)
            where C : IUnaryOp<System.Double>
        {
            unsafe
            {
                using (var f1 = new Pinner(in1.DataAccessor))
                using (var f2 = new Pinner(@out.DataAccessor))
                {
                    var d1 = (System.Double*)f1.ptr;
                    var d2 = (System.SByte*)f2.ptr;

                    if (@out.Shape.Dimensions.Length == 1)
                    {
                        long totalOps = @out.Shape.Dimensions[0].Length;

                        long ix1 = in1.Shape.Offset;
                        long ix2 = @out.Shape.Offset;

                        long stride1 = in1.Shape.Dimensions[0].Stride;
                        long stride2 = @out.Shape.Dimensions[0].Stride;


                        if (stride1 == stride2 && ix1 == ix2)
                        {
                            //Best case, all are equal, just keep a single counter
                            for (long i = 0; i < totalOps; i++)
                            {
                                d2[ix1] = (System.SByte)(d1[ix1]);
                                ix1 += stride1;
                            }
                        }
                        else
                        {
                            for (long i = 0; i < totalOps; i++)
                            {
                                d2[ix2] = (System.SByte)(d1[ix1]);
                                ix1 += stride1;
                                ix2 += stride2;
                            }
                        }
                    }
                    else if (@out.Shape.Dimensions.Length == 2)
                    {
                        long opsOuter = @out.Shape.Dimensions[0].Length;
                        long opsInner = @out.Shape.Dimensions[1].Length;

                        long ix1 = in1.Shape.Offset;
                        long ix2 = @out.Shape.Offset;

                        long outerStride1 = in1.Shape.Dimensions[0].Stride;
                        long outerStride2 = @out.Shape.Dimensions[0].Stride;

                        long innerStride1 = in1.Shape.Dimensions[1].Stride;
                        long innerStride2 = @out.Shape.Dimensions[1].Stride;

                        outerStride1 -= innerStride1 * in1.Shape.Dimensions[1].Length;
                        outerStride2 -= innerStride2 * @out.Shape.Dimensions[1].Length;

                        for (long i = 0; i < opsOuter; i++)
                        {
                            for (long j = 0; j < opsInner; j++)
                            {
                                d2[ix2] = (System.SByte)(d1[ix1]);
                                ix1 += innerStride1;
                                ix2 += innerStride2;
                            }

                            ix1 += outerStride1;
                            ix2 += outerStride2;
                        }
                    }
                    else
                    {
                        long n = in1.Shape.Dimensions.LongLength - 3;
                        long[] limits = in1.Shape.Dimensions.Where(x => n-- > 0).Select(x => x.Length).ToArray();
                        long[] counters = new long[limits.LongLength];

                        long totalOps = limits.LongLength == 0 ? 1 : limits.Aggregate<long>((a, b) => a * b);

                        //This chunck of variables are used to prevent repeated calculations of offsets
                        long dimIndex0 = 0 + limits.LongLength;
                        long dimIndex1 = 1 + limits.LongLength;
                        long dimIndex2 = 2 + limits.LongLength;

                        long opsOuter = @out.Shape.Dimensions[0 + limits.LongLength].Length;
                        long opsInner = @out.Shape.Dimensions[1 + limits.LongLength].Length;
                        long opsInnerInner = @out.Shape.Dimensions[2 + limits.LongLength].Length;

                        long outerStride1 = in1.Shape.Dimensions[dimIndex0].Stride;
                        long outerStride3 = @out.Shape.Dimensions[dimIndex0].Stride;

                        long innerStride1 = in1.Shape.Dimensions[dimIndex1].Stride;
                        long innerStride3 = @out.Shape.Dimensions[dimIndex1].Stride;

                        long innerInnerStride1 = in1.Shape.Dimensions[dimIndex2].Stride;
                        long innerInnerStride3 = @out.Shape.Dimensions[dimIndex2].Stride;

                        outerStride1 -= innerStride1 * in1.Shape.Dimensions[dimIndex1].Length;
                        outerStride3 -= innerStride3 * @out.Shape.Dimensions[dimIndex1].Length;

                        innerStride1 -= innerInnerStride1 * in1.Shape.Dimensions[dimIndex2].Length;
                        innerStride3 -= innerInnerStride3 * @out.Shape.Dimensions[dimIndex2].Length;

                        for (long outer = 0; outer < totalOps; outer++)
                        {
                            //Get the array offset for the first element in the outer dimension
                            long ix1 = in1.Shape[counters];
                            long ix3 = @out.Shape[counters];


                            for (long i = 0; i < opsOuter; i++)
                            {
                                for (long j = 0; j < opsInner; j++)
                                {
                                    for (long k = 0; k < opsInnerInner; k++)
                                    {
                                        d2[ix3] = (System.SByte)(d1[ix1]);
                                        ix1 += innerInnerStride1;
                                        ix3 += innerInnerStride3;
                                    }

                                    ix1 += innerStride1;
                                    ix3 += innerStride3;
                                }

                                ix1 += outerStride1;
                                ix3 += outerStride3;
                            }

                            if (counters.LongLength > 0)
                            {
                                //Basically a ripple carry adder
                                long p = counters.LongLength - 1;
                                while (++counters[p] == limits[p] && p > 0)
                                {
                                    counters[p] = 0;
                                    p--;
                                }
                            }
                        }
                    }
                }
            }
        }

        /// <summary>
        /// Unsafe implementation of applying a unary operation
        /// </summary>
        /// <typeparam name="C">The type of operation to perform</typeparam>
        /// <param name="op">The operation instance</param>
        /// <param name="scalar">The input scalar argument</param>
        /// <param name="out">The output target</param>
        internal static void UFunc_Op_Inner_Unary_Scalar_Flush_Double_TypedImpl<C>(NumCIL.Int8.ToInt8 op, System.Double scalar, NdArray<System.SByte> @out)
            where C : IUnaryOp<System.Double>
        {
            unsafe
            {
                using (var f2 = new Pinner(@out.DataAccessor))
                {
                    var d2 = (System.SByte*)f2.ptr;

                    if (@out.Shape.Dimensions.Length == 1)
                    {
                        long totalOps = @out.Shape.Dimensions[0].Length;
                        long ix2 = @out.Shape.Offset;
                        long stride2 = @out.Shape.Dimensions[0].Stride;

                        for (long i = 0; i < totalOps; i++)
                        {
                            d2[ix2] = (System.SByte)(scalar);
                            ix2 += stride2;
                        }
                    }
                    else if (@out.Shape.Dimensions.Length == 2)
                    {
                        long opsOuter = @out.Shape.Dimensions[0].Length;
                        long opsInner = @out.Shape.Dimensions[1].Length;

                        long ix2 = @out.Shape.Offset;
                        long outerStride2 = @out.Shape.Dimensions[0].Stride;
                        long innerStride2 = @out.Shape.Dimensions[1].Stride;
                        outerStride2 -= innerStride2 * @out.Shape.Dimensions[1].Length;

                        for (long i = 0; i < opsOuter; i++)
                        {
                            for (long j = 0; j < opsInner; j++)
                            {
                                d2[ix2] = (System.SByte)(scalar);
                                ix2 += innerStride2;
                            }

                            ix2 += outerStride2;
                        }
                    }
                    else
                    {
                        long n = @out.Shape.Dimensions.LongLength - 3;
                        long[] limits = @out.Shape.Dimensions.Where(x => n-- > 0).Select(x => x.Length).ToArray();
                        long[] counters = new long[limits.LongLength];

                        long totalOps = limits.LongLength == 0 ? 1 : limits.Aggregate<long>((a, b) => a * b);

                        //This chunck of variables are used to prevent repeated calculations of offsets
                        long dimIndex0 = 0 + limits.LongLength;
                        long dimIndex1 = 1 + limits.LongLength;
                        long dimIndex2 = 2 + limits.LongLength;

                        long opsOuter = @out.Shape.Dimensions[0 + limits.LongLength].Length;
                        long opsInner = @out.Shape.Dimensions[1 + limits.LongLength].Length;
                        long opsInnerInner = @out.Shape.Dimensions[2 + limits.LongLength].Length;

                        long outerStride3 = @out.Shape.Dimensions[dimIndex0].Stride;
                        long innerStride3 = @out.Shape.Dimensions[dimIndex1].Stride;
                        long innerInnerStride3 = @out.Shape.Dimensions[dimIndex2].Stride;
                        outerStride3 -= innerStride3 * @out.Shape.Dimensions[dimIndex1].Length;
                        innerStride3 -= innerInnerStride3 * @out.Shape.Dimensions[dimIndex2].Length;

                        for (long outer = 0; outer < totalOps; outer++)
                        {
                            //Get the array offset for the first element in the outer dimension
                            long ix3 = @out.Shape[counters];

                            for (long i = 0; i < opsOuter; i++)
                            {
                                for (long j = 0; j < opsInner; j++)
                                {
                                    for (long k = 0; k < opsInnerInner; k++)
                                    {
                                        d2[ix3] = (System.SByte)(scalar);
                                        ix3 += innerInnerStride3;
                                    }

                                    ix3 += innerStride3;
                                }

                                ix3 += outerStride3;
                            }

                            if (counters.LongLength > 0)
                            {
                                //Basically a ripple carry adder
                                long p = counters.LongLength - 1;
                                while (++counters[p] == limits[p] && p > 0)
                                {
                                    counters[p] = 0;
                                    p--;
                                }
                            }
                        }
                    }
                }
            }
        }
        /// <summary>
        /// Unsafe implementation of applying a unary operation
        /// </summary>
        /// <typeparam name="C">The type of operation to perform</typeparam>
        /// <param name="op">The operation instance</param>
        /// <param name="in1">The input argument</param>
        /// <param name="out">The output target</param>
        internal static void UFunc_Op_Inner_Unary_Flush_Boolean_TypedImpl<C>(NumCIL.Boolean.ToInt8 op, NdArray<System.Boolean> in1, NdArray<System.SByte> @out)
            where C : IUnaryOp<System.Boolean>
        {
            unsafe
            {
                using (var f1 = new Pinner(in1.DataAccessor))
                using (var f2 = new Pinner(@out.DataAccessor))
                {
                    var d1 = (System.Boolean*)f1.ptr;
                    var d2 = (System.SByte*)f2.ptr;

                    if (@out.Shape.Dimensions.Length == 1)
                    {
                        long totalOps = @out.Shape.Dimensions[0].Length;

                        long ix1 = in1.Shape.Offset;
                        long ix2 = @out.Shape.Offset;

                        long stride1 = in1.Shape.Dimensions[0].Stride;
                        long stride2 = @out.Shape.Dimensions[0].Stride;


                        if (stride1 == stride2 && ix1 == ix2)
                        {
                            //Best case, all are equal, just keep a single counter
                            for (long i = 0; i < totalOps; i++)
                            {
                                d2[ix1] = (System.SByte)(d1[ix1] ? 1 : 0 );
                                ix1 += stride1;
                            }
                        }
                        else
                        {
                            for (long i = 0; i < totalOps; i++)
                            {
                                d2[ix2] = (System.SByte)(d1[ix1] ? 1 : 0 );
                                ix1 += stride1;
                                ix2 += stride2;
                            }
                        }
                    }
                    else if (@out.Shape.Dimensions.Length == 2)
                    {
                        long opsOuter = @out.Shape.Dimensions[0].Length;
                        long opsInner = @out.Shape.Dimensions[1].Length;

                        long ix1 = in1.Shape.Offset;
                        long ix2 = @out.Shape.Offset;

                        long outerStride1 = in1.Shape.Dimensions[0].Stride;
                        long outerStride2 = @out.Shape.Dimensions[0].Stride;

                        long innerStride1 = in1.Shape.Dimensions[1].Stride;
                        long innerStride2 = @out.Shape.Dimensions[1].Stride;

                        outerStride1 -= innerStride1 * in1.Shape.Dimensions[1].Length;
                        outerStride2 -= innerStride2 * @out.Shape.Dimensions[1].Length;

                        for (long i = 0; i < opsOuter; i++)
                        {
                            for (long j = 0; j < opsInner; j++)
                            {
                                d2[ix2] = (System.SByte)(d1[ix1] ? 1 : 0 );
                                ix1 += innerStride1;
                                ix2 += innerStride2;
                            }

                            ix1 += outerStride1;
                            ix2 += outerStride2;
                        }
                    }
                    else
                    {
                        long n = in1.Shape.Dimensions.LongLength - 3;
                        long[] limits = in1.Shape.Dimensions.Where(x => n-- > 0).Select(x => x.Length).ToArray();
                        long[] counters = new long[limits.LongLength];

                        long totalOps = limits.LongLength == 0 ? 1 : limits.Aggregate<long>((a, b) => a * b);

                        //This chunck of variables are used to prevent repeated calculations of offsets
                        long dimIndex0 = 0 + limits.LongLength;
                        long dimIndex1 = 1 + limits.LongLength;
                        long dimIndex2 = 2 + limits.LongLength;

                        long opsOuter = @out.Shape.Dimensions[0 + limits.LongLength].Length;
                        long opsInner = @out.Shape.Dimensions[1 + limits.LongLength].Length;
                        long opsInnerInner = @out.Shape.Dimensions[2 + limits.LongLength].Length;

                        long outerStride1 = in1.Shape.Dimensions[dimIndex0].Stride;
                        long outerStride3 = @out.Shape.Dimensions[dimIndex0].Stride;

                        long innerStride1 = in1.Shape.Dimensions[dimIndex1].Stride;
                        long innerStride3 = @out.Shape.Dimensions[dimIndex1].Stride;

                        long innerInnerStride1 = in1.Shape.Dimensions[dimIndex2].Stride;
                        long innerInnerStride3 = @out.Shape.Dimensions[dimIndex2].Stride;

                        outerStride1 -= innerStride1 * in1.Shape.Dimensions[dimIndex1].Length;
                        outerStride3 -= innerStride3 * @out.Shape.Dimensions[dimIndex1].Length;

                        innerStride1 -= innerInnerStride1 * in1.Shape.Dimensions[dimIndex2].Length;
                        innerStride3 -= innerInnerStride3 * @out.Shape.Dimensions[dimIndex2].Length;

                        for (long outer = 0; outer < totalOps; outer++)
                        {
                            //Get the array offset for the first element in the outer dimension
                            long ix1 = in1.Shape[counters];
                            long ix3 = @out.Shape[counters];


                            for (long i = 0; i < opsOuter; i++)
                            {
                                for (long j = 0; j < opsInner; j++)
                                {
                                    for (long k = 0; k < opsInnerInner; k++)
                                    {
                                        d2[ix3] = (System.SByte)(d1[ix1] ? 1 : 0 );
                                        ix1 += innerInnerStride1;
                                        ix3 += innerInnerStride3;
                                    }

                                    ix1 += innerStride1;
                                    ix3 += innerStride3;
                                }

                                ix1 += outerStride1;
                                ix3 += outerStride3;
                            }

                            if (counters.LongLength > 0)
                            {
                                //Basically a ripple carry adder
                                long p = counters.LongLength - 1;
                                while (++counters[p] == limits[p] && p > 0)
                                {
                                    counters[p] = 0;
                                    p--;
                                }
                            }
                        }
                    }
                }
            }
        }

        /// <summary>
        /// Unsafe implementation of applying a unary operation
        /// </summary>
        /// <typeparam name="C">The type of operation to perform</typeparam>
        /// <param name="op">The operation instance</param>
        /// <param name="scalar">The input scalar argument</param>
        /// <param name="out">The output target</param>
        internal static void UFunc_Op_Inner_Unary_Scalar_Flush_Boolean_TypedImpl<C>(NumCIL.Boolean.ToInt8 op, System.Boolean scalar, NdArray<System.SByte> @out)
            where C : IUnaryOp<System.Boolean>
        {
            unsafe
            {
                using (var f2 = new Pinner(@out.DataAccessor))
                {
                    var d2 = (System.SByte*)f2.ptr;

                    if (@out.Shape.Dimensions.Length == 1)
                    {
                        long totalOps = @out.Shape.Dimensions[0].Length;
                        long ix2 = @out.Shape.Offset;
                        long stride2 = @out.Shape.Dimensions[0].Stride;

                        for (long i = 0; i < totalOps; i++)
                        {
                            d2[ix2] = (System.SByte)(scalar ? 1 : 0 );
                            ix2 += stride2;
                        }
                    }
                    else if (@out.Shape.Dimensions.Length == 2)
                    {
                        long opsOuter = @out.Shape.Dimensions[0].Length;
                        long opsInner = @out.Shape.Dimensions[1].Length;

                        long ix2 = @out.Shape.Offset;
                        long outerStride2 = @out.Shape.Dimensions[0].Stride;
                        long innerStride2 = @out.Shape.Dimensions[1].Stride;
                        outerStride2 -= innerStride2 * @out.Shape.Dimensions[1].Length;

                        for (long i = 0; i < opsOuter; i++)
                        {
                            for (long j = 0; j < opsInner; j++)
                            {
                                d2[ix2] = (System.SByte)(scalar ? 1 : 0 );
                                ix2 += innerStride2;
                            }

                            ix2 += outerStride2;
                        }
                    }
                    else
                    {
                        long n = @out.Shape.Dimensions.LongLength - 3;
                        long[] limits = @out.Shape.Dimensions.Where(x => n-- > 0).Select(x => x.Length).ToArray();
                        long[] counters = new long[limits.LongLength];

                        long totalOps = limits.LongLength == 0 ? 1 : limits.Aggregate<long>((a, b) => a * b);

                        //This chunck of variables are used to prevent repeated calculations of offsets
                        long dimIndex0 = 0 + limits.LongLength;
                        long dimIndex1 = 1 + limits.LongLength;
                        long dimIndex2 = 2 + limits.LongLength;

                        long opsOuter = @out.Shape.Dimensions[0 + limits.LongLength].Length;
                        long opsInner = @out.Shape.Dimensions[1 + limits.LongLength].Length;
                        long opsInnerInner = @out.Shape.Dimensions[2 + limits.LongLength].Length;

                        long outerStride3 = @out.Shape.Dimensions[dimIndex0].Stride;
                        long innerStride3 = @out.Shape.Dimensions[dimIndex1].Stride;
                        long innerInnerStride3 = @out.Shape.Dimensions[dimIndex2].Stride;
                        outerStride3 -= innerStride3 * @out.Shape.Dimensions[dimIndex1].Length;
                        innerStride3 -= innerInnerStride3 * @out.Shape.Dimensions[dimIndex2].Length;

                        for (long outer = 0; outer < totalOps; outer++)
                        {
                            //Get the array offset for the first element in the outer dimension
                            long ix3 = @out.Shape[counters];

                            for (long i = 0; i < opsOuter; i++)
                            {
                                for (long j = 0; j < opsInner; j++)
                                {
                                    for (long k = 0; k < opsInnerInner; k++)
                                    {
                                        d2[ix3] = (System.SByte)(scalar ? 1 : 0 );
                                        ix3 += innerInnerStride3;
                                    }

                                    ix3 += innerStride3;
                                }

                                ix3 += outerStride3;
                            }

                            if (counters.LongLength > 0)
                            {
                                //Basically a ripple carry adder
                                long p = counters.LongLength - 1;
                                while (++counters[p] == limits[p] && p > 0)
                                {
                                    counters[p] = 0;
                                    p--;
                                }
                            }
                        }
                    }
                }
            }
        }
        /// <summary>
        /// Unsafe implementation of applying a unary operation
        /// </summary>
        /// <typeparam name="C">The type of operation to perform</typeparam>
        /// <param name="op">The operation instance</param>
        /// <param name="in1">The input argument</param>
        /// <param name="out">The output target</param>
        internal static void UFunc_Op_Inner_Unary_Flush_SByte_TypedImpl<C>(NumCIL.Int16.ToInt16 op, NdArray<System.SByte> in1, NdArray<System.Int16> @out)
            where C : IUnaryOp<System.SByte>
        {
            unsafe
            {
                using (var f1 = new Pinner(in1.DataAccessor))
                using (var f2 = new Pinner(@out.DataAccessor))
                {
                    var d1 = (System.SByte*)f1.ptr;
                    var d2 = (System.Int16*)f2.ptr;

                    if (@out.Shape.Dimensions.Length == 1)
                    {
                        long totalOps = @out.Shape.Dimensions[0].Length;

                        long ix1 = in1.Shape.Offset;
                        long ix2 = @out.Shape.Offset;

                        long stride1 = in1.Shape.Dimensions[0].Stride;
                        long stride2 = @out.Shape.Dimensions[0].Stride;


                        if (stride1 == stride2 && ix1 == ix2)
                        {
                            //Best case, all are equal, just keep a single counter
                            for (long i = 0; i < totalOps; i++)
                            {
                                d2[ix1] = (System.Int16)(d1[ix1]);
                                ix1 += stride1;
                            }
                        }
                        else
                        {
                            for (long i = 0; i < totalOps; i++)
                            {
                                d2[ix2] = (System.Int16)(d1[ix1]);
                                ix1 += stride1;
                                ix2 += stride2;
                            }
                        }
                    }
                    else if (@out.Shape.Dimensions.Length == 2)
                    {
                        long opsOuter = @out.Shape.Dimensions[0].Length;
                        long opsInner = @out.Shape.Dimensions[1].Length;

                        long ix1 = in1.Shape.Offset;
                        long ix2 = @out.Shape.Offset;

                        long outerStride1 = in1.Shape.Dimensions[0].Stride;
                        long outerStride2 = @out.Shape.Dimensions[0].Stride;

                        long innerStride1 = in1.Shape.Dimensions[1].Stride;
                        long innerStride2 = @out.Shape.Dimensions[1].Stride;

                        outerStride1 -= innerStride1 * in1.Shape.Dimensions[1].Length;
                        outerStride2 -= innerStride2 * @out.Shape.Dimensions[1].Length;

                        for (long i = 0; i < opsOuter; i++)
                        {
                            for (long j = 0; j < opsInner; j++)
                            {
                                d2[ix2] = (System.Int16)(d1[ix1]);
                                ix1 += innerStride1;
                                ix2 += innerStride2;
                            }

                            ix1 += outerStride1;
                            ix2 += outerStride2;
                        }
                    }
                    else
                    {
                        long n = in1.Shape.Dimensions.LongLength - 3;
                        long[] limits = in1.Shape.Dimensions.Where(x => n-- > 0).Select(x => x.Length).ToArray();
                        long[] counters = new long[limits.LongLength];

                        long totalOps = limits.LongLength == 0 ? 1 : limits.Aggregate<long>((a, b) => a * b);

                        //This chunck of variables are used to prevent repeated calculations of offsets
                        long dimIndex0 = 0 + limits.LongLength;
                        long dimIndex1 = 1 + limits.LongLength;
                        long dimIndex2 = 2 + limits.LongLength;

                        long opsOuter = @out.Shape.Dimensions[0 + limits.LongLength].Length;
                        long opsInner = @out.Shape.Dimensions[1 + limits.LongLength].Length;
                        long opsInnerInner = @out.Shape.Dimensions[2 + limits.LongLength].Length;

                        long outerStride1 = in1.Shape.Dimensions[dimIndex0].Stride;
                        long outerStride3 = @out.Shape.Dimensions[dimIndex0].Stride;

                        long innerStride1 = in1.Shape.Dimensions[dimIndex1].Stride;
                        long innerStride3 = @out.Shape.Dimensions[dimIndex1].Stride;

                        long innerInnerStride1 = in1.Shape.Dimensions[dimIndex2].Stride;
                        long innerInnerStride3 = @out.Shape.Dimensions[dimIndex2].Stride;

                        outerStride1 -= innerStride1 * in1.Shape.Dimensions[dimIndex1].Length;
                        outerStride3 -= innerStride3 * @out.Shape.Dimensions[dimIndex1].Length;

                        innerStride1 -= innerInnerStride1 * in1.Shape.Dimensions[dimIndex2].Length;
                        innerStride3 -= innerInnerStride3 * @out.Shape.Dimensions[dimIndex2].Length;

                        for (long outer = 0; outer < totalOps; outer++)
                        {
                            //Get the array offset for the first element in the outer dimension
                            long ix1 = in1.Shape[counters];
                            long ix3 = @out.Shape[counters];


                            for (long i = 0; i < opsOuter; i++)
                            {
                                for (long j = 0; j < opsInner; j++)
                                {
                                    for (long k = 0; k < opsInnerInner; k++)
                                    {
                                        d2[ix3] = (System.Int16)(d1[ix1]);
                                        ix1 += innerInnerStride1;
                                        ix3 += innerInnerStride3;
                                    }

                                    ix1 += innerStride1;
                                    ix3 += innerStride3;
                                }

                                ix1 += outerStride1;
                                ix3 += outerStride3;
                            }

                            if (counters.LongLength > 0)
                            {
                                //Basically a ripple carry adder
                                long p = counters.LongLength - 1;
                                while (++counters[p] == limits[p] && p > 0)
                                {
                                    counters[p] = 0;
                                    p--;
                                }
                            }
                        }
                    }
                }
            }
        }

        /// <summary>
        /// Unsafe implementation of applying a unary operation
        /// </summary>
        /// <typeparam name="C">The type of operation to perform</typeparam>
        /// <param name="op">The operation instance</param>
        /// <param name="scalar">The input scalar argument</param>
        /// <param name="out">The output target</param>
        internal static void UFunc_Op_Inner_Unary_Scalar_Flush_SByte_TypedImpl<C>(NumCIL.Int16.ToInt16 op, System.SByte scalar, NdArray<System.Int16> @out)
            where C : IUnaryOp<System.SByte>
        {
            unsafe
            {
                using (var f2 = new Pinner(@out.DataAccessor))
                {
                    var d2 = (System.Int16*)f2.ptr;

                    if (@out.Shape.Dimensions.Length == 1)
                    {
                        long totalOps = @out.Shape.Dimensions[0].Length;
                        long ix2 = @out.Shape.Offset;
                        long stride2 = @out.Shape.Dimensions[0].Stride;

                        for (long i = 0; i < totalOps; i++)
                        {
                            d2[ix2] = (System.Int16)(scalar);
                            ix2 += stride2;
                        }
                    }
                    else if (@out.Shape.Dimensions.Length == 2)
                    {
                        long opsOuter = @out.Shape.Dimensions[0].Length;
                        long opsInner = @out.Shape.Dimensions[1].Length;

                        long ix2 = @out.Shape.Offset;
                        long outerStride2 = @out.Shape.Dimensions[0].Stride;
                        long innerStride2 = @out.Shape.Dimensions[1].Stride;
                        outerStride2 -= innerStride2 * @out.Shape.Dimensions[1].Length;

                        for (long i = 0; i < opsOuter; i++)
                        {
                            for (long j = 0; j < opsInner; j++)
                            {
                                d2[ix2] = (System.Int16)(scalar);
                                ix2 += innerStride2;
                            }

                            ix2 += outerStride2;
                        }
                    }
                    else
                    {
                        long n = @out.Shape.Dimensions.LongLength - 3;
                        long[] limits = @out.Shape.Dimensions.Where(x => n-- > 0).Select(x => x.Length).ToArray();
                        long[] counters = new long[limits.LongLength];

                        long totalOps = limits.LongLength == 0 ? 1 : limits.Aggregate<long>((a, b) => a * b);

                        //This chunck of variables are used to prevent repeated calculations of offsets
                        long dimIndex0 = 0 + limits.LongLength;
                        long dimIndex1 = 1 + limits.LongLength;
                        long dimIndex2 = 2 + limits.LongLength;

                        long opsOuter = @out.Shape.Dimensions[0 + limits.LongLength].Length;
                        long opsInner = @out.Shape.Dimensions[1 + limits.LongLength].Length;
                        long opsInnerInner = @out.Shape.Dimensions[2 + limits.LongLength].Length;

                        long outerStride3 = @out.Shape.Dimensions[dimIndex0].Stride;
                        long innerStride3 = @out.Shape.Dimensions[dimIndex1].Stride;
                        long innerInnerStride3 = @out.Shape.Dimensions[dimIndex2].Stride;
                        outerStride3 -= innerStride3 * @out.Shape.Dimensions[dimIndex1].Length;
                        innerStride3 -= innerInnerStride3 * @out.Shape.Dimensions[dimIndex2].Length;

                        for (long outer = 0; outer < totalOps; outer++)
                        {
                            //Get the array offset for the first element in the outer dimension
                            long ix3 = @out.Shape[counters];

                            for (long i = 0; i < opsOuter; i++)
                            {
                                for (long j = 0; j < opsInner; j++)
                                {
                                    for (long k = 0; k < opsInnerInner; k++)
                                    {
                                        d2[ix3] = (System.Int16)(scalar);
                                        ix3 += innerInnerStride3;
                                    }

                                    ix3 += innerStride3;
                                }

                                ix3 += outerStride3;
                            }

                            if (counters.LongLength > 0)
                            {
                                //Basically a ripple carry adder
                                long p = counters.LongLength - 1;
                                while (++counters[p] == limits[p] && p > 0)
                                {
                                    counters[p] = 0;
                                    p--;
                                }
                            }
                        }
                    }
                }
            }
        }
        /// <summary>
        /// Unsafe implementation of applying a unary operation
        /// </summary>
        /// <typeparam name="C">The type of operation to perform</typeparam>
        /// <param name="op">The operation instance</param>
        /// <param name="in1">The input argument</param>
        /// <param name="out">The output target</param>
        internal static void UFunc_Op_Inner_Unary_Flush_Byte_TypedImpl<C>(NumCIL.Int16.ToInt16 op, NdArray<System.Byte> in1, NdArray<System.Int16> @out)
            where C : IUnaryOp<System.Byte>
        {
            unsafe
            {
                using (var f1 = new Pinner(in1.DataAccessor))
                using (var f2 = new Pinner(@out.DataAccessor))
                {
                    var d1 = (System.Byte*)f1.ptr;
                    var d2 = (System.Int16*)f2.ptr;

                    if (@out.Shape.Dimensions.Length == 1)
                    {
                        long totalOps = @out.Shape.Dimensions[0].Length;

                        long ix1 = in1.Shape.Offset;
                        long ix2 = @out.Shape.Offset;

                        long stride1 = in1.Shape.Dimensions[0].Stride;
                        long stride2 = @out.Shape.Dimensions[0].Stride;


                        if (stride1 == stride2 && ix1 == ix2)
                        {
                            //Best case, all are equal, just keep a single counter
                            for (long i = 0; i < totalOps; i++)
                            {
                                d2[ix1] = (System.Int16)(d1[ix1]);
                                ix1 += stride1;
                            }
                        }
                        else
                        {
                            for (long i = 0; i < totalOps; i++)
                            {
                                d2[ix2] = (System.Int16)(d1[ix1]);
                                ix1 += stride1;
                                ix2 += stride2;
                            }
                        }
                    }
                    else if (@out.Shape.Dimensions.Length == 2)
                    {
                        long opsOuter = @out.Shape.Dimensions[0].Length;
                        long opsInner = @out.Shape.Dimensions[1].Length;

                        long ix1 = in1.Shape.Offset;
                        long ix2 = @out.Shape.Offset;

                        long outerStride1 = in1.Shape.Dimensions[0].Stride;
                        long outerStride2 = @out.Shape.Dimensions[0].Stride;

                        long innerStride1 = in1.Shape.Dimensions[1].Stride;
                        long innerStride2 = @out.Shape.Dimensions[1].Stride;

                        outerStride1 -= innerStride1 * in1.Shape.Dimensions[1].Length;
                        outerStride2 -= innerStride2 * @out.Shape.Dimensions[1].Length;

                        for (long i = 0; i < opsOuter; i++)
                        {
                            for (long j = 0; j < opsInner; j++)
                            {
                                d2[ix2] = (System.Int16)(d1[ix1]);
                                ix1 += innerStride1;
                                ix2 += innerStride2;
                            }

                            ix1 += outerStride1;
                            ix2 += outerStride2;
                        }
                    }
                    else
                    {
                        long n = in1.Shape.Dimensions.LongLength - 3;
                        long[] limits = in1.Shape.Dimensions.Where(x => n-- > 0).Select(x => x.Length).ToArray();
                        long[] counters = new long[limits.LongLength];

                        long totalOps = limits.LongLength == 0 ? 1 : limits.Aggregate<long>((a, b) => a * b);

                        //This chunck of variables are used to prevent repeated calculations of offsets
                        long dimIndex0 = 0 + limits.LongLength;
                        long dimIndex1 = 1 + limits.LongLength;
                        long dimIndex2 = 2 + limits.LongLength;

                        long opsOuter = @out.Shape.Dimensions[0 + limits.LongLength].Length;
                        long opsInner = @out.Shape.Dimensions[1 + limits.LongLength].Length;
                        long opsInnerInner = @out.Shape.Dimensions[2 + limits.LongLength].Length;

                        long outerStride1 = in1.Shape.Dimensions[dimIndex0].Stride;
                        long outerStride3 = @out.Shape.Dimensions[dimIndex0].Stride;

                        long innerStride1 = in1.Shape.Dimensions[dimIndex1].Stride;
                        long innerStride3 = @out.Shape.Dimensions[dimIndex1].Stride;

                        long innerInnerStride1 = in1.Shape.Dimensions[dimIndex2].Stride;
                        long innerInnerStride3 = @out.Shape.Dimensions[dimIndex2].Stride;

                        outerStride1 -= innerStride1 * in1.Shape.Dimensions[dimIndex1].Length;
                        outerStride3 -= innerStride3 * @out.Shape.Dimensions[dimIndex1].Length;

                        innerStride1 -= innerInnerStride1 * in1.Shape.Dimensions[dimIndex2].Length;
                        innerStride3 -= innerInnerStride3 * @out.Shape.Dimensions[dimIndex2].Length;

                        for (long outer = 0; outer < totalOps; outer++)
                        {
                            //Get the array offset for the first element in the outer dimension
                            long ix1 = in1.Shape[counters];
                            long ix3 = @out.Shape[counters];


                            for (long i = 0; i < opsOuter; i++)
                            {
                                for (long j = 0; j < opsInner; j++)
                                {
                                    for (long k = 0; k < opsInnerInner; k++)
                                    {
                                        d2[ix3] = (System.Int16)(d1[ix1]);
                                        ix1 += innerInnerStride1;
                                        ix3 += innerInnerStride3;
                                    }

                                    ix1 += innerStride1;
                                    ix3 += innerStride3;
                                }

                                ix1 += outerStride1;
                                ix3 += outerStride3;
                            }

                            if (counters.LongLength > 0)
                            {
                                //Basically a ripple carry adder
                                long p = counters.LongLength - 1;
                                while (++counters[p] == limits[p] && p > 0)
                                {
                                    counters[p] = 0;
                                    p--;
                                }
                            }
                        }
                    }
                }
            }
        }

        /// <summary>
        /// Unsafe implementation of applying a unary operation
        /// </summary>
        /// <typeparam name="C">The type of operation to perform</typeparam>
        /// <param name="op">The operation instance</param>
        /// <param name="scalar">The input scalar argument</param>
        /// <param name="out">The output target</param>
        internal static void UFunc_Op_Inner_Unary_Scalar_Flush_Byte_TypedImpl<C>(NumCIL.Int16.ToInt16 op, System.Byte scalar, NdArray<System.Int16> @out)
            where C : IUnaryOp<System.Byte>
        {
            unsafe
            {
                using (var f2 = new Pinner(@out.DataAccessor))
                {
                    var d2 = (System.Int16*)f2.ptr;

                    if (@out.Shape.Dimensions.Length == 1)
                    {
                        long totalOps = @out.Shape.Dimensions[0].Length;
                        long ix2 = @out.Shape.Offset;
                        long stride2 = @out.Shape.Dimensions[0].Stride;

                        for (long i = 0; i < totalOps; i++)
                        {
                            d2[ix2] = (System.Int16)(scalar);
                            ix2 += stride2;
                        }
                    }
                    else if (@out.Shape.Dimensions.Length == 2)
                    {
                        long opsOuter = @out.Shape.Dimensions[0].Length;
                        long opsInner = @out.Shape.Dimensions[1].Length;

                        long ix2 = @out.Shape.Offset;
                        long outerStride2 = @out.Shape.Dimensions[0].Stride;
                        long innerStride2 = @out.Shape.Dimensions[1].Stride;
                        outerStride2 -= innerStride2 * @out.Shape.Dimensions[1].Length;

                        for (long i = 0; i < opsOuter; i++)
                        {
                            for (long j = 0; j < opsInner; j++)
                            {
                                d2[ix2] = (System.Int16)(scalar);
                                ix2 += innerStride2;
                            }

                            ix2 += outerStride2;
                        }
                    }
                    else
                    {
                        long n = @out.Shape.Dimensions.LongLength - 3;
                        long[] limits = @out.Shape.Dimensions.Where(x => n-- > 0).Select(x => x.Length).ToArray();
                        long[] counters = new long[limits.LongLength];

                        long totalOps = limits.LongLength == 0 ? 1 : limits.Aggregate<long>((a, b) => a * b);

                        //This chunck of variables are used to prevent repeated calculations of offsets
                        long dimIndex0 = 0 + limits.LongLength;
                        long dimIndex1 = 1 + limits.LongLength;
                        long dimIndex2 = 2 + limits.LongLength;

                        long opsOuter = @out.Shape.Dimensions[0 + limits.LongLength].Length;
                        long opsInner = @out.Shape.Dimensions[1 + limits.LongLength].Length;
                        long opsInnerInner = @out.Shape.Dimensions[2 + limits.LongLength].Length;

                        long outerStride3 = @out.Shape.Dimensions[dimIndex0].Stride;
                        long innerStride3 = @out.Shape.Dimensions[dimIndex1].Stride;
                        long innerInnerStride3 = @out.Shape.Dimensions[dimIndex2].Stride;
                        outerStride3 -= innerStride3 * @out.Shape.Dimensions[dimIndex1].Length;
                        innerStride3 -= innerInnerStride3 * @out.Shape.Dimensions[dimIndex2].Length;

                        for (long outer = 0; outer < totalOps; outer++)
                        {
                            //Get the array offset for the first element in the outer dimension
                            long ix3 = @out.Shape[counters];

                            for (long i = 0; i < opsOuter; i++)
                            {
                                for (long j = 0; j < opsInner; j++)
                                {
                                    for (long k = 0; k < opsInnerInner; k++)
                                    {
                                        d2[ix3] = (System.Int16)(scalar);
                                        ix3 += innerInnerStride3;
                                    }

                                    ix3 += innerStride3;
                                }

                                ix3 += outerStride3;
                            }

                            if (counters.LongLength > 0)
                            {
                                //Basically a ripple carry adder
                                long p = counters.LongLength - 1;
                                while (++counters[p] == limits[p] && p > 0)
                                {
                                    counters[p] = 0;
                                    p--;
                                }
                            }
                        }
                    }
                }
            }
        }
        /// <summary>
        /// Unsafe implementation of applying a unary operation
        /// </summary>
        /// <typeparam name="C">The type of operation to perform</typeparam>
        /// <param name="op">The operation instance</param>
        /// <param name="in1">The input argument</param>
        /// <param name="out">The output target</param>
        internal static void UFunc_Op_Inner_Unary_Flush_UInt16_TypedImpl<C>(NumCIL.Int16.ToInt16 op, NdArray<System.UInt16> in1, NdArray<System.Int16> @out)
            where C : IUnaryOp<System.UInt16>
        {
            unsafe
            {
                using (var f1 = new Pinner(in1.DataAccessor))
                using (var f2 = new Pinner(@out.DataAccessor))
                {
                    var d1 = (System.UInt16*)f1.ptr;
                    var d2 = (System.Int16*)f2.ptr;

                    if (@out.Shape.Dimensions.Length == 1)
                    {
                        long totalOps = @out.Shape.Dimensions[0].Length;

                        long ix1 = in1.Shape.Offset;
                        long ix2 = @out.Shape.Offset;

                        long stride1 = in1.Shape.Dimensions[0].Stride;
                        long stride2 = @out.Shape.Dimensions[0].Stride;


                        if (stride1 == stride2 && ix1 == ix2)
                        {
                            //Best case, all are equal, just keep a single counter
                            for (long i = 0; i < totalOps; i++)
                            {
                                d2[ix1] = (System.Int16)(d1[ix1]);
                                ix1 += stride1;
                            }
                        }
                        else
                        {
                            for (long i = 0; i < totalOps; i++)
                            {
                                d2[ix2] = (System.Int16)(d1[ix1]);
                                ix1 += stride1;
                                ix2 += stride2;
                            }
                        }
                    }
                    else if (@out.Shape.Dimensions.Length == 2)
                    {
                        long opsOuter = @out.Shape.Dimensions[0].Length;
                        long opsInner = @out.Shape.Dimensions[1].Length;

                        long ix1 = in1.Shape.Offset;
                        long ix2 = @out.Shape.Offset;

                        long outerStride1 = in1.Shape.Dimensions[0].Stride;
                        long outerStride2 = @out.Shape.Dimensions[0].Stride;

                        long innerStride1 = in1.Shape.Dimensions[1].Stride;
                        long innerStride2 = @out.Shape.Dimensions[1].Stride;

                        outerStride1 -= innerStride1 * in1.Shape.Dimensions[1].Length;
                        outerStride2 -= innerStride2 * @out.Shape.Dimensions[1].Length;

                        for (long i = 0; i < opsOuter; i++)
                        {
                            for (long j = 0; j < opsInner; j++)
                            {
                                d2[ix2] = (System.Int16)(d1[ix1]);
                                ix1 += innerStride1;
                                ix2 += innerStride2;
                            }

                            ix1 += outerStride1;
                            ix2 += outerStride2;
                        }
                    }
                    else
                    {
                        long n = in1.Shape.Dimensions.LongLength - 3;
                        long[] limits = in1.Shape.Dimensions.Where(x => n-- > 0).Select(x => x.Length).ToArray();
                        long[] counters = new long[limits.LongLength];

                        long totalOps = limits.LongLength == 0 ? 1 : limits.Aggregate<long>((a, b) => a * b);

                        //This chunck of variables are used to prevent repeated calculations of offsets
                        long dimIndex0 = 0 + limits.LongLength;
                        long dimIndex1 = 1 + limits.LongLength;
                        long dimIndex2 = 2 + limits.LongLength;

                        long opsOuter = @out.Shape.Dimensions[0 + limits.LongLength].Length;
                        long opsInner = @out.Shape.Dimensions[1 + limits.LongLength].Length;
                        long opsInnerInner = @out.Shape.Dimensions[2 + limits.LongLength].Length;

                        long outerStride1 = in1.Shape.Dimensions[dimIndex0].Stride;
                        long outerStride3 = @out.Shape.Dimensions[dimIndex0].Stride;

                        long innerStride1 = in1.Shape.Dimensions[dimIndex1].Stride;
                        long innerStride3 = @out.Shape.Dimensions[dimIndex1].Stride;

                        long innerInnerStride1 = in1.Shape.Dimensions[dimIndex2].Stride;
                        long innerInnerStride3 = @out.Shape.Dimensions[dimIndex2].Stride;

                        outerStride1 -= innerStride1 * in1.Shape.Dimensions[dimIndex1].Length;
                        outerStride3 -= innerStride3 * @out.Shape.Dimensions[dimIndex1].Length;

                        innerStride1 -= innerInnerStride1 * in1.Shape.Dimensions[dimIndex2].Length;
                        innerStride3 -= innerInnerStride3 * @out.Shape.Dimensions[dimIndex2].Length;

                        for (long outer = 0; outer < totalOps; outer++)
                        {
                            //Get the array offset for the first element in the outer dimension
                            long ix1 = in1.Shape[counters];
                            long ix3 = @out.Shape[counters];


                            for (long i = 0; i < opsOuter; i++)
                            {
                                for (long j = 0; j < opsInner; j++)
                                {
                                    for (long k = 0; k < opsInnerInner; k++)
                                    {
                                        d2[ix3] = (System.Int16)(d1[ix1]);
                                        ix1 += innerInnerStride1;
                                        ix3 += innerInnerStride3;
                                    }

                                    ix1 += innerStride1;
                                    ix3 += innerStride3;
                                }

                                ix1 += outerStride1;
                                ix3 += outerStride3;
                            }

                            if (counters.LongLength > 0)
                            {
                                //Basically a ripple carry adder
                                long p = counters.LongLength - 1;
                                while (++counters[p] == limits[p] && p > 0)
                                {
                                    counters[p] = 0;
                                    p--;
                                }
                            }
                        }
                    }
                }
            }
        }

        /// <summary>
        /// Unsafe implementation of applying a unary operation
        /// </summary>
        /// <typeparam name="C">The type of operation to perform</typeparam>
        /// <param name="op">The operation instance</param>
        /// <param name="scalar">The input scalar argument</param>
        /// <param name="out">The output target</param>
        internal static void UFunc_Op_Inner_Unary_Scalar_Flush_UInt16_TypedImpl<C>(NumCIL.Int16.ToInt16 op, System.UInt16 scalar, NdArray<System.Int16> @out)
            where C : IUnaryOp<System.UInt16>
        {
            unsafe
            {
                using (var f2 = new Pinner(@out.DataAccessor))
                {
                    var d2 = (System.Int16*)f2.ptr;

                    if (@out.Shape.Dimensions.Length == 1)
                    {
                        long totalOps = @out.Shape.Dimensions[0].Length;
                        long ix2 = @out.Shape.Offset;
                        long stride2 = @out.Shape.Dimensions[0].Stride;

                        for (long i = 0; i < totalOps; i++)
                        {
                            d2[ix2] = (System.Int16)(scalar);
                            ix2 += stride2;
                        }
                    }
                    else if (@out.Shape.Dimensions.Length == 2)
                    {
                        long opsOuter = @out.Shape.Dimensions[0].Length;
                        long opsInner = @out.Shape.Dimensions[1].Length;

                        long ix2 = @out.Shape.Offset;
                        long outerStride2 = @out.Shape.Dimensions[0].Stride;
                        long innerStride2 = @out.Shape.Dimensions[1].Stride;
                        outerStride2 -= innerStride2 * @out.Shape.Dimensions[1].Length;

                        for (long i = 0; i < opsOuter; i++)
                        {
                            for (long j = 0; j < opsInner; j++)
                            {
                                d2[ix2] = (System.Int16)(scalar);
                                ix2 += innerStride2;
                            }

                            ix2 += outerStride2;
                        }
                    }
                    else
                    {
                        long n = @out.Shape.Dimensions.LongLength - 3;
                        long[] limits = @out.Shape.Dimensions.Where(x => n-- > 0).Select(x => x.Length).ToArray();
                        long[] counters = new long[limits.LongLength];

                        long totalOps = limits.LongLength == 0 ? 1 : limits.Aggregate<long>((a, b) => a * b);

                        //This chunck of variables are used to prevent repeated calculations of offsets
                        long dimIndex0 = 0 + limits.LongLength;
                        long dimIndex1 = 1 + limits.LongLength;
                        long dimIndex2 = 2 + limits.LongLength;

                        long opsOuter = @out.Shape.Dimensions[0 + limits.LongLength].Length;
                        long opsInner = @out.Shape.Dimensions[1 + limits.LongLength].Length;
                        long opsInnerInner = @out.Shape.Dimensions[2 + limits.LongLength].Length;

                        long outerStride3 = @out.Shape.Dimensions[dimIndex0].Stride;
                        long innerStride3 = @out.Shape.Dimensions[dimIndex1].Stride;
                        long innerInnerStride3 = @out.Shape.Dimensions[dimIndex2].Stride;
                        outerStride3 -= innerStride3 * @out.Shape.Dimensions[dimIndex1].Length;
                        innerStride3 -= innerInnerStride3 * @out.Shape.Dimensions[dimIndex2].Length;

                        for (long outer = 0; outer < totalOps; outer++)
                        {
                            //Get the array offset for the first element in the outer dimension
                            long ix3 = @out.Shape[counters];

                            for (long i = 0; i < opsOuter; i++)
                            {
                                for (long j = 0; j < opsInner; j++)
                                {
                                    for (long k = 0; k < opsInnerInner; k++)
                                    {
                                        d2[ix3] = (System.Int16)(scalar);
                                        ix3 += innerInnerStride3;
                                    }

                                    ix3 += innerStride3;
                                }

                                ix3 += outerStride3;
                            }

                            if (counters.LongLength > 0)
                            {
                                //Basically a ripple carry adder
                                long p = counters.LongLength - 1;
                                while (++counters[p] == limits[p] && p > 0)
                                {
                                    counters[p] = 0;
                                    p--;
                                }
                            }
                        }
                    }
                }
            }
        }
        /// <summary>
        /// Unsafe implementation of applying a unary operation
        /// </summary>
        /// <typeparam name="C">The type of operation to perform</typeparam>
        /// <param name="op">The operation instance</param>
        /// <param name="in1">The input argument</param>
        /// <param name="out">The output target</param>
        internal static void UFunc_Op_Inner_Unary_Flush_Int32_TypedImpl<C>(NumCIL.Int16.ToInt16 op, NdArray<System.Int32> in1, NdArray<System.Int16> @out)
            where C : IUnaryOp<System.Int32>
        {
            unsafe
            {
                using (var f1 = new Pinner(in1.DataAccessor))
                using (var f2 = new Pinner(@out.DataAccessor))
                {
                    var d1 = (System.Int32*)f1.ptr;
                    var d2 = (System.Int16*)f2.ptr;

                    if (@out.Shape.Dimensions.Length == 1)
                    {
                        long totalOps = @out.Shape.Dimensions[0].Length;

                        long ix1 = in1.Shape.Offset;
                        long ix2 = @out.Shape.Offset;

                        long stride1 = in1.Shape.Dimensions[0].Stride;
                        long stride2 = @out.Shape.Dimensions[0].Stride;


                        if (stride1 == stride2 && ix1 == ix2)
                        {
                            //Best case, all are equal, just keep a single counter
                            for (long i = 0; i < totalOps; i++)
                            {
                                d2[ix1] = (System.Int16)(d1[ix1]);
                                ix1 += stride1;
                            }
                        }
                        else
                        {
                            for (long i = 0; i < totalOps; i++)
                            {
                                d2[ix2] = (System.Int16)(d1[ix1]);
                                ix1 += stride1;
                                ix2 += stride2;
                            }
                        }
                    }
                    else if (@out.Shape.Dimensions.Length == 2)
                    {
                        long opsOuter = @out.Shape.Dimensions[0].Length;
                        long opsInner = @out.Shape.Dimensions[1].Length;

                        long ix1 = in1.Shape.Offset;
                        long ix2 = @out.Shape.Offset;

                        long outerStride1 = in1.Shape.Dimensions[0].Stride;
                        long outerStride2 = @out.Shape.Dimensions[0].Stride;

                        long innerStride1 = in1.Shape.Dimensions[1].Stride;
                        long innerStride2 = @out.Shape.Dimensions[1].Stride;

                        outerStride1 -= innerStride1 * in1.Shape.Dimensions[1].Length;
                        outerStride2 -= innerStride2 * @out.Shape.Dimensions[1].Length;

                        for (long i = 0; i < opsOuter; i++)
                        {
                            for (long j = 0; j < opsInner; j++)
                            {
                                d2[ix2] = (System.Int16)(d1[ix1]);
                                ix1 += innerStride1;
                                ix2 += innerStride2;
                            }

                            ix1 += outerStride1;
                            ix2 += outerStride2;
                        }
                    }
                    else
                    {
                        long n = in1.Shape.Dimensions.LongLength - 3;
                        long[] limits = in1.Shape.Dimensions.Where(x => n-- > 0).Select(x => x.Length).ToArray();
                        long[] counters = new long[limits.LongLength];

                        long totalOps = limits.LongLength == 0 ? 1 : limits.Aggregate<long>((a, b) => a * b);

                        //This chunck of variables are used to prevent repeated calculations of offsets
                        long dimIndex0 = 0 + limits.LongLength;
                        long dimIndex1 = 1 + limits.LongLength;
                        long dimIndex2 = 2 + limits.LongLength;

                        long opsOuter = @out.Shape.Dimensions[0 + limits.LongLength].Length;
                        long opsInner = @out.Shape.Dimensions[1 + limits.LongLength].Length;
                        long opsInnerInner = @out.Shape.Dimensions[2 + limits.LongLength].Length;

                        long outerStride1 = in1.Shape.Dimensions[dimIndex0].Stride;
                        long outerStride3 = @out.Shape.Dimensions[dimIndex0].Stride;

                        long innerStride1 = in1.Shape.Dimensions[dimIndex1].Stride;
                        long innerStride3 = @out.Shape.Dimensions[dimIndex1].Stride;

                        long innerInnerStride1 = in1.Shape.Dimensions[dimIndex2].Stride;
                        long innerInnerStride3 = @out.Shape.Dimensions[dimIndex2].Stride;

                        outerStride1 -= innerStride1 * in1.Shape.Dimensions[dimIndex1].Length;
                        outerStride3 -= innerStride3 * @out.Shape.Dimensions[dimIndex1].Length;

                        innerStride1 -= innerInnerStride1 * in1.Shape.Dimensions[dimIndex2].Length;
                        innerStride3 -= innerInnerStride3 * @out.Shape.Dimensions[dimIndex2].Length;

                        for (long outer = 0; outer < totalOps; outer++)
                        {
                            //Get the array offset for the first element in the outer dimension
                            long ix1 = in1.Shape[counters];
                            long ix3 = @out.Shape[counters];


                            for (long i = 0; i < opsOuter; i++)
                            {
                                for (long j = 0; j < opsInner; j++)
                                {
                                    for (long k = 0; k < opsInnerInner; k++)
                                    {
                                        d2[ix3] = (System.Int16)(d1[ix1]);
                                        ix1 += innerInnerStride1;
                                        ix3 += innerInnerStride3;
                                    }

                                    ix1 += innerStride1;
                                    ix3 += innerStride3;
                                }

                                ix1 += outerStride1;
                                ix3 += outerStride3;
                            }

                            if (counters.LongLength > 0)
                            {
                                //Basically a ripple carry adder
                                long p = counters.LongLength - 1;
                                while (++counters[p] == limits[p] && p > 0)
                                {
                                    counters[p] = 0;
                                    p--;
                                }
                            }
                        }
                    }
                }
            }
        }

        /// <summary>
        /// Unsafe implementation of applying a unary operation
        /// </summary>
        /// <typeparam name="C">The type of operation to perform</typeparam>
        /// <param name="op">The operation instance</param>
        /// <param name="scalar">The input scalar argument</param>
        /// <param name="out">The output target</param>
        internal static void UFunc_Op_Inner_Unary_Scalar_Flush_Int32_TypedImpl<C>(NumCIL.Int16.ToInt16 op, System.Int32 scalar, NdArray<System.Int16> @out)
            where C : IUnaryOp<System.Int32>
        {
            unsafe
            {
                using (var f2 = new Pinner(@out.DataAccessor))
                {
                    var d2 = (System.Int16*)f2.ptr;

                    if (@out.Shape.Dimensions.Length == 1)
                    {
                        long totalOps = @out.Shape.Dimensions[0].Length;
                        long ix2 = @out.Shape.Offset;
                        long stride2 = @out.Shape.Dimensions[0].Stride;

                        for (long i = 0; i < totalOps; i++)
                        {
                            d2[ix2] = (System.Int16)(scalar);
                            ix2 += stride2;
                        }
                    }
                    else if (@out.Shape.Dimensions.Length == 2)
                    {
                        long opsOuter = @out.Shape.Dimensions[0].Length;
                        long opsInner = @out.Shape.Dimensions[1].Length;

                        long ix2 = @out.Shape.Offset;
                        long outerStride2 = @out.Shape.Dimensions[0].Stride;
                        long innerStride2 = @out.Shape.Dimensions[1].Stride;
                        outerStride2 -= innerStride2 * @out.Shape.Dimensions[1].Length;

                        for (long i = 0; i < opsOuter; i++)
                        {
                            for (long j = 0; j < opsInner; j++)
                            {
                                d2[ix2] = (System.Int16)(scalar);
                                ix2 += innerStride2;
                            }

                            ix2 += outerStride2;
                        }
                    }
                    else
                    {
                        long n = @out.Shape.Dimensions.LongLength - 3;
                        long[] limits = @out.Shape.Dimensions.Where(x => n-- > 0).Select(x => x.Length).ToArray();
                        long[] counters = new long[limits.LongLength];

                        long totalOps = limits.LongLength == 0 ? 1 : limits.Aggregate<long>((a, b) => a * b);

                        //This chunck of variables are used to prevent repeated calculations of offsets
                        long dimIndex0 = 0 + limits.LongLength;
                        long dimIndex1 = 1 + limits.LongLength;
                        long dimIndex2 = 2 + limits.LongLength;

                        long opsOuter = @out.Shape.Dimensions[0 + limits.LongLength].Length;
                        long opsInner = @out.Shape.Dimensions[1 + limits.LongLength].Length;
                        long opsInnerInner = @out.Shape.Dimensions[2 + limits.LongLength].Length;

                        long outerStride3 = @out.Shape.Dimensions[dimIndex0].Stride;
                        long innerStride3 = @out.Shape.Dimensions[dimIndex1].Stride;
                        long innerInnerStride3 = @out.Shape.Dimensions[dimIndex2].Stride;
                        outerStride3 -= innerStride3 * @out.Shape.Dimensions[dimIndex1].Length;
                        innerStride3 -= innerInnerStride3 * @out.Shape.Dimensions[dimIndex2].Length;

                        for (long outer = 0; outer < totalOps; outer++)
                        {
                            //Get the array offset for the first element in the outer dimension
                            long ix3 = @out.Shape[counters];

                            for (long i = 0; i < opsOuter; i++)
                            {
                                for (long j = 0; j < opsInner; j++)
                                {
                                    for (long k = 0; k < opsInnerInner; k++)
                                    {
                                        d2[ix3] = (System.Int16)(scalar);
                                        ix3 += innerInnerStride3;
                                    }

                                    ix3 += innerStride3;
                                }

                                ix3 += outerStride3;
                            }

                            if (counters.LongLength > 0)
                            {
                                //Basically a ripple carry adder
                                long p = counters.LongLength - 1;
                                while (++counters[p] == limits[p] && p > 0)
                                {
                                    counters[p] = 0;
                                    p--;
                                }
                            }
                        }
                    }
                }
            }
        }
        /// <summary>
        /// Unsafe implementation of applying a unary operation
        /// </summary>
        /// <typeparam name="C">The type of operation to perform</typeparam>
        /// <param name="op">The operation instance</param>
        /// <param name="in1">The input argument</param>
        /// <param name="out">The output target</param>
        internal static void UFunc_Op_Inner_Unary_Flush_UInt32_TypedImpl<C>(NumCIL.Int16.ToInt16 op, NdArray<System.UInt32> in1, NdArray<System.Int16> @out)
            where C : IUnaryOp<System.UInt32>
        {
            unsafe
            {
                using (var f1 = new Pinner(in1.DataAccessor))
                using (var f2 = new Pinner(@out.DataAccessor))
                {
                    var d1 = (System.UInt32*)f1.ptr;
                    var d2 = (System.Int16*)f2.ptr;

                    if (@out.Shape.Dimensions.Length == 1)
                    {
                        long totalOps = @out.Shape.Dimensions[0].Length;

                        long ix1 = in1.Shape.Offset;
                        long ix2 = @out.Shape.Offset;

                        long stride1 = in1.Shape.Dimensions[0].Stride;
                        long stride2 = @out.Shape.Dimensions[0].Stride;


                        if (stride1 == stride2 && ix1 == ix2)
                        {
                            //Best case, all are equal, just keep a single counter
                            for (long i = 0; i < totalOps; i++)
                            {
                                d2[ix1] = (System.Int16)(d1[ix1]);
                                ix1 += stride1;
                            }
                        }
                        else
                        {
                            for (long i = 0; i < totalOps; i++)
                            {
                                d2[ix2] = (System.Int16)(d1[ix1]);
                                ix1 += stride1;
                                ix2 += stride2;
                            }
                        }
                    }
                    else if (@out.Shape.Dimensions.Length == 2)
                    {
                        long opsOuter = @out.Shape.Dimensions[0].Length;
                        long opsInner = @out.Shape.Dimensions[1].Length;

                        long ix1 = in1.Shape.Offset;
                        long ix2 = @out.Shape.Offset;

                        long outerStride1 = in1.Shape.Dimensions[0].Stride;
                        long outerStride2 = @out.Shape.Dimensions[0].Stride;

                        long innerStride1 = in1.Shape.Dimensions[1].Stride;
                        long innerStride2 = @out.Shape.Dimensions[1].Stride;

                        outerStride1 -= innerStride1 * in1.Shape.Dimensions[1].Length;
                        outerStride2 -= innerStride2 * @out.Shape.Dimensions[1].Length;

                        for (long i = 0; i < opsOuter; i++)
                        {
                            for (long j = 0; j < opsInner; j++)
                            {
                                d2[ix2] = (System.Int16)(d1[ix1]);
                                ix1 += innerStride1;
                                ix2 += innerStride2;
                            }

                            ix1 += outerStride1;
                            ix2 += outerStride2;
                        }
                    }
                    else
                    {
                        long n = in1.Shape.Dimensions.LongLength - 3;
                        long[] limits = in1.Shape.Dimensions.Where(x => n-- > 0).Select(x => x.Length).ToArray();
                        long[] counters = new long[limits.LongLength];

                        long totalOps = limits.LongLength == 0 ? 1 : limits.Aggregate<long>((a, b) => a * b);

                        //This chunck of variables are used to prevent repeated calculations of offsets
                        long dimIndex0 = 0 + limits.LongLength;
                        long dimIndex1 = 1 + limits.LongLength;
                        long dimIndex2 = 2 + limits.LongLength;

                        long opsOuter = @out.Shape.Dimensions[0 + limits.LongLength].Length;
                        long opsInner = @out.Shape.Dimensions[1 + limits.LongLength].Length;
                        long opsInnerInner = @out.Shape.Dimensions[2 + limits.LongLength].Length;

                        long outerStride1 = in1.Shape.Dimensions[dimIndex0].Stride;
                        long outerStride3 = @out.Shape.Dimensions[dimIndex0].Stride;

                        long innerStride1 = in1.Shape.Dimensions[dimIndex1].Stride;
                        long innerStride3 = @out.Shape.Dimensions[dimIndex1].Stride;

                        long innerInnerStride1 = in1.Shape.Dimensions[dimIndex2].Stride;
                        long innerInnerStride3 = @out.Shape.Dimensions[dimIndex2].Stride;

                        outerStride1 -= innerStride1 * in1.Shape.Dimensions[dimIndex1].Length;
                        outerStride3 -= innerStride3 * @out.Shape.Dimensions[dimIndex1].Length;

                        innerStride1 -= innerInnerStride1 * in1.Shape.Dimensions[dimIndex2].Length;
                        innerStride3 -= innerInnerStride3 * @out.Shape.Dimensions[dimIndex2].Length;

                        for (long outer = 0; outer < totalOps; outer++)
                        {
                            //Get the array offset for the first element in the outer dimension
                            long ix1 = in1.Shape[counters];
                            long ix3 = @out.Shape[counters];


                            for (long i = 0; i < opsOuter; i++)
                            {
                                for (long j = 0; j < opsInner; j++)
                                {
                                    for (long k = 0; k < opsInnerInner; k++)
                                    {
                                        d2[ix3] = (System.Int16)(d1[ix1]);
                                        ix1 += innerInnerStride1;
                                        ix3 += innerInnerStride3;
                                    }

                                    ix1 += innerStride1;
                                    ix3 += innerStride3;
                                }

                                ix1 += outerStride1;
                                ix3 += outerStride3;
                            }

                            if (counters.LongLength > 0)
                            {
                                //Basically a ripple carry adder
                                long p = counters.LongLength - 1;
                                while (++counters[p] == limits[p] && p > 0)
                                {
                                    counters[p] = 0;
                                    p--;
                                }
                            }
                        }
                    }
                }
            }
        }

        /// <summary>
        /// Unsafe implementation of applying a unary operation
        /// </summary>
        /// <typeparam name="C">The type of operation to perform</typeparam>
        /// <param name="op">The operation instance</param>
        /// <param name="scalar">The input scalar argument</param>
        /// <param name="out">The output target</param>
        internal static void UFunc_Op_Inner_Unary_Scalar_Flush_UInt32_TypedImpl<C>(NumCIL.Int16.ToInt16 op, System.UInt32 scalar, NdArray<System.Int16> @out)
            where C : IUnaryOp<System.UInt32>
        {
            unsafe
            {
                using (var f2 = new Pinner(@out.DataAccessor))
                {
                    var d2 = (System.Int16*)f2.ptr;

                    if (@out.Shape.Dimensions.Length == 1)
                    {
                        long totalOps = @out.Shape.Dimensions[0].Length;
                        long ix2 = @out.Shape.Offset;
                        long stride2 = @out.Shape.Dimensions[0].Stride;

                        for (long i = 0; i < totalOps; i++)
                        {
                            d2[ix2] = (System.Int16)(scalar);
                            ix2 += stride2;
                        }
                    }
                    else if (@out.Shape.Dimensions.Length == 2)
                    {
                        long opsOuter = @out.Shape.Dimensions[0].Length;
                        long opsInner = @out.Shape.Dimensions[1].Length;

                        long ix2 = @out.Shape.Offset;
                        long outerStride2 = @out.Shape.Dimensions[0].Stride;
                        long innerStride2 = @out.Shape.Dimensions[1].Stride;
                        outerStride2 -= innerStride2 * @out.Shape.Dimensions[1].Length;

                        for (long i = 0; i < opsOuter; i++)
                        {
                            for (long j = 0; j < opsInner; j++)
                            {
                                d2[ix2] = (System.Int16)(scalar);
                                ix2 += innerStride2;
                            }

                            ix2 += outerStride2;
                        }
                    }
                    else
                    {
                        long n = @out.Shape.Dimensions.LongLength - 3;
                        long[] limits = @out.Shape.Dimensions.Where(x => n-- > 0).Select(x => x.Length).ToArray();
                        long[] counters = new long[limits.LongLength];

                        long totalOps = limits.LongLength == 0 ? 1 : limits.Aggregate<long>((a, b) => a * b);

                        //This chunck of variables are used to prevent repeated calculations of offsets
                        long dimIndex0 = 0 + limits.LongLength;
                        long dimIndex1 = 1 + limits.LongLength;
                        long dimIndex2 = 2 + limits.LongLength;

                        long opsOuter = @out.Shape.Dimensions[0 + limits.LongLength].Length;
                        long opsInner = @out.Shape.Dimensions[1 + limits.LongLength].Length;
                        long opsInnerInner = @out.Shape.Dimensions[2 + limits.LongLength].Length;

                        long outerStride3 = @out.Shape.Dimensions[dimIndex0].Stride;
                        long innerStride3 = @out.Shape.Dimensions[dimIndex1].Stride;
                        long innerInnerStride3 = @out.Shape.Dimensions[dimIndex2].Stride;
                        outerStride3 -= innerStride3 * @out.Shape.Dimensions[dimIndex1].Length;
                        innerStride3 -= innerInnerStride3 * @out.Shape.Dimensions[dimIndex2].Length;

                        for (long outer = 0; outer < totalOps; outer++)
                        {
                            //Get the array offset for the first element in the outer dimension
                            long ix3 = @out.Shape[counters];

                            for (long i = 0; i < opsOuter; i++)
                            {
                                for (long j = 0; j < opsInner; j++)
                                {
                                    for (long k = 0; k < opsInnerInner; k++)
                                    {
                                        d2[ix3] = (System.Int16)(scalar);
                                        ix3 += innerInnerStride3;
                                    }

                                    ix3 += innerStride3;
                                }

                                ix3 += outerStride3;
                            }

                            if (counters.LongLength > 0)
                            {
                                //Basically a ripple carry adder
                                long p = counters.LongLength - 1;
                                while (++counters[p] == limits[p] && p > 0)
                                {
                                    counters[p] = 0;
                                    p--;
                                }
                            }
                        }
                    }
                }
            }
        }
        /// <summary>
        /// Unsafe implementation of applying a unary operation
        /// </summary>
        /// <typeparam name="C">The type of operation to perform</typeparam>
        /// <param name="op">The operation instance</param>
        /// <param name="in1">The input argument</param>
        /// <param name="out">The output target</param>
        internal static void UFunc_Op_Inner_Unary_Flush_Int64_TypedImpl<C>(NumCIL.Int16.ToInt16 op, NdArray<System.Int64> in1, NdArray<System.Int16> @out)
            where C : IUnaryOp<System.Int64>
        {
            unsafe
            {
                using (var f1 = new Pinner(in1.DataAccessor))
                using (var f2 = new Pinner(@out.DataAccessor))
                {
                    var d1 = (System.Int64*)f1.ptr;
                    var d2 = (System.Int16*)f2.ptr;

                    if (@out.Shape.Dimensions.Length == 1)
                    {
                        long totalOps = @out.Shape.Dimensions[0].Length;

                        long ix1 = in1.Shape.Offset;
                        long ix2 = @out.Shape.Offset;

                        long stride1 = in1.Shape.Dimensions[0].Stride;
                        long stride2 = @out.Shape.Dimensions[0].Stride;


                        if (stride1 == stride2 && ix1 == ix2)
                        {
                            //Best case, all are equal, just keep a single counter
                            for (long i = 0; i < totalOps; i++)
                            {
                                d2[ix1] = (System.Int16)(d1[ix1]);
                                ix1 += stride1;
                            }
                        }
                        else
                        {
                            for (long i = 0; i < totalOps; i++)
                            {
                                d2[ix2] = (System.Int16)(d1[ix1]);
                                ix1 += stride1;
                                ix2 += stride2;
                            }
                        }
                    }
                    else if (@out.Shape.Dimensions.Length == 2)
                    {
                        long opsOuter = @out.Shape.Dimensions[0].Length;
                        long opsInner = @out.Shape.Dimensions[1].Length;

                        long ix1 = in1.Shape.Offset;
                        long ix2 = @out.Shape.Offset;

                        long outerStride1 = in1.Shape.Dimensions[0].Stride;
                        long outerStride2 = @out.Shape.Dimensions[0].Stride;

                        long innerStride1 = in1.Shape.Dimensions[1].Stride;
                        long innerStride2 = @out.Shape.Dimensions[1].Stride;

                        outerStride1 -= innerStride1 * in1.Shape.Dimensions[1].Length;
                        outerStride2 -= innerStride2 * @out.Shape.Dimensions[1].Length;

                        for (long i = 0; i < opsOuter; i++)
                        {
                            for (long j = 0; j < opsInner; j++)
                            {
                                d2[ix2] = (System.Int16)(d1[ix1]);
                                ix1 += innerStride1;
                                ix2 += innerStride2;
                            }

                            ix1 += outerStride1;
                            ix2 += outerStride2;
                        }
                    }
                    else
                    {
                        long n = in1.Shape.Dimensions.LongLength - 3;
                        long[] limits = in1.Shape.Dimensions.Where(x => n-- > 0).Select(x => x.Length).ToArray();
                        long[] counters = new long[limits.LongLength];

                        long totalOps = limits.LongLength == 0 ? 1 : limits.Aggregate<long>((a, b) => a * b);

                        //This chunck of variables are used to prevent repeated calculations of offsets
                        long dimIndex0 = 0 + limits.LongLength;
                        long dimIndex1 = 1 + limits.LongLength;
                        long dimIndex2 = 2 + limits.LongLength;

                        long opsOuter = @out.Shape.Dimensions[0 + limits.LongLength].Length;
                        long opsInner = @out.Shape.Dimensions[1 + limits.LongLength].Length;
                        long opsInnerInner = @out.Shape.Dimensions[2 + limits.LongLength].Length;

                        long outerStride1 = in1.Shape.Dimensions[dimIndex0].Stride;
                        long outerStride3 = @out.Shape.Dimensions[dimIndex0].Stride;

                        long innerStride1 = in1.Shape.Dimensions[dimIndex1].Stride;
                        long innerStride3 = @out.Shape.Dimensions[dimIndex1].Stride;

                        long innerInnerStride1 = in1.Shape.Dimensions[dimIndex2].Stride;
                        long innerInnerStride3 = @out.Shape.Dimensions[dimIndex2].Stride;

                        outerStride1 -= innerStride1 * in1.Shape.Dimensions[dimIndex1].Length;
                        outerStride3 -= innerStride3 * @out.Shape.Dimensions[dimIndex1].Length;

                        innerStride1 -= innerInnerStride1 * in1.Shape.Dimensions[dimIndex2].Length;
                        innerStride3 -= innerInnerStride3 * @out.Shape.Dimensions[dimIndex2].Length;

                        for (long outer = 0; outer < totalOps; outer++)
                        {
                            //Get the array offset for the first element in the outer dimension
                            long ix1 = in1.Shape[counters];
                            long ix3 = @out.Shape[counters];


                            for (long i = 0; i < opsOuter; i++)
                            {
                                for (long j = 0; j < opsInner; j++)
                                {
                                    for (long k = 0; k < opsInnerInner; k++)
                                    {
                                        d2[ix3] = (System.Int16)(d1[ix1]);
                                        ix1 += innerInnerStride1;
                                        ix3 += innerInnerStride3;
                                    }

                                    ix1 += innerStride1;
                                    ix3 += innerStride3;
                                }

                                ix1 += outerStride1;
                                ix3 += outerStride3;
                            }

                            if (counters.LongLength > 0)
                            {
                                //Basically a ripple carry adder
                                long p = counters.LongLength - 1;
                                while (++counters[p] == limits[p] && p > 0)
                                {
                                    counters[p] = 0;
                                    p--;
                                }
                            }
                        }
                    }
                }
            }
        }

        /// <summary>
        /// Unsafe implementation of applying a unary operation
        /// </summary>
        /// <typeparam name="C">The type of operation to perform</typeparam>
        /// <param name="op">The operation instance</param>
        /// <param name="scalar">The input scalar argument</param>
        /// <param name="out">The output target</param>
        internal static void UFunc_Op_Inner_Unary_Scalar_Flush_Int64_TypedImpl<C>(NumCIL.Int16.ToInt16 op, System.Int64 scalar, NdArray<System.Int16> @out)
            where C : IUnaryOp<System.Int64>
        {
            unsafe
            {
                using (var f2 = new Pinner(@out.DataAccessor))
                {
                    var d2 = (System.Int16*)f2.ptr;

                    if (@out.Shape.Dimensions.Length == 1)
                    {
                        long totalOps = @out.Shape.Dimensions[0].Length;
                        long ix2 = @out.Shape.Offset;
                        long stride2 = @out.Shape.Dimensions[0].Stride;

                        for (long i = 0; i < totalOps; i++)
                        {
                            d2[ix2] = (System.Int16)(scalar);
                            ix2 += stride2;
                        }
                    }
                    else if (@out.Shape.Dimensions.Length == 2)
                    {
                        long opsOuter = @out.Shape.Dimensions[0].Length;
                        long opsInner = @out.Shape.Dimensions[1].Length;

                        long ix2 = @out.Shape.Offset;
                        long outerStride2 = @out.Shape.Dimensions[0].Stride;
                        long innerStride2 = @out.Shape.Dimensions[1].Stride;
                        outerStride2 -= innerStride2 * @out.Shape.Dimensions[1].Length;

                        for (long i = 0; i < opsOuter; i++)
                        {
                            for (long j = 0; j < opsInner; j++)
                            {
                                d2[ix2] = (System.Int16)(scalar);
                                ix2 += innerStride2;
                            }

                            ix2 += outerStride2;
                        }
                    }
                    else
                    {
                        long n = @out.Shape.Dimensions.LongLength - 3;
                        long[] limits = @out.Shape.Dimensions.Where(x => n-- > 0).Select(x => x.Length).ToArray();
                        long[] counters = new long[limits.LongLength];

                        long totalOps = limits.LongLength == 0 ? 1 : limits.Aggregate<long>((a, b) => a * b);

                        //This chunck of variables are used to prevent repeated calculations of offsets
                        long dimIndex0 = 0 + limits.LongLength;
                        long dimIndex1 = 1 + limits.LongLength;
                        long dimIndex2 = 2 + limits.LongLength;

                        long opsOuter = @out.Shape.Dimensions[0 + limits.LongLength].Length;
                        long opsInner = @out.Shape.Dimensions[1 + limits.LongLength].Length;
                        long opsInnerInner = @out.Shape.Dimensions[2 + limits.LongLength].Length;

                        long outerStride3 = @out.Shape.Dimensions[dimIndex0].Stride;
                        long innerStride3 = @out.Shape.Dimensions[dimIndex1].Stride;
                        long innerInnerStride3 = @out.Shape.Dimensions[dimIndex2].Stride;
                        outerStride3 -= innerStride3 * @out.Shape.Dimensions[dimIndex1].Length;
                        innerStride3 -= innerInnerStride3 * @out.Shape.Dimensions[dimIndex2].Length;

                        for (long outer = 0; outer < totalOps; outer++)
                        {
                            //Get the array offset for the first element in the outer dimension
                            long ix3 = @out.Shape[counters];

                            for (long i = 0; i < opsOuter; i++)
                            {
                                for (long j = 0; j < opsInner; j++)
                                {
                                    for (long k = 0; k < opsInnerInner; k++)
                                    {
                                        d2[ix3] = (System.Int16)(scalar);
                                        ix3 += innerInnerStride3;
                                    }

                                    ix3 += innerStride3;
                                }

                                ix3 += outerStride3;
                            }

                            if (counters.LongLength > 0)
                            {
                                //Basically a ripple carry adder
                                long p = counters.LongLength - 1;
                                while (++counters[p] == limits[p] && p > 0)
                                {
                                    counters[p] = 0;
                                    p--;
                                }
                            }
                        }
                    }
                }
            }
        }
        /// <summary>
        /// Unsafe implementation of applying a unary operation
        /// </summary>
        /// <typeparam name="C">The type of operation to perform</typeparam>
        /// <param name="op">The operation instance</param>
        /// <param name="in1">The input argument</param>
        /// <param name="out">The output target</param>
        internal static void UFunc_Op_Inner_Unary_Flush_UInt64_TypedImpl<C>(NumCIL.Int16.ToInt16 op, NdArray<System.UInt64> in1, NdArray<System.Int16> @out)
            where C : IUnaryOp<System.UInt64>
        {
            unsafe
            {
                using (var f1 = new Pinner(in1.DataAccessor))
                using (var f2 = new Pinner(@out.DataAccessor))
                {
                    var d1 = (System.UInt64*)f1.ptr;
                    var d2 = (System.Int16*)f2.ptr;

                    if (@out.Shape.Dimensions.Length == 1)
                    {
                        long totalOps = @out.Shape.Dimensions[0].Length;

                        long ix1 = in1.Shape.Offset;
                        long ix2 = @out.Shape.Offset;

                        long stride1 = in1.Shape.Dimensions[0].Stride;
                        long stride2 = @out.Shape.Dimensions[0].Stride;


                        if (stride1 == stride2 && ix1 == ix2)
                        {
                            //Best case, all are equal, just keep a single counter
                            for (long i = 0; i < totalOps; i++)
                            {
                                d2[ix1] = (System.Int16)(d1[ix1]);
                                ix1 += stride1;
                            }
                        }
                        else
                        {
                            for (long i = 0; i < totalOps; i++)
                            {
                                d2[ix2] = (System.Int16)(d1[ix1]);
                                ix1 += stride1;
                                ix2 += stride2;
                            }
                        }
                    }
                    else if (@out.Shape.Dimensions.Length == 2)
                    {
                        long opsOuter = @out.Shape.Dimensions[0].Length;
                        long opsInner = @out.Shape.Dimensions[1].Length;

                        long ix1 = in1.Shape.Offset;
                        long ix2 = @out.Shape.Offset;

                        long outerStride1 = in1.Shape.Dimensions[0].Stride;
                        long outerStride2 = @out.Shape.Dimensions[0].Stride;

                        long innerStride1 = in1.Shape.Dimensions[1].Stride;
                        long innerStride2 = @out.Shape.Dimensions[1].Stride;

                        outerStride1 -= innerStride1 * in1.Shape.Dimensions[1].Length;
                        outerStride2 -= innerStride2 * @out.Shape.Dimensions[1].Length;

                        for (long i = 0; i < opsOuter; i++)
                        {
                            for (long j = 0; j < opsInner; j++)
                            {
                                d2[ix2] = (System.Int16)(d1[ix1]);
                                ix1 += innerStride1;
                                ix2 += innerStride2;
                            }

                            ix1 += outerStride1;
                            ix2 += outerStride2;
                        }
                    }
                    else
                    {
                        long n = in1.Shape.Dimensions.LongLength - 3;
                        long[] limits = in1.Shape.Dimensions.Where(x => n-- > 0).Select(x => x.Length).ToArray();
                        long[] counters = new long[limits.LongLength];

                        long totalOps = limits.LongLength == 0 ? 1 : limits.Aggregate<long>((a, b) => a * b);

                        //This chunck of variables are used to prevent repeated calculations of offsets
                        long dimIndex0 = 0 + limits.LongLength;
                        long dimIndex1 = 1 + limits.LongLength;
                        long dimIndex2 = 2 + limits.LongLength;

                        long opsOuter = @out.Shape.Dimensions[0 + limits.LongLength].Length;
                        long opsInner = @out.Shape.Dimensions[1 + limits.LongLength].Length;
                        long opsInnerInner = @out.Shape.Dimensions[2 + limits.LongLength].Length;

                        long outerStride1 = in1.Shape.Dimensions[dimIndex0].Stride;
                        long outerStride3 = @out.Shape.Dimensions[dimIndex0].Stride;

                        long innerStride1 = in1.Shape.Dimensions[dimIndex1].Stride;
                        long innerStride3 = @out.Shape.Dimensions[dimIndex1].Stride;

                        long innerInnerStride1 = in1.Shape.Dimensions[dimIndex2].Stride;
                        long innerInnerStride3 = @out.Shape.Dimensions[dimIndex2].Stride;

                        outerStride1 -= innerStride1 * in1.Shape.Dimensions[dimIndex1].Length;
                        outerStride3 -= innerStride3 * @out.Shape.Dimensions[dimIndex1].Length;

                        innerStride1 -= innerInnerStride1 * in1.Shape.Dimensions[dimIndex2].Length;
                        innerStride3 -= innerInnerStride3 * @out.Shape.Dimensions[dimIndex2].Length;

                        for (long outer = 0; outer < totalOps; outer++)
                        {
                            //Get the array offset for the first element in the outer dimension
                            long ix1 = in1.Shape[counters];
                            long ix3 = @out.Shape[counters];


                            for (long i = 0; i < opsOuter; i++)
                            {
                                for (long j = 0; j < opsInner; j++)
                                {
                                    for (long k = 0; k < opsInnerInner; k++)
                                    {
                                        d2[ix3] = (System.Int16)(d1[ix1]);
                                        ix1 += innerInnerStride1;
                                        ix3 += innerInnerStride3;
                                    }

                                    ix1 += innerStride1;
                                    ix3 += innerStride3;
                                }

                                ix1 += outerStride1;
                                ix3 += outerStride3;
                            }

                            if (counters.LongLength > 0)
                            {
                                //Basically a ripple carry adder
                                long p = counters.LongLength - 1;
                                while (++counters[p] == limits[p] && p > 0)
                                {
                                    counters[p] = 0;
                                    p--;
                                }
                            }
                        }
                    }
                }
            }
        }

        /// <summary>
        /// Unsafe implementation of applying a unary operation
        /// </summary>
        /// <typeparam name="C">The type of operation to perform</typeparam>
        /// <param name="op">The operation instance</param>
        /// <param name="scalar">The input scalar argument</param>
        /// <param name="out">The output target</param>
        internal static void UFunc_Op_Inner_Unary_Scalar_Flush_UInt64_TypedImpl<C>(NumCIL.Int16.ToInt16 op, System.UInt64 scalar, NdArray<System.Int16> @out)
            where C : IUnaryOp<System.UInt64>
        {
            unsafe
            {
                using (var f2 = new Pinner(@out.DataAccessor))
                {
                    var d2 = (System.Int16*)f2.ptr;

                    if (@out.Shape.Dimensions.Length == 1)
                    {
                        long totalOps = @out.Shape.Dimensions[0].Length;
                        long ix2 = @out.Shape.Offset;
                        long stride2 = @out.Shape.Dimensions[0].Stride;

                        for (long i = 0; i < totalOps; i++)
                        {
                            d2[ix2] = (System.Int16)(scalar);
                            ix2 += stride2;
                        }
                    }
                    else if (@out.Shape.Dimensions.Length == 2)
                    {
                        long opsOuter = @out.Shape.Dimensions[0].Length;
                        long opsInner = @out.Shape.Dimensions[1].Length;

                        long ix2 = @out.Shape.Offset;
                        long outerStride2 = @out.Shape.Dimensions[0].Stride;
                        long innerStride2 = @out.Shape.Dimensions[1].Stride;
                        outerStride2 -= innerStride2 * @out.Shape.Dimensions[1].Length;

                        for (long i = 0; i < opsOuter; i++)
                        {
                            for (long j = 0; j < opsInner; j++)
                            {
                                d2[ix2] = (System.Int16)(scalar);
                                ix2 += innerStride2;
                            }

                            ix2 += outerStride2;
                        }
                    }
                    else
                    {
                        long n = @out.Shape.Dimensions.LongLength - 3;
                        long[] limits = @out.Shape.Dimensions.Where(x => n-- > 0).Select(x => x.Length).ToArray();
                        long[] counters = new long[limits.LongLength];

                        long totalOps = limits.LongLength == 0 ? 1 : limits.Aggregate<long>((a, b) => a * b);

                        //This chunck of variables are used to prevent repeated calculations of offsets
                        long dimIndex0 = 0 + limits.LongLength;
                        long dimIndex1 = 1 + limits.LongLength;
                        long dimIndex2 = 2 + limits.LongLength;

                        long opsOuter = @out.Shape.Dimensions[0 + limits.LongLength].Length;
                        long opsInner = @out.Shape.Dimensions[1 + limits.LongLength].Length;
                        long opsInnerInner = @out.Shape.Dimensions[2 + limits.LongLength].Length;

                        long outerStride3 = @out.Shape.Dimensions[dimIndex0].Stride;
                        long innerStride3 = @out.Shape.Dimensions[dimIndex1].Stride;
                        long innerInnerStride3 = @out.Shape.Dimensions[dimIndex2].Stride;
                        outerStride3 -= innerStride3 * @out.Shape.Dimensions[dimIndex1].Length;
                        innerStride3 -= innerInnerStride3 * @out.Shape.Dimensions[dimIndex2].Length;

                        for (long outer = 0; outer < totalOps; outer++)
                        {
                            //Get the array offset for the first element in the outer dimension
                            long ix3 = @out.Shape[counters];

                            for (long i = 0; i < opsOuter; i++)
                            {
                                for (long j = 0; j < opsInner; j++)
                                {
                                    for (long k = 0; k < opsInnerInner; k++)
                                    {
                                        d2[ix3] = (System.Int16)(scalar);
                                        ix3 += innerInnerStride3;
                                    }

                                    ix3 += innerStride3;
                                }

                                ix3 += outerStride3;
                            }

                            if (counters.LongLength > 0)
                            {
                                //Basically a ripple carry adder
                                long p = counters.LongLength - 1;
                                while (++counters[p] == limits[p] && p > 0)
                                {
                                    counters[p] = 0;
                                    p--;
                                }
                            }
                        }
                    }
                }
            }
        }
        /// <summary>
        /// Unsafe implementation of applying a unary operation
        /// </summary>
        /// <typeparam name="C">The type of operation to perform</typeparam>
        /// <param name="op">The operation instance</param>
        /// <param name="in1">The input argument</param>
        /// <param name="out">The output target</param>
        internal static void UFunc_Op_Inner_Unary_Flush_Single_TypedImpl<C>(NumCIL.Int16.ToInt16 op, NdArray<System.Single> in1, NdArray<System.Int16> @out)
            where C : IUnaryOp<System.Single>
        {
            unsafe
            {
                using (var f1 = new Pinner(in1.DataAccessor))
                using (var f2 = new Pinner(@out.DataAccessor))
                {
                    var d1 = (System.Single*)f1.ptr;
                    var d2 = (System.Int16*)f2.ptr;

                    if (@out.Shape.Dimensions.Length == 1)
                    {
                        long totalOps = @out.Shape.Dimensions[0].Length;

                        long ix1 = in1.Shape.Offset;
                        long ix2 = @out.Shape.Offset;

                        long stride1 = in1.Shape.Dimensions[0].Stride;
                        long stride2 = @out.Shape.Dimensions[0].Stride;


                        if (stride1 == stride2 && ix1 == ix2)
                        {
                            //Best case, all are equal, just keep a single counter
                            for (long i = 0; i < totalOps; i++)
                            {
                                d2[ix1] = (System.Int16)(d1[ix1]);
                                ix1 += stride1;
                            }
                        }
                        else
                        {
                            for (long i = 0; i < totalOps; i++)
                            {
                                d2[ix2] = (System.Int16)(d1[ix1]);
                                ix1 += stride1;
                                ix2 += stride2;
                            }
                        }
                    }
                    else if (@out.Shape.Dimensions.Length == 2)
                    {
                        long opsOuter = @out.Shape.Dimensions[0].Length;
                        long opsInner = @out.Shape.Dimensions[1].Length;

                        long ix1 = in1.Shape.Offset;
                        long ix2 = @out.Shape.Offset;

                        long outerStride1 = in1.Shape.Dimensions[0].Stride;
                        long outerStride2 = @out.Shape.Dimensions[0].Stride;

                        long innerStride1 = in1.Shape.Dimensions[1].Stride;
                        long innerStride2 = @out.Shape.Dimensions[1].Stride;

                        outerStride1 -= innerStride1 * in1.Shape.Dimensions[1].Length;
                        outerStride2 -= innerStride2 * @out.Shape.Dimensions[1].Length;

                        for (long i = 0; i < opsOuter; i++)
                        {
                            for (long j = 0; j < opsInner; j++)
                            {
                                d2[ix2] = (System.Int16)(d1[ix1]);
                                ix1 += innerStride1;
                                ix2 += innerStride2;
                            }

                            ix1 += outerStride1;
                            ix2 += outerStride2;
                        }
                    }
                    else
                    {
                        long n = in1.Shape.Dimensions.LongLength - 3;
                        long[] limits = in1.Shape.Dimensions.Where(x => n-- > 0).Select(x => x.Length).ToArray();
                        long[] counters = new long[limits.LongLength];

                        long totalOps = limits.LongLength == 0 ? 1 : limits.Aggregate<long>((a, b) => a * b);

                        //This chunck of variables are used to prevent repeated calculations of offsets
                        long dimIndex0 = 0 + limits.LongLength;
                        long dimIndex1 = 1 + limits.LongLength;
                        long dimIndex2 = 2 + limits.LongLength;

                        long opsOuter = @out.Shape.Dimensions[0 + limits.LongLength].Length;
                        long opsInner = @out.Shape.Dimensions[1 + limits.LongLength].Length;
                        long opsInnerInner = @out.Shape.Dimensions[2 + limits.LongLength].Length;

                        long outerStride1 = in1.Shape.Dimensions[dimIndex0].Stride;
                        long outerStride3 = @out.Shape.Dimensions[dimIndex0].Stride;

                        long innerStride1 = in1.Shape.Dimensions[dimIndex1].Stride;
                        long innerStride3 = @out.Shape.Dimensions[dimIndex1].Stride;

                        long innerInnerStride1 = in1.Shape.Dimensions[dimIndex2].Stride;
                        long innerInnerStride3 = @out.Shape.Dimensions[dimIndex2].Stride;

                        outerStride1 -= innerStride1 * in1.Shape.Dimensions[dimIndex1].Length;
                        outerStride3 -= innerStride3 * @out.Shape.Dimensions[dimIndex1].Length;

                        innerStride1 -= innerInnerStride1 * in1.Shape.Dimensions[dimIndex2].Length;
                        innerStride3 -= innerInnerStride3 * @out.Shape.Dimensions[dimIndex2].Length;

                        for (long outer = 0; outer < totalOps; outer++)
                        {
                            //Get the array offset for the first element in the outer dimension
                            long ix1 = in1.Shape[counters];
                            long ix3 = @out.Shape[counters];


                            for (long i = 0; i < opsOuter; i++)
                            {
                                for (long j = 0; j < opsInner; j++)
                                {
                                    for (long k = 0; k < opsInnerInner; k++)
                                    {
                                        d2[ix3] = (System.Int16)(d1[ix1]);
                                        ix1 += innerInnerStride1;
                                        ix3 += innerInnerStride3;
                                    }

                                    ix1 += innerStride1;
                                    ix3 += innerStride3;
                                }

                                ix1 += outerStride1;
                                ix3 += outerStride3;
                            }

                            if (counters.LongLength > 0)
                            {
                                //Basically a ripple carry adder
                                long p = counters.LongLength - 1;
                                while (++counters[p] == limits[p] && p > 0)
                                {
                                    counters[p] = 0;
                                    p--;
                                }
                            }
                        }
                    }
                }
            }
        }

        /// <summary>
        /// Unsafe implementation of applying a unary operation
        /// </summary>
        /// <typeparam name="C">The type of operation to perform</typeparam>
        /// <param name="op">The operation instance</param>
        /// <param name="scalar">The input scalar argument</param>
        /// <param name="out">The output target</param>
        internal static void UFunc_Op_Inner_Unary_Scalar_Flush_Single_TypedImpl<C>(NumCIL.Int16.ToInt16 op, System.Single scalar, NdArray<System.Int16> @out)
            where C : IUnaryOp<System.Single>
        {
            unsafe
            {
                using (var f2 = new Pinner(@out.DataAccessor))
                {
                    var d2 = (System.Int16*)f2.ptr;

                    if (@out.Shape.Dimensions.Length == 1)
                    {
                        long totalOps = @out.Shape.Dimensions[0].Length;
                        long ix2 = @out.Shape.Offset;
                        long stride2 = @out.Shape.Dimensions[0].Stride;

                        for (long i = 0; i < totalOps; i++)
                        {
                            d2[ix2] = (System.Int16)(scalar);
                            ix2 += stride2;
                        }
                    }
                    else if (@out.Shape.Dimensions.Length == 2)
                    {
                        long opsOuter = @out.Shape.Dimensions[0].Length;
                        long opsInner = @out.Shape.Dimensions[1].Length;

                        long ix2 = @out.Shape.Offset;
                        long outerStride2 = @out.Shape.Dimensions[0].Stride;
                        long innerStride2 = @out.Shape.Dimensions[1].Stride;
                        outerStride2 -= innerStride2 * @out.Shape.Dimensions[1].Length;

                        for (long i = 0; i < opsOuter; i++)
                        {
                            for (long j = 0; j < opsInner; j++)
                            {
                                d2[ix2] = (System.Int16)(scalar);
                                ix2 += innerStride2;
                            }

                            ix2 += outerStride2;
                        }
                    }
                    else
                    {
                        long n = @out.Shape.Dimensions.LongLength - 3;
                        long[] limits = @out.Shape.Dimensions.Where(x => n-- > 0).Select(x => x.Length).ToArray();
                        long[] counters = new long[limits.LongLength];

                        long totalOps = limits.LongLength == 0 ? 1 : limits.Aggregate<long>((a, b) => a * b);

                        //This chunck of variables are used to prevent repeated calculations of offsets
                        long dimIndex0 = 0 + limits.LongLength;
                        long dimIndex1 = 1 + limits.LongLength;
                        long dimIndex2 = 2 + limits.LongLength;

                        long opsOuter = @out.Shape.Dimensions[0 + limits.LongLength].Length;
                        long opsInner = @out.Shape.Dimensions[1 + limits.LongLength].Length;
                        long opsInnerInner = @out.Shape.Dimensions[2 + limits.LongLength].Length;

                        long outerStride3 = @out.Shape.Dimensions[dimIndex0].Stride;
                        long innerStride3 = @out.Shape.Dimensions[dimIndex1].Stride;
                        long innerInnerStride3 = @out.Shape.Dimensions[dimIndex2].Stride;
                        outerStride3 -= innerStride3 * @out.Shape.Dimensions[dimIndex1].Length;
                        innerStride3 -= innerInnerStride3 * @out.Shape.Dimensions[dimIndex2].Length;

                        for (long outer = 0; outer < totalOps; outer++)
                        {
                            //Get the array offset for the first element in the outer dimension
                            long ix3 = @out.Shape[counters];

                            for (long i = 0; i < opsOuter; i++)
                            {
                                for (long j = 0; j < opsInner; j++)
                                {
                                    for (long k = 0; k < opsInnerInner; k++)
                                    {
                                        d2[ix3] = (System.Int16)(scalar);
                                        ix3 += innerInnerStride3;
                                    }

                                    ix3 += innerStride3;
                                }

                                ix3 += outerStride3;
                            }

                            if (counters.LongLength > 0)
                            {
                                //Basically a ripple carry adder
                                long p = counters.LongLength - 1;
                                while (++counters[p] == limits[p] && p > 0)
                                {
                                    counters[p] = 0;
                                    p--;
                                }
                            }
                        }
                    }
                }
            }
        }
        /// <summary>
        /// Unsafe implementation of applying a unary operation
        /// </summary>
        /// <typeparam name="C">The type of operation to perform</typeparam>
        /// <param name="op">The operation instance</param>
        /// <param name="in1">The input argument</param>
        /// <param name="out">The output target</param>
        internal static void UFunc_Op_Inner_Unary_Flush_Double_TypedImpl<C>(NumCIL.Int16.ToInt16 op, NdArray<System.Double> in1, NdArray<System.Int16> @out)
            where C : IUnaryOp<System.Double>
        {
            unsafe
            {
                using (var f1 = new Pinner(in1.DataAccessor))
                using (var f2 = new Pinner(@out.DataAccessor))
                {
                    var d1 = (System.Double*)f1.ptr;
                    var d2 = (System.Int16*)f2.ptr;

                    if (@out.Shape.Dimensions.Length == 1)
                    {
                        long totalOps = @out.Shape.Dimensions[0].Length;

                        long ix1 = in1.Shape.Offset;
                        long ix2 = @out.Shape.Offset;

                        long stride1 = in1.Shape.Dimensions[0].Stride;
                        long stride2 = @out.Shape.Dimensions[0].Stride;


                        if (stride1 == stride2 && ix1 == ix2)
                        {
                            //Best case, all are equal, just keep a single counter
                            for (long i = 0; i < totalOps; i++)
                            {
                                d2[ix1] = (System.Int16)(d1[ix1]);
                                ix1 += stride1;
                            }
                        }
                        else
                        {
                            for (long i = 0; i < totalOps; i++)
                            {
                                d2[ix2] = (System.Int16)(d1[ix1]);
                                ix1 += stride1;
                                ix2 += stride2;
                            }
                        }
                    }
                    else if (@out.Shape.Dimensions.Length == 2)
                    {
                        long opsOuter = @out.Shape.Dimensions[0].Length;
                        long opsInner = @out.Shape.Dimensions[1].Length;

                        long ix1 = in1.Shape.Offset;
                        long ix2 = @out.Shape.Offset;

                        long outerStride1 = in1.Shape.Dimensions[0].Stride;
                        long outerStride2 = @out.Shape.Dimensions[0].Stride;

                        long innerStride1 = in1.Shape.Dimensions[1].Stride;
                        long innerStride2 = @out.Shape.Dimensions[1].Stride;

                        outerStride1 -= innerStride1 * in1.Shape.Dimensions[1].Length;
                        outerStride2 -= innerStride2 * @out.Shape.Dimensions[1].Length;

                        for (long i = 0; i < opsOuter; i++)
                        {
                            for (long j = 0; j < opsInner; j++)
                            {
                                d2[ix2] = (System.Int16)(d1[ix1]);
                                ix1 += innerStride1;
                                ix2 += innerStride2;
                            }

                            ix1 += outerStride1;
                            ix2 += outerStride2;
                        }
                    }
                    else
                    {
                        long n = in1.Shape.Dimensions.LongLength - 3;
                        long[] limits = in1.Shape.Dimensions.Where(x => n-- > 0).Select(x => x.Length).ToArray();
                        long[] counters = new long[limits.LongLength];

                        long totalOps = limits.LongLength == 0 ? 1 : limits.Aggregate<long>((a, b) => a * b);

                        //This chunck of variables are used to prevent repeated calculations of offsets
                        long dimIndex0 = 0 + limits.LongLength;
                        long dimIndex1 = 1 + limits.LongLength;
                        long dimIndex2 = 2 + limits.LongLength;

                        long opsOuter = @out.Shape.Dimensions[0 + limits.LongLength].Length;
                        long opsInner = @out.Shape.Dimensions[1 + limits.LongLength].Length;
                        long opsInnerInner = @out.Shape.Dimensions[2 + limits.LongLength].Length;

                        long outerStride1 = in1.Shape.Dimensions[dimIndex0].Stride;
                        long outerStride3 = @out.Shape.Dimensions[dimIndex0].Stride;

                        long innerStride1 = in1.Shape.Dimensions[dimIndex1].Stride;
                        long innerStride3 = @out.Shape.Dimensions[dimIndex1].Stride;

                        long innerInnerStride1 = in1.Shape.Dimensions[dimIndex2].Stride;
                        long innerInnerStride3 = @out.Shape.Dimensions[dimIndex2].Stride;

                        outerStride1 -= innerStride1 * in1.Shape.Dimensions[dimIndex1].Length;
                        outerStride3 -= innerStride3 * @out.Shape.Dimensions[dimIndex1].Length;

                        innerStride1 -= innerInnerStride1 * in1.Shape.Dimensions[dimIndex2].Length;
                        innerStride3 -= innerInnerStride3 * @out.Shape.Dimensions[dimIndex2].Length;

                        for (long outer = 0; outer < totalOps; outer++)
                        {
                            //Get the array offset for the first element in the outer dimension
                            long ix1 = in1.Shape[counters];
                            long ix3 = @out.Shape[counters];


                            for (long i = 0; i < opsOuter; i++)
                            {
                                for (long j = 0; j < opsInner; j++)
                                {
                                    for (long k = 0; k < opsInnerInner; k++)
                                    {
                                        d2[ix3] = (System.Int16)(d1[ix1]);
                                        ix1 += innerInnerStride1;
                                        ix3 += innerInnerStride3;
                                    }

                                    ix1 += innerStride1;
                                    ix3 += innerStride3;
                                }

                                ix1 += outerStride1;
                                ix3 += outerStride3;
                            }

                            if (counters.LongLength > 0)
                            {
                                //Basically a ripple carry adder
                                long p = counters.LongLength - 1;
                                while (++counters[p] == limits[p] && p > 0)
                                {
                                    counters[p] = 0;
                                    p--;
                                }
                            }
                        }
                    }
                }
            }
        }

        /// <summary>
        /// Unsafe implementation of applying a unary operation
        /// </summary>
        /// <typeparam name="C">The type of operation to perform</typeparam>
        /// <param name="op">The operation instance</param>
        /// <param name="scalar">The input scalar argument</param>
        /// <param name="out">The output target</param>
        internal static void UFunc_Op_Inner_Unary_Scalar_Flush_Double_TypedImpl<C>(NumCIL.Int16.ToInt16 op, System.Double scalar, NdArray<System.Int16> @out)
            where C : IUnaryOp<System.Double>
        {
            unsafe
            {
                using (var f2 = new Pinner(@out.DataAccessor))
                {
                    var d2 = (System.Int16*)f2.ptr;

                    if (@out.Shape.Dimensions.Length == 1)
                    {
                        long totalOps = @out.Shape.Dimensions[0].Length;
                        long ix2 = @out.Shape.Offset;
                        long stride2 = @out.Shape.Dimensions[0].Stride;

                        for (long i = 0; i < totalOps; i++)
                        {
                            d2[ix2] = (System.Int16)(scalar);
                            ix2 += stride2;
                        }
                    }
                    else if (@out.Shape.Dimensions.Length == 2)
                    {
                        long opsOuter = @out.Shape.Dimensions[0].Length;
                        long opsInner = @out.Shape.Dimensions[1].Length;

                        long ix2 = @out.Shape.Offset;
                        long outerStride2 = @out.Shape.Dimensions[0].Stride;
                        long innerStride2 = @out.Shape.Dimensions[1].Stride;
                        outerStride2 -= innerStride2 * @out.Shape.Dimensions[1].Length;

                        for (long i = 0; i < opsOuter; i++)
                        {
                            for (long j = 0; j < opsInner; j++)
                            {
                                d2[ix2] = (System.Int16)(scalar);
                                ix2 += innerStride2;
                            }

                            ix2 += outerStride2;
                        }
                    }
                    else
                    {
                        long n = @out.Shape.Dimensions.LongLength - 3;
                        long[] limits = @out.Shape.Dimensions.Where(x => n-- > 0).Select(x => x.Length).ToArray();
                        long[] counters = new long[limits.LongLength];

                        long totalOps = limits.LongLength == 0 ? 1 : limits.Aggregate<long>((a, b) => a * b);

                        //This chunck of variables are used to prevent repeated calculations of offsets
                        long dimIndex0 = 0 + limits.LongLength;
                        long dimIndex1 = 1 + limits.LongLength;
                        long dimIndex2 = 2 + limits.LongLength;

                        long opsOuter = @out.Shape.Dimensions[0 + limits.LongLength].Length;
                        long opsInner = @out.Shape.Dimensions[1 + limits.LongLength].Length;
                        long opsInnerInner = @out.Shape.Dimensions[2 + limits.LongLength].Length;

                        long outerStride3 = @out.Shape.Dimensions[dimIndex0].Stride;
                        long innerStride3 = @out.Shape.Dimensions[dimIndex1].Stride;
                        long innerInnerStride3 = @out.Shape.Dimensions[dimIndex2].Stride;
                        outerStride3 -= innerStride3 * @out.Shape.Dimensions[dimIndex1].Length;
                        innerStride3 -= innerInnerStride3 * @out.Shape.Dimensions[dimIndex2].Length;

                        for (long outer = 0; outer < totalOps; outer++)
                        {
                            //Get the array offset for the first element in the outer dimension
                            long ix3 = @out.Shape[counters];

                            for (long i = 0; i < opsOuter; i++)
                            {
                                for (long j = 0; j < opsInner; j++)
                                {
                                    for (long k = 0; k < opsInnerInner; k++)
                                    {
                                        d2[ix3] = (System.Int16)(scalar);
                                        ix3 += innerInnerStride3;
                                    }

                                    ix3 += innerStride3;
                                }

                                ix3 += outerStride3;
                            }

                            if (counters.LongLength > 0)
                            {
                                //Basically a ripple carry adder
                                long p = counters.LongLength - 1;
                                while (++counters[p] == limits[p] && p > 0)
                                {
                                    counters[p] = 0;
                                    p--;
                                }
                            }
                        }
                    }
                }
            }
        }
        /// <summary>
        /// Unsafe implementation of applying a unary operation
        /// </summary>
        /// <typeparam name="C">The type of operation to perform</typeparam>
        /// <param name="op">The operation instance</param>
        /// <param name="in1">The input argument</param>
        /// <param name="out">The output target</param>
        internal static void UFunc_Op_Inner_Unary_Flush_Boolean_TypedImpl<C>(NumCIL.Boolean.ToInt16 op, NdArray<System.Boolean> in1, NdArray<System.Int16> @out)
            where C : IUnaryOp<System.Boolean>
        {
            unsafe
            {
                using (var f1 = new Pinner(in1.DataAccessor))
                using (var f2 = new Pinner(@out.DataAccessor))
                {
                    var d1 = (System.Boolean*)f1.ptr;
                    var d2 = (System.Int16*)f2.ptr;

                    if (@out.Shape.Dimensions.Length == 1)
                    {
                        long totalOps = @out.Shape.Dimensions[0].Length;

                        long ix1 = in1.Shape.Offset;
                        long ix2 = @out.Shape.Offset;

                        long stride1 = in1.Shape.Dimensions[0].Stride;
                        long stride2 = @out.Shape.Dimensions[0].Stride;


                        if (stride1 == stride2 && ix1 == ix2)
                        {
                            //Best case, all are equal, just keep a single counter
                            for (long i = 0; i < totalOps; i++)
                            {
                                d2[ix1] = (System.Int16)(d1[ix1] ? 1 : 0 );
                                ix1 += stride1;
                            }
                        }
                        else
                        {
                            for (long i = 0; i < totalOps; i++)
                            {
                                d2[ix2] = (System.Int16)(d1[ix1] ? 1 : 0 );
                                ix1 += stride1;
                                ix2 += stride2;
                            }
                        }
                    }
                    else if (@out.Shape.Dimensions.Length == 2)
                    {
                        long opsOuter = @out.Shape.Dimensions[0].Length;
                        long opsInner = @out.Shape.Dimensions[1].Length;

                        long ix1 = in1.Shape.Offset;
                        long ix2 = @out.Shape.Offset;

                        long outerStride1 = in1.Shape.Dimensions[0].Stride;
                        long outerStride2 = @out.Shape.Dimensions[0].Stride;

                        long innerStride1 = in1.Shape.Dimensions[1].Stride;
                        long innerStride2 = @out.Shape.Dimensions[1].Stride;

                        outerStride1 -= innerStride1 * in1.Shape.Dimensions[1].Length;
                        outerStride2 -= innerStride2 * @out.Shape.Dimensions[1].Length;

                        for (long i = 0; i < opsOuter; i++)
                        {
                            for (long j = 0; j < opsInner; j++)
                            {
                                d2[ix2] = (System.Int16)(d1[ix1] ? 1 : 0 );
                                ix1 += innerStride1;
                                ix2 += innerStride2;
                            }

                            ix1 += outerStride1;
                            ix2 += outerStride2;
                        }
                    }
                    else
                    {
                        long n = in1.Shape.Dimensions.LongLength - 3;
                        long[] limits = in1.Shape.Dimensions.Where(x => n-- > 0).Select(x => x.Length).ToArray();
                        long[] counters = new long[limits.LongLength];

                        long totalOps = limits.LongLength == 0 ? 1 : limits.Aggregate<long>((a, b) => a * b);

                        //This chunck of variables are used to prevent repeated calculations of offsets
                        long dimIndex0 = 0 + limits.LongLength;
                        long dimIndex1 = 1 + limits.LongLength;
                        long dimIndex2 = 2 + limits.LongLength;

                        long opsOuter = @out.Shape.Dimensions[0 + limits.LongLength].Length;
                        long opsInner = @out.Shape.Dimensions[1 + limits.LongLength].Length;
                        long opsInnerInner = @out.Shape.Dimensions[2 + limits.LongLength].Length;

                        long outerStride1 = in1.Shape.Dimensions[dimIndex0].Stride;
                        long outerStride3 = @out.Shape.Dimensions[dimIndex0].Stride;

                        long innerStride1 = in1.Shape.Dimensions[dimIndex1].Stride;
                        long innerStride3 = @out.Shape.Dimensions[dimIndex1].Stride;

                        long innerInnerStride1 = in1.Shape.Dimensions[dimIndex2].Stride;
                        long innerInnerStride3 = @out.Shape.Dimensions[dimIndex2].Stride;

                        outerStride1 -= innerStride1 * in1.Shape.Dimensions[dimIndex1].Length;
                        outerStride3 -= innerStride3 * @out.Shape.Dimensions[dimIndex1].Length;

                        innerStride1 -= innerInnerStride1 * in1.Shape.Dimensions[dimIndex2].Length;
                        innerStride3 -= innerInnerStride3 * @out.Shape.Dimensions[dimIndex2].Length;

                        for (long outer = 0; outer < totalOps; outer++)
                        {
                            //Get the array offset for the first element in the outer dimension
                            long ix1 = in1.Shape[counters];
                            long ix3 = @out.Shape[counters];


                            for (long i = 0; i < opsOuter; i++)
                            {
                                for (long j = 0; j < opsInner; j++)
                                {
                                    for (long k = 0; k < opsInnerInner; k++)
                                    {
                                        d2[ix3] = (System.Int16)(d1[ix1] ? 1 : 0 );
                                        ix1 += innerInnerStride1;
                                        ix3 += innerInnerStride3;
                                    }

                                    ix1 += innerStride1;
                                    ix3 += innerStride3;
                                }

                                ix1 += outerStride1;
                                ix3 += outerStride3;
                            }

                            if (counters.LongLength > 0)
                            {
                                //Basically a ripple carry adder
                                long p = counters.LongLength - 1;
                                while (++counters[p] == limits[p] && p > 0)
                                {
                                    counters[p] = 0;
                                    p--;
                                }
                            }
                        }
                    }
                }
            }
        }

        /// <summary>
        /// Unsafe implementation of applying a unary operation
        /// </summary>
        /// <typeparam name="C">The type of operation to perform</typeparam>
        /// <param name="op">The operation instance</param>
        /// <param name="scalar">The input scalar argument</param>
        /// <param name="out">The output target</param>
        internal static void UFunc_Op_Inner_Unary_Scalar_Flush_Boolean_TypedImpl<C>(NumCIL.Boolean.ToInt16 op, System.Boolean scalar, NdArray<System.Int16> @out)
            where C : IUnaryOp<System.Boolean>
        {
            unsafe
            {
                using (var f2 = new Pinner(@out.DataAccessor))
                {
                    var d2 = (System.Int16*)f2.ptr;

                    if (@out.Shape.Dimensions.Length == 1)
                    {
                        long totalOps = @out.Shape.Dimensions[0].Length;
                        long ix2 = @out.Shape.Offset;
                        long stride2 = @out.Shape.Dimensions[0].Stride;

                        for (long i = 0; i < totalOps; i++)
                        {
                            d2[ix2] = (System.Int16)(scalar ? 1 : 0 );
                            ix2 += stride2;
                        }
                    }
                    else if (@out.Shape.Dimensions.Length == 2)
                    {
                        long opsOuter = @out.Shape.Dimensions[0].Length;
                        long opsInner = @out.Shape.Dimensions[1].Length;

                        long ix2 = @out.Shape.Offset;
                        long outerStride2 = @out.Shape.Dimensions[0].Stride;
                        long innerStride2 = @out.Shape.Dimensions[1].Stride;
                        outerStride2 -= innerStride2 * @out.Shape.Dimensions[1].Length;

                        for (long i = 0; i < opsOuter; i++)
                        {
                            for (long j = 0; j < opsInner; j++)
                            {
                                d2[ix2] = (System.Int16)(scalar ? 1 : 0 );
                                ix2 += innerStride2;
                            }

                            ix2 += outerStride2;
                        }
                    }
                    else
                    {
                        long n = @out.Shape.Dimensions.LongLength - 3;
                        long[] limits = @out.Shape.Dimensions.Where(x => n-- > 0).Select(x => x.Length).ToArray();
                        long[] counters = new long[limits.LongLength];

                        long totalOps = limits.LongLength == 0 ? 1 : limits.Aggregate<long>((a, b) => a * b);

                        //This chunck of variables are used to prevent repeated calculations of offsets
                        long dimIndex0 = 0 + limits.LongLength;
                        long dimIndex1 = 1 + limits.LongLength;
                        long dimIndex2 = 2 + limits.LongLength;

                        long opsOuter = @out.Shape.Dimensions[0 + limits.LongLength].Length;
                        long opsInner = @out.Shape.Dimensions[1 + limits.LongLength].Length;
                        long opsInnerInner = @out.Shape.Dimensions[2 + limits.LongLength].Length;

                        long outerStride3 = @out.Shape.Dimensions[dimIndex0].Stride;
                        long innerStride3 = @out.Shape.Dimensions[dimIndex1].Stride;
                        long innerInnerStride3 = @out.Shape.Dimensions[dimIndex2].Stride;
                        outerStride3 -= innerStride3 * @out.Shape.Dimensions[dimIndex1].Length;
                        innerStride3 -= innerInnerStride3 * @out.Shape.Dimensions[dimIndex2].Length;

                        for (long outer = 0; outer < totalOps; outer++)
                        {
                            //Get the array offset for the first element in the outer dimension
                            long ix3 = @out.Shape[counters];

                            for (long i = 0; i < opsOuter; i++)
                            {
                                for (long j = 0; j < opsInner; j++)
                                {
                                    for (long k = 0; k < opsInnerInner; k++)
                                    {
                                        d2[ix3] = (System.Int16)(scalar ? 1 : 0 );
                                        ix3 += innerInnerStride3;
                                    }

                                    ix3 += innerStride3;
                                }

                                ix3 += outerStride3;
                            }

                            if (counters.LongLength > 0)
                            {
                                //Basically a ripple carry adder
                                long p = counters.LongLength - 1;
                                while (++counters[p] == limits[p] && p > 0)
                                {
                                    counters[p] = 0;
                                    p--;
                                }
                            }
                        }
                    }
                }
            }
        }
        /// <summary>
        /// Unsafe implementation of applying a unary operation
        /// </summary>
        /// <typeparam name="C">The type of operation to perform</typeparam>
        /// <param name="op">The operation instance</param>
        /// <param name="in1">The input argument</param>
        /// <param name="out">The output target</param>
        internal static void UFunc_Op_Inner_Unary_Flush_SByte_TypedImpl<C>(NumCIL.UInt16.ToUInt16 op, NdArray<System.SByte> in1, NdArray<System.UInt16> @out)
            where C : IUnaryOp<System.SByte>
        {
            unsafe
            {
                using (var f1 = new Pinner(in1.DataAccessor))
                using (var f2 = new Pinner(@out.DataAccessor))
                {
                    var d1 = (System.SByte*)f1.ptr;
                    var d2 = (System.UInt16*)f2.ptr;

                    if (@out.Shape.Dimensions.Length == 1)
                    {
                        long totalOps = @out.Shape.Dimensions[0].Length;

                        long ix1 = in1.Shape.Offset;
                        long ix2 = @out.Shape.Offset;

                        long stride1 = in1.Shape.Dimensions[0].Stride;
                        long stride2 = @out.Shape.Dimensions[0].Stride;


                        if (stride1 == stride2 && ix1 == ix2)
                        {
                            //Best case, all are equal, just keep a single counter
                            for (long i = 0; i < totalOps; i++)
                            {
                                d2[ix1] = (System.UInt16)(d1[ix1]);
                                ix1 += stride1;
                            }
                        }
                        else
                        {
                            for (long i = 0; i < totalOps; i++)
                            {
                                d2[ix2] = (System.UInt16)(d1[ix1]);
                                ix1 += stride1;
                                ix2 += stride2;
                            }
                        }
                    }
                    else if (@out.Shape.Dimensions.Length == 2)
                    {
                        long opsOuter = @out.Shape.Dimensions[0].Length;
                        long opsInner = @out.Shape.Dimensions[1].Length;

                        long ix1 = in1.Shape.Offset;
                        long ix2 = @out.Shape.Offset;

                        long outerStride1 = in1.Shape.Dimensions[0].Stride;
                        long outerStride2 = @out.Shape.Dimensions[0].Stride;

                        long innerStride1 = in1.Shape.Dimensions[1].Stride;
                        long innerStride2 = @out.Shape.Dimensions[1].Stride;

                        outerStride1 -= innerStride1 * in1.Shape.Dimensions[1].Length;
                        outerStride2 -= innerStride2 * @out.Shape.Dimensions[1].Length;

                        for (long i = 0; i < opsOuter; i++)
                        {
                            for (long j = 0; j < opsInner; j++)
                            {
                                d2[ix2] = (System.UInt16)(d1[ix1]);
                                ix1 += innerStride1;
                                ix2 += innerStride2;
                            }

                            ix1 += outerStride1;
                            ix2 += outerStride2;
                        }
                    }
                    else
                    {
                        long n = in1.Shape.Dimensions.LongLength - 3;
                        long[] limits = in1.Shape.Dimensions.Where(x => n-- > 0).Select(x => x.Length).ToArray();
                        long[] counters = new long[limits.LongLength];

                        long totalOps = limits.LongLength == 0 ? 1 : limits.Aggregate<long>((a, b) => a * b);

                        //This chunck of variables are used to prevent repeated calculations of offsets
                        long dimIndex0 = 0 + limits.LongLength;
                        long dimIndex1 = 1 + limits.LongLength;
                        long dimIndex2 = 2 + limits.LongLength;

                        long opsOuter = @out.Shape.Dimensions[0 + limits.LongLength].Length;
                        long opsInner = @out.Shape.Dimensions[1 + limits.LongLength].Length;
                        long opsInnerInner = @out.Shape.Dimensions[2 + limits.LongLength].Length;

                        long outerStride1 = in1.Shape.Dimensions[dimIndex0].Stride;
                        long outerStride3 = @out.Shape.Dimensions[dimIndex0].Stride;

                        long innerStride1 = in1.Shape.Dimensions[dimIndex1].Stride;
                        long innerStride3 = @out.Shape.Dimensions[dimIndex1].Stride;

                        long innerInnerStride1 = in1.Shape.Dimensions[dimIndex2].Stride;
                        long innerInnerStride3 = @out.Shape.Dimensions[dimIndex2].Stride;

                        outerStride1 -= innerStride1 * in1.Shape.Dimensions[dimIndex1].Length;
                        outerStride3 -= innerStride3 * @out.Shape.Dimensions[dimIndex1].Length;

                        innerStride1 -= innerInnerStride1 * in1.Shape.Dimensions[dimIndex2].Length;
                        innerStride3 -= innerInnerStride3 * @out.Shape.Dimensions[dimIndex2].Length;

                        for (long outer = 0; outer < totalOps; outer++)
                        {
                            //Get the array offset for the first element in the outer dimension
                            long ix1 = in1.Shape[counters];
                            long ix3 = @out.Shape[counters];


                            for (long i = 0; i < opsOuter; i++)
                            {
                                for (long j = 0; j < opsInner; j++)
                                {
                                    for (long k = 0; k < opsInnerInner; k++)
                                    {
                                        d2[ix3] = (System.UInt16)(d1[ix1]);
                                        ix1 += innerInnerStride1;
                                        ix3 += innerInnerStride3;
                                    }

                                    ix1 += innerStride1;
                                    ix3 += innerStride3;
                                }

                                ix1 += outerStride1;
                                ix3 += outerStride3;
                            }

                            if (counters.LongLength > 0)
                            {
                                //Basically a ripple carry adder
                                long p = counters.LongLength - 1;
                                while (++counters[p] == limits[p] && p > 0)
                                {
                                    counters[p] = 0;
                                    p--;
                                }
                            }
                        }
                    }
                }
            }
        }

        /// <summary>
        /// Unsafe implementation of applying a unary operation
        /// </summary>
        /// <typeparam name="C">The type of operation to perform</typeparam>
        /// <param name="op">The operation instance</param>
        /// <param name="scalar">The input scalar argument</param>
        /// <param name="out">The output target</param>
        internal static void UFunc_Op_Inner_Unary_Scalar_Flush_SByte_TypedImpl<C>(NumCIL.UInt16.ToUInt16 op, System.SByte scalar, NdArray<System.UInt16> @out)
            where C : IUnaryOp<System.SByte>
        {
            unsafe
            {
                using (var f2 = new Pinner(@out.DataAccessor))
                {
                    var d2 = (System.UInt16*)f2.ptr;

                    if (@out.Shape.Dimensions.Length == 1)
                    {
                        long totalOps = @out.Shape.Dimensions[0].Length;
                        long ix2 = @out.Shape.Offset;
                        long stride2 = @out.Shape.Dimensions[0].Stride;

                        for (long i = 0; i < totalOps; i++)
                        {
                            d2[ix2] = (System.UInt16)(scalar);
                            ix2 += stride2;
                        }
                    }
                    else if (@out.Shape.Dimensions.Length == 2)
                    {
                        long opsOuter = @out.Shape.Dimensions[0].Length;
                        long opsInner = @out.Shape.Dimensions[1].Length;

                        long ix2 = @out.Shape.Offset;
                        long outerStride2 = @out.Shape.Dimensions[0].Stride;
                        long innerStride2 = @out.Shape.Dimensions[1].Stride;
                        outerStride2 -= innerStride2 * @out.Shape.Dimensions[1].Length;

                        for (long i = 0; i < opsOuter; i++)
                        {
                            for (long j = 0; j < opsInner; j++)
                            {
                                d2[ix2] = (System.UInt16)(scalar);
                                ix2 += innerStride2;
                            }

                            ix2 += outerStride2;
                        }
                    }
                    else
                    {
                        long n = @out.Shape.Dimensions.LongLength - 3;
                        long[] limits = @out.Shape.Dimensions.Where(x => n-- > 0).Select(x => x.Length).ToArray();
                        long[] counters = new long[limits.LongLength];

                        long totalOps = limits.LongLength == 0 ? 1 : limits.Aggregate<long>((a, b) => a * b);

                        //This chunck of variables are used to prevent repeated calculations of offsets
                        long dimIndex0 = 0 + limits.LongLength;
                        long dimIndex1 = 1 + limits.LongLength;
                        long dimIndex2 = 2 + limits.LongLength;

                        long opsOuter = @out.Shape.Dimensions[0 + limits.LongLength].Length;
                        long opsInner = @out.Shape.Dimensions[1 + limits.LongLength].Length;
                        long opsInnerInner = @out.Shape.Dimensions[2 + limits.LongLength].Length;

                        long outerStride3 = @out.Shape.Dimensions[dimIndex0].Stride;
                        long innerStride3 = @out.Shape.Dimensions[dimIndex1].Stride;
                        long innerInnerStride3 = @out.Shape.Dimensions[dimIndex2].Stride;
                        outerStride3 -= innerStride3 * @out.Shape.Dimensions[dimIndex1].Length;
                        innerStride3 -= innerInnerStride3 * @out.Shape.Dimensions[dimIndex2].Length;

                        for (long outer = 0; outer < totalOps; outer++)
                        {
                            //Get the array offset for the first element in the outer dimension
                            long ix3 = @out.Shape[counters];

                            for (long i = 0; i < opsOuter; i++)
                            {
                                for (long j = 0; j < opsInner; j++)
                                {
                                    for (long k = 0; k < opsInnerInner; k++)
                                    {
                                        d2[ix3] = (System.UInt16)(scalar);
                                        ix3 += innerInnerStride3;
                                    }

                                    ix3 += innerStride3;
                                }

                                ix3 += outerStride3;
                            }

                            if (counters.LongLength > 0)
                            {
                                //Basically a ripple carry adder
                                long p = counters.LongLength - 1;
                                while (++counters[p] == limits[p] && p > 0)
                                {
                                    counters[p] = 0;
                                    p--;
                                }
                            }
                        }
                    }
                }
            }
        }
        /// <summary>
        /// Unsafe implementation of applying a unary operation
        /// </summary>
        /// <typeparam name="C">The type of operation to perform</typeparam>
        /// <param name="op">The operation instance</param>
        /// <param name="in1">The input argument</param>
        /// <param name="out">The output target</param>
        internal static void UFunc_Op_Inner_Unary_Flush_Byte_TypedImpl<C>(NumCIL.UInt16.ToUInt16 op, NdArray<System.Byte> in1, NdArray<System.UInt16> @out)
            where C : IUnaryOp<System.Byte>
        {
            unsafe
            {
                using (var f1 = new Pinner(in1.DataAccessor))
                using (var f2 = new Pinner(@out.DataAccessor))
                {
                    var d1 = (System.Byte*)f1.ptr;
                    var d2 = (System.UInt16*)f2.ptr;

                    if (@out.Shape.Dimensions.Length == 1)
                    {
                        long totalOps = @out.Shape.Dimensions[0].Length;

                        long ix1 = in1.Shape.Offset;
                        long ix2 = @out.Shape.Offset;

                        long stride1 = in1.Shape.Dimensions[0].Stride;
                        long stride2 = @out.Shape.Dimensions[0].Stride;


                        if (stride1 == stride2 && ix1 == ix2)
                        {
                            //Best case, all are equal, just keep a single counter
                            for (long i = 0; i < totalOps; i++)
                            {
                                d2[ix1] = (System.UInt16)(d1[ix1]);
                                ix1 += stride1;
                            }
                        }
                        else
                        {
                            for (long i = 0; i < totalOps; i++)
                            {
                                d2[ix2] = (System.UInt16)(d1[ix1]);
                                ix1 += stride1;
                                ix2 += stride2;
                            }
                        }
                    }
                    else if (@out.Shape.Dimensions.Length == 2)
                    {
                        long opsOuter = @out.Shape.Dimensions[0].Length;
                        long opsInner = @out.Shape.Dimensions[1].Length;

                        long ix1 = in1.Shape.Offset;
                        long ix2 = @out.Shape.Offset;

                        long outerStride1 = in1.Shape.Dimensions[0].Stride;
                        long outerStride2 = @out.Shape.Dimensions[0].Stride;

                        long innerStride1 = in1.Shape.Dimensions[1].Stride;
                        long innerStride2 = @out.Shape.Dimensions[1].Stride;

                        outerStride1 -= innerStride1 * in1.Shape.Dimensions[1].Length;
                        outerStride2 -= innerStride2 * @out.Shape.Dimensions[1].Length;

                        for (long i = 0; i < opsOuter; i++)
                        {
                            for (long j = 0; j < opsInner; j++)
                            {
                                d2[ix2] = (System.UInt16)(d1[ix1]);
                                ix1 += innerStride1;
                                ix2 += innerStride2;
                            }

                            ix1 += outerStride1;
                            ix2 += outerStride2;
                        }
                    }
                    else
                    {
                        long n = in1.Shape.Dimensions.LongLength - 3;
                        long[] limits = in1.Shape.Dimensions.Where(x => n-- > 0).Select(x => x.Length).ToArray();
                        long[] counters = new long[limits.LongLength];

                        long totalOps = limits.LongLength == 0 ? 1 : limits.Aggregate<long>((a, b) => a * b);

                        //This chunck of variables are used to prevent repeated calculations of offsets
                        long dimIndex0 = 0 + limits.LongLength;
                        long dimIndex1 = 1 + limits.LongLength;
                        long dimIndex2 = 2 + limits.LongLength;

                        long opsOuter = @out.Shape.Dimensions[0 + limits.LongLength].Length;
                        long opsInner = @out.Shape.Dimensions[1 + limits.LongLength].Length;
                        long opsInnerInner = @out.Shape.Dimensions[2 + limits.LongLength].Length;

                        long outerStride1 = in1.Shape.Dimensions[dimIndex0].Stride;
                        long outerStride3 = @out.Shape.Dimensions[dimIndex0].Stride;

                        long innerStride1 = in1.Shape.Dimensions[dimIndex1].Stride;
                        long innerStride3 = @out.Shape.Dimensions[dimIndex1].Stride;

                        long innerInnerStride1 = in1.Shape.Dimensions[dimIndex2].Stride;
                        long innerInnerStride3 = @out.Shape.Dimensions[dimIndex2].Stride;

                        outerStride1 -= innerStride1 * in1.Shape.Dimensions[dimIndex1].Length;
                        outerStride3 -= innerStride3 * @out.Shape.Dimensions[dimIndex1].Length;

                        innerStride1 -= innerInnerStride1 * in1.Shape.Dimensions[dimIndex2].Length;
                        innerStride3 -= innerInnerStride3 * @out.Shape.Dimensions[dimIndex2].Length;

                        for (long outer = 0; outer < totalOps; outer++)
                        {
                            //Get the array offset for the first element in the outer dimension
                            long ix1 = in1.Shape[counters];
                            long ix3 = @out.Shape[counters];


                            for (long i = 0; i < opsOuter; i++)
                            {
                                for (long j = 0; j < opsInner; j++)
                                {
                                    for (long k = 0; k < opsInnerInner; k++)
                                    {
                                        d2[ix3] = (System.UInt16)(d1[ix1]);
                                        ix1 += innerInnerStride1;
                                        ix3 += innerInnerStride3;
                                    }

                                    ix1 += innerStride1;
                                    ix3 += innerStride3;
                                }

                                ix1 += outerStride1;
                                ix3 += outerStride3;
                            }

                            if (counters.LongLength > 0)
                            {
                                //Basically a ripple carry adder
                                long p = counters.LongLength - 1;
                                while (++counters[p] == limits[p] && p > 0)
                                {
                                    counters[p] = 0;
                                    p--;
                                }
                            }
                        }
                    }
                }
            }
        }

        /// <summary>
        /// Unsafe implementation of applying a unary operation
        /// </summary>
        /// <typeparam name="C">The type of operation to perform</typeparam>
        /// <param name="op">The operation instance</param>
        /// <param name="scalar">The input scalar argument</param>
        /// <param name="out">The output target</param>
        internal static void UFunc_Op_Inner_Unary_Scalar_Flush_Byte_TypedImpl<C>(NumCIL.UInt16.ToUInt16 op, System.Byte scalar, NdArray<System.UInt16> @out)
            where C : IUnaryOp<System.Byte>
        {
            unsafe
            {
                using (var f2 = new Pinner(@out.DataAccessor))
                {
                    var d2 = (System.UInt16*)f2.ptr;

                    if (@out.Shape.Dimensions.Length == 1)
                    {
                        long totalOps = @out.Shape.Dimensions[0].Length;
                        long ix2 = @out.Shape.Offset;
                        long stride2 = @out.Shape.Dimensions[0].Stride;

                        for (long i = 0; i < totalOps; i++)
                        {
                            d2[ix2] = (System.UInt16)(scalar);
                            ix2 += stride2;
                        }
                    }
                    else if (@out.Shape.Dimensions.Length == 2)
                    {
                        long opsOuter = @out.Shape.Dimensions[0].Length;
                        long opsInner = @out.Shape.Dimensions[1].Length;

                        long ix2 = @out.Shape.Offset;
                        long outerStride2 = @out.Shape.Dimensions[0].Stride;
                        long innerStride2 = @out.Shape.Dimensions[1].Stride;
                        outerStride2 -= innerStride2 * @out.Shape.Dimensions[1].Length;

                        for (long i = 0; i < opsOuter; i++)
                        {
                            for (long j = 0; j < opsInner; j++)
                            {
                                d2[ix2] = (System.UInt16)(scalar);
                                ix2 += innerStride2;
                            }

                            ix2 += outerStride2;
                        }
                    }
                    else
                    {
                        long n = @out.Shape.Dimensions.LongLength - 3;
                        long[] limits = @out.Shape.Dimensions.Where(x => n-- > 0).Select(x => x.Length).ToArray();
                        long[] counters = new long[limits.LongLength];

                        long totalOps = limits.LongLength == 0 ? 1 : limits.Aggregate<long>((a, b) => a * b);

                        //This chunck of variables are used to prevent repeated calculations of offsets
                        long dimIndex0 = 0 + limits.LongLength;
                        long dimIndex1 = 1 + limits.LongLength;
                        long dimIndex2 = 2 + limits.LongLength;

                        long opsOuter = @out.Shape.Dimensions[0 + limits.LongLength].Length;
                        long opsInner = @out.Shape.Dimensions[1 + limits.LongLength].Length;
                        long opsInnerInner = @out.Shape.Dimensions[2 + limits.LongLength].Length;

                        long outerStride3 = @out.Shape.Dimensions[dimIndex0].Stride;
                        long innerStride3 = @out.Shape.Dimensions[dimIndex1].Stride;
                        long innerInnerStride3 = @out.Shape.Dimensions[dimIndex2].Stride;
                        outerStride3 -= innerStride3 * @out.Shape.Dimensions[dimIndex1].Length;
                        innerStride3 -= innerInnerStride3 * @out.Shape.Dimensions[dimIndex2].Length;

                        for (long outer = 0; outer < totalOps; outer++)
                        {
                            //Get the array offset for the first element in the outer dimension
                            long ix3 = @out.Shape[counters];

                            for (long i = 0; i < opsOuter; i++)
                            {
                                for (long j = 0; j < opsInner; j++)
                                {
                                    for (long k = 0; k < opsInnerInner; k++)
                                    {
                                        d2[ix3] = (System.UInt16)(scalar);
                                        ix3 += innerInnerStride3;
                                    }

                                    ix3 += innerStride3;
                                }

                                ix3 += outerStride3;
                            }

                            if (counters.LongLength > 0)
                            {
                                //Basically a ripple carry adder
                                long p = counters.LongLength - 1;
                                while (++counters[p] == limits[p] && p > 0)
                                {
                                    counters[p] = 0;
                                    p--;
                                }
                            }
                        }
                    }
                }
            }
        }
        /// <summary>
        /// Unsafe implementation of applying a unary operation
        /// </summary>
        /// <typeparam name="C">The type of operation to perform</typeparam>
        /// <param name="op">The operation instance</param>
        /// <param name="in1">The input argument</param>
        /// <param name="out">The output target</param>
        internal static void UFunc_Op_Inner_Unary_Flush_Int16_TypedImpl<C>(NumCIL.UInt16.ToUInt16 op, NdArray<System.Int16> in1, NdArray<System.UInt16> @out)
            where C : IUnaryOp<System.Int16>
        {
            unsafe
            {
                using (var f1 = new Pinner(in1.DataAccessor))
                using (var f2 = new Pinner(@out.DataAccessor))
                {
                    var d1 = (System.Int16*)f1.ptr;
                    var d2 = (System.UInt16*)f2.ptr;

                    if (@out.Shape.Dimensions.Length == 1)
                    {
                        long totalOps = @out.Shape.Dimensions[0].Length;

                        long ix1 = in1.Shape.Offset;
                        long ix2 = @out.Shape.Offset;

                        long stride1 = in1.Shape.Dimensions[0].Stride;
                        long stride2 = @out.Shape.Dimensions[0].Stride;


                        if (stride1 == stride2 && ix1 == ix2)
                        {
                            //Best case, all are equal, just keep a single counter
                            for (long i = 0; i < totalOps; i++)
                            {
                                d2[ix1] = (System.UInt16)(d1[ix1]);
                                ix1 += stride1;
                            }
                        }
                        else
                        {
                            for (long i = 0; i < totalOps; i++)
                            {
                                d2[ix2] = (System.UInt16)(d1[ix1]);
                                ix1 += stride1;
                                ix2 += stride2;
                            }
                        }
                    }
                    else if (@out.Shape.Dimensions.Length == 2)
                    {
                        long opsOuter = @out.Shape.Dimensions[0].Length;
                        long opsInner = @out.Shape.Dimensions[1].Length;

                        long ix1 = in1.Shape.Offset;
                        long ix2 = @out.Shape.Offset;

                        long outerStride1 = in1.Shape.Dimensions[0].Stride;
                        long outerStride2 = @out.Shape.Dimensions[0].Stride;

                        long innerStride1 = in1.Shape.Dimensions[1].Stride;
                        long innerStride2 = @out.Shape.Dimensions[1].Stride;

                        outerStride1 -= innerStride1 * in1.Shape.Dimensions[1].Length;
                        outerStride2 -= innerStride2 * @out.Shape.Dimensions[1].Length;

                        for (long i = 0; i < opsOuter; i++)
                        {
                            for (long j = 0; j < opsInner; j++)
                            {
                                d2[ix2] = (System.UInt16)(d1[ix1]);
                                ix1 += innerStride1;
                                ix2 += innerStride2;
                            }

                            ix1 += outerStride1;
                            ix2 += outerStride2;
                        }
                    }
                    else
                    {
                        long n = in1.Shape.Dimensions.LongLength - 3;
                        long[] limits = in1.Shape.Dimensions.Where(x => n-- > 0).Select(x => x.Length).ToArray();
                        long[] counters = new long[limits.LongLength];

                        long totalOps = limits.LongLength == 0 ? 1 : limits.Aggregate<long>((a, b) => a * b);

                        //This chunck of variables are used to prevent repeated calculations of offsets
                        long dimIndex0 = 0 + limits.LongLength;
                        long dimIndex1 = 1 + limits.LongLength;
                        long dimIndex2 = 2 + limits.LongLength;

                        long opsOuter = @out.Shape.Dimensions[0 + limits.LongLength].Length;
                        long opsInner = @out.Shape.Dimensions[1 + limits.LongLength].Length;
                        long opsInnerInner = @out.Shape.Dimensions[2 + limits.LongLength].Length;

                        long outerStride1 = in1.Shape.Dimensions[dimIndex0].Stride;
                        long outerStride3 = @out.Shape.Dimensions[dimIndex0].Stride;

                        long innerStride1 = in1.Shape.Dimensions[dimIndex1].Stride;
                        long innerStride3 = @out.Shape.Dimensions[dimIndex1].Stride;

                        long innerInnerStride1 = in1.Shape.Dimensions[dimIndex2].Stride;
                        long innerInnerStride3 = @out.Shape.Dimensions[dimIndex2].Stride;

                        outerStride1 -= innerStride1 * in1.Shape.Dimensions[dimIndex1].Length;
                        outerStride3 -= innerStride3 * @out.Shape.Dimensions[dimIndex1].Length;

                        innerStride1 -= innerInnerStride1 * in1.Shape.Dimensions[dimIndex2].Length;
                        innerStride3 -= innerInnerStride3 * @out.Shape.Dimensions[dimIndex2].Length;

                        for (long outer = 0; outer < totalOps; outer++)
                        {
                            //Get the array offset for the first element in the outer dimension
                            long ix1 = in1.Shape[counters];
                            long ix3 = @out.Shape[counters];


                            for (long i = 0; i < opsOuter; i++)
                            {
                                for (long j = 0; j < opsInner; j++)
                                {
                                    for (long k = 0; k < opsInnerInner; k++)
                                    {
                                        d2[ix3] = (System.UInt16)(d1[ix1]);
                                        ix1 += innerInnerStride1;
                                        ix3 += innerInnerStride3;
                                    }

                                    ix1 += innerStride1;
                                    ix3 += innerStride3;
                                }

                                ix1 += outerStride1;
                                ix3 += outerStride3;
                            }

                            if (counters.LongLength > 0)
                            {
                                //Basically a ripple carry adder
                                long p = counters.LongLength - 1;
                                while (++counters[p] == limits[p] && p > 0)
                                {
                                    counters[p] = 0;
                                    p--;
                                }
                            }
                        }
                    }
                }
            }
        }

        /// <summary>
        /// Unsafe implementation of applying a unary operation
        /// </summary>
        /// <typeparam name="C">The type of operation to perform</typeparam>
        /// <param name="op">The operation instance</param>
        /// <param name="scalar">The input scalar argument</param>
        /// <param name="out">The output target</param>
        internal static void UFunc_Op_Inner_Unary_Scalar_Flush_Int16_TypedImpl<C>(NumCIL.UInt16.ToUInt16 op, System.Int16 scalar, NdArray<System.UInt16> @out)
            where C : IUnaryOp<System.Int16>
        {
            unsafe
            {
                using (var f2 = new Pinner(@out.DataAccessor))
                {
                    var d2 = (System.UInt16*)f2.ptr;

                    if (@out.Shape.Dimensions.Length == 1)
                    {
                        long totalOps = @out.Shape.Dimensions[0].Length;
                        long ix2 = @out.Shape.Offset;
                        long stride2 = @out.Shape.Dimensions[0].Stride;

                        for (long i = 0; i < totalOps; i++)
                        {
                            d2[ix2] = (System.UInt16)(scalar);
                            ix2 += stride2;
                        }
                    }
                    else if (@out.Shape.Dimensions.Length == 2)
                    {
                        long opsOuter = @out.Shape.Dimensions[0].Length;
                        long opsInner = @out.Shape.Dimensions[1].Length;

                        long ix2 = @out.Shape.Offset;
                        long outerStride2 = @out.Shape.Dimensions[0].Stride;
                        long innerStride2 = @out.Shape.Dimensions[1].Stride;
                        outerStride2 -= innerStride2 * @out.Shape.Dimensions[1].Length;

                        for (long i = 0; i < opsOuter; i++)
                        {
                            for (long j = 0; j < opsInner; j++)
                            {
                                d2[ix2] = (System.UInt16)(scalar);
                                ix2 += innerStride2;
                            }

                            ix2 += outerStride2;
                        }
                    }
                    else
                    {
                        long n = @out.Shape.Dimensions.LongLength - 3;
                        long[] limits = @out.Shape.Dimensions.Where(x => n-- > 0).Select(x => x.Length).ToArray();
                        long[] counters = new long[limits.LongLength];

                        long totalOps = limits.LongLength == 0 ? 1 : limits.Aggregate<long>((a, b) => a * b);

                        //This chunck of variables are used to prevent repeated calculations of offsets
                        long dimIndex0 = 0 + limits.LongLength;
                        long dimIndex1 = 1 + limits.LongLength;
                        long dimIndex2 = 2 + limits.LongLength;

                        long opsOuter = @out.Shape.Dimensions[0 + limits.LongLength].Length;
                        long opsInner = @out.Shape.Dimensions[1 + limits.LongLength].Length;
                        long opsInnerInner = @out.Shape.Dimensions[2 + limits.LongLength].Length;

                        long outerStride3 = @out.Shape.Dimensions[dimIndex0].Stride;
                        long innerStride3 = @out.Shape.Dimensions[dimIndex1].Stride;
                        long innerInnerStride3 = @out.Shape.Dimensions[dimIndex2].Stride;
                        outerStride3 -= innerStride3 * @out.Shape.Dimensions[dimIndex1].Length;
                        innerStride3 -= innerInnerStride3 * @out.Shape.Dimensions[dimIndex2].Length;

                        for (long outer = 0; outer < totalOps; outer++)
                        {
                            //Get the array offset for the first element in the outer dimension
                            long ix3 = @out.Shape[counters];

                            for (long i = 0; i < opsOuter; i++)
                            {
                                for (long j = 0; j < opsInner; j++)
                                {
                                    for (long k = 0; k < opsInnerInner; k++)
                                    {
                                        d2[ix3] = (System.UInt16)(scalar);
                                        ix3 += innerInnerStride3;
                                    }

                                    ix3 += innerStride3;
                                }

                                ix3 += outerStride3;
                            }

                            if (counters.LongLength > 0)
                            {
                                //Basically a ripple carry adder
                                long p = counters.LongLength - 1;
                                while (++counters[p] == limits[p] && p > 0)
                                {
                                    counters[p] = 0;
                                    p--;
                                }
                            }
                        }
                    }
                }
            }
        }
        /// <summary>
        /// Unsafe implementation of applying a unary operation
        /// </summary>
        /// <typeparam name="C">The type of operation to perform</typeparam>
        /// <param name="op">The operation instance</param>
        /// <param name="in1">The input argument</param>
        /// <param name="out">The output target</param>
        internal static void UFunc_Op_Inner_Unary_Flush_Int32_TypedImpl<C>(NumCIL.UInt16.ToUInt16 op, NdArray<System.Int32> in1, NdArray<System.UInt16> @out)
            where C : IUnaryOp<System.Int32>
        {
            unsafe
            {
                using (var f1 = new Pinner(in1.DataAccessor))
                using (var f2 = new Pinner(@out.DataAccessor))
                {
                    var d1 = (System.Int32*)f1.ptr;
                    var d2 = (System.UInt16*)f2.ptr;

                    if (@out.Shape.Dimensions.Length == 1)
                    {
                        long totalOps = @out.Shape.Dimensions[0].Length;

                        long ix1 = in1.Shape.Offset;
                        long ix2 = @out.Shape.Offset;

                        long stride1 = in1.Shape.Dimensions[0].Stride;
                        long stride2 = @out.Shape.Dimensions[0].Stride;


                        if (stride1 == stride2 && ix1 == ix2)
                        {
                            //Best case, all are equal, just keep a single counter
                            for (long i = 0; i < totalOps; i++)
                            {
                                d2[ix1] = (System.UInt16)(d1[ix1]);
                                ix1 += stride1;
                            }
                        }
                        else
                        {
                            for (long i = 0; i < totalOps; i++)
                            {
                                d2[ix2] = (System.UInt16)(d1[ix1]);
                                ix1 += stride1;
                                ix2 += stride2;
                            }
                        }
                    }
                    else if (@out.Shape.Dimensions.Length == 2)
                    {
                        long opsOuter = @out.Shape.Dimensions[0].Length;
                        long opsInner = @out.Shape.Dimensions[1].Length;

                        long ix1 = in1.Shape.Offset;
                        long ix2 = @out.Shape.Offset;

                        long outerStride1 = in1.Shape.Dimensions[0].Stride;
                        long outerStride2 = @out.Shape.Dimensions[0].Stride;

                        long innerStride1 = in1.Shape.Dimensions[1].Stride;
                        long innerStride2 = @out.Shape.Dimensions[1].Stride;

                        outerStride1 -= innerStride1 * in1.Shape.Dimensions[1].Length;
                        outerStride2 -= innerStride2 * @out.Shape.Dimensions[1].Length;

                        for (long i = 0; i < opsOuter; i++)
                        {
                            for (long j = 0; j < opsInner; j++)
                            {
                                d2[ix2] = (System.UInt16)(d1[ix1]);
                                ix1 += innerStride1;
                                ix2 += innerStride2;
                            }

                            ix1 += outerStride1;
                            ix2 += outerStride2;
                        }
                    }
                    else
                    {
                        long n = in1.Shape.Dimensions.LongLength - 3;
                        long[] limits = in1.Shape.Dimensions.Where(x => n-- > 0).Select(x => x.Length).ToArray();
                        long[] counters = new long[limits.LongLength];

                        long totalOps = limits.LongLength == 0 ? 1 : limits.Aggregate<long>((a, b) => a * b);

                        //This chunck of variables are used to prevent repeated calculations of offsets
                        long dimIndex0 = 0 + limits.LongLength;
                        long dimIndex1 = 1 + limits.LongLength;
                        long dimIndex2 = 2 + limits.LongLength;

                        long opsOuter = @out.Shape.Dimensions[0 + limits.LongLength].Length;
                        long opsInner = @out.Shape.Dimensions[1 + limits.LongLength].Length;
                        long opsInnerInner = @out.Shape.Dimensions[2 + limits.LongLength].Length;

                        long outerStride1 = in1.Shape.Dimensions[dimIndex0].Stride;
                        long outerStride3 = @out.Shape.Dimensions[dimIndex0].Stride;

                        long innerStride1 = in1.Shape.Dimensions[dimIndex1].Stride;
                        long innerStride3 = @out.Shape.Dimensions[dimIndex1].Stride;

                        long innerInnerStride1 = in1.Shape.Dimensions[dimIndex2].Stride;
                        long innerInnerStride3 = @out.Shape.Dimensions[dimIndex2].Stride;

                        outerStride1 -= innerStride1 * in1.Shape.Dimensions[dimIndex1].Length;
                        outerStride3 -= innerStride3 * @out.Shape.Dimensions[dimIndex1].Length;

                        innerStride1 -= innerInnerStride1 * in1.Shape.Dimensions[dimIndex2].Length;
                        innerStride3 -= innerInnerStride3 * @out.Shape.Dimensions[dimIndex2].Length;

                        for (long outer = 0; outer < totalOps; outer++)
                        {
                            //Get the array offset for the first element in the outer dimension
                            long ix1 = in1.Shape[counters];
                            long ix3 = @out.Shape[counters];


                            for (long i = 0; i < opsOuter; i++)
                            {
                                for (long j = 0; j < opsInner; j++)
                                {
                                    for (long k = 0; k < opsInnerInner; k++)
                                    {
                                        d2[ix3] = (System.UInt16)(d1[ix1]);
                                        ix1 += innerInnerStride1;
                                        ix3 += innerInnerStride3;
                                    }

                                    ix1 += innerStride1;
                                    ix3 += innerStride3;
                                }

                                ix1 += outerStride1;
                                ix3 += outerStride3;
                            }

                            if (counters.LongLength > 0)
                            {
                                //Basically a ripple carry adder
                                long p = counters.LongLength - 1;
                                while (++counters[p] == limits[p] && p > 0)
                                {
                                    counters[p] = 0;
                                    p--;
                                }
                            }
                        }
                    }
                }
            }
        }

        /// <summary>
        /// Unsafe implementation of applying a unary operation
        /// </summary>
        /// <typeparam name="C">The type of operation to perform</typeparam>
        /// <param name="op">The operation instance</param>
        /// <param name="scalar">The input scalar argument</param>
        /// <param name="out">The output target</param>
        internal static void UFunc_Op_Inner_Unary_Scalar_Flush_Int32_TypedImpl<C>(NumCIL.UInt16.ToUInt16 op, System.Int32 scalar, NdArray<System.UInt16> @out)
            where C : IUnaryOp<System.Int32>
        {
            unsafe
            {
                using (var f2 = new Pinner(@out.DataAccessor))
                {
                    var d2 = (System.UInt16*)f2.ptr;

                    if (@out.Shape.Dimensions.Length == 1)
                    {
                        long totalOps = @out.Shape.Dimensions[0].Length;
                        long ix2 = @out.Shape.Offset;
                        long stride2 = @out.Shape.Dimensions[0].Stride;

                        for (long i = 0; i < totalOps; i++)
                        {
                            d2[ix2] = (System.UInt16)(scalar);
                            ix2 += stride2;
                        }
                    }
                    else if (@out.Shape.Dimensions.Length == 2)
                    {
                        long opsOuter = @out.Shape.Dimensions[0].Length;
                        long opsInner = @out.Shape.Dimensions[1].Length;

                        long ix2 = @out.Shape.Offset;
                        long outerStride2 = @out.Shape.Dimensions[0].Stride;
                        long innerStride2 = @out.Shape.Dimensions[1].Stride;
                        outerStride2 -= innerStride2 * @out.Shape.Dimensions[1].Length;

                        for (long i = 0; i < opsOuter; i++)
                        {
                            for (long j = 0; j < opsInner; j++)
                            {
                                d2[ix2] = (System.UInt16)(scalar);
                                ix2 += innerStride2;
                            }

                            ix2 += outerStride2;
                        }
                    }
                    else
                    {
                        long n = @out.Shape.Dimensions.LongLength - 3;
                        long[] limits = @out.Shape.Dimensions.Where(x => n-- > 0).Select(x => x.Length).ToArray();
                        long[] counters = new long[limits.LongLength];

                        long totalOps = limits.LongLength == 0 ? 1 : limits.Aggregate<long>((a, b) => a * b);

                        //This chunck of variables are used to prevent repeated calculations of offsets
                        long dimIndex0 = 0 + limits.LongLength;
                        long dimIndex1 = 1 + limits.LongLength;
                        long dimIndex2 = 2 + limits.LongLength;

                        long opsOuter = @out.Shape.Dimensions[0 + limits.LongLength].Length;
                        long opsInner = @out.Shape.Dimensions[1 + limits.LongLength].Length;
                        long opsInnerInner = @out.Shape.Dimensions[2 + limits.LongLength].Length;

                        long outerStride3 = @out.Shape.Dimensions[dimIndex0].Stride;
                        long innerStride3 = @out.Shape.Dimensions[dimIndex1].Stride;
                        long innerInnerStride3 = @out.Shape.Dimensions[dimIndex2].Stride;
                        outerStride3 -= innerStride3 * @out.Shape.Dimensions[dimIndex1].Length;
                        innerStride3 -= innerInnerStride3 * @out.Shape.Dimensions[dimIndex2].Length;

                        for (long outer = 0; outer < totalOps; outer++)
                        {
                            //Get the array offset for the first element in the outer dimension
                            long ix3 = @out.Shape[counters];

                            for (long i = 0; i < opsOuter; i++)
                            {
                                for (long j = 0; j < opsInner; j++)
                                {
                                    for (long k = 0; k < opsInnerInner; k++)
                                    {
                                        d2[ix3] = (System.UInt16)(scalar);
                                        ix3 += innerInnerStride3;
                                    }

                                    ix3 += innerStride3;
                                }

                                ix3 += outerStride3;
                            }

                            if (counters.LongLength > 0)
                            {
                                //Basically a ripple carry adder
                                long p = counters.LongLength - 1;
                                while (++counters[p] == limits[p] && p > 0)
                                {
                                    counters[p] = 0;
                                    p--;
                                }
                            }
                        }
                    }
                }
            }
        }
        /// <summary>
        /// Unsafe implementation of applying a unary operation
        /// </summary>
        /// <typeparam name="C">The type of operation to perform</typeparam>
        /// <param name="op">The operation instance</param>
        /// <param name="in1">The input argument</param>
        /// <param name="out">The output target</param>
        internal static void UFunc_Op_Inner_Unary_Flush_UInt32_TypedImpl<C>(NumCIL.UInt16.ToUInt16 op, NdArray<System.UInt32> in1, NdArray<System.UInt16> @out)
            where C : IUnaryOp<System.UInt32>
        {
            unsafe
            {
                using (var f1 = new Pinner(in1.DataAccessor))
                using (var f2 = new Pinner(@out.DataAccessor))
                {
                    var d1 = (System.UInt32*)f1.ptr;
                    var d2 = (System.UInt16*)f2.ptr;

                    if (@out.Shape.Dimensions.Length == 1)
                    {
                        long totalOps = @out.Shape.Dimensions[0].Length;

                        long ix1 = in1.Shape.Offset;
                        long ix2 = @out.Shape.Offset;

                        long stride1 = in1.Shape.Dimensions[0].Stride;
                        long stride2 = @out.Shape.Dimensions[0].Stride;


                        if (stride1 == stride2 && ix1 == ix2)
                        {
                            //Best case, all are equal, just keep a single counter
                            for (long i = 0; i < totalOps; i++)
                            {
                                d2[ix1] = (System.UInt16)(d1[ix1]);
                                ix1 += stride1;
                            }
                        }
                        else
                        {
                            for (long i = 0; i < totalOps; i++)
                            {
                                d2[ix2] = (System.UInt16)(d1[ix1]);
                                ix1 += stride1;
                                ix2 += stride2;
                            }
                        }
                    }
                    else if (@out.Shape.Dimensions.Length == 2)
                    {
                        long opsOuter = @out.Shape.Dimensions[0].Length;
                        long opsInner = @out.Shape.Dimensions[1].Length;

                        long ix1 = in1.Shape.Offset;
                        long ix2 = @out.Shape.Offset;

                        long outerStride1 = in1.Shape.Dimensions[0].Stride;
                        long outerStride2 = @out.Shape.Dimensions[0].Stride;

                        long innerStride1 = in1.Shape.Dimensions[1].Stride;
                        long innerStride2 = @out.Shape.Dimensions[1].Stride;

                        outerStride1 -= innerStride1 * in1.Shape.Dimensions[1].Length;
                        outerStride2 -= innerStride2 * @out.Shape.Dimensions[1].Length;

                        for (long i = 0; i < opsOuter; i++)
                        {
                            for (long j = 0; j < opsInner; j++)
                            {
                                d2[ix2] = (System.UInt16)(d1[ix1]);
                                ix1 += innerStride1;
                                ix2 += innerStride2;
                            }

                            ix1 += outerStride1;
                            ix2 += outerStride2;
                        }
                    }
                    else
                    {
                        long n = in1.Shape.Dimensions.LongLength - 3;
                        long[] limits = in1.Shape.Dimensions.Where(x => n-- > 0).Select(x => x.Length).ToArray();
                        long[] counters = new long[limits.LongLength];

                        long totalOps = limits.LongLength == 0 ? 1 : limits.Aggregate<long>((a, b) => a * b);

                        //This chunck of variables are used to prevent repeated calculations of offsets
                        long dimIndex0 = 0 + limits.LongLength;
                        long dimIndex1 = 1 + limits.LongLength;
                        long dimIndex2 = 2 + limits.LongLength;

                        long opsOuter = @out.Shape.Dimensions[0 + limits.LongLength].Length;
                        long opsInner = @out.Shape.Dimensions[1 + limits.LongLength].Length;
                        long opsInnerInner = @out.Shape.Dimensions[2 + limits.LongLength].Length;

                        long outerStride1 = in1.Shape.Dimensions[dimIndex0].Stride;
                        long outerStride3 = @out.Shape.Dimensions[dimIndex0].Stride;

                        long innerStride1 = in1.Shape.Dimensions[dimIndex1].Stride;
                        long innerStride3 = @out.Shape.Dimensions[dimIndex1].Stride;

                        long innerInnerStride1 = in1.Shape.Dimensions[dimIndex2].Stride;
                        long innerInnerStride3 = @out.Shape.Dimensions[dimIndex2].Stride;

                        outerStride1 -= innerStride1 * in1.Shape.Dimensions[dimIndex1].Length;
                        outerStride3 -= innerStride3 * @out.Shape.Dimensions[dimIndex1].Length;

                        innerStride1 -= innerInnerStride1 * in1.Shape.Dimensions[dimIndex2].Length;
                        innerStride3 -= innerInnerStride3 * @out.Shape.Dimensions[dimIndex2].Length;

                        for (long outer = 0; outer < totalOps; outer++)
                        {
                            //Get the array offset for the first element in the outer dimension
                            long ix1 = in1.Shape[counters];
                            long ix3 = @out.Shape[counters];


                            for (long i = 0; i < opsOuter; i++)
                            {
                                for (long j = 0; j < opsInner; j++)
                                {
                                    for (long k = 0; k < opsInnerInner; k++)
                                    {
                                        d2[ix3] = (System.UInt16)(d1[ix1]);
                                        ix1 += innerInnerStride1;
                                        ix3 += innerInnerStride3;
                                    }

                                    ix1 += innerStride1;
                                    ix3 += innerStride3;
                                }

                                ix1 += outerStride1;
                                ix3 += outerStride3;
                            }

                            if (counters.LongLength > 0)
                            {
                                //Basically a ripple carry adder
                                long p = counters.LongLength - 1;
                                while (++counters[p] == limits[p] && p > 0)
                                {
                                    counters[p] = 0;
                                    p--;
                                }
                            }
                        }
                    }
                }
            }
        }

        /// <summary>
        /// Unsafe implementation of applying a unary operation
        /// </summary>
        /// <typeparam name="C">The type of operation to perform</typeparam>
        /// <param name="op">The operation instance</param>
        /// <param name="scalar">The input scalar argument</param>
        /// <param name="out">The output target</param>
        internal static void UFunc_Op_Inner_Unary_Scalar_Flush_UInt32_TypedImpl<C>(NumCIL.UInt16.ToUInt16 op, System.UInt32 scalar, NdArray<System.UInt16> @out)
            where C : IUnaryOp<System.UInt32>
        {
            unsafe
            {
                using (var f2 = new Pinner(@out.DataAccessor))
                {
                    var d2 = (System.UInt16*)f2.ptr;

                    if (@out.Shape.Dimensions.Length == 1)
                    {
                        long totalOps = @out.Shape.Dimensions[0].Length;
                        long ix2 = @out.Shape.Offset;
                        long stride2 = @out.Shape.Dimensions[0].Stride;

                        for (long i = 0; i < totalOps; i++)
                        {
                            d2[ix2] = (System.UInt16)(scalar);
                            ix2 += stride2;
                        }
                    }
                    else if (@out.Shape.Dimensions.Length == 2)
                    {
                        long opsOuter = @out.Shape.Dimensions[0].Length;
                        long opsInner = @out.Shape.Dimensions[1].Length;

                        long ix2 = @out.Shape.Offset;
                        long outerStride2 = @out.Shape.Dimensions[0].Stride;
                        long innerStride2 = @out.Shape.Dimensions[1].Stride;
                        outerStride2 -= innerStride2 * @out.Shape.Dimensions[1].Length;

                        for (long i = 0; i < opsOuter; i++)
                        {
                            for (long j = 0; j < opsInner; j++)
                            {
                                d2[ix2] = (System.UInt16)(scalar);
                                ix2 += innerStride2;
                            }

                            ix2 += outerStride2;
                        }
                    }
                    else
                    {
                        long n = @out.Shape.Dimensions.LongLength - 3;
                        long[] limits = @out.Shape.Dimensions.Where(x => n-- > 0).Select(x => x.Length).ToArray();
                        long[] counters = new long[limits.LongLength];

                        long totalOps = limits.LongLength == 0 ? 1 : limits.Aggregate<long>((a, b) => a * b);

                        //This chunck of variables are used to prevent repeated calculations of offsets
                        long dimIndex0 = 0 + limits.LongLength;
                        long dimIndex1 = 1 + limits.LongLength;
                        long dimIndex2 = 2 + limits.LongLength;

                        long opsOuter = @out.Shape.Dimensions[0 + limits.LongLength].Length;
                        long opsInner = @out.Shape.Dimensions[1 + limits.LongLength].Length;
                        long opsInnerInner = @out.Shape.Dimensions[2 + limits.LongLength].Length;

                        long outerStride3 = @out.Shape.Dimensions[dimIndex0].Stride;
                        long innerStride3 = @out.Shape.Dimensions[dimIndex1].Stride;
                        long innerInnerStride3 = @out.Shape.Dimensions[dimIndex2].Stride;
                        outerStride3 -= innerStride3 * @out.Shape.Dimensions[dimIndex1].Length;
                        innerStride3 -= innerInnerStride3 * @out.Shape.Dimensions[dimIndex2].Length;

                        for (long outer = 0; outer < totalOps; outer++)
                        {
                            //Get the array offset for the first element in the outer dimension
                            long ix3 = @out.Shape[counters];

                            for (long i = 0; i < opsOuter; i++)
                            {
                                for (long j = 0; j < opsInner; j++)
                                {
                                    for (long k = 0; k < opsInnerInner; k++)
                                    {
                                        d2[ix3] = (System.UInt16)(scalar);
                                        ix3 += innerInnerStride3;
                                    }

                                    ix3 += innerStride3;
                                }

                                ix3 += outerStride3;
                            }

                            if (counters.LongLength > 0)
                            {
                                //Basically a ripple carry adder
                                long p = counters.LongLength - 1;
                                while (++counters[p] == limits[p] && p > 0)
                                {
                                    counters[p] = 0;
                                    p--;
                                }
                            }
                        }
                    }
                }
            }
        }
        /// <summary>
        /// Unsafe implementation of applying a unary operation
        /// </summary>
        /// <typeparam name="C">The type of operation to perform</typeparam>
        /// <param name="op">The operation instance</param>
        /// <param name="in1">The input argument</param>
        /// <param name="out">The output target</param>
        internal static void UFunc_Op_Inner_Unary_Flush_Int64_TypedImpl<C>(NumCIL.UInt16.ToUInt16 op, NdArray<System.Int64> in1, NdArray<System.UInt16> @out)
            where C : IUnaryOp<System.Int64>
        {
            unsafe
            {
                using (var f1 = new Pinner(in1.DataAccessor))
                using (var f2 = new Pinner(@out.DataAccessor))
                {
                    var d1 = (System.Int64*)f1.ptr;
                    var d2 = (System.UInt16*)f2.ptr;

                    if (@out.Shape.Dimensions.Length == 1)
                    {
                        long totalOps = @out.Shape.Dimensions[0].Length;

                        long ix1 = in1.Shape.Offset;
                        long ix2 = @out.Shape.Offset;

                        long stride1 = in1.Shape.Dimensions[0].Stride;
                        long stride2 = @out.Shape.Dimensions[0].Stride;


                        if (stride1 == stride2 && ix1 == ix2)
                        {
                            //Best case, all are equal, just keep a single counter
                            for (long i = 0; i < totalOps; i++)
                            {
                                d2[ix1] = (System.UInt16)(d1[ix1]);
                                ix1 += stride1;
                            }
                        }
                        else
                        {
                            for (long i = 0; i < totalOps; i++)
                            {
                                d2[ix2] = (System.UInt16)(d1[ix1]);
                                ix1 += stride1;
                                ix2 += stride2;
                            }
                        }
                    }
                    else if (@out.Shape.Dimensions.Length == 2)
                    {
                        long opsOuter = @out.Shape.Dimensions[0].Length;
                        long opsInner = @out.Shape.Dimensions[1].Length;

                        long ix1 = in1.Shape.Offset;
                        long ix2 = @out.Shape.Offset;

                        long outerStride1 = in1.Shape.Dimensions[0].Stride;
                        long outerStride2 = @out.Shape.Dimensions[0].Stride;

                        long innerStride1 = in1.Shape.Dimensions[1].Stride;
                        long innerStride2 = @out.Shape.Dimensions[1].Stride;

                        outerStride1 -= innerStride1 * in1.Shape.Dimensions[1].Length;
                        outerStride2 -= innerStride2 * @out.Shape.Dimensions[1].Length;

                        for (long i = 0; i < opsOuter; i++)
                        {
                            for (long j = 0; j < opsInner; j++)
                            {
                                d2[ix2] = (System.UInt16)(d1[ix1]);
                                ix1 += innerStride1;
                                ix2 += innerStride2;
                            }

                            ix1 += outerStride1;
                            ix2 += outerStride2;
                        }
                    }
                    else
                    {
                        long n = in1.Shape.Dimensions.LongLength - 3;
                        long[] limits = in1.Shape.Dimensions.Where(x => n-- > 0).Select(x => x.Length).ToArray();
                        long[] counters = new long[limits.LongLength];

                        long totalOps = limits.LongLength == 0 ? 1 : limits.Aggregate<long>((a, b) => a * b);

                        //This chunck of variables are used to prevent repeated calculations of offsets
                        long dimIndex0 = 0 + limits.LongLength;
                        long dimIndex1 = 1 + limits.LongLength;
                        long dimIndex2 = 2 + limits.LongLength;

                        long opsOuter = @out.Shape.Dimensions[0 + limits.LongLength].Length;
                        long opsInner = @out.Shape.Dimensions[1 + limits.LongLength].Length;
                        long opsInnerInner = @out.Shape.Dimensions[2 + limits.LongLength].Length;

                        long outerStride1 = in1.Shape.Dimensions[dimIndex0].Stride;
                        long outerStride3 = @out.Shape.Dimensions[dimIndex0].Stride;

                        long innerStride1 = in1.Shape.Dimensions[dimIndex1].Stride;
                        long innerStride3 = @out.Shape.Dimensions[dimIndex1].Stride;

                        long innerInnerStride1 = in1.Shape.Dimensions[dimIndex2].Stride;
                        long innerInnerStride3 = @out.Shape.Dimensions[dimIndex2].Stride;

                        outerStride1 -= innerStride1 * in1.Shape.Dimensions[dimIndex1].Length;
                        outerStride3 -= innerStride3 * @out.Shape.Dimensions[dimIndex1].Length;

                        innerStride1 -= innerInnerStride1 * in1.Shape.Dimensions[dimIndex2].Length;
                        innerStride3 -= innerInnerStride3 * @out.Shape.Dimensions[dimIndex2].Length;

                        for (long outer = 0; outer < totalOps; outer++)
                        {
                            //Get the array offset for the first element in the outer dimension
                            long ix1 = in1.Shape[counters];
                            long ix3 = @out.Shape[counters];


                            for (long i = 0; i < opsOuter; i++)
                            {
                                for (long j = 0; j < opsInner; j++)
                                {
                                    for (long k = 0; k < opsInnerInner; k++)
                                    {
                                        d2[ix3] = (System.UInt16)(d1[ix1]);
                                        ix1 += innerInnerStride1;
                                        ix3 += innerInnerStride3;
                                    }

                                    ix1 += innerStride1;
                                    ix3 += innerStride3;
                                }

                                ix1 += outerStride1;
                                ix3 += outerStride3;
                            }

                            if (counters.LongLength > 0)
                            {
                                //Basically a ripple carry adder
                                long p = counters.LongLength - 1;
                                while (++counters[p] == limits[p] && p > 0)
                                {
                                    counters[p] = 0;
                                    p--;
                                }
                            }
                        }
                    }
                }
            }
        }

        /// <summary>
        /// Unsafe implementation of applying a unary operation
        /// </summary>
        /// <typeparam name="C">The type of operation to perform</typeparam>
        /// <param name="op">The operation instance</param>
        /// <param name="scalar">The input scalar argument</param>
        /// <param name="out">The output target</param>
        internal static void UFunc_Op_Inner_Unary_Scalar_Flush_Int64_TypedImpl<C>(NumCIL.UInt16.ToUInt16 op, System.Int64 scalar, NdArray<System.UInt16> @out)
            where C : IUnaryOp<System.Int64>
        {
            unsafe
            {
                using (var f2 = new Pinner(@out.DataAccessor))
                {
                    var d2 = (System.UInt16*)f2.ptr;

                    if (@out.Shape.Dimensions.Length == 1)
                    {
                        long totalOps = @out.Shape.Dimensions[0].Length;
                        long ix2 = @out.Shape.Offset;
                        long stride2 = @out.Shape.Dimensions[0].Stride;

                        for (long i = 0; i < totalOps; i++)
                        {
                            d2[ix2] = (System.UInt16)(scalar);
                            ix2 += stride2;
                        }
                    }
                    else if (@out.Shape.Dimensions.Length == 2)
                    {
                        long opsOuter = @out.Shape.Dimensions[0].Length;
                        long opsInner = @out.Shape.Dimensions[1].Length;

                        long ix2 = @out.Shape.Offset;
                        long outerStride2 = @out.Shape.Dimensions[0].Stride;
                        long innerStride2 = @out.Shape.Dimensions[1].Stride;
                        outerStride2 -= innerStride2 * @out.Shape.Dimensions[1].Length;

                        for (long i = 0; i < opsOuter; i++)
                        {
                            for (long j = 0; j < opsInner; j++)
                            {
                                d2[ix2] = (System.UInt16)(scalar);
                                ix2 += innerStride2;
                            }

                            ix2 += outerStride2;
                        }
                    }
                    else
                    {
                        long n = @out.Shape.Dimensions.LongLength - 3;
                        long[] limits = @out.Shape.Dimensions.Where(x => n-- > 0).Select(x => x.Length).ToArray();
                        long[] counters = new long[limits.LongLength];

                        long totalOps = limits.LongLength == 0 ? 1 : limits.Aggregate<long>((a, b) => a * b);

                        //This chunck of variables are used to prevent repeated calculations of offsets
                        long dimIndex0 = 0 + limits.LongLength;
                        long dimIndex1 = 1 + limits.LongLength;
                        long dimIndex2 = 2 + limits.LongLength;

                        long opsOuter = @out.Shape.Dimensions[0 + limits.LongLength].Length;
                        long opsInner = @out.Shape.Dimensions[1 + limits.LongLength].Length;
                        long opsInnerInner = @out.Shape.Dimensions[2 + limits.LongLength].Length;

                        long outerStride3 = @out.Shape.Dimensions[dimIndex0].Stride;
                        long innerStride3 = @out.Shape.Dimensions[dimIndex1].Stride;
                        long innerInnerStride3 = @out.Shape.Dimensions[dimIndex2].Stride;
                        outerStride3 -= innerStride3 * @out.Shape.Dimensions[dimIndex1].Length;
                        innerStride3 -= innerInnerStride3 * @out.Shape.Dimensions[dimIndex2].Length;

                        for (long outer = 0; outer < totalOps; outer++)
                        {
                            //Get the array offset for the first element in the outer dimension
                            long ix3 = @out.Shape[counters];

                            for (long i = 0; i < opsOuter; i++)
                            {
                                for (long j = 0; j < opsInner; j++)
                                {
                                    for (long k = 0; k < opsInnerInner; k++)
                                    {
                                        d2[ix3] = (System.UInt16)(scalar);
                                        ix3 += innerInnerStride3;
                                    }

                                    ix3 += innerStride3;
                                }

                                ix3 += outerStride3;
                            }

                            if (counters.LongLength > 0)
                            {
                                //Basically a ripple carry adder
                                long p = counters.LongLength - 1;
                                while (++counters[p] == limits[p] && p > 0)
                                {
                                    counters[p] = 0;
                                    p--;
                                }
                            }
                        }
                    }
                }
            }
        }
        /// <summary>
        /// Unsafe implementation of applying a unary operation
        /// </summary>
        /// <typeparam name="C">The type of operation to perform</typeparam>
        /// <param name="op">The operation instance</param>
        /// <param name="in1">The input argument</param>
        /// <param name="out">The output target</param>
        internal static void UFunc_Op_Inner_Unary_Flush_UInt64_TypedImpl<C>(NumCIL.UInt16.ToUInt16 op, NdArray<System.UInt64> in1, NdArray<System.UInt16> @out)
            where C : IUnaryOp<System.UInt64>
        {
            unsafe
            {
                using (var f1 = new Pinner(in1.DataAccessor))
                using (var f2 = new Pinner(@out.DataAccessor))
                {
                    var d1 = (System.UInt64*)f1.ptr;
                    var d2 = (System.UInt16*)f2.ptr;

                    if (@out.Shape.Dimensions.Length == 1)
                    {
                        long totalOps = @out.Shape.Dimensions[0].Length;

                        long ix1 = in1.Shape.Offset;
                        long ix2 = @out.Shape.Offset;

                        long stride1 = in1.Shape.Dimensions[0].Stride;
                        long stride2 = @out.Shape.Dimensions[0].Stride;


                        if (stride1 == stride2 && ix1 == ix2)
                        {
                            //Best case, all are equal, just keep a single counter
                            for (long i = 0; i < totalOps; i++)
                            {
                                d2[ix1] = (System.UInt16)(d1[ix1]);
                                ix1 += stride1;
                            }
                        }
                        else
                        {
                            for (long i = 0; i < totalOps; i++)
                            {
                                d2[ix2] = (System.UInt16)(d1[ix1]);
                                ix1 += stride1;
                                ix2 += stride2;
                            }
                        }
                    }
                    else if (@out.Shape.Dimensions.Length == 2)
                    {
                        long opsOuter = @out.Shape.Dimensions[0].Length;
                        long opsInner = @out.Shape.Dimensions[1].Length;

                        long ix1 = in1.Shape.Offset;
                        long ix2 = @out.Shape.Offset;

                        long outerStride1 = in1.Shape.Dimensions[0].Stride;
                        long outerStride2 = @out.Shape.Dimensions[0].Stride;

                        long innerStride1 = in1.Shape.Dimensions[1].Stride;
                        long innerStride2 = @out.Shape.Dimensions[1].Stride;

                        outerStride1 -= innerStride1 * in1.Shape.Dimensions[1].Length;
                        outerStride2 -= innerStride2 * @out.Shape.Dimensions[1].Length;

                        for (long i = 0; i < opsOuter; i++)
                        {
                            for (long j = 0; j < opsInner; j++)
                            {
                                d2[ix2] = (System.UInt16)(d1[ix1]);
                                ix1 += innerStride1;
                                ix2 += innerStride2;
                            }

                            ix1 += outerStride1;
                            ix2 += outerStride2;
                        }
                    }
                    else
                    {
                        long n = in1.Shape.Dimensions.LongLength - 3;
                        long[] limits = in1.Shape.Dimensions.Where(x => n-- > 0).Select(x => x.Length).ToArray();
                        long[] counters = new long[limits.LongLength];

                        long totalOps = limits.LongLength == 0 ? 1 : limits.Aggregate<long>((a, b) => a * b);

                        //This chunck of variables are used to prevent repeated calculations of offsets
                        long dimIndex0 = 0 + limits.LongLength;
                        long dimIndex1 = 1 + limits.LongLength;
                        long dimIndex2 = 2 + limits.LongLength;

                        long opsOuter = @out.Shape.Dimensions[0 + limits.LongLength].Length;
                        long opsInner = @out.Shape.Dimensions[1 + limits.LongLength].Length;
                        long opsInnerInner = @out.Shape.Dimensions[2 + limits.LongLength].Length;

                        long outerStride1 = in1.Shape.Dimensions[dimIndex0].Stride;
                        long outerStride3 = @out.Shape.Dimensions[dimIndex0].Stride;

                        long innerStride1 = in1.Shape.Dimensions[dimIndex1].Stride;
                        long innerStride3 = @out.Shape.Dimensions[dimIndex1].Stride;

                        long innerInnerStride1 = in1.Shape.Dimensions[dimIndex2].Stride;
                        long innerInnerStride3 = @out.Shape.Dimensions[dimIndex2].Stride;

                        outerStride1 -= innerStride1 * in1.Shape.Dimensions[dimIndex1].Length;
                        outerStride3 -= innerStride3 * @out.Shape.Dimensions[dimIndex1].Length;

                        innerStride1 -= innerInnerStride1 * in1.Shape.Dimensions[dimIndex2].Length;
                        innerStride3 -= innerInnerStride3 * @out.Shape.Dimensions[dimIndex2].Length;

                        for (long outer = 0; outer < totalOps; outer++)
                        {
                            //Get the array offset for the first element in the outer dimension
                            long ix1 = in1.Shape[counters];
                            long ix3 = @out.Shape[counters];


                            for (long i = 0; i < opsOuter; i++)
                            {
                                for (long j = 0; j < opsInner; j++)
                                {
                                    for (long k = 0; k < opsInnerInner; k++)
                                    {
                                        d2[ix3] = (System.UInt16)(d1[ix1]);
                                        ix1 += innerInnerStride1;
                                        ix3 += innerInnerStride3;
                                    }

                                    ix1 += innerStride1;
                                    ix3 += innerStride3;
                                }

                                ix1 += outerStride1;
                                ix3 += outerStride3;
                            }

                            if (counters.LongLength > 0)
                            {
                                //Basically a ripple carry adder
                                long p = counters.LongLength - 1;
                                while (++counters[p] == limits[p] && p > 0)
                                {
                                    counters[p] = 0;
                                    p--;
                                }
                            }
                        }
                    }
                }
            }
        }

        /// <summary>
        /// Unsafe implementation of applying a unary operation
        /// </summary>
        /// <typeparam name="C">The type of operation to perform</typeparam>
        /// <param name="op">The operation instance</param>
        /// <param name="scalar">The input scalar argument</param>
        /// <param name="out">The output target</param>
        internal static void UFunc_Op_Inner_Unary_Scalar_Flush_UInt64_TypedImpl<C>(NumCIL.UInt16.ToUInt16 op, System.UInt64 scalar, NdArray<System.UInt16> @out)
            where C : IUnaryOp<System.UInt64>
        {
            unsafe
            {
                using (var f2 = new Pinner(@out.DataAccessor))
                {
                    var d2 = (System.UInt16*)f2.ptr;

                    if (@out.Shape.Dimensions.Length == 1)
                    {
                        long totalOps = @out.Shape.Dimensions[0].Length;
                        long ix2 = @out.Shape.Offset;
                        long stride2 = @out.Shape.Dimensions[0].Stride;

                        for (long i = 0; i < totalOps; i++)
                        {
                            d2[ix2] = (System.UInt16)(scalar);
                            ix2 += stride2;
                        }
                    }
                    else if (@out.Shape.Dimensions.Length == 2)
                    {
                        long opsOuter = @out.Shape.Dimensions[0].Length;
                        long opsInner = @out.Shape.Dimensions[1].Length;

                        long ix2 = @out.Shape.Offset;
                        long outerStride2 = @out.Shape.Dimensions[0].Stride;
                        long innerStride2 = @out.Shape.Dimensions[1].Stride;
                        outerStride2 -= innerStride2 * @out.Shape.Dimensions[1].Length;

                        for (long i = 0; i < opsOuter; i++)
                        {
                            for (long j = 0; j < opsInner; j++)
                            {
                                d2[ix2] = (System.UInt16)(scalar);
                                ix2 += innerStride2;
                            }

                            ix2 += outerStride2;
                        }
                    }
                    else
                    {
                        long n = @out.Shape.Dimensions.LongLength - 3;
                        long[] limits = @out.Shape.Dimensions.Where(x => n-- > 0).Select(x => x.Length).ToArray();
                        long[] counters = new long[limits.LongLength];

                        long totalOps = limits.LongLength == 0 ? 1 : limits.Aggregate<long>((a, b) => a * b);

                        //This chunck of variables are used to prevent repeated calculations of offsets
                        long dimIndex0 = 0 + limits.LongLength;
                        long dimIndex1 = 1 + limits.LongLength;
                        long dimIndex2 = 2 + limits.LongLength;

                        long opsOuter = @out.Shape.Dimensions[0 + limits.LongLength].Length;
                        long opsInner = @out.Shape.Dimensions[1 + limits.LongLength].Length;
                        long opsInnerInner = @out.Shape.Dimensions[2 + limits.LongLength].Length;

                        long outerStride3 = @out.Shape.Dimensions[dimIndex0].Stride;
                        long innerStride3 = @out.Shape.Dimensions[dimIndex1].Stride;
                        long innerInnerStride3 = @out.Shape.Dimensions[dimIndex2].Stride;
                        outerStride3 -= innerStride3 * @out.Shape.Dimensions[dimIndex1].Length;
                        innerStride3 -= innerInnerStride3 * @out.Shape.Dimensions[dimIndex2].Length;

                        for (long outer = 0; outer < totalOps; outer++)
                        {
                            //Get the array offset for the first element in the outer dimension
                            long ix3 = @out.Shape[counters];

                            for (long i = 0; i < opsOuter; i++)
                            {
                                for (long j = 0; j < opsInner; j++)
                                {
                                    for (long k = 0; k < opsInnerInner; k++)
                                    {
                                        d2[ix3] = (System.UInt16)(scalar);
                                        ix3 += innerInnerStride3;
                                    }

                                    ix3 += innerStride3;
                                }

                                ix3 += outerStride3;
                            }

                            if (counters.LongLength > 0)
                            {
                                //Basically a ripple carry adder
                                long p = counters.LongLength - 1;
                                while (++counters[p] == limits[p] && p > 0)
                                {
                                    counters[p] = 0;
                                    p--;
                                }
                            }
                        }
                    }
                }
            }
        }
        /// <summary>
        /// Unsafe implementation of applying a unary operation
        /// </summary>
        /// <typeparam name="C">The type of operation to perform</typeparam>
        /// <param name="op">The operation instance</param>
        /// <param name="in1">The input argument</param>
        /// <param name="out">The output target</param>
        internal static void UFunc_Op_Inner_Unary_Flush_Single_TypedImpl<C>(NumCIL.UInt16.ToUInt16 op, NdArray<System.Single> in1, NdArray<System.UInt16> @out)
            where C : IUnaryOp<System.Single>
        {
            unsafe
            {
                using (var f1 = new Pinner(in1.DataAccessor))
                using (var f2 = new Pinner(@out.DataAccessor))
                {
                    var d1 = (System.Single*)f1.ptr;
                    var d2 = (System.UInt16*)f2.ptr;

                    if (@out.Shape.Dimensions.Length == 1)
                    {
                        long totalOps = @out.Shape.Dimensions[0].Length;

                        long ix1 = in1.Shape.Offset;
                        long ix2 = @out.Shape.Offset;

                        long stride1 = in1.Shape.Dimensions[0].Stride;
                        long stride2 = @out.Shape.Dimensions[0].Stride;


                        if (stride1 == stride2 && ix1 == ix2)
                        {
                            //Best case, all are equal, just keep a single counter
                            for (long i = 0; i < totalOps; i++)
                            {
                                d2[ix1] = (System.UInt16)(d1[ix1]);
                                ix1 += stride1;
                            }
                        }
                        else
                        {
                            for (long i = 0; i < totalOps; i++)
                            {
                                d2[ix2] = (System.UInt16)(d1[ix1]);
                                ix1 += stride1;
                                ix2 += stride2;
                            }
                        }
                    }
                    else if (@out.Shape.Dimensions.Length == 2)
                    {
                        long opsOuter = @out.Shape.Dimensions[0].Length;
                        long opsInner = @out.Shape.Dimensions[1].Length;

                        long ix1 = in1.Shape.Offset;
                        long ix2 = @out.Shape.Offset;

                        long outerStride1 = in1.Shape.Dimensions[0].Stride;
                        long outerStride2 = @out.Shape.Dimensions[0].Stride;

                        long innerStride1 = in1.Shape.Dimensions[1].Stride;
                        long innerStride2 = @out.Shape.Dimensions[1].Stride;

                        outerStride1 -= innerStride1 * in1.Shape.Dimensions[1].Length;
                        outerStride2 -= innerStride2 * @out.Shape.Dimensions[1].Length;

                        for (long i = 0; i < opsOuter; i++)
                        {
                            for (long j = 0; j < opsInner; j++)
                            {
                                d2[ix2] = (System.UInt16)(d1[ix1]);
                                ix1 += innerStride1;
                                ix2 += innerStride2;
                            }

                            ix1 += outerStride1;
                            ix2 += outerStride2;
                        }
                    }
                    else
                    {
                        long n = in1.Shape.Dimensions.LongLength - 3;
                        long[] limits = in1.Shape.Dimensions.Where(x => n-- > 0).Select(x => x.Length).ToArray();
                        long[] counters = new long[limits.LongLength];

                        long totalOps = limits.LongLength == 0 ? 1 : limits.Aggregate<long>((a, b) => a * b);

                        //This chunck of variables are used to prevent repeated calculations of offsets
                        long dimIndex0 = 0 + limits.LongLength;
                        long dimIndex1 = 1 + limits.LongLength;
                        long dimIndex2 = 2 + limits.LongLength;

                        long opsOuter = @out.Shape.Dimensions[0 + limits.LongLength].Length;
                        long opsInner = @out.Shape.Dimensions[1 + limits.LongLength].Length;
                        long opsInnerInner = @out.Shape.Dimensions[2 + limits.LongLength].Length;

                        long outerStride1 = in1.Shape.Dimensions[dimIndex0].Stride;
                        long outerStride3 = @out.Shape.Dimensions[dimIndex0].Stride;

                        long innerStride1 = in1.Shape.Dimensions[dimIndex1].Stride;
                        long innerStride3 = @out.Shape.Dimensions[dimIndex1].Stride;

                        long innerInnerStride1 = in1.Shape.Dimensions[dimIndex2].Stride;
                        long innerInnerStride3 = @out.Shape.Dimensions[dimIndex2].Stride;

                        outerStride1 -= innerStride1 * in1.Shape.Dimensions[dimIndex1].Length;
                        outerStride3 -= innerStride3 * @out.Shape.Dimensions[dimIndex1].Length;

                        innerStride1 -= innerInnerStride1 * in1.Shape.Dimensions[dimIndex2].Length;
                        innerStride3 -= innerInnerStride3 * @out.Shape.Dimensions[dimIndex2].Length;

                        for (long outer = 0; outer < totalOps; outer++)
                        {
                            //Get the array offset for the first element in the outer dimension
                            long ix1 = in1.Shape[counters];
                            long ix3 = @out.Shape[counters];


                            for (long i = 0; i < opsOuter; i++)
                            {
                                for (long j = 0; j < opsInner; j++)
                                {
                                    for (long k = 0; k < opsInnerInner; k++)
                                    {
                                        d2[ix3] = (System.UInt16)(d1[ix1]);
                                        ix1 += innerInnerStride1;
                                        ix3 += innerInnerStride3;
                                    }

                                    ix1 += innerStride1;
                                    ix3 += innerStride3;
                                }

                                ix1 += outerStride1;
                                ix3 += outerStride3;
                            }

                            if (counters.LongLength > 0)
                            {
                                //Basically a ripple carry adder
                                long p = counters.LongLength - 1;
                                while (++counters[p] == limits[p] && p > 0)
                                {
                                    counters[p] = 0;
                                    p--;
                                }
                            }
                        }
                    }
                }
            }
        }

        /// <summary>
        /// Unsafe implementation of applying a unary operation
        /// </summary>
        /// <typeparam name="C">The type of operation to perform</typeparam>
        /// <param name="op">The operation instance</param>
        /// <param name="scalar">The input scalar argument</param>
        /// <param name="out">The output target</param>
        internal static void UFunc_Op_Inner_Unary_Scalar_Flush_Single_TypedImpl<C>(NumCIL.UInt16.ToUInt16 op, System.Single scalar, NdArray<System.UInt16> @out)
            where C : IUnaryOp<System.Single>
        {
            unsafe
            {
                using (var f2 = new Pinner(@out.DataAccessor))
                {
                    var d2 = (System.UInt16*)f2.ptr;

                    if (@out.Shape.Dimensions.Length == 1)
                    {
                        long totalOps = @out.Shape.Dimensions[0].Length;
                        long ix2 = @out.Shape.Offset;
                        long stride2 = @out.Shape.Dimensions[0].Stride;

                        for (long i = 0; i < totalOps; i++)
                        {
                            d2[ix2] = (System.UInt16)(scalar);
                            ix2 += stride2;
                        }
                    }
                    else if (@out.Shape.Dimensions.Length == 2)
                    {
                        long opsOuter = @out.Shape.Dimensions[0].Length;
                        long opsInner = @out.Shape.Dimensions[1].Length;

                        long ix2 = @out.Shape.Offset;
                        long outerStride2 = @out.Shape.Dimensions[0].Stride;
                        long innerStride2 = @out.Shape.Dimensions[1].Stride;
                        outerStride2 -= innerStride2 * @out.Shape.Dimensions[1].Length;

                        for (long i = 0; i < opsOuter; i++)
                        {
                            for (long j = 0; j < opsInner; j++)
                            {
                                d2[ix2] = (System.UInt16)(scalar);
                                ix2 += innerStride2;
                            }

                            ix2 += outerStride2;
                        }
                    }
                    else
                    {
                        long n = @out.Shape.Dimensions.LongLength - 3;
                        long[] limits = @out.Shape.Dimensions.Where(x => n-- > 0).Select(x => x.Length).ToArray();
                        long[] counters = new long[limits.LongLength];

                        long totalOps = limits.LongLength == 0 ? 1 : limits.Aggregate<long>((a, b) => a * b);

                        //This chunck of variables are used to prevent repeated calculations of offsets
                        long dimIndex0 = 0 + limits.LongLength;
                        long dimIndex1 = 1 + limits.LongLength;
                        long dimIndex2 = 2 + limits.LongLength;

                        long opsOuter = @out.Shape.Dimensions[0 + limits.LongLength].Length;
                        long opsInner = @out.Shape.Dimensions[1 + limits.LongLength].Length;
                        long opsInnerInner = @out.Shape.Dimensions[2 + limits.LongLength].Length;

                        long outerStride3 = @out.Shape.Dimensions[dimIndex0].Stride;
                        long innerStride3 = @out.Shape.Dimensions[dimIndex1].Stride;
                        long innerInnerStride3 = @out.Shape.Dimensions[dimIndex2].Stride;
                        outerStride3 -= innerStride3 * @out.Shape.Dimensions[dimIndex1].Length;
                        innerStride3 -= innerInnerStride3 * @out.Shape.Dimensions[dimIndex2].Length;

                        for (long outer = 0; outer < totalOps; outer++)
                        {
                            //Get the array offset for the first element in the outer dimension
                            long ix3 = @out.Shape[counters];

                            for (long i = 0; i < opsOuter; i++)
                            {
                                for (long j = 0; j < opsInner; j++)
                                {
                                    for (long k = 0; k < opsInnerInner; k++)
                                    {
                                        d2[ix3] = (System.UInt16)(scalar);
                                        ix3 += innerInnerStride3;
                                    }

                                    ix3 += innerStride3;
                                }

                                ix3 += outerStride3;
                            }

                            if (counters.LongLength > 0)
                            {
                                //Basically a ripple carry adder
                                long p = counters.LongLength - 1;
                                while (++counters[p] == limits[p] && p > 0)
                                {
                                    counters[p] = 0;
                                    p--;
                                }
                            }
                        }
                    }
                }
            }
        }
        /// <summary>
        /// Unsafe implementation of applying a unary operation
        /// </summary>
        /// <typeparam name="C">The type of operation to perform</typeparam>
        /// <param name="op">The operation instance</param>
        /// <param name="in1">The input argument</param>
        /// <param name="out">The output target</param>
        internal static void UFunc_Op_Inner_Unary_Flush_Double_TypedImpl<C>(NumCIL.UInt16.ToUInt16 op, NdArray<System.Double> in1, NdArray<System.UInt16> @out)
            where C : IUnaryOp<System.Double>
        {
            unsafe
            {
                using (var f1 = new Pinner(in1.DataAccessor))
                using (var f2 = new Pinner(@out.DataAccessor))
                {
                    var d1 = (System.Double*)f1.ptr;
                    var d2 = (System.UInt16*)f2.ptr;

                    if (@out.Shape.Dimensions.Length == 1)
                    {
                        long totalOps = @out.Shape.Dimensions[0].Length;

                        long ix1 = in1.Shape.Offset;
                        long ix2 = @out.Shape.Offset;

                        long stride1 = in1.Shape.Dimensions[0].Stride;
                        long stride2 = @out.Shape.Dimensions[0].Stride;


                        if (stride1 == stride2 && ix1 == ix2)
                        {
                            //Best case, all are equal, just keep a single counter
                            for (long i = 0; i < totalOps; i++)
                            {
                                d2[ix1] = (System.UInt16)(d1[ix1]);
                                ix1 += stride1;
                            }
                        }
                        else
                        {
                            for (long i = 0; i < totalOps; i++)
                            {
                                d2[ix2] = (System.UInt16)(d1[ix1]);
                                ix1 += stride1;
                                ix2 += stride2;
                            }
                        }
                    }
                    else if (@out.Shape.Dimensions.Length == 2)
                    {
                        long opsOuter = @out.Shape.Dimensions[0].Length;
                        long opsInner = @out.Shape.Dimensions[1].Length;

                        long ix1 = in1.Shape.Offset;
                        long ix2 = @out.Shape.Offset;

                        long outerStride1 = in1.Shape.Dimensions[0].Stride;
                        long outerStride2 = @out.Shape.Dimensions[0].Stride;

                        long innerStride1 = in1.Shape.Dimensions[1].Stride;
                        long innerStride2 = @out.Shape.Dimensions[1].Stride;

                        outerStride1 -= innerStride1 * in1.Shape.Dimensions[1].Length;
                        outerStride2 -= innerStride2 * @out.Shape.Dimensions[1].Length;

                        for (long i = 0; i < opsOuter; i++)
                        {
                            for (long j = 0; j < opsInner; j++)
                            {
                                d2[ix2] = (System.UInt16)(d1[ix1]);
                                ix1 += innerStride1;
                                ix2 += innerStride2;
                            }

                            ix1 += outerStride1;
                            ix2 += outerStride2;
                        }
                    }
                    else
                    {
                        long n = in1.Shape.Dimensions.LongLength - 3;
                        long[] limits = in1.Shape.Dimensions.Where(x => n-- > 0).Select(x => x.Length).ToArray();
                        long[] counters = new long[limits.LongLength];

                        long totalOps = limits.LongLength == 0 ? 1 : limits.Aggregate<long>((a, b) => a * b);

                        //This chunck of variables are used to prevent repeated calculations of offsets
                        long dimIndex0 = 0 + limits.LongLength;
                        long dimIndex1 = 1 + limits.LongLength;
                        long dimIndex2 = 2 + limits.LongLength;

                        long opsOuter = @out.Shape.Dimensions[0 + limits.LongLength].Length;
                        long opsInner = @out.Shape.Dimensions[1 + limits.LongLength].Length;
                        long opsInnerInner = @out.Shape.Dimensions[2 + limits.LongLength].Length;

                        long outerStride1 = in1.Shape.Dimensions[dimIndex0].Stride;
                        long outerStride3 = @out.Shape.Dimensions[dimIndex0].Stride;

                        long innerStride1 = in1.Shape.Dimensions[dimIndex1].Stride;
                        long innerStride3 = @out.Shape.Dimensions[dimIndex1].Stride;

                        long innerInnerStride1 = in1.Shape.Dimensions[dimIndex2].Stride;
                        long innerInnerStride3 = @out.Shape.Dimensions[dimIndex2].Stride;

                        outerStride1 -= innerStride1 * in1.Shape.Dimensions[dimIndex1].Length;
                        outerStride3 -= innerStride3 * @out.Shape.Dimensions[dimIndex1].Length;

                        innerStride1 -= innerInnerStride1 * in1.Shape.Dimensions[dimIndex2].Length;
                        innerStride3 -= innerInnerStride3 * @out.Shape.Dimensions[dimIndex2].Length;

                        for (long outer = 0; outer < totalOps; outer++)
                        {
                            //Get the array offset for the first element in the outer dimension
                            long ix1 = in1.Shape[counters];
                            long ix3 = @out.Shape[counters];


                            for (long i = 0; i < opsOuter; i++)
                            {
                                for (long j = 0; j < opsInner; j++)
                                {
                                    for (long k = 0; k < opsInnerInner; k++)
                                    {
                                        d2[ix3] = (System.UInt16)(d1[ix1]);
                                        ix1 += innerInnerStride1;
                                        ix3 += innerInnerStride3;
                                    }

                                    ix1 += innerStride1;
                                    ix3 += innerStride3;
                                }

                                ix1 += outerStride1;
                                ix3 += outerStride3;
                            }

                            if (counters.LongLength > 0)
                            {
                                //Basically a ripple carry adder
                                long p = counters.LongLength - 1;
                                while (++counters[p] == limits[p] && p > 0)
                                {
                                    counters[p] = 0;
                                    p--;
                                }
                            }
                        }
                    }
                }
            }
        }

        /// <summary>
        /// Unsafe implementation of applying a unary operation
        /// </summary>
        /// <typeparam name="C">The type of operation to perform</typeparam>
        /// <param name="op">The operation instance</param>
        /// <param name="scalar">The input scalar argument</param>
        /// <param name="out">The output target</param>
        internal static void UFunc_Op_Inner_Unary_Scalar_Flush_Double_TypedImpl<C>(NumCIL.UInt16.ToUInt16 op, System.Double scalar, NdArray<System.UInt16> @out)
            where C : IUnaryOp<System.Double>
        {
            unsafe
            {
                using (var f2 = new Pinner(@out.DataAccessor))
                {
                    var d2 = (System.UInt16*)f2.ptr;

                    if (@out.Shape.Dimensions.Length == 1)
                    {
                        long totalOps = @out.Shape.Dimensions[0].Length;
                        long ix2 = @out.Shape.Offset;
                        long stride2 = @out.Shape.Dimensions[0].Stride;

                        for (long i = 0; i < totalOps; i++)
                        {
                            d2[ix2] = (System.UInt16)(scalar);
                            ix2 += stride2;
                        }
                    }
                    else if (@out.Shape.Dimensions.Length == 2)
                    {
                        long opsOuter = @out.Shape.Dimensions[0].Length;
                        long opsInner = @out.Shape.Dimensions[1].Length;

                        long ix2 = @out.Shape.Offset;
                        long outerStride2 = @out.Shape.Dimensions[0].Stride;
                        long innerStride2 = @out.Shape.Dimensions[1].Stride;
                        outerStride2 -= innerStride2 * @out.Shape.Dimensions[1].Length;

                        for (long i = 0; i < opsOuter; i++)
                        {
                            for (long j = 0; j < opsInner; j++)
                            {
                                d2[ix2] = (System.UInt16)(scalar);
                                ix2 += innerStride2;
                            }

                            ix2 += outerStride2;
                        }
                    }
                    else
                    {
                        long n = @out.Shape.Dimensions.LongLength - 3;
                        long[] limits = @out.Shape.Dimensions.Where(x => n-- > 0).Select(x => x.Length).ToArray();
                        long[] counters = new long[limits.LongLength];

                        long totalOps = limits.LongLength == 0 ? 1 : limits.Aggregate<long>((a, b) => a * b);

                        //This chunck of variables are used to prevent repeated calculations of offsets
                        long dimIndex0 = 0 + limits.LongLength;
                        long dimIndex1 = 1 + limits.LongLength;
                        long dimIndex2 = 2 + limits.LongLength;

                        long opsOuter = @out.Shape.Dimensions[0 + limits.LongLength].Length;
                        long opsInner = @out.Shape.Dimensions[1 + limits.LongLength].Length;
                        long opsInnerInner = @out.Shape.Dimensions[2 + limits.LongLength].Length;

                        long outerStride3 = @out.Shape.Dimensions[dimIndex0].Stride;
                        long innerStride3 = @out.Shape.Dimensions[dimIndex1].Stride;
                        long innerInnerStride3 = @out.Shape.Dimensions[dimIndex2].Stride;
                        outerStride3 -= innerStride3 * @out.Shape.Dimensions[dimIndex1].Length;
                        innerStride3 -= innerInnerStride3 * @out.Shape.Dimensions[dimIndex2].Length;

                        for (long outer = 0; outer < totalOps; outer++)
                        {
                            //Get the array offset for the first element in the outer dimension
                            long ix3 = @out.Shape[counters];

                            for (long i = 0; i < opsOuter; i++)
                            {
                                for (long j = 0; j < opsInner; j++)
                                {
                                    for (long k = 0; k < opsInnerInner; k++)
                                    {
                                        d2[ix3] = (System.UInt16)(scalar);
                                        ix3 += innerInnerStride3;
                                    }

                                    ix3 += innerStride3;
                                }

                                ix3 += outerStride3;
                            }

                            if (counters.LongLength > 0)
                            {
                                //Basically a ripple carry adder
                                long p = counters.LongLength - 1;
                                while (++counters[p] == limits[p] && p > 0)
                                {
                                    counters[p] = 0;
                                    p--;
                                }
                            }
                        }
                    }
                }
            }
        }
        /// <summary>
        /// Unsafe implementation of applying a unary operation
        /// </summary>
        /// <typeparam name="C">The type of operation to perform</typeparam>
        /// <param name="op">The operation instance</param>
        /// <param name="in1">The input argument</param>
        /// <param name="out">The output target</param>
        internal static void UFunc_Op_Inner_Unary_Flush_Boolean_TypedImpl<C>(NumCIL.Boolean.ToUInt16 op, NdArray<System.Boolean> in1, NdArray<System.UInt16> @out)
            where C : IUnaryOp<System.Boolean>
        {
            unsafe
            {
                using (var f1 = new Pinner(in1.DataAccessor))
                using (var f2 = new Pinner(@out.DataAccessor))
                {
                    var d1 = (System.Boolean*)f1.ptr;
                    var d2 = (System.UInt16*)f2.ptr;

                    if (@out.Shape.Dimensions.Length == 1)
                    {
                        long totalOps = @out.Shape.Dimensions[0].Length;

                        long ix1 = in1.Shape.Offset;
                        long ix2 = @out.Shape.Offset;

                        long stride1 = in1.Shape.Dimensions[0].Stride;
                        long stride2 = @out.Shape.Dimensions[0].Stride;


                        if (stride1 == stride2 && ix1 == ix2)
                        {
                            //Best case, all are equal, just keep a single counter
                            for (long i = 0; i < totalOps; i++)
                            {
                                d2[ix1] = (System.UInt16)(d1[ix1] ? 1 : 0 );
                                ix1 += stride1;
                            }
                        }
                        else
                        {
                            for (long i = 0; i < totalOps; i++)
                            {
                                d2[ix2] = (System.UInt16)(d1[ix1] ? 1 : 0 );
                                ix1 += stride1;
                                ix2 += stride2;
                            }
                        }
                    }
                    else if (@out.Shape.Dimensions.Length == 2)
                    {
                        long opsOuter = @out.Shape.Dimensions[0].Length;
                        long opsInner = @out.Shape.Dimensions[1].Length;

                        long ix1 = in1.Shape.Offset;
                        long ix2 = @out.Shape.Offset;

                        long outerStride1 = in1.Shape.Dimensions[0].Stride;
                        long outerStride2 = @out.Shape.Dimensions[0].Stride;

                        long innerStride1 = in1.Shape.Dimensions[1].Stride;
                        long innerStride2 = @out.Shape.Dimensions[1].Stride;

                        outerStride1 -= innerStride1 * in1.Shape.Dimensions[1].Length;
                        outerStride2 -= innerStride2 * @out.Shape.Dimensions[1].Length;

                        for (long i = 0; i < opsOuter; i++)
                        {
                            for (long j = 0; j < opsInner; j++)
                            {
                                d2[ix2] = (System.UInt16)(d1[ix1] ? 1 : 0 );
                                ix1 += innerStride1;
                                ix2 += innerStride2;
                            }

                            ix1 += outerStride1;
                            ix2 += outerStride2;
                        }
                    }
                    else
                    {
                        long n = in1.Shape.Dimensions.LongLength - 3;
                        long[] limits = in1.Shape.Dimensions.Where(x => n-- > 0).Select(x => x.Length).ToArray();
                        long[] counters = new long[limits.LongLength];

                        long totalOps = limits.LongLength == 0 ? 1 : limits.Aggregate<long>((a, b) => a * b);

                        //This chunck of variables are used to prevent repeated calculations of offsets
                        long dimIndex0 = 0 + limits.LongLength;
                        long dimIndex1 = 1 + limits.LongLength;
                        long dimIndex2 = 2 + limits.LongLength;

                        long opsOuter = @out.Shape.Dimensions[0 + limits.LongLength].Length;
                        long opsInner = @out.Shape.Dimensions[1 + limits.LongLength].Length;
                        long opsInnerInner = @out.Shape.Dimensions[2 + limits.LongLength].Length;

                        long outerStride1 = in1.Shape.Dimensions[dimIndex0].Stride;
                        long outerStride3 = @out.Shape.Dimensions[dimIndex0].Stride;

                        long innerStride1 = in1.Shape.Dimensions[dimIndex1].Stride;
                        long innerStride3 = @out.Shape.Dimensions[dimIndex1].Stride;

                        long innerInnerStride1 = in1.Shape.Dimensions[dimIndex2].Stride;
                        long innerInnerStride3 = @out.Shape.Dimensions[dimIndex2].Stride;

                        outerStride1 -= innerStride1 * in1.Shape.Dimensions[dimIndex1].Length;
                        outerStride3 -= innerStride3 * @out.Shape.Dimensions[dimIndex1].Length;

                        innerStride1 -= innerInnerStride1 * in1.Shape.Dimensions[dimIndex2].Length;
                        innerStride3 -= innerInnerStride3 * @out.Shape.Dimensions[dimIndex2].Length;

                        for (long outer = 0; outer < totalOps; outer++)
                        {
                            //Get the array offset for the first element in the outer dimension
                            long ix1 = in1.Shape[counters];
                            long ix3 = @out.Shape[counters];


                            for (long i = 0; i < opsOuter; i++)
                            {
                                for (long j = 0; j < opsInner; j++)
                                {
                                    for (long k = 0; k < opsInnerInner; k++)
                                    {
                                        d2[ix3] = (System.UInt16)(d1[ix1] ? 1 : 0 );
                                        ix1 += innerInnerStride1;
                                        ix3 += innerInnerStride3;
                                    }

                                    ix1 += innerStride1;
                                    ix3 += innerStride3;
                                }

                                ix1 += outerStride1;
                                ix3 += outerStride3;
                            }

                            if (counters.LongLength > 0)
                            {
                                //Basically a ripple carry adder
                                long p = counters.LongLength - 1;
                                while (++counters[p] == limits[p] && p > 0)
                                {
                                    counters[p] = 0;
                                    p--;
                                }
                            }
                        }
                    }
                }
            }
        }

        /// <summary>
        /// Unsafe implementation of applying a unary operation
        /// </summary>
        /// <typeparam name="C">The type of operation to perform</typeparam>
        /// <param name="op">The operation instance</param>
        /// <param name="scalar">The input scalar argument</param>
        /// <param name="out">The output target</param>
        internal static void UFunc_Op_Inner_Unary_Scalar_Flush_Boolean_TypedImpl<C>(NumCIL.Boolean.ToUInt16 op, System.Boolean scalar, NdArray<System.UInt16> @out)
            where C : IUnaryOp<System.Boolean>
        {
            unsafe
            {
                using (var f2 = new Pinner(@out.DataAccessor))
                {
                    var d2 = (System.UInt16*)f2.ptr;

                    if (@out.Shape.Dimensions.Length == 1)
                    {
                        long totalOps = @out.Shape.Dimensions[0].Length;
                        long ix2 = @out.Shape.Offset;
                        long stride2 = @out.Shape.Dimensions[0].Stride;

                        for (long i = 0; i < totalOps; i++)
                        {
                            d2[ix2] = (System.UInt16)(scalar ? 1 : 0 );
                            ix2 += stride2;
                        }
                    }
                    else if (@out.Shape.Dimensions.Length == 2)
                    {
                        long opsOuter = @out.Shape.Dimensions[0].Length;
                        long opsInner = @out.Shape.Dimensions[1].Length;

                        long ix2 = @out.Shape.Offset;
                        long outerStride2 = @out.Shape.Dimensions[0].Stride;
                        long innerStride2 = @out.Shape.Dimensions[1].Stride;
                        outerStride2 -= innerStride2 * @out.Shape.Dimensions[1].Length;

                        for (long i = 0; i < opsOuter; i++)
                        {
                            for (long j = 0; j < opsInner; j++)
                            {
                                d2[ix2] = (System.UInt16)(scalar ? 1 : 0 );
                                ix2 += innerStride2;
                            }

                            ix2 += outerStride2;
                        }
                    }
                    else
                    {
                        long n = @out.Shape.Dimensions.LongLength - 3;
                        long[] limits = @out.Shape.Dimensions.Where(x => n-- > 0).Select(x => x.Length).ToArray();
                        long[] counters = new long[limits.LongLength];

                        long totalOps = limits.LongLength == 0 ? 1 : limits.Aggregate<long>((a, b) => a * b);

                        //This chunck of variables are used to prevent repeated calculations of offsets
                        long dimIndex0 = 0 + limits.LongLength;
                        long dimIndex1 = 1 + limits.LongLength;
                        long dimIndex2 = 2 + limits.LongLength;

                        long opsOuter = @out.Shape.Dimensions[0 + limits.LongLength].Length;
                        long opsInner = @out.Shape.Dimensions[1 + limits.LongLength].Length;
                        long opsInnerInner = @out.Shape.Dimensions[2 + limits.LongLength].Length;

                        long outerStride3 = @out.Shape.Dimensions[dimIndex0].Stride;
                        long innerStride3 = @out.Shape.Dimensions[dimIndex1].Stride;
                        long innerInnerStride3 = @out.Shape.Dimensions[dimIndex2].Stride;
                        outerStride3 -= innerStride3 * @out.Shape.Dimensions[dimIndex1].Length;
                        innerStride3 -= innerInnerStride3 * @out.Shape.Dimensions[dimIndex2].Length;

                        for (long outer = 0; outer < totalOps; outer++)
                        {
                            //Get the array offset for the first element in the outer dimension
                            long ix3 = @out.Shape[counters];

                            for (long i = 0; i < opsOuter; i++)
                            {
                                for (long j = 0; j < opsInner; j++)
                                {
                                    for (long k = 0; k < opsInnerInner; k++)
                                    {
                                        d2[ix3] = (System.UInt16)(scalar ? 1 : 0 );
                                        ix3 += innerInnerStride3;
                                    }

                                    ix3 += innerStride3;
                                }

                                ix3 += outerStride3;
                            }

                            if (counters.LongLength > 0)
                            {
                                //Basically a ripple carry adder
                                long p = counters.LongLength - 1;
                                while (++counters[p] == limits[p] && p > 0)
                                {
                                    counters[p] = 0;
                                    p--;
                                }
                            }
                        }
                    }
                }
            }
        }
        /// <summary>
        /// Unsafe implementation of applying a unary operation
        /// </summary>
        /// <typeparam name="C">The type of operation to perform</typeparam>
        /// <param name="op">The operation instance</param>
        /// <param name="in1">The input argument</param>
        /// <param name="out">The output target</param>
        internal static void UFunc_Op_Inner_Unary_Flush_SByte_TypedImpl<C>(NumCIL.Int32.ToInt32 op, NdArray<System.SByte> in1, NdArray<System.Int32> @out)
            where C : IUnaryOp<System.SByte>
        {
            unsafe
            {
                using (var f1 = new Pinner(in1.DataAccessor))
                using (var f2 = new Pinner(@out.DataAccessor))
                {
                    var d1 = (System.SByte*)f1.ptr;
                    var d2 = (System.Int32*)f2.ptr;

                    if (@out.Shape.Dimensions.Length == 1)
                    {
                        long totalOps = @out.Shape.Dimensions[0].Length;

                        long ix1 = in1.Shape.Offset;
                        long ix2 = @out.Shape.Offset;

                        long stride1 = in1.Shape.Dimensions[0].Stride;
                        long stride2 = @out.Shape.Dimensions[0].Stride;


                        if (stride1 == stride2 && ix1 == ix2)
                        {
                            //Best case, all are equal, just keep a single counter
                            for (long i = 0; i < totalOps; i++)
                            {
                                d2[ix1] = (System.Int32)(d1[ix1]);
                                ix1 += stride1;
                            }
                        }
                        else
                        {
                            for (long i = 0; i < totalOps; i++)
                            {
                                d2[ix2] = (System.Int32)(d1[ix1]);
                                ix1 += stride1;
                                ix2 += stride2;
                            }
                        }
                    }
                    else if (@out.Shape.Dimensions.Length == 2)
                    {
                        long opsOuter = @out.Shape.Dimensions[0].Length;
                        long opsInner = @out.Shape.Dimensions[1].Length;

                        long ix1 = in1.Shape.Offset;
                        long ix2 = @out.Shape.Offset;

                        long outerStride1 = in1.Shape.Dimensions[0].Stride;
                        long outerStride2 = @out.Shape.Dimensions[0].Stride;

                        long innerStride1 = in1.Shape.Dimensions[1].Stride;
                        long innerStride2 = @out.Shape.Dimensions[1].Stride;

                        outerStride1 -= innerStride1 * in1.Shape.Dimensions[1].Length;
                        outerStride2 -= innerStride2 * @out.Shape.Dimensions[1].Length;

                        for (long i = 0; i < opsOuter; i++)
                        {
                            for (long j = 0; j < opsInner; j++)
                            {
                                d2[ix2] = (System.Int32)(d1[ix1]);
                                ix1 += innerStride1;
                                ix2 += innerStride2;
                            }

                            ix1 += outerStride1;
                            ix2 += outerStride2;
                        }
                    }
                    else
                    {
                        long n = in1.Shape.Dimensions.LongLength - 3;
                        long[] limits = in1.Shape.Dimensions.Where(x => n-- > 0).Select(x => x.Length).ToArray();
                        long[] counters = new long[limits.LongLength];

                        long totalOps = limits.LongLength == 0 ? 1 : limits.Aggregate<long>((a, b) => a * b);

                        //This chunck of variables are used to prevent repeated calculations of offsets
                        long dimIndex0 = 0 + limits.LongLength;
                        long dimIndex1 = 1 + limits.LongLength;
                        long dimIndex2 = 2 + limits.LongLength;

                        long opsOuter = @out.Shape.Dimensions[0 + limits.LongLength].Length;
                        long opsInner = @out.Shape.Dimensions[1 + limits.LongLength].Length;
                        long opsInnerInner = @out.Shape.Dimensions[2 + limits.LongLength].Length;

                        long outerStride1 = in1.Shape.Dimensions[dimIndex0].Stride;
                        long outerStride3 = @out.Shape.Dimensions[dimIndex0].Stride;

                        long innerStride1 = in1.Shape.Dimensions[dimIndex1].Stride;
                        long innerStride3 = @out.Shape.Dimensions[dimIndex1].Stride;

                        long innerInnerStride1 = in1.Shape.Dimensions[dimIndex2].Stride;
                        long innerInnerStride3 = @out.Shape.Dimensions[dimIndex2].Stride;

                        outerStride1 -= innerStride1 * in1.Shape.Dimensions[dimIndex1].Length;
                        outerStride3 -= innerStride3 * @out.Shape.Dimensions[dimIndex1].Length;

                        innerStride1 -= innerInnerStride1 * in1.Shape.Dimensions[dimIndex2].Length;
                        innerStride3 -= innerInnerStride3 * @out.Shape.Dimensions[dimIndex2].Length;

                        for (long outer = 0; outer < totalOps; outer++)
                        {
                            //Get the array offset for the first element in the outer dimension
                            long ix1 = in1.Shape[counters];
                            long ix3 = @out.Shape[counters];


                            for (long i = 0; i < opsOuter; i++)
                            {
                                for (long j = 0; j < opsInner; j++)
                                {
                                    for (long k = 0; k < opsInnerInner; k++)
                                    {
                                        d2[ix3] = (System.Int32)(d1[ix1]);
                                        ix1 += innerInnerStride1;
                                        ix3 += innerInnerStride3;
                                    }

                                    ix1 += innerStride1;
                                    ix3 += innerStride3;
                                }

                                ix1 += outerStride1;
                                ix3 += outerStride3;
                            }

                            if (counters.LongLength > 0)
                            {
                                //Basically a ripple carry adder
                                long p = counters.LongLength - 1;
                                while (++counters[p] == limits[p] && p > 0)
                                {
                                    counters[p] = 0;
                                    p--;
                                }
                            }
                        }
                    }
                }
            }
        }

        /// <summary>
        /// Unsafe implementation of applying a unary operation
        /// </summary>
        /// <typeparam name="C">The type of operation to perform</typeparam>
        /// <param name="op">The operation instance</param>
        /// <param name="scalar">The input scalar argument</param>
        /// <param name="out">The output target</param>
        internal static void UFunc_Op_Inner_Unary_Scalar_Flush_SByte_TypedImpl<C>(NumCIL.Int32.ToInt32 op, System.SByte scalar, NdArray<System.Int32> @out)
            where C : IUnaryOp<System.SByte>
        {
            unsafe
            {
                using (var f2 = new Pinner(@out.DataAccessor))
                {
                    var d2 = (System.Int32*)f2.ptr;

                    if (@out.Shape.Dimensions.Length == 1)
                    {
                        long totalOps = @out.Shape.Dimensions[0].Length;
                        long ix2 = @out.Shape.Offset;
                        long stride2 = @out.Shape.Dimensions[0].Stride;

                        for (long i = 0; i < totalOps; i++)
                        {
                            d2[ix2] = (System.Int32)(scalar);
                            ix2 += stride2;
                        }
                    }
                    else if (@out.Shape.Dimensions.Length == 2)
                    {
                        long opsOuter = @out.Shape.Dimensions[0].Length;
                        long opsInner = @out.Shape.Dimensions[1].Length;

                        long ix2 = @out.Shape.Offset;
                        long outerStride2 = @out.Shape.Dimensions[0].Stride;
                        long innerStride2 = @out.Shape.Dimensions[1].Stride;
                        outerStride2 -= innerStride2 * @out.Shape.Dimensions[1].Length;

                        for (long i = 0; i < opsOuter; i++)
                        {
                            for (long j = 0; j < opsInner; j++)
                            {
                                d2[ix2] = (System.Int32)(scalar);
                                ix2 += innerStride2;
                            }

                            ix2 += outerStride2;
                        }
                    }
                    else
                    {
                        long n = @out.Shape.Dimensions.LongLength - 3;
                        long[] limits = @out.Shape.Dimensions.Where(x => n-- > 0).Select(x => x.Length).ToArray();
                        long[] counters = new long[limits.LongLength];

                        long totalOps = limits.LongLength == 0 ? 1 : limits.Aggregate<long>((a, b) => a * b);

                        //This chunck of variables are used to prevent repeated calculations of offsets
                        long dimIndex0 = 0 + limits.LongLength;
                        long dimIndex1 = 1 + limits.LongLength;
                        long dimIndex2 = 2 + limits.LongLength;

                        long opsOuter = @out.Shape.Dimensions[0 + limits.LongLength].Length;
                        long opsInner = @out.Shape.Dimensions[1 + limits.LongLength].Length;
                        long opsInnerInner = @out.Shape.Dimensions[2 + limits.LongLength].Length;

                        long outerStride3 = @out.Shape.Dimensions[dimIndex0].Stride;
                        long innerStride3 = @out.Shape.Dimensions[dimIndex1].Stride;
                        long innerInnerStride3 = @out.Shape.Dimensions[dimIndex2].Stride;
                        outerStride3 -= innerStride3 * @out.Shape.Dimensions[dimIndex1].Length;
                        innerStride3 -= innerInnerStride3 * @out.Shape.Dimensions[dimIndex2].Length;

                        for (long outer = 0; outer < totalOps; outer++)
                        {
                            //Get the array offset for the first element in the outer dimension
                            long ix3 = @out.Shape[counters];

                            for (long i = 0; i < opsOuter; i++)
                            {
                                for (long j = 0; j < opsInner; j++)
                                {
                                    for (long k = 0; k < opsInnerInner; k++)
                                    {
                                        d2[ix3] = (System.Int32)(scalar);
                                        ix3 += innerInnerStride3;
                                    }

                                    ix3 += innerStride3;
                                }

                                ix3 += outerStride3;
                            }

                            if (counters.LongLength > 0)
                            {
                                //Basically a ripple carry adder
                                long p = counters.LongLength - 1;
                                while (++counters[p] == limits[p] && p > 0)
                                {
                                    counters[p] = 0;
                                    p--;
                                }
                            }
                        }
                    }
                }
            }
        }
        /// <summary>
        /// Unsafe implementation of applying a unary operation
        /// </summary>
        /// <typeparam name="C">The type of operation to perform</typeparam>
        /// <param name="op">The operation instance</param>
        /// <param name="in1">The input argument</param>
        /// <param name="out">The output target</param>
        internal static void UFunc_Op_Inner_Unary_Flush_Byte_TypedImpl<C>(NumCIL.Int32.ToInt32 op, NdArray<System.Byte> in1, NdArray<System.Int32> @out)
            where C : IUnaryOp<System.Byte>
        {
            unsafe
            {
                using (var f1 = new Pinner(in1.DataAccessor))
                using (var f2 = new Pinner(@out.DataAccessor))
                {
                    var d1 = (System.Byte*)f1.ptr;
                    var d2 = (System.Int32*)f2.ptr;

                    if (@out.Shape.Dimensions.Length == 1)
                    {
                        long totalOps = @out.Shape.Dimensions[0].Length;

                        long ix1 = in1.Shape.Offset;
                        long ix2 = @out.Shape.Offset;

                        long stride1 = in1.Shape.Dimensions[0].Stride;
                        long stride2 = @out.Shape.Dimensions[0].Stride;


                        if (stride1 == stride2 && ix1 == ix2)
                        {
                            //Best case, all are equal, just keep a single counter
                            for (long i = 0; i < totalOps; i++)
                            {
                                d2[ix1] = (System.Int32)(d1[ix1]);
                                ix1 += stride1;
                            }
                        }
                        else
                        {
                            for (long i = 0; i < totalOps; i++)
                            {
                                d2[ix2] = (System.Int32)(d1[ix1]);
                                ix1 += stride1;
                                ix2 += stride2;
                            }
                        }
                    }
                    else if (@out.Shape.Dimensions.Length == 2)
                    {
                        long opsOuter = @out.Shape.Dimensions[0].Length;
                        long opsInner = @out.Shape.Dimensions[1].Length;

                        long ix1 = in1.Shape.Offset;
                        long ix2 = @out.Shape.Offset;

                        long outerStride1 = in1.Shape.Dimensions[0].Stride;
                        long outerStride2 = @out.Shape.Dimensions[0].Stride;

                        long innerStride1 = in1.Shape.Dimensions[1].Stride;
                        long innerStride2 = @out.Shape.Dimensions[1].Stride;

                        outerStride1 -= innerStride1 * in1.Shape.Dimensions[1].Length;
                        outerStride2 -= innerStride2 * @out.Shape.Dimensions[1].Length;

                        for (long i = 0; i < opsOuter; i++)
                        {
                            for (long j = 0; j < opsInner; j++)
                            {
                                d2[ix2] = (System.Int32)(d1[ix1]);
                                ix1 += innerStride1;
                                ix2 += innerStride2;
                            }

                            ix1 += outerStride1;
                            ix2 += outerStride2;
                        }
                    }
                    else
                    {
                        long n = in1.Shape.Dimensions.LongLength - 3;
                        long[] limits = in1.Shape.Dimensions.Where(x => n-- > 0).Select(x => x.Length).ToArray();
                        long[] counters = new long[limits.LongLength];

                        long totalOps = limits.LongLength == 0 ? 1 : limits.Aggregate<long>((a, b) => a * b);

                        //This chunck of variables are used to prevent repeated calculations of offsets
                        long dimIndex0 = 0 + limits.LongLength;
                        long dimIndex1 = 1 + limits.LongLength;
                        long dimIndex2 = 2 + limits.LongLength;

                        long opsOuter = @out.Shape.Dimensions[0 + limits.LongLength].Length;
                        long opsInner = @out.Shape.Dimensions[1 + limits.LongLength].Length;
                        long opsInnerInner = @out.Shape.Dimensions[2 + limits.LongLength].Length;

                        long outerStride1 = in1.Shape.Dimensions[dimIndex0].Stride;
                        long outerStride3 = @out.Shape.Dimensions[dimIndex0].Stride;

                        long innerStride1 = in1.Shape.Dimensions[dimIndex1].Stride;
                        long innerStride3 = @out.Shape.Dimensions[dimIndex1].Stride;

                        long innerInnerStride1 = in1.Shape.Dimensions[dimIndex2].Stride;
                        long innerInnerStride3 = @out.Shape.Dimensions[dimIndex2].Stride;

                        outerStride1 -= innerStride1 * in1.Shape.Dimensions[dimIndex1].Length;
                        outerStride3 -= innerStride3 * @out.Shape.Dimensions[dimIndex1].Length;

                        innerStride1 -= innerInnerStride1 * in1.Shape.Dimensions[dimIndex2].Length;
                        innerStride3 -= innerInnerStride3 * @out.Shape.Dimensions[dimIndex2].Length;

                        for (long outer = 0; outer < totalOps; outer++)
                        {
                            //Get the array offset for the first element in the outer dimension
                            long ix1 = in1.Shape[counters];
                            long ix3 = @out.Shape[counters];


                            for (long i = 0; i < opsOuter; i++)
                            {
                                for (long j = 0; j < opsInner; j++)
                                {
                                    for (long k = 0; k < opsInnerInner; k++)
                                    {
                                        d2[ix3] = (System.Int32)(d1[ix1]);
                                        ix1 += innerInnerStride1;
                                        ix3 += innerInnerStride3;
                                    }

                                    ix1 += innerStride1;
                                    ix3 += innerStride3;
                                }

                                ix1 += outerStride1;
                                ix3 += outerStride3;
                            }

                            if (counters.LongLength > 0)
                            {
                                //Basically a ripple carry adder
                                long p = counters.LongLength - 1;
                                while (++counters[p] == limits[p] && p > 0)
                                {
                                    counters[p] = 0;
                                    p--;
                                }
                            }
                        }
                    }
                }
            }
        }

        /// <summary>
        /// Unsafe implementation of applying a unary operation
        /// </summary>
        /// <typeparam name="C">The type of operation to perform</typeparam>
        /// <param name="op">The operation instance</param>
        /// <param name="scalar">The input scalar argument</param>
        /// <param name="out">The output target</param>
        internal static void UFunc_Op_Inner_Unary_Scalar_Flush_Byte_TypedImpl<C>(NumCIL.Int32.ToInt32 op, System.Byte scalar, NdArray<System.Int32> @out)
            where C : IUnaryOp<System.Byte>
        {
            unsafe
            {
                using (var f2 = new Pinner(@out.DataAccessor))
                {
                    var d2 = (System.Int32*)f2.ptr;

                    if (@out.Shape.Dimensions.Length == 1)
                    {
                        long totalOps = @out.Shape.Dimensions[0].Length;
                        long ix2 = @out.Shape.Offset;
                        long stride2 = @out.Shape.Dimensions[0].Stride;

                        for (long i = 0; i < totalOps; i++)
                        {
                            d2[ix2] = (System.Int32)(scalar);
                            ix2 += stride2;
                        }
                    }
                    else if (@out.Shape.Dimensions.Length == 2)
                    {
                        long opsOuter = @out.Shape.Dimensions[0].Length;
                        long opsInner = @out.Shape.Dimensions[1].Length;

                        long ix2 = @out.Shape.Offset;
                        long outerStride2 = @out.Shape.Dimensions[0].Stride;
                        long innerStride2 = @out.Shape.Dimensions[1].Stride;
                        outerStride2 -= innerStride2 * @out.Shape.Dimensions[1].Length;

                        for (long i = 0; i < opsOuter; i++)
                        {
                            for (long j = 0; j < opsInner; j++)
                            {
                                d2[ix2] = (System.Int32)(scalar);
                                ix2 += innerStride2;
                            }

                            ix2 += outerStride2;
                        }
                    }
                    else
                    {
                        long n = @out.Shape.Dimensions.LongLength - 3;
                        long[] limits = @out.Shape.Dimensions.Where(x => n-- > 0).Select(x => x.Length).ToArray();
                        long[] counters = new long[limits.LongLength];

                        long totalOps = limits.LongLength == 0 ? 1 : limits.Aggregate<long>((a, b) => a * b);

                        //This chunck of variables are used to prevent repeated calculations of offsets
                        long dimIndex0 = 0 + limits.LongLength;
                        long dimIndex1 = 1 + limits.LongLength;
                        long dimIndex2 = 2 + limits.LongLength;

                        long opsOuter = @out.Shape.Dimensions[0 + limits.LongLength].Length;
                        long opsInner = @out.Shape.Dimensions[1 + limits.LongLength].Length;
                        long opsInnerInner = @out.Shape.Dimensions[2 + limits.LongLength].Length;

                        long outerStride3 = @out.Shape.Dimensions[dimIndex0].Stride;
                        long innerStride3 = @out.Shape.Dimensions[dimIndex1].Stride;
                        long innerInnerStride3 = @out.Shape.Dimensions[dimIndex2].Stride;
                        outerStride3 -= innerStride3 * @out.Shape.Dimensions[dimIndex1].Length;
                        innerStride3 -= innerInnerStride3 * @out.Shape.Dimensions[dimIndex2].Length;

                        for (long outer = 0; outer < totalOps; outer++)
                        {
                            //Get the array offset for the first element in the outer dimension
                            long ix3 = @out.Shape[counters];

                            for (long i = 0; i < opsOuter; i++)
                            {
                                for (long j = 0; j < opsInner; j++)
                                {
                                    for (long k = 0; k < opsInnerInner; k++)
                                    {
                                        d2[ix3] = (System.Int32)(scalar);
                                        ix3 += innerInnerStride3;
                                    }

                                    ix3 += innerStride3;
                                }

                                ix3 += outerStride3;
                            }

                            if (counters.LongLength > 0)
                            {
                                //Basically a ripple carry adder
                                long p = counters.LongLength - 1;
                                while (++counters[p] == limits[p] && p > 0)
                                {
                                    counters[p] = 0;
                                    p--;
                                }
                            }
                        }
                    }
                }
            }
        }
        /// <summary>
        /// Unsafe implementation of applying a unary operation
        /// </summary>
        /// <typeparam name="C">The type of operation to perform</typeparam>
        /// <param name="op">The operation instance</param>
        /// <param name="in1">The input argument</param>
        /// <param name="out">The output target</param>
        internal static void UFunc_Op_Inner_Unary_Flush_Int16_TypedImpl<C>(NumCIL.Int32.ToInt32 op, NdArray<System.Int16> in1, NdArray<System.Int32> @out)
            where C : IUnaryOp<System.Int16>
        {
            unsafe
            {
                using (var f1 = new Pinner(in1.DataAccessor))
                using (var f2 = new Pinner(@out.DataAccessor))
                {
                    var d1 = (System.Int16*)f1.ptr;
                    var d2 = (System.Int32*)f2.ptr;

                    if (@out.Shape.Dimensions.Length == 1)
                    {
                        long totalOps = @out.Shape.Dimensions[0].Length;

                        long ix1 = in1.Shape.Offset;
                        long ix2 = @out.Shape.Offset;

                        long stride1 = in1.Shape.Dimensions[0].Stride;
                        long stride2 = @out.Shape.Dimensions[0].Stride;


                        if (stride1 == stride2 && ix1 == ix2)
                        {
                            //Best case, all are equal, just keep a single counter
                            for (long i = 0; i < totalOps; i++)
                            {
                                d2[ix1] = (System.Int32)(d1[ix1]);
                                ix1 += stride1;
                            }
                        }
                        else
                        {
                            for (long i = 0; i < totalOps; i++)
                            {
                                d2[ix2] = (System.Int32)(d1[ix1]);
                                ix1 += stride1;
                                ix2 += stride2;
                            }
                        }
                    }
                    else if (@out.Shape.Dimensions.Length == 2)
                    {
                        long opsOuter = @out.Shape.Dimensions[0].Length;
                        long opsInner = @out.Shape.Dimensions[1].Length;

                        long ix1 = in1.Shape.Offset;
                        long ix2 = @out.Shape.Offset;

                        long outerStride1 = in1.Shape.Dimensions[0].Stride;
                        long outerStride2 = @out.Shape.Dimensions[0].Stride;

                        long innerStride1 = in1.Shape.Dimensions[1].Stride;
                        long innerStride2 = @out.Shape.Dimensions[1].Stride;

                        outerStride1 -= innerStride1 * in1.Shape.Dimensions[1].Length;
                        outerStride2 -= innerStride2 * @out.Shape.Dimensions[1].Length;

                        for (long i = 0; i < opsOuter; i++)
                        {
                            for (long j = 0; j < opsInner; j++)
                            {
                                d2[ix2] = (System.Int32)(d1[ix1]);
                                ix1 += innerStride1;
                                ix2 += innerStride2;
                            }

                            ix1 += outerStride1;
                            ix2 += outerStride2;
                        }
                    }
                    else
                    {
                        long n = in1.Shape.Dimensions.LongLength - 3;
                        long[] limits = in1.Shape.Dimensions.Where(x => n-- > 0).Select(x => x.Length).ToArray();
                        long[] counters = new long[limits.LongLength];

                        long totalOps = limits.LongLength == 0 ? 1 : limits.Aggregate<long>((a, b) => a * b);

                        //This chunck of variables are used to prevent repeated calculations of offsets
                        long dimIndex0 = 0 + limits.LongLength;
                        long dimIndex1 = 1 + limits.LongLength;
                        long dimIndex2 = 2 + limits.LongLength;

                        long opsOuter = @out.Shape.Dimensions[0 + limits.LongLength].Length;
                        long opsInner = @out.Shape.Dimensions[1 + limits.LongLength].Length;
                        long opsInnerInner = @out.Shape.Dimensions[2 + limits.LongLength].Length;

                        long outerStride1 = in1.Shape.Dimensions[dimIndex0].Stride;
                        long outerStride3 = @out.Shape.Dimensions[dimIndex0].Stride;

                        long innerStride1 = in1.Shape.Dimensions[dimIndex1].Stride;
                        long innerStride3 = @out.Shape.Dimensions[dimIndex1].Stride;

                        long innerInnerStride1 = in1.Shape.Dimensions[dimIndex2].Stride;
                        long innerInnerStride3 = @out.Shape.Dimensions[dimIndex2].Stride;

                        outerStride1 -= innerStride1 * in1.Shape.Dimensions[dimIndex1].Length;
                        outerStride3 -= innerStride3 * @out.Shape.Dimensions[dimIndex1].Length;

                        innerStride1 -= innerInnerStride1 * in1.Shape.Dimensions[dimIndex2].Length;
                        innerStride3 -= innerInnerStride3 * @out.Shape.Dimensions[dimIndex2].Length;

                        for (long outer = 0; outer < totalOps; outer++)
                        {
                            //Get the array offset for the first element in the outer dimension
                            long ix1 = in1.Shape[counters];
                            long ix3 = @out.Shape[counters];


                            for (long i = 0; i < opsOuter; i++)
                            {
                                for (long j = 0; j < opsInner; j++)
                                {
                                    for (long k = 0; k < opsInnerInner; k++)
                                    {
                                        d2[ix3] = (System.Int32)(d1[ix1]);
                                        ix1 += innerInnerStride1;
                                        ix3 += innerInnerStride3;
                                    }

                                    ix1 += innerStride1;
                                    ix3 += innerStride3;
                                }

                                ix1 += outerStride1;
                                ix3 += outerStride3;
                            }

                            if (counters.LongLength > 0)
                            {
                                //Basically a ripple carry adder
                                long p = counters.LongLength - 1;
                                while (++counters[p] == limits[p] && p > 0)
                                {
                                    counters[p] = 0;
                                    p--;
                                }
                            }
                        }
                    }
                }
            }
        }

        /// <summary>
        /// Unsafe implementation of applying a unary operation
        /// </summary>
        /// <typeparam name="C">The type of operation to perform</typeparam>
        /// <param name="op">The operation instance</param>
        /// <param name="scalar">The input scalar argument</param>
        /// <param name="out">The output target</param>
        internal static void UFunc_Op_Inner_Unary_Scalar_Flush_Int16_TypedImpl<C>(NumCIL.Int32.ToInt32 op, System.Int16 scalar, NdArray<System.Int32> @out)
            where C : IUnaryOp<System.Int16>
        {
            unsafe
            {
                using (var f2 = new Pinner(@out.DataAccessor))
                {
                    var d2 = (System.Int32*)f2.ptr;

                    if (@out.Shape.Dimensions.Length == 1)
                    {
                        long totalOps = @out.Shape.Dimensions[0].Length;
                        long ix2 = @out.Shape.Offset;
                        long stride2 = @out.Shape.Dimensions[0].Stride;

                        for (long i = 0; i < totalOps; i++)
                        {
                            d2[ix2] = (System.Int32)(scalar);
                            ix2 += stride2;
                        }
                    }
                    else if (@out.Shape.Dimensions.Length == 2)
                    {
                        long opsOuter = @out.Shape.Dimensions[0].Length;
                        long opsInner = @out.Shape.Dimensions[1].Length;

                        long ix2 = @out.Shape.Offset;
                        long outerStride2 = @out.Shape.Dimensions[0].Stride;
                        long innerStride2 = @out.Shape.Dimensions[1].Stride;
                        outerStride2 -= innerStride2 * @out.Shape.Dimensions[1].Length;

                        for (long i = 0; i < opsOuter; i++)
                        {
                            for (long j = 0; j < opsInner; j++)
                            {
                                d2[ix2] = (System.Int32)(scalar);
                                ix2 += innerStride2;
                            }

                            ix2 += outerStride2;
                        }
                    }
                    else
                    {
                        long n = @out.Shape.Dimensions.LongLength - 3;
                        long[] limits = @out.Shape.Dimensions.Where(x => n-- > 0).Select(x => x.Length).ToArray();
                        long[] counters = new long[limits.LongLength];

                        long totalOps = limits.LongLength == 0 ? 1 : limits.Aggregate<long>((a, b) => a * b);

                        //This chunck of variables are used to prevent repeated calculations of offsets
                        long dimIndex0 = 0 + limits.LongLength;
                        long dimIndex1 = 1 + limits.LongLength;
                        long dimIndex2 = 2 + limits.LongLength;

                        long opsOuter = @out.Shape.Dimensions[0 + limits.LongLength].Length;
                        long opsInner = @out.Shape.Dimensions[1 + limits.LongLength].Length;
                        long opsInnerInner = @out.Shape.Dimensions[2 + limits.LongLength].Length;

                        long outerStride3 = @out.Shape.Dimensions[dimIndex0].Stride;
                        long innerStride3 = @out.Shape.Dimensions[dimIndex1].Stride;
                        long innerInnerStride3 = @out.Shape.Dimensions[dimIndex2].Stride;
                        outerStride3 -= innerStride3 * @out.Shape.Dimensions[dimIndex1].Length;
                        innerStride3 -= innerInnerStride3 * @out.Shape.Dimensions[dimIndex2].Length;

                        for (long outer = 0; outer < totalOps; outer++)
                        {
                            //Get the array offset for the first element in the outer dimension
                            long ix3 = @out.Shape[counters];

                            for (long i = 0; i < opsOuter; i++)
                            {
                                for (long j = 0; j < opsInner; j++)
                                {
                                    for (long k = 0; k < opsInnerInner; k++)
                                    {
                                        d2[ix3] = (System.Int32)(scalar);
                                        ix3 += innerInnerStride3;
                                    }

                                    ix3 += innerStride3;
                                }

                                ix3 += outerStride3;
                            }

                            if (counters.LongLength > 0)
                            {
                                //Basically a ripple carry adder
                                long p = counters.LongLength - 1;
                                while (++counters[p] == limits[p] && p > 0)
                                {
                                    counters[p] = 0;
                                    p--;
                                }
                            }
                        }
                    }
                }
            }
        }
        /// <summary>
        /// Unsafe implementation of applying a unary operation
        /// </summary>
        /// <typeparam name="C">The type of operation to perform</typeparam>
        /// <param name="op">The operation instance</param>
        /// <param name="in1">The input argument</param>
        /// <param name="out">The output target</param>
        internal static void UFunc_Op_Inner_Unary_Flush_UInt16_TypedImpl<C>(NumCIL.Int32.ToInt32 op, NdArray<System.UInt16> in1, NdArray<System.Int32> @out)
            where C : IUnaryOp<System.UInt16>
        {
            unsafe
            {
                using (var f1 = new Pinner(in1.DataAccessor))
                using (var f2 = new Pinner(@out.DataAccessor))
                {
                    var d1 = (System.UInt16*)f1.ptr;
                    var d2 = (System.Int32*)f2.ptr;

                    if (@out.Shape.Dimensions.Length == 1)
                    {
                        long totalOps = @out.Shape.Dimensions[0].Length;

                        long ix1 = in1.Shape.Offset;
                        long ix2 = @out.Shape.Offset;

                        long stride1 = in1.Shape.Dimensions[0].Stride;
                        long stride2 = @out.Shape.Dimensions[0].Stride;


                        if (stride1 == stride2 && ix1 == ix2)
                        {
                            //Best case, all are equal, just keep a single counter
                            for (long i = 0; i < totalOps; i++)
                            {
                                d2[ix1] = (System.Int32)(d1[ix1]);
                                ix1 += stride1;
                            }
                        }
                        else
                        {
                            for (long i = 0; i < totalOps; i++)
                            {
                                d2[ix2] = (System.Int32)(d1[ix1]);
                                ix1 += stride1;
                                ix2 += stride2;
                            }
                        }
                    }
                    else if (@out.Shape.Dimensions.Length == 2)
                    {
                        long opsOuter = @out.Shape.Dimensions[0].Length;
                        long opsInner = @out.Shape.Dimensions[1].Length;

                        long ix1 = in1.Shape.Offset;
                        long ix2 = @out.Shape.Offset;

                        long outerStride1 = in1.Shape.Dimensions[0].Stride;
                        long outerStride2 = @out.Shape.Dimensions[0].Stride;

                        long innerStride1 = in1.Shape.Dimensions[1].Stride;
                        long innerStride2 = @out.Shape.Dimensions[1].Stride;

                        outerStride1 -= innerStride1 * in1.Shape.Dimensions[1].Length;
                        outerStride2 -= innerStride2 * @out.Shape.Dimensions[1].Length;

                        for (long i = 0; i < opsOuter; i++)
                        {
                            for (long j = 0; j < opsInner; j++)
                            {
                                d2[ix2] = (System.Int32)(d1[ix1]);
                                ix1 += innerStride1;
                                ix2 += innerStride2;
                            }

                            ix1 += outerStride1;
                            ix2 += outerStride2;
                        }
                    }
                    else
                    {
                        long n = in1.Shape.Dimensions.LongLength - 3;
                        long[] limits = in1.Shape.Dimensions.Where(x => n-- > 0).Select(x => x.Length).ToArray();
                        long[] counters = new long[limits.LongLength];

                        long totalOps = limits.LongLength == 0 ? 1 : limits.Aggregate<long>((a, b) => a * b);

                        //This chunck of variables are used to prevent repeated calculations of offsets
                        long dimIndex0 = 0 + limits.LongLength;
                        long dimIndex1 = 1 + limits.LongLength;
                        long dimIndex2 = 2 + limits.LongLength;

                        long opsOuter = @out.Shape.Dimensions[0 + limits.LongLength].Length;
                        long opsInner = @out.Shape.Dimensions[1 + limits.LongLength].Length;
                        long opsInnerInner = @out.Shape.Dimensions[2 + limits.LongLength].Length;

                        long outerStride1 = in1.Shape.Dimensions[dimIndex0].Stride;
                        long outerStride3 = @out.Shape.Dimensions[dimIndex0].Stride;

                        long innerStride1 = in1.Shape.Dimensions[dimIndex1].Stride;
                        long innerStride3 = @out.Shape.Dimensions[dimIndex1].Stride;

                        long innerInnerStride1 = in1.Shape.Dimensions[dimIndex2].Stride;
                        long innerInnerStride3 = @out.Shape.Dimensions[dimIndex2].Stride;

                        outerStride1 -= innerStride1 * in1.Shape.Dimensions[dimIndex1].Length;
                        outerStride3 -= innerStride3 * @out.Shape.Dimensions[dimIndex1].Length;

                        innerStride1 -= innerInnerStride1 * in1.Shape.Dimensions[dimIndex2].Length;
                        innerStride3 -= innerInnerStride3 * @out.Shape.Dimensions[dimIndex2].Length;

                        for (long outer = 0; outer < totalOps; outer++)
                        {
                            //Get the array offset for the first element in the outer dimension
                            long ix1 = in1.Shape[counters];
                            long ix3 = @out.Shape[counters];


                            for (long i = 0; i < opsOuter; i++)
                            {
                                for (long j = 0; j < opsInner; j++)
                                {
                                    for (long k = 0; k < opsInnerInner; k++)
                                    {
                                        d2[ix3] = (System.Int32)(d1[ix1]);
                                        ix1 += innerInnerStride1;
                                        ix3 += innerInnerStride3;
                                    }

                                    ix1 += innerStride1;
                                    ix3 += innerStride3;
                                }

                                ix1 += outerStride1;
                                ix3 += outerStride3;
                            }

                            if (counters.LongLength > 0)
                            {
                                //Basically a ripple carry adder
                                long p = counters.LongLength - 1;
                                while (++counters[p] == limits[p] && p > 0)
                                {
                                    counters[p] = 0;
                                    p--;
                                }
                            }
                        }
                    }
                }
            }
        }

        /// <summary>
        /// Unsafe implementation of applying a unary operation
        /// </summary>
        /// <typeparam name="C">The type of operation to perform</typeparam>
        /// <param name="op">The operation instance</param>
        /// <param name="scalar">The input scalar argument</param>
        /// <param name="out">The output target</param>
        internal static void UFunc_Op_Inner_Unary_Scalar_Flush_UInt16_TypedImpl<C>(NumCIL.Int32.ToInt32 op, System.UInt16 scalar, NdArray<System.Int32> @out)
            where C : IUnaryOp<System.UInt16>
        {
            unsafe
            {
                using (var f2 = new Pinner(@out.DataAccessor))
                {
                    var d2 = (System.Int32*)f2.ptr;

                    if (@out.Shape.Dimensions.Length == 1)
                    {
                        long totalOps = @out.Shape.Dimensions[0].Length;
                        long ix2 = @out.Shape.Offset;
                        long stride2 = @out.Shape.Dimensions[0].Stride;

                        for (long i = 0; i < totalOps; i++)
                        {
                            d2[ix2] = (System.Int32)(scalar);
                            ix2 += stride2;
                        }
                    }
                    else if (@out.Shape.Dimensions.Length == 2)
                    {
                        long opsOuter = @out.Shape.Dimensions[0].Length;
                        long opsInner = @out.Shape.Dimensions[1].Length;

                        long ix2 = @out.Shape.Offset;
                        long outerStride2 = @out.Shape.Dimensions[0].Stride;
                        long innerStride2 = @out.Shape.Dimensions[1].Stride;
                        outerStride2 -= innerStride2 * @out.Shape.Dimensions[1].Length;

                        for (long i = 0; i < opsOuter; i++)
                        {
                            for (long j = 0; j < opsInner; j++)
                            {
                                d2[ix2] = (System.Int32)(scalar);
                                ix2 += innerStride2;
                            }

                            ix2 += outerStride2;
                        }
                    }
                    else
                    {
                        long n = @out.Shape.Dimensions.LongLength - 3;
                        long[] limits = @out.Shape.Dimensions.Where(x => n-- > 0).Select(x => x.Length).ToArray();
                        long[] counters = new long[limits.LongLength];

                        long totalOps = limits.LongLength == 0 ? 1 : limits.Aggregate<long>((a, b) => a * b);

                        //This chunck of variables are used to prevent repeated calculations of offsets
                        long dimIndex0 = 0 + limits.LongLength;
                        long dimIndex1 = 1 + limits.LongLength;
                        long dimIndex2 = 2 + limits.LongLength;

                        long opsOuter = @out.Shape.Dimensions[0 + limits.LongLength].Length;
                        long opsInner = @out.Shape.Dimensions[1 + limits.LongLength].Length;
                        long opsInnerInner = @out.Shape.Dimensions[2 + limits.LongLength].Length;

                        long outerStride3 = @out.Shape.Dimensions[dimIndex0].Stride;
                        long innerStride3 = @out.Shape.Dimensions[dimIndex1].Stride;
                        long innerInnerStride3 = @out.Shape.Dimensions[dimIndex2].Stride;
                        outerStride3 -= innerStride3 * @out.Shape.Dimensions[dimIndex1].Length;
                        innerStride3 -= innerInnerStride3 * @out.Shape.Dimensions[dimIndex2].Length;

                        for (long outer = 0; outer < totalOps; outer++)
                        {
                            //Get the array offset for the first element in the outer dimension
                            long ix3 = @out.Shape[counters];

                            for (long i = 0; i < opsOuter; i++)
                            {
                                for (long j = 0; j < opsInner; j++)
                                {
                                    for (long k = 0; k < opsInnerInner; k++)
                                    {
                                        d2[ix3] = (System.Int32)(scalar);
                                        ix3 += innerInnerStride3;
                                    }

                                    ix3 += innerStride3;
                                }

                                ix3 += outerStride3;
                            }

                            if (counters.LongLength > 0)
                            {
                                //Basically a ripple carry adder
                                long p = counters.LongLength - 1;
                                while (++counters[p] == limits[p] && p > 0)
                                {
                                    counters[p] = 0;
                                    p--;
                                }
                            }
                        }
                    }
                }
            }
        }
        /// <summary>
        /// Unsafe implementation of applying a unary operation
        /// </summary>
        /// <typeparam name="C">The type of operation to perform</typeparam>
        /// <param name="op">The operation instance</param>
        /// <param name="in1">The input argument</param>
        /// <param name="out">The output target</param>
        internal static void UFunc_Op_Inner_Unary_Flush_UInt32_TypedImpl<C>(NumCIL.Int32.ToInt32 op, NdArray<System.UInt32> in1, NdArray<System.Int32> @out)
            where C : IUnaryOp<System.UInt32>
        {
            unsafe
            {
                using (var f1 = new Pinner(in1.DataAccessor))
                using (var f2 = new Pinner(@out.DataAccessor))
                {
                    var d1 = (System.UInt32*)f1.ptr;
                    var d2 = (System.Int32*)f2.ptr;

                    if (@out.Shape.Dimensions.Length == 1)
                    {
                        long totalOps = @out.Shape.Dimensions[0].Length;

                        long ix1 = in1.Shape.Offset;
                        long ix2 = @out.Shape.Offset;

                        long stride1 = in1.Shape.Dimensions[0].Stride;
                        long stride2 = @out.Shape.Dimensions[0].Stride;


                        if (stride1 == stride2 && ix1 == ix2)
                        {
                            //Best case, all are equal, just keep a single counter
                            for (long i = 0; i < totalOps; i++)
                            {
                                d2[ix1] = (System.Int32)(d1[ix1]);
                                ix1 += stride1;
                            }
                        }
                        else
                        {
                            for (long i = 0; i < totalOps; i++)
                            {
                                d2[ix2] = (System.Int32)(d1[ix1]);
                                ix1 += stride1;
                                ix2 += stride2;
                            }
                        }
                    }
                    else if (@out.Shape.Dimensions.Length == 2)
                    {
                        long opsOuter = @out.Shape.Dimensions[0].Length;
                        long opsInner = @out.Shape.Dimensions[1].Length;

                        long ix1 = in1.Shape.Offset;
                        long ix2 = @out.Shape.Offset;

                        long outerStride1 = in1.Shape.Dimensions[0].Stride;
                        long outerStride2 = @out.Shape.Dimensions[0].Stride;

                        long innerStride1 = in1.Shape.Dimensions[1].Stride;
                        long innerStride2 = @out.Shape.Dimensions[1].Stride;

                        outerStride1 -= innerStride1 * in1.Shape.Dimensions[1].Length;
                        outerStride2 -= innerStride2 * @out.Shape.Dimensions[1].Length;

                        for (long i = 0; i < opsOuter; i++)
                        {
                            for (long j = 0; j < opsInner; j++)
                            {
                                d2[ix2] = (System.Int32)(d1[ix1]);
                                ix1 += innerStride1;
                                ix2 += innerStride2;
                            }

                            ix1 += outerStride1;
                            ix2 += outerStride2;
                        }
                    }
                    else
                    {
                        long n = in1.Shape.Dimensions.LongLength - 3;
                        long[] limits = in1.Shape.Dimensions.Where(x => n-- > 0).Select(x => x.Length).ToArray();
                        long[] counters = new long[limits.LongLength];

                        long totalOps = limits.LongLength == 0 ? 1 : limits.Aggregate<long>((a, b) => a * b);

                        //This chunck of variables are used to prevent repeated calculations of offsets
                        long dimIndex0 = 0 + limits.LongLength;
                        long dimIndex1 = 1 + limits.LongLength;
                        long dimIndex2 = 2 + limits.LongLength;

                        long opsOuter = @out.Shape.Dimensions[0 + limits.LongLength].Length;
                        long opsInner = @out.Shape.Dimensions[1 + limits.LongLength].Length;
                        long opsInnerInner = @out.Shape.Dimensions[2 + limits.LongLength].Length;

                        long outerStride1 = in1.Shape.Dimensions[dimIndex0].Stride;
                        long outerStride3 = @out.Shape.Dimensions[dimIndex0].Stride;

                        long innerStride1 = in1.Shape.Dimensions[dimIndex1].Stride;
                        long innerStride3 = @out.Shape.Dimensions[dimIndex1].Stride;

                        long innerInnerStride1 = in1.Shape.Dimensions[dimIndex2].Stride;
                        long innerInnerStride3 = @out.Shape.Dimensions[dimIndex2].Stride;

                        outerStride1 -= innerStride1 * in1.Shape.Dimensions[dimIndex1].Length;
                        outerStride3 -= innerStride3 * @out.Shape.Dimensions[dimIndex1].Length;

                        innerStride1 -= innerInnerStride1 * in1.Shape.Dimensions[dimIndex2].Length;
                        innerStride3 -= innerInnerStride3 * @out.Shape.Dimensions[dimIndex2].Length;

                        for (long outer = 0; outer < totalOps; outer++)
                        {
                            //Get the array offset for the first element in the outer dimension
                            long ix1 = in1.Shape[counters];
                            long ix3 = @out.Shape[counters];


                            for (long i = 0; i < opsOuter; i++)
                            {
                                for (long j = 0; j < opsInner; j++)
                                {
                                    for (long k = 0; k < opsInnerInner; k++)
                                    {
                                        d2[ix3] = (System.Int32)(d1[ix1]);
                                        ix1 += innerInnerStride1;
                                        ix3 += innerInnerStride3;
                                    }

                                    ix1 += innerStride1;
                                    ix3 += innerStride3;
                                }

                                ix1 += outerStride1;
                                ix3 += outerStride3;
                            }

                            if (counters.LongLength > 0)
                            {
                                //Basically a ripple carry adder
                                long p = counters.LongLength - 1;
                                while (++counters[p] == limits[p] && p > 0)
                                {
                                    counters[p] = 0;
                                    p--;
                                }
                            }
                        }
                    }
                }
            }
        }

        /// <summary>
        /// Unsafe implementation of applying a unary operation
        /// </summary>
        /// <typeparam name="C">The type of operation to perform</typeparam>
        /// <param name="op">The operation instance</param>
        /// <param name="scalar">The input scalar argument</param>
        /// <param name="out">The output target</param>
        internal static void UFunc_Op_Inner_Unary_Scalar_Flush_UInt32_TypedImpl<C>(NumCIL.Int32.ToInt32 op, System.UInt32 scalar, NdArray<System.Int32> @out)
            where C : IUnaryOp<System.UInt32>
        {
            unsafe
            {
                using (var f2 = new Pinner(@out.DataAccessor))
                {
                    var d2 = (System.Int32*)f2.ptr;

                    if (@out.Shape.Dimensions.Length == 1)
                    {
                        long totalOps = @out.Shape.Dimensions[0].Length;
                        long ix2 = @out.Shape.Offset;
                        long stride2 = @out.Shape.Dimensions[0].Stride;

                        for (long i = 0; i < totalOps; i++)
                        {
                            d2[ix2] = (System.Int32)(scalar);
                            ix2 += stride2;
                        }
                    }
                    else if (@out.Shape.Dimensions.Length == 2)
                    {
                        long opsOuter = @out.Shape.Dimensions[0].Length;
                        long opsInner = @out.Shape.Dimensions[1].Length;

                        long ix2 = @out.Shape.Offset;
                        long outerStride2 = @out.Shape.Dimensions[0].Stride;
                        long innerStride2 = @out.Shape.Dimensions[1].Stride;
                        outerStride2 -= innerStride2 * @out.Shape.Dimensions[1].Length;

                        for (long i = 0; i < opsOuter; i++)
                        {
                            for (long j = 0; j < opsInner; j++)
                            {
                                d2[ix2] = (System.Int32)(scalar);
                                ix2 += innerStride2;
                            }

                            ix2 += outerStride2;
                        }
                    }
                    else
                    {
                        long n = @out.Shape.Dimensions.LongLength - 3;
                        long[] limits = @out.Shape.Dimensions.Where(x => n-- > 0).Select(x => x.Length).ToArray();
                        long[] counters = new long[limits.LongLength];

                        long totalOps = limits.LongLength == 0 ? 1 : limits.Aggregate<long>((a, b) => a * b);

                        //This chunck of variables are used to prevent repeated calculations of offsets
                        long dimIndex0 = 0 + limits.LongLength;
                        long dimIndex1 = 1 + limits.LongLength;
                        long dimIndex2 = 2 + limits.LongLength;

                        long opsOuter = @out.Shape.Dimensions[0 + limits.LongLength].Length;
                        long opsInner = @out.Shape.Dimensions[1 + limits.LongLength].Length;
                        long opsInnerInner = @out.Shape.Dimensions[2 + limits.LongLength].Length;

                        long outerStride3 = @out.Shape.Dimensions[dimIndex0].Stride;
                        long innerStride3 = @out.Shape.Dimensions[dimIndex1].Stride;
                        long innerInnerStride3 = @out.Shape.Dimensions[dimIndex2].Stride;
                        outerStride3 -= innerStride3 * @out.Shape.Dimensions[dimIndex1].Length;
                        innerStride3 -= innerInnerStride3 * @out.Shape.Dimensions[dimIndex2].Length;

                        for (long outer = 0; outer < totalOps; outer++)
                        {
                            //Get the array offset for the first element in the outer dimension
                            long ix3 = @out.Shape[counters];

                            for (long i = 0; i < opsOuter; i++)
                            {
                                for (long j = 0; j < opsInner; j++)
                                {
                                    for (long k = 0; k < opsInnerInner; k++)
                                    {
                                        d2[ix3] = (System.Int32)(scalar);
                                        ix3 += innerInnerStride3;
                                    }

                                    ix3 += innerStride3;
                                }

                                ix3 += outerStride3;
                            }

                            if (counters.LongLength > 0)
                            {
                                //Basically a ripple carry adder
                                long p = counters.LongLength - 1;
                                while (++counters[p] == limits[p] && p > 0)
                                {
                                    counters[p] = 0;
                                    p--;
                                }
                            }
                        }
                    }
                }
            }
        }
        /// <summary>
        /// Unsafe implementation of applying a unary operation
        /// </summary>
        /// <typeparam name="C">The type of operation to perform</typeparam>
        /// <param name="op">The operation instance</param>
        /// <param name="in1">The input argument</param>
        /// <param name="out">The output target</param>
        internal static void UFunc_Op_Inner_Unary_Flush_Int64_TypedImpl<C>(NumCIL.Int32.ToInt32 op, NdArray<System.Int64> in1, NdArray<System.Int32> @out)
            where C : IUnaryOp<System.Int64>
        {
            unsafe
            {
                using (var f1 = new Pinner(in1.DataAccessor))
                using (var f2 = new Pinner(@out.DataAccessor))
                {
                    var d1 = (System.Int64*)f1.ptr;
                    var d2 = (System.Int32*)f2.ptr;

                    if (@out.Shape.Dimensions.Length == 1)
                    {
                        long totalOps = @out.Shape.Dimensions[0].Length;

                        long ix1 = in1.Shape.Offset;
                        long ix2 = @out.Shape.Offset;

                        long stride1 = in1.Shape.Dimensions[0].Stride;
                        long stride2 = @out.Shape.Dimensions[0].Stride;


                        if (stride1 == stride2 && ix1 == ix2)
                        {
                            //Best case, all are equal, just keep a single counter
                            for (long i = 0; i < totalOps; i++)
                            {
                                d2[ix1] = (System.Int32)(d1[ix1]);
                                ix1 += stride1;
                            }
                        }
                        else
                        {
                            for (long i = 0; i < totalOps; i++)
                            {
                                d2[ix2] = (System.Int32)(d1[ix1]);
                                ix1 += stride1;
                                ix2 += stride2;
                            }
                        }
                    }
                    else if (@out.Shape.Dimensions.Length == 2)
                    {
                        long opsOuter = @out.Shape.Dimensions[0].Length;
                        long opsInner = @out.Shape.Dimensions[1].Length;

                        long ix1 = in1.Shape.Offset;
                        long ix2 = @out.Shape.Offset;

                        long outerStride1 = in1.Shape.Dimensions[0].Stride;
                        long outerStride2 = @out.Shape.Dimensions[0].Stride;

                        long innerStride1 = in1.Shape.Dimensions[1].Stride;
                        long innerStride2 = @out.Shape.Dimensions[1].Stride;

                        outerStride1 -= innerStride1 * in1.Shape.Dimensions[1].Length;
                        outerStride2 -= innerStride2 * @out.Shape.Dimensions[1].Length;

                        for (long i = 0; i < opsOuter; i++)
                        {
                            for (long j = 0; j < opsInner; j++)
                            {
                                d2[ix2] = (System.Int32)(d1[ix1]);
                                ix1 += innerStride1;
                                ix2 += innerStride2;
                            }

                            ix1 += outerStride1;
                            ix2 += outerStride2;
                        }
                    }
                    else
                    {
                        long n = in1.Shape.Dimensions.LongLength - 3;
                        long[] limits = in1.Shape.Dimensions.Where(x => n-- > 0).Select(x => x.Length).ToArray();
                        long[] counters = new long[limits.LongLength];

                        long totalOps = limits.LongLength == 0 ? 1 : limits.Aggregate<long>((a, b) => a * b);

                        //This chunck of variables are used to prevent repeated calculations of offsets
                        long dimIndex0 = 0 + limits.LongLength;
                        long dimIndex1 = 1 + limits.LongLength;
                        long dimIndex2 = 2 + limits.LongLength;

                        long opsOuter = @out.Shape.Dimensions[0 + limits.LongLength].Length;
                        long opsInner = @out.Shape.Dimensions[1 + limits.LongLength].Length;
                        long opsInnerInner = @out.Shape.Dimensions[2 + limits.LongLength].Length;

                        long outerStride1 = in1.Shape.Dimensions[dimIndex0].Stride;
                        long outerStride3 = @out.Shape.Dimensions[dimIndex0].Stride;

                        long innerStride1 = in1.Shape.Dimensions[dimIndex1].Stride;
                        long innerStride3 = @out.Shape.Dimensions[dimIndex1].Stride;

                        long innerInnerStride1 = in1.Shape.Dimensions[dimIndex2].Stride;
                        long innerInnerStride3 = @out.Shape.Dimensions[dimIndex2].Stride;

                        outerStride1 -= innerStride1 * in1.Shape.Dimensions[dimIndex1].Length;
                        outerStride3 -= innerStride3 * @out.Shape.Dimensions[dimIndex1].Length;

                        innerStride1 -= innerInnerStride1 * in1.Shape.Dimensions[dimIndex2].Length;
                        innerStride3 -= innerInnerStride3 * @out.Shape.Dimensions[dimIndex2].Length;

                        for (long outer = 0; outer < totalOps; outer++)
                        {
                            //Get the array offset for the first element in the outer dimension
                            long ix1 = in1.Shape[counters];
                            long ix3 = @out.Shape[counters];


                            for (long i = 0; i < opsOuter; i++)
                            {
                                for (long j = 0; j < opsInner; j++)
                                {
                                    for (long k = 0; k < opsInnerInner; k++)
                                    {
                                        d2[ix3] = (System.Int32)(d1[ix1]);
                                        ix1 += innerInnerStride1;
                                        ix3 += innerInnerStride3;
                                    }

                                    ix1 += innerStride1;
                                    ix3 += innerStride3;
                                }

                                ix1 += outerStride1;
                                ix3 += outerStride3;
                            }

                            if (counters.LongLength > 0)
                            {
                                //Basically a ripple carry adder
                                long p = counters.LongLength - 1;
                                while (++counters[p] == limits[p] && p > 0)
                                {
                                    counters[p] = 0;
                                    p--;
                                }
                            }
                        }
                    }
                }
            }
        }

        /// <summary>
        /// Unsafe implementation of applying a unary operation
        /// </summary>
        /// <typeparam name="C">The type of operation to perform</typeparam>
        /// <param name="op">The operation instance</param>
        /// <param name="scalar">The input scalar argument</param>
        /// <param name="out">The output target</param>
        internal static void UFunc_Op_Inner_Unary_Scalar_Flush_Int64_TypedImpl<C>(NumCIL.Int32.ToInt32 op, System.Int64 scalar, NdArray<System.Int32> @out)
            where C : IUnaryOp<System.Int64>
        {
            unsafe
            {
                using (var f2 = new Pinner(@out.DataAccessor))
                {
                    var d2 = (System.Int32*)f2.ptr;

                    if (@out.Shape.Dimensions.Length == 1)
                    {
                        long totalOps = @out.Shape.Dimensions[0].Length;
                        long ix2 = @out.Shape.Offset;
                        long stride2 = @out.Shape.Dimensions[0].Stride;

                        for (long i = 0; i < totalOps; i++)
                        {
                            d2[ix2] = (System.Int32)(scalar);
                            ix2 += stride2;
                        }
                    }
                    else if (@out.Shape.Dimensions.Length == 2)
                    {
                        long opsOuter = @out.Shape.Dimensions[0].Length;
                        long opsInner = @out.Shape.Dimensions[1].Length;

                        long ix2 = @out.Shape.Offset;
                        long outerStride2 = @out.Shape.Dimensions[0].Stride;
                        long innerStride2 = @out.Shape.Dimensions[1].Stride;
                        outerStride2 -= innerStride2 * @out.Shape.Dimensions[1].Length;

                        for (long i = 0; i < opsOuter; i++)
                        {
                            for (long j = 0; j < opsInner; j++)
                            {
                                d2[ix2] = (System.Int32)(scalar);
                                ix2 += innerStride2;
                            }

                            ix2 += outerStride2;
                        }
                    }
                    else
                    {
                        long n = @out.Shape.Dimensions.LongLength - 3;
                        long[] limits = @out.Shape.Dimensions.Where(x => n-- > 0).Select(x => x.Length).ToArray();
                        long[] counters = new long[limits.LongLength];

                        long totalOps = limits.LongLength == 0 ? 1 : limits.Aggregate<long>((a, b) => a * b);

                        //This chunck of variables are used to prevent repeated calculations of offsets
                        long dimIndex0 = 0 + limits.LongLength;
                        long dimIndex1 = 1 + limits.LongLength;
                        long dimIndex2 = 2 + limits.LongLength;

                        long opsOuter = @out.Shape.Dimensions[0 + limits.LongLength].Length;
                        long opsInner = @out.Shape.Dimensions[1 + limits.LongLength].Length;
                        long opsInnerInner = @out.Shape.Dimensions[2 + limits.LongLength].Length;

                        long outerStride3 = @out.Shape.Dimensions[dimIndex0].Stride;
                        long innerStride3 = @out.Shape.Dimensions[dimIndex1].Stride;
                        long innerInnerStride3 = @out.Shape.Dimensions[dimIndex2].Stride;
                        outerStride3 -= innerStride3 * @out.Shape.Dimensions[dimIndex1].Length;
                        innerStride3 -= innerInnerStride3 * @out.Shape.Dimensions[dimIndex2].Length;

                        for (long outer = 0; outer < totalOps; outer++)
                        {
                            //Get the array offset for the first element in the outer dimension
                            long ix3 = @out.Shape[counters];

                            for (long i = 0; i < opsOuter; i++)
                            {
                                for (long j = 0; j < opsInner; j++)
                                {
                                    for (long k = 0; k < opsInnerInner; k++)
                                    {
                                        d2[ix3] = (System.Int32)(scalar);
                                        ix3 += innerInnerStride3;
                                    }

                                    ix3 += innerStride3;
                                }

                                ix3 += outerStride3;
                            }

                            if (counters.LongLength > 0)
                            {
                                //Basically a ripple carry adder
                                long p = counters.LongLength - 1;
                                while (++counters[p] == limits[p] && p > 0)
                                {
                                    counters[p] = 0;
                                    p--;
                                }
                            }
                        }
                    }
                }
            }
        }
        /// <summary>
        /// Unsafe implementation of applying a unary operation
        /// </summary>
        /// <typeparam name="C">The type of operation to perform</typeparam>
        /// <param name="op">The operation instance</param>
        /// <param name="in1">The input argument</param>
        /// <param name="out">The output target</param>
        internal static void UFunc_Op_Inner_Unary_Flush_UInt64_TypedImpl<C>(NumCIL.Int32.ToInt32 op, NdArray<System.UInt64> in1, NdArray<System.Int32> @out)
            where C : IUnaryOp<System.UInt64>
        {
            unsafe
            {
                using (var f1 = new Pinner(in1.DataAccessor))
                using (var f2 = new Pinner(@out.DataAccessor))
                {
                    var d1 = (System.UInt64*)f1.ptr;
                    var d2 = (System.Int32*)f2.ptr;

                    if (@out.Shape.Dimensions.Length == 1)
                    {
                        long totalOps = @out.Shape.Dimensions[0].Length;

                        long ix1 = in1.Shape.Offset;
                        long ix2 = @out.Shape.Offset;

                        long stride1 = in1.Shape.Dimensions[0].Stride;
                        long stride2 = @out.Shape.Dimensions[0].Stride;


                        if (stride1 == stride2 && ix1 == ix2)
                        {
                            //Best case, all are equal, just keep a single counter
                            for (long i = 0; i < totalOps; i++)
                            {
                                d2[ix1] = (System.Int32)(d1[ix1]);
                                ix1 += stride1;
                            }
                        }
                        else
                        {
                            for (long i = 0; i < totalOps; i++)
                            {
                                d2[ix2] = (System.Int32)(d1[ix1]);
                                ix1 += stride1;
                                ix2 += stride2;
                            }
                        }
                    }
                    else if (@out.Shape.Dimensions.Length == 2)
                    {
                        long opsOuter = @out.Shape.Dimensions[0].Length;
                        long opsInner = @out.Shape.Dimensions[1].Length;

                        long ix1 = in1.Shape.Offset;
                        long ix2 = @out.Shape.Offset;

                        long outerStride1 = in1.Shape.Dimensions[0].Stride;
                        long outerStride2 = @out.Shape.Dimensions[0].Stride;

                        long innerStride1 = in1.Shape.Dimensions[1].Stride;
                        long innerStride2 = @out.Shape.Dimensions[1].Stride;

                        outerStride1 -= innerStride1 * in1.Shape.Dimensions[1].Length;
                        outerStride2 -= innerStride2 * @out.Shape.Dimensions[1].Length;

                        for (long i = 0; i < opsOuter; i++)
                        {
                            for (long j = 0; j < opsInner; j++)
                            {
                                d2[ix2] = (System.Int32)(d1[ix1]);
                                ix1 += innerStride1;
                                ix2 += innerStride2;
                            }

                            ix1 += outerStride1;
                            ix2 += outerStride2;
                        }
                    }
                    else
                    {
                        long n = in1.Shape.Dimensions.LongLength - 3;
                        long[] limits = in1.Shape.Dimensions.Where(x => n-- > 0).Select(x => x.Length).ToArray();
                        long[] counters = new long[limits.LongLength];

                        long totalOps = limits.LongLength == 0 ? 1 : limits.Aggregate<long>((a, b) => a * b);

                        //This chunck of variables are used to prevent repeated calculations of offsets
                        long dimIndex0 = 0 + limits.LongLength;
                        long dimIndex1 = 1 + limits.LongLength;
                        long dimIndex2 = 2 + limits.LongLength;

                        long opsOuter = @out.Shape.Dimensions[0 + limits.LongLength].Length;
                        long opsInner = @out.Shape.Dimensions[1 + limits.LongLength].Length;
                        long opsInnerInner = @out.Shape.Dimensions[2 + limits.LongLength].Length;

                        long outerStride1 = in1.Shape.Dimensions[dimIndex0].Stride;
                        long outerStride3 = @out.Shape.Dimensions[dimIndex0].Stride;

                        long innerStride1 = in1.Shape.Dimensions[dimIndex1].Stride;
                        long innerStride3 = @out.Shape.Dimensions[dimIndex1].Stride;

                        long innerInnerStride1 = in1.Shape.Dimensions[dimIndex2].Stride;
                        long innerInnerStride3 = @out.Shape.Dimensions[dimIndex2].Stride;

                        outerStride1 -= innerStride1 * in1.Shape.Dimensions[dimIndex1].Length;
                        outerStride3 -= innerStride3 * @out.Shape.Dimensions[dimIndex1].Length;

                        innerStride1 -= innerInnerStride1 * in1.Shape.Dimensions[dimIndex2].Length;
                        innerStride3 -= innerInnerStride3 * @out.Shape.Dimensions[dimIndex2].Length;

                        for (long outer = 0; outer < totalOps; outer++)
                        {
                            //Get the array offset for the first element in the outer dimension
                            long ix1 = in1.Shape[counters];
                            long ix3 = @out.Shape[counters];


                            for (long i = 0; i < opsOuter; i++)
                            {
                                for (long j = 0; j < opsInner; j++)
                                {
                                    for (long k = 0; k < opsInnerInner; k++)
                                    {
                                        d2[ix3] = (System.Int32)(d1[ix1]);
                                        ix1 += innerInnerStride1;
                                        ix3 += innerInnerStride3;
                                    }

                                    ix1 += innerStride1;
                                    ix3 += innerStride3;
                                }

                                ix1 += outerStride1;
                                ix3 += outerStride3;
                            }

                            if (counters.LongLength > 0)
                            {
                                //Basically a ripple carry adder
                                long p = counters.LongLength - 1;
                                while (++counters[p] == limits[p] && p > 0)
                                {
                                    counters[p] = 0;
                                    p--;
                                }
                            }
                        }
                    }
                }
            }
        }

        /// <summary>
        /// Unsafe implementation of applying a unary operation
        /// </summary>
        /// <typeparam name="C">The type of operation to perform</typeparam>
        /// <param name="op">The operation instance</param>
        /// <param name="scalar">The input scalar argument</param>
        /// <param name="out">The output target</param>
        internal static void UFunc_Op_Inner_Unary_Scalar_Flush_UInt64_TypedImpl<C>(NumCIL.Int32.ToInt32 op, System.UInt64 scalar, NdArray<System.Int32> @out)
            where C : IUnaryOp<System.UInt64>
        {
            unsafe
            {
                using (var f2 = new Pinner(@out.DataAccessor))
                {
                    var d2 = (System.Int32*)f2.ptr;

                    if (@out.Shape.Dimensions.Length == 1)
                    {
                        long totalOps = @out.Shape.Dimensions[0].Length;
                        long ix2 = @out.Shape.Offset;
                        long stride2 = @out.Shape.Dimensions[0].Stride;

                        for (long i = 0; i < totalOps; i++)
                        {
                            d2[ix2] = (System.Int32)(scalar);
                            ix2 += stride2;
                        }
                    }
                    else if (@out.Shape.Dimensions.Length == 2)
                    {
                        long opsOuter = @out.Shape.Dimensions[0].Length;
                        long opsInner = @out.Shape.Dimensions[1].Length;

                        long ix2 = @out.Shape.Offset;
                        long outerStride2 = @out.Shape.Dimensions[0].Stride;
                        long innerStride2 = @out.Shape.Dimensions[1].Stride;
                        outerStride2 -= innerStride2 * @out.Shape.Dimensions[1].Length;

                        for (long i = 0; i < opsOuter; i++)
                        {
                            for (long j = 0; j < opsInner; j++)
                            {
                                d2[ix2] = (System.Int32)(scalar);
                                ix2 += innerStride2;
                            }

                            ix2 += outerStride2;
                        }
                    }
                    else
                    {
                        long n = @out.Shape.Dimensions.LongLength - 3;
                        long[] limits = @out.Shape.Dimensions.Where(x => n-- > 0).Select(x => x.Length).ToArray();
                        long[] counters = new long[limits.LongLength];

                        long totalOps = limits.LongLength == 0 ? 1 : limits.Aggregate<long>((a, b) => a * b);

                        //This chunck of variables are used to prevent repeated calculations of offsets
                        long dimIndex0 = 0 + limits.LongLength;
                        long dimIndex1 = 1 + limits.LongLength;
                        long dimIndex2 = 2 + limits.LongLength;

                        long opsOuter = @out.Shape.Dimensions[0 + limits.LongLength].Length;
                        long opsInner = @out.Shape.Dimensions[1 + limits.LongLength].Length;
                        long opsInnerInner = @out.Shape.Dimensions[2 + limits.LongLength].Length;

                        long outerStride3 = @out.Shape.Dimensions[dimIndex0].Stride;
                        long innerStride3 = @out.Shape.Dimensions[dimIndex1].Stride;
                        long innerInnerStride3 = @out.Shape.Dimensions[dimIndex2].Stride;
                        outerStride3 -= innerStride3 * @out.Shape.Dimensions[dimIndex1].Length;
                        innerStride3 -= innerInnerStride3 * @out.Shape.Dimensions[dimIndex2].Length;

                        for (long outer = 0; outer < totalOps; outer++)
                        {
                            //Get the array offset for the first element in the outer dimension
                            long ix3 = @out.Shape[counters];

                            for (long i = 0; i < opsOuter; i++)
                            {
                                for (long j = 0; j < opsInner; j++)
                                {
                                    for (long k = 0; k < opsInnerInner; k++)
                                    {
                                        d2[ix3] = (System.Int32)(scalar);
                                        ix3 += innerInnerStride3;
                                    }

                                    ix3 += innerStride3;
                                }

                                ix3 += outerStride3;
                            }

                            if (counters.LongLength > 0)
                            {
                                //Basically a ripple carry adder
                                long p = counters.LongLength - 1;
                                while (++counters[p] == limits[p] && p > 0)
                                {
                                    counters[p] = 0;
                                    p--;
                                }
                            }
                        }
                    }
                }
            }
        }
        /// <summary>
        /// Unsafe implementation of applying a unary operation
        /// </summary>
        /// <typeparam name="C">The type of operation to perform</typeparam>
        /// <param name="op">The operation instance</param>
        /// <param name="in1">The input argument</param>
        /// <param name="out">The output target</param>
        internal static void UFunc_Op_Inner_Unary_Flush_Single_TypedImpl<C>(NumCIL.Int32.ToInt32 op, NdArray<System.Single> in1, NdArray<System.Int32> @out)
            where C : IUnaryOp<System.Single>
        {
            unsafe
            {
                using (var f1 = new Pinner(in1.DataAccessor))
                using (var f2 = new Pinner(@out.DataAccessor))
                {
                    var d1 = (System.Single*)f1.ptr;
                    var d2 = (System.Int32*)f2.ptr;

                    if (@out.Shape.Dimensions.Length == 1)
                    {
                        long totalOps = @out.Shape.Dimensions[0].Length;

                        long ix1 = in1.Shape.Offset;
                        long ix2 = @out.Shape.Offset;

                        long stride1 = in1.Shape.Dimensions[0].Stride;
                        long stride2 = @out.Shape.Dimensions[0].Stride;


                        if (stride1 == stride2 && ix1 == ix2)
                        {
                            //Best case, all are equal, just keep a single counter
                            for (long i = 0; i < totalOps; i++)
                            {
                                d2[ix1] = (System.Int32)(d1[ix1]);
                                ix1 += stride1;
                            }
                        }
                        else
                        {
                            for (long i = 0; i < totalOps; i++)
                            {
                                d2[ix2] = (System.Int32)(d1[ix1]);
                                ix1 += stride1;
                                ix2 += stride2;
                            }
                        }
                    }
                    else if (@out.Shape.Dimensions.Length == 2)
                    {
                        long opsOuter = @out.Shape.Dimensions[0].Length;
                        long opsInner = @out.Shape.Dimensions[1].Length;

                        long ix1 = in1.Shape.Offset;
                        long ix2 = @out.Shape.Offset;

                        long outerStride1 = in1.Shape.Dimensions[0].Stride;
                        long outerStride2 = @out.Shape.Dimensions[0].Stride;

                        long innerStride1 = in1.Shape.Dimensions[1].Stride;
                        long innerStride2 = @out.Shape.Dimensions[1].Stride;

                        outerStride1 -= innerStride1 * in1.Shape.Dimensions[1].Length;
                        outerStride2 -= innerStride2 * @out.Shape.Dimensions[1].Length;

                        for (long i = 0; i < opsOuter; i++)
                        {
                            for (long j = 0; j < opsInner; j++)
                            {
                                d2[ix2] = (System.Int32)(d1[ix1]);
                                ix1 += innerStride1;
                                ix2 += innerStride2;
                            }

                            ix1 += outerStride1;
                            ix2 += outerStride2;
                        }
                    }
                    else
                    {
                        long n = in1.Shape.Dimensions.LongLength - 3;
                        long[] limits = in1.Shape.Dimensions.Where(x => n-- > 0).Select(x => x.Length).ToArray();
                        long[] counters = new long[limits.LongLength];

                        long totalOps = limits.LongLength == 0 ? 1 : limits.Aggregate<long>((a, b) => a * b);

                        //This chunck of variables are used to prevent repeated calculations of offsets
                        long dimIndex0 = 0 + limits.LongLength;
                        long dimIndex1 = 1 + limits.LongLength;
                        long dimIndex2 = 2 + limits.LongLength;

                        long opsOuter = @out.Shape.Dimensions[0 + limits.LongLength].Length;
                        long opsInner = @out.Shape.Dimensions[1 + limits.LongLength].Length;
                        long opsInnerInner = @out.Shape.Dimensions[2 + limits.LongLength].Length;

                        long outerStride1 = in1.Shape.Dimensions[dimIndex0].Stride;
                        long outerStride3 = @out.Shape.Dimensions[dimIndex0].Stride;

                        long innerStride1 = in1.Shape.Dimensions[dimIndex1].Stride;
                        long innerStride3 = @out.Shape.Dimensions[dimIndex1].Stride;

                        long innerInnerStride1 = in1.Shape.Dimensions[dimIndex2].Stride;
                        long innerInnerStride3 = @out.Shape.Dimensions[dimIndex2].Stride;

                        outerStride1 -= innerStride1 * in1.Shape.Dimensions[dimIndex1].Length;
                        outerStride3 -= innerStride3 * @out.Shape.Dimensions[dimIndex1].Length;

                        innerStride1 -= innerInnerStride1 * in1.Shape.Dimensions[dimIndex2].Length;
                        innerStride3 -= innerInnerStride3 * @out.Shape.Dimensions[dimIndex2].Length;

                        for (long outer = 0; outer < totalOps; outer++)
                        {
                            //Get the array offset for the first element in the outer dimension
                            long ix1 = in1.Shape[counters];
                            long ix3 = @out.Shape[counters];


                            for (long i = 0; i < opsOuter; i++)
                            {
                                for (long j = 0; j < opsInner; j++)
                                {
                                    for (long k = 0; k < opsInnerInner; k++)
                                    {
                                        d2[ix3] = (System.Int32)(d1[ix1]);
                                        ix1 += innerInnerStride1;
                                        ix3 += innerInnerStride3;
                                    }

                                    ix1 += innerStride1;
                                    ix3 += innerStride3;
                                }

                                ix1 += outerStride1;
                                ix3 += outerStride3;
                            }

                            if (counters.LongLength > 0)
                            {
                                //Basically a ripple carry adder
                                long p = counters.LongLength - 1;
                                while (++counters[p] == limits[p] && p > 0)
                                {
                                    counters[p] = 0;
                                    p--;
                                }
                            }
                        }
                    }
                }
            }
        }

        /// <summary>
        /// Unsafe implementation of applying a unary operation
        /// </summary>
        /// <typeparam name="C">The type of operation to perform</typeparam>
        /// <param name="op">The operation instance</param>
        /// <param name="scalar">The input scalar argument</param>
        /// <param name="out">The output target</param>
        internal static void UFunc_Op_Inner_Unary_Scalar_Flush_Single_TypedImpl<C>(NumCIL.Int32.ToInt32 op, System.Single scalar, NdArray<System.Int32> @out)
            where C : IUnaryOp<System.Single>
        {
            unsafe
            {
                using (var f2 = new Pinner(@out.DataAccessor))
                {
                    var d2 = (System.Int32*)f2.ptr;

                    if (@out.Shape.Dimensions.Length == 1)
                    {
                        long totalOps = @out.Shape.Dimensions[0].Length;
                        long ix2 = @out.Shape.Offset;
                        long stride2 = @out.Shape.Dimensions[0].Stride;

                        for (long i = 0; i < totalOps; i++)
                        {
                            d2[ix2] = (System.Int32)(scalar);
                            ix2 += stride2;
                        }
                    }
                    else if (@out.Shape.Dimensions.Length == 2)
                    {
                        long opsOuter = @out.Shape.Dimensions[0].Length;
                        long opsInner = @out.Shape.Dimensions[1].Length;

                        long ix2 = @out.Shape.Offset;
                        long outerStride2 = @out.Shape.Dimensions[0].Stride;
                        long innerStride2 = @out.Shape.Dimensions[1].Stride;
                        outerStride2 -= innerStride2 * @out.Shape.Dimensions[1].Length;

                        for (long i = 0; i < opsOuter; i++)
                        {
                            for (long j = 0; j < opsInner; j++)
                            {
                                d2[ix2] = (System.Int32)(scalar);
                                ix2 += innerStride2;
                            }

                            ix2 += outerStride2;
                        }
                    }
                    else
                    {
                        long n = @out.Shape.Dimensions.LongLength - 3;
                        long[] limits = @out.Shape.Dimensions.Where(x => n-- > 0).Select(x => x.Length).ToArray();
                        long[] counters = new long[limits.LongLength];

                        long totalOps = limits.LongLength == 0 ? 1 : limits.Aggregate<long>((a, b) => a * b);

                        //This chunck of variables are used to prevent repeated calculations of offsets
                        long dimIndex0 = 0 + limits.LongLength;
                        long dimIndex1 = 1 + limits.LongLength;
                        long dimIndex2 = 2 + limits.LongLength;

                        long opsOuter = @out.Shape.Dimensions[0 + limits.LongLength].Length;
                        long opsInner = @out.Shape.Dimensions[1 + limits.LongLength].Length;
                        long opsInnerInner = @out.Shape.Dimensions[2 + limits.LongLength].Length;

                        long outerStride3 = @out.Shape.Dimensions[dimIndex0].Stride;
                        long innerStride3 = @out.Shape.Dimensions[dimIndex1].Stride;
                        long innerInnerStride3 = @out.Shape.Dimensions[dimIndex2].Stride;
                        outerStride3 -= innerStride3 * @out.Shape.Dimensions[dimIndex1].Length;
                        innerStride3 -= innerInnerStride3 * @out.Shape.Dimensions[dimIndex2].Length;

                        for (long outer = 0; outer < totalOps; outer++)
                        {
                            //Get the array offset for the first element in the outer dimension
                            long ix3 = @out.Shape[counters];

                            for (long i = 0; i < opsOuter; i++)
                            {
                                for (long j = 0; j < opsInner; j++)
                                {
                                    for (long k = 0; k < opsInnerInner; k++)
                                    {
                                        d2[ix3] = (System.Int32)(scalar);
                                        ix3 += innerInnerStride3;
                                    }

                                    ix3 += innerStride3;
                                }

                                ix3 += outerStride3;
                            }

                            if (counters.LongLength > 0)
                            {
                                //Basically a ripple carry adder
                                long p = counters.LongLength - 1;
                                while (++counters[p] == limits[p] && p > 0)
                                {
                                    counters[p] = 0;
                                    p--;
                                }
                            }
                        }
                    }
                }
            }
        }
        /// <summary>
        /// Unsafe implementation of applying a unary operation
        /// </summary>
        /// <typeparam name="C">The type of operation to perform</typeparam>
        /// <param name="op">The operation instance</param>
        /// <param name="in1">The input argument</param>
        /// <param name="out">The output target</param>
        internal static void UFunc_Op_Inner_Unary_Flush_Double_TypedImpl<C>(NumCIL.Int32.ToInt32 op, NdArray<System.Double> in1, NdArray<System.Int32> @out)
            where C : IUnaryOp<System.Double>
        {
            unsafe
            {
                using (var f1 = new Pinner(in1.DataAccessor))
                using (var f2 = new Pinner(@out.DataAccessor))
                {
                    var d1 = (System.Double*)f1.ptr;
                    var d2 = (System.Int32*)f2.ptr;

                    if (@out.Shape.Dimensions.Length == 1)
                    {
                        long totalOps = @out.Shape.Dimensions[0].Length;

                        long ix1 = in1.Shape.Offset;
                        long ix2 = @out.Shape.Offset;

                        long stride1 = in1.Shape.Dimensions[0].Stride;
                        long stride2 = @out.Shape.Dimensions[0].Stride;


                        if (stride1 == stride2 && ix1 == ix2)
                        {
                            //Best case, all are equal, just keep a single counter
                            for (long i = 0; i < totalOps; i++)
                            {
                                d2[ix1] = (System.Int32)(d1[ix1]);
                                ix1 += stride1;
                            }
                        }
                        else
                        {
                            for (long i = 0; i < totalOps; i++)
                            {
                                d2[ix2] = (System.Int32)(d1[ix1]);
                                ix1 += stride1;
                                ix2 += stride2;
                            }
                        }
                    }
                    else if (@out.Shape.Dimensions.Length == 2)
                    {
                        long opsOuter = @out.Shape.Dimensions[0].Length;
                        long opsInner = @out.Shape.Dimensions[1].Length;

                        long ix1 = in1.Shape.Offset;
                        long ix2 = @out.Shape.Offset;

                        long outerStride1 = in1.Shape.Dimensions[0].Stride;
                        long outerStride2 = @out.Shape.Dimensions[0].Stride;

                        long innerStride1 = in1.Shape.Dimensions[1].Stride;
                        long innerStride2 = @out.Shape.Dimensions[1].Stride;

                        outerStride1 -= innerStride1 * in1.Shape.Dimensions[1].Length;
                        outerStride2 -= innerStride2 * @out.Shape.Dimensions[1].Length;

                        for (long i = 0; i < opsOuter; i++)
                        {
                            for (long j = 0; j < opsInner; j++)
                            {
                                d2[ix2] = (System.Int32)(d1[ix1]);
                                ix1 += innerStride1;
                                ix2 += innerStride2;
                            }

                            ix1 += outerStride1;
                            ix2 += outerStride2;
                        }
                    }
                    else
                    {
                        long n = in1.Shape.Dimensions.LongLength - 3;
                        long[] limits = in1.Shape.Dimensions.Where(x => n-- > 0).Select(x => x.Length).ToArray();
                        long[] counters = new long[limits.LongLength];

                        long totalOps = limits.LongLength == 0 ? 1 : limits.Aggregate<long>((a, b) => a * b);

                        //This chunck of variables are used to prevent repeated calculations of offsets
                        long dimIndex0 = 0 + limits.LongLength;
                        long dimIndex1 = 1 + limits.LongLength;
                        long dimIndex2 = 2 + limits.LongLength;

                        long opsOuter = @out.Shape.Dimensions[0 + limits.LongLength].Length;
                        long opsInner = @out.Shape.Dimensions[1 + limits.LongLength].Length;
                        long opsInnerInner = @out.Shape.Dimensions[2 + limits.LongLength].Length;

                        long outerStride1 = in1.Shape.Dimensions[dimIndex0].Stride;
                        long outerStride3 = @out.Shape.Dimensions[dimIndex0].Stride;

                        long innerStride1 = in1.Shape.Dimensions[dimIndex1].Stride;
                        long innerStride3 = @out.Shape.Dimensions[dimIndex1].Stride;

                        long innerInnerStride1 = in1.Shape.Dimensions[dimIndex2].Stride;
                        long innerInnerStride3 = @out.Shape.Dimensions[dimIndex2].Stride;

                        outerStride1 -= innerStride1 * in1.Shape.Dimensions[dimIndex1].Length;
                        outerStride3 -= innerStride3 * @out.Shape.Dimensions[dimIndex1].Length;

                        innerStride1 -= innerInnerStride1 * in1.Shape.Dimensions[dimIndex2].Length;
                        innerStride3 -= innerInnerStride3 * @out.Shape.Dimensions[dimIndex2].Length;

                        for (long outer = 0; outer < totalOps; outer++)
                        {
                            //Get the array offset for the first element in the outer dimension
                            long ix1 = in1.Shape[counters];
                            long ix3 = @out.Shape[counters];


                            for (long i = 0; i < opsOuter; i++)
                            {
                                for (long j = 0; j < opsInner; j++)
                                {
                                    for (long k = 0; k < opsInnerInner; k++)
                                    {
                                        d2[ix3] = (System.Int32)(d1[ix1]);
                                        ix1 += innerInnerStride1;
                                        ix3 += innerInnerStride3;
                                    }

                                    ix1 += innerStride1;
                                    ix3 += innerStride3;
                                }

                                ix1 += outerStride1;
                                ix3 += outerStride3;
                            }

                            if (counters.LongLength > 0)
                            {
                                //Basically a ripple carry adder
                                long p = counters.LongLength - 1;
                                while (++counters[p] == limits[p] && p > 0)
                                {
                                    counters[p] = 0;
                                    p--;
                                }
                            }
                        }
                    }
                }
            }
        }

        /// <summary>
        /// Unsafe implementation of applying a unary operation
        /// </summary>
        /// <typeparam name="C">The type of operation to perform</typeparam>
        /// <param name="op">The operation instance</param>
        /// <param name="scalar">The input scalar argument</param>
        /// <param name="out">The output target</param>
        internal static void UFunc_Op_Inner_Unary_Scalar_Flush_Double_TypedImpl<C>(NumCIL.Int32.ToInt32 op, System.Double scalar, NdArray<System.Int32> @out)
            where C : IUnaryOp<System.Double>
        {
            unsafe
            {
                using (var f2 = new Pinner(@out.DataAccessor))
                {
                    var d2 = (System.Int32*)f2.ptr;

                    if (@out.Shape.Dimensions.Length == 1)
                    {
                        long totalOps = @out.Shape.Dimensions[0].Length;
                        long ix2 = @out.Shape.Offset;
                        long stride2 = @out.Shape.Dimensions[0].Stride;

                        for (long i = 0; i < totalOps; i++)
                        {
                            d2[ix2] = (System.Int32)(scalar);
                            ix2 += stride2;
                        }
                    }
                    else if (@out.Shape.Dimensions.Length == 2)
                    {
                        long opsOuter = @out.Shape.Dimensions[0].Length;
                        long opsInner = @out.Shape.Dimensions[1].Length;

                        long ix2 = @out.Shape.Offset;
                        long outerStride2 = @out.Shape.Dimensions[0].Stride;
                        long innerStride2 = @out.Shape.Dimensions[1].Stride;
                        outerStride2 -= innerStride2 * @out.Shape.Dimensions[1].Length;

                        for (long i = 0; i < opsOuter; i++)
                        {
                            for (long j = 0; j < opsInner; j++)
                            {
                                d2[ix2] = (System.Int32)(scalar);
                                ix2 += innerStride2;
                            }

                            ix2 += outerStride2;
                        }
                    }
                    else
                    {
                        long n = @out.Shape.Dimensions.LongLength - 3;
                        long[] limits = @out.Shape.Dimensions.Where(x => n-- > 0).Select(x => x.Length).ToArray();
                        long[] counters = new long[limits.LongLength];

                        long totalOps = limits.LongLength == 0 ? 1 : limits.Aggregate<long>((a, b) => a * b);

                        //This chunck of variables are used to prevent repeated calculations of offsets
                        long dimIndex0 = 0 + limits.LongLength;
                        long dimIndex1 = 1 + limits.LongLength;
                        long dimIndex2 = 2 + limits.LongLength;

                        long opsOuter = @out.Shape.Dimensions[0 + limits.LongLength].Length;
                        long opsInner = @out.Shape.Dimensions[1 + limits.LongLength].Length;
                        long opsInnerInner = @out.Shape.Dimensions[2 + limits.LongLength].Length;

                        long outerStride3 = @out.Shape.Dimensions[dimIndex0].Stride;
                        long innerStride3 = @out.Shape.Dimensions[dimIndex1].Stride;
                        long innerInnerStride3 = @out.Shape.Dimensions[dimIndex2].Stride;
                        outerStride3 -= innerStride3 * @out.Shape.Dimensions[dimIndex1].Length;
                        innerStride3 -= innerInnerStride3 * @out.Shape.Dimensions[dimIndex2].Length;

                        for (long outer = 0; outer < totalOps; outer++)
                        {
                            //Get the array offset for the first element in the outer dimension
                            long ix3 = @out.Shape[counters];

                            for (long i = 0; i < opsOuter; i++)
                            {
                                for (long j = 0; j < opsInner; j++)
                                {
                                    for (long k = 0; k < opsInnerInner; k++)
                                    {
                                        d2[ix3] = (System.Int32)(scalar);
                                        ix3 += innerInnerStride3;
                                    }

                                    ix3 += innerStride3;
                                }

                                ix3 += outerStride3;
                            }

                            if (counters.LongLength > 0)
                            {
                                //Basically a ripple carry adder
                                long p = counters.LongLength - 1;
                                while (++counters[p] == limits[p] && p > 0)
                                {
                                    counters[p] = 0;
                                    p--;
                                }
                            }
                        }
                    }
                }
            }
        }
        /// <summary>
        /// Unsafe implementation of applying a unary operation
        /// </summary>
        /// <typeparam name="C">The type of operation to perform</typeparam>
        /// <param name="op">The operation instance</param>
        /// <param name="in1">The input argument</param>
        /// <param name="out">The output target</param>
        internal static void UFunc_Op_Inner_Unary_Flush_Boolean_TypedImpl<C>(NumCIL.Boolean.ToInt32 op, NdArray<System.Boolean> in1, NdArray<System.Int32> @out)
            where C : IUnaryOp<System.Boolean>
        {
            unsafe
            {
                using (var f1 = new Pinner(in1.DataAccessor))
                using (var f2 = new Pinner(@out.DataAccessor))
                {
                    var d1 = (System.Boolean*)f1.ptr;
                    var d2 = (System.Int32*)f2.ptr;

                    if (@out.Shape.Dimensions.Length == 1)
                    {
                        long totalOps = @out.Shape.Dimensions[0].Length;

                        long ix1 = in1.Shape.Offset;
                        long ix2 = @out.Shape.Offset;

                        long stride1 = in1.Shape.Dimensions[0].Stride;
                        long stride2 = @out.Shape.Dimensions[0].Stride;


                        if (stride1 == stride2 && ix1 == ix2)
                        {
                            //Best case, all are equal, just keep a single counter
                            for (long i = 0; i < totalOps; i++)
                            {
                                d2[ix1] = (System.Int32)(d1[ix1] ? 1 : 0 );
                                ix1 += stride1;
                            }
                        }
                        else
                        {
                            for (long i = 0; i < totalOps; i++)
                            {
                                d2[ix2] = (System.Int32)(d1[ix1] ? 1 : 0 );
                                ix1 += stride1;
                                ix2 += stride2;
                            }
                        }
                    }
                    else if (@out.Shape.Dimensions.Length == 2)
                    {
                        long opsOuter = @out.Shape.Dimensions[0].Length;
                        long opsInner = @out.Shape.Dimensions[1].Length;

                        long ix1 = in1.Shape.Offset;
                        long ix2 = @out.Shape.Offset;

                        long outerStride1 = in1.Shape.Dimensions[0].Stride;
                        long outerStride2 = @out.Shape.Dimensions[0].Stride;

                        long innerStride1 = in1.Shape.Dimensions[1].Stride;
                        long innerStride2 = @out.Shape.Dimensions[1].Stride;

                        outerStride1 -= innerStride1 * in1.Shape.Dimensions[1].Length;
                        outerStride2 -= innerStride2 * @out.Shape.Dimensions[1].Length;

                        for (long i = 0; i < opsOuter; i++)
                        {
                            for (long j = 0; j < opsInner; j++)
                            {
                                d2[ix2] = (System.Int32)(d1[ix1] ? 1 : 0 );
                                ix1 += innerStride1;
                                ix2 += innerStride2;
                            }

                            ix1 += outerStride1;
                            ix2 += outerStride2;
                        }
                    }
                    else
                    {
                        long n = in1.Shape.Dimensions.LongLength - 3;
                        long[] limits = in1.Shape.Dimensions.Where(x => n-- > 0).Select(x => x.Length).ToArray();
                        long[] counters = new long[limits.LongLength];

                        long totalOps = limits.LongLength == 0 ? 1 : limits.Aggregate<long>((a, b) => a * b);

                        //This chunck of variables are used to prevent repeated calculations of offsets
                        long dimIndex0 = 0 + limits.LongLength;
                        long dimIndex1 = 1 + limits.LongLength;
                        long dimIndex2 = 2 + limits.LongLength;

                        long opsOuter = @out.Shape.Dimensions[0 + limits.LongLength].Length;
                        long opsInner = @out.Shape.Dimensions[1 + limits.LongLength].Length;
                        long opsInnerInner = @out.Shape.Dimensions[2 + limits.LongLength].Length;

                        long outerStride1 = in1.Shape.Dimensions[dimIndex0].Stride;
                        long outerStride3 = @out.Shape.Dimensions[dimIndex0].Stride;

                        long innerStride1 = in1.Shape.Dimensions[dimIndex1].Stride;
                        long innerStride3 = @out.Shape.Dimensions[dimIndex1].Stride;

                        long innerInnerStride1 = in1.Shape.Dimensions[dimIndex2].Stride;
                        long innerInnerStride3 = @out.Shape.Dimensions[dimIndex2].Stride;

                        outerStride1 -= innerStride1 * in1.Shape.Dimensions[dimIndex1].Length;
                        outerStride3 -= innerStride3 * @out.Shape.Dimensions[dimIndex1].Length;

                        innerStride1 -= innerInnerStride1 * in1.Shape.Dimensions[dimIndex2].Length;
                        innerStride3 -= innerInnerStride3 * @out.Shape.Dimensions[dimIndex2].Length;

                        for (long outer = 0; outer < totalOps; outer++)
                        {
                            //Get the array offset for the first element in the outer dimension
                            long ix1 = in1.Shape[counters];
                            long ix3 = @out.Shape[counters];


                            for (long i = 0; i < opsOuter; i++)
                            {
                                for (long j = 0; j < opsInner; j++)
                                {
                                    for (long k = 0; k < opsInnerInner; k++)
                                    {
                                        d2[ix3] = (System.Int32)(d1[ix1] ? 1 : 0 );
                                        ix1 += innerInnerStride1;
                                        ix3 += innerInnerStride3;
                                    }

                                    ix1 += innerStride1;
                                    ix3 += innerStride3;
                                }

                                ix1 += outerStride1;
                                ix3 += outerStride3;
                            }

                            if (counters.LongLength > 0)
                            {
                                //Basically a ripple carry adder
                                long p = counters.LongLength - 1;
                                while (++counters[p] == limits[p] && p > 0)
                                {
                                    counters[p] = 0;
                                    p--;
                                }
                            }
                        }
                    }
                }
            }
        }

        /// <summary>
        /// Unsafe implementation of applying a unary operation
        /// </summary>
        /// <typeparam name="C">The type of operation to perform</typeparam>
        /// <param name="op">The operation instance</param>
        /// <param name="scalar">The input scalar argument</param>
        /// <param name="out">The output target</param>
        internal static void UFunc_Op_Inner_Unary_Scalar_Flush_Boolean_TypedImpl<C>(NumCIL.Boolean.ToInt32 op, System.Boolean scalar, NdArray<System.Int32> @out)
            where C : IUnaryOp<System.Boolean>
        {
            unsafe
            {
                using (var f2 = new Pinner(@out.DataAccessor))
                {
                    var d2 = (System.Int32*)f2.ptr;

                    if (@out.Shape.Dimensions.Length == 1)
                    {
                        long totalOps = @out.Shape.Dimensions[0].Length;
                        long ix2 = @out.Shape.Offset;
                        long stride2 = @out.Shape.Dimensions[0].Stride;

                        for (long i = 0; i < totalOps; i++)
                        {
                            d2[ix2] = (System.Int32)(scalar ? 1 : 0 );
                            ix2 += stride2;
                        }
                    }
                    else if (@out.Shape.Dimensions.Length == 2)
                    {
                        long opsOuter = @out.Shape.Dimensions[0].Length;
                        long opsInner = @out.Shape.Dimensions[1].Length;

                        long ix2 = @out.Shape.Offset;
                        long outerStride2 = @out.Shape.Dimensions[0].Stride;
                        long innerStride2 = @out.Shape.Dimensions[1].Stride;
                        outerStride2 -= innerStride2 * @out.Shape.Dimensions[1].Length;

                        for (long i = 0; i < opsOuter; i++)
                        {
                            for (long j = 0; j < opsInner; j++)
                            {
                                d2[ix2] = (System.Int32)(scalar ? 1 : 0 );
                                ix2 += innerStride2;
                            }

                            ix2 += outerStride2;
                        }
                    }
                    else
                    {
                        long n = @out.Shape.Dimensions.LongLength - 3;
                        long[] limits = @out.Shape.Dimensions.Where(x => n-- > 0).Select(x => x.Length).ToArray();
                        long[] counters = new long[limits.LongLength];

                        long totalOps = limits.LongLength == 0 ? 1 : limits.Aggregate<long>((a, b) => a * b);

                        //This chunck of variables are used to prevent repeated calculations of offsets
                        long dimIndex0 = 0 + limits.LongLength;
                        long dimIndex1 = 1 + limits.LongLength;
                        long dimIndex2 = 2 + limits.LongLength;

                        long opsOuter = @out.Shape.Dimensions[0 + limits.LongLength].Length;
                        long opsInner = @out.Shape.Dimensions[1 + limits.LongLength].Length;
                        long opsInnerInner = @out.Shape.Dimensions[2 + limits.LongLength].Length;

                        long outerStride3 = @out.Shape.Dimensions[dimIndex0].Stride;
                        long innerStride3 = @out.Shape.Dimensions[dimIndex1].Stride;
                        long innerInnerStride3 = @out.Shape.Dimensions[dimIndex2].Stride;
                        outerStride3 -= innerStride3 * @out.Shape.Dimensions[dimIndex1].Length;
                        innerStride3 -= innerInnerStride3 * @out.Shape.Dimensions[dimIndex2].Length;

                        for (long outer = 0; outer < totalOps; outer++)
                        {
                            //Get the array offset for the first element in the outer dimension
                            long ix3 = @out.Shape[counters];

                            for (long i = 0; i < opsOuter; i++)
                            {
                                for (long j = 0; j < opsInner; j++)
                                {
                                    for (long k = 0; k < opsInnerInner; k++)
                                    {
                                        d2[ix3] = (System.Int32)(scalar ? 1 : 0 );
                                        ix3 += innerInnerStride3;
                                    }

                                    ix3 += innerStride3;
                                }

                                ix3 += outerStride3;
                            }

                            if (counters.LongLength > 0)
                            {
                                //Basically a ripple carry adder
                                long p = counters.LongLength - 1;
                                while (++counters[p] == limits[p] && p > 0)
                                {
                                    counters[p] = 0;
                                    p--;
                                }
                            }
                        }
                    }
                }
            }
        }
        /// <summary>
        /// Unsafe implementation of applying a unary operation
        /// </summary>
        /// <typeparam name="C">The type of operation to perform</typeparam>
        /// <param name="op">The operation instance</param>
        /// <param name="in1">The input argument</param>
        /// <param name="out">The output target</param>
        internal static void UFunc_Op_Inner_Unary_Flush_SByte_TypedImpl<C>(NumCIL.UInt32.ToUInt32 op, NdArray<System.SByte> in1, NdArray<System.UInt32> @out)
            where C : IUnaryOp<System.SByte>
        {
            unsafe
            {
                using (var f1 = new Pinner(in1.DataAccessor))
                using (var f2 = new Pinner(@out.DataAccessor))
                {
                    var d1 = (System.SByte*)f1.ptr;
                    var d2 = (System.UInt32*)f2.ptr;

                    if (@out.Shape.Dimensions.Length == 1)
                    {
                        long totalOps = @out.Shape.Dimensions[0].Length;

                        long ix1 = in1.Shape.Offset;
                        long ix2 = @out.Shape.Offset;

                        long stride1 = in1.Shape.Dimensions[0].Stride;
                        long stride2 = @out.Shape.Dimensions[0].Stride;


                        if (stride1 == stride2 && ix1 == ix2)
                        {
                            //Best case, all are equal, just keep a single counter
                            for (long i = 0; i < totalOps; i++)
                            {
                                d2[ix1] = (System.UInt32)(d1[ix1]);
                                ix1 += stride1;
                            }
                        }
                        else
                        {
                            for (long i = 0; i < totalOps; i++)
                            {
                                d2[ix2] = (System.UInt32)(d1[ix1]);
                                ix1 += stride1;
                                ix2 += stride2;
                            }
                        }
                    }
                    else if (@out.Shape.Dimensions.Length == 2)
                    {
                        long opsOuter = @out.Shape.Dimensions[0].Length;
                        long opsInner = @out.Shape.Dimensions[1].Length;

                        long ix1 = in1.Shape.Offset;
                        long ix2 = @out.Shape.Offset;

                        long outerStride1 = in1.Shape.Dimensions[0].Stride;
                        long outerStride2 = @out.Shape.Dimensions[0].Stride;

                        long innerStride1 = in1.Shape.Dimensions[1].Stride;
                        long innerStride2 = @out.Shape.Dimensions[1].Stride;

                        outerStride1 -= innerStride1 * in1.Shape.Dimensions[1].Length;
                        outerStride2 -= innerStride2 * @out.Shape.Dimensions[1].Length;

                        for (long i = 0; i < opsOuter; i++)
                        {
                            for (long j = 0; j < opsInner; j++)
                            {
                                d2[ix2] = (System.UInt32)(d1[ix1]);
                                ix1 += innerStride1;
                                ix2 += innerStride2;
                            }

                            ix1 += outerStride1;
                            ix2 += outerStride2;
                        }
                    }
                    else
                    {
                        long n = in1.Shape.Dimensions.LongLength - 3;
                        long[] limits = in1.Shape.Dimensions.Where(x => n-- > 0).Select(x => x.Length).ToArray();
                        long[] counters = new long[limits.LongLength];

                        long totalOps = limits.LongLength == 0 ? 1 : limits.Aggregate<long>((a, b) => a * b);

                        //This chunck of variables are used to prevent repeated calculations of offsets
                        long dimIndex0 = 0 + limits.LongLength;
                        long dimIndex1 = 1 + limits.LongLength;
                        long dimIndex2 = 2 + limits.LongLength;

                        long opsOuter = @out.Shape.Dimensions[0 + limits.LongLength].Length;
                        long opsInner = @out.Shape.Dimensions[1 + limits.LongLength].Length;
                        long opsInnerInner = @out.Shape.Dimensions[2 + limits.LongLength].Length;

                        long outerStride1 = in1.Shape.Dimensions[dimIndex0].Stride;
                        long outerStride3 = @out.Shape.Dimensions[dimIndex0].Stride;

                        long innerStride1 = in1.Shape.Dimensions[dimIndex1].Stride;
                        long innerStride3 = @out.Shape.Dimensions[dimIndex1].Stride;

                        long innerInnerStride1 = in1.Shape.Dimensions[dimIndex2].Stride;
                        long innerInnerStride3 = @out.Shape.Dimensions[dimIndex2].Stride;

                        outerStride1 -= innerStride1 * in1.Shape.Dimensions[dimIndex1].Length;
                        outerStride3 -= innerStride3 * @out.Shape.Dimensions[dimIndex1].Length;

                        innerStride1 -= innerInnerStride1 * in1.Shape.Dimensions[dimIndex2].Length;
                        innerStride3 -= innerInnerStride3 * @out.Shape.Dimensions[dimIndex2].Length;

                        for (long outer = 0; outer < totalOps; outer++)
                        {
                            //Get the array offset for the first element in the outer dimension
                            long ix1 = in1.Shape[counters];
                            long ix3 = @out.Shape[counters];


                            for (long i = 0; i < opsOuter; i++)
                            {
                                for (long j = 0; j < opsInner; j++)
                                {
                                    for (long k = 0; k < opsInnerInner; k++)
                                    {
                                        d2[ix3] = (System.UInt32)(d1[ix1]);
                                        ix1 += innerInnerStride1;
                                        ix3 += innerInnerStride3;
                                    }

                                    ix1 += innerStride1;
                                    ix3 += innerStride3;
                                }

                                ix1 += outerStride1;
                                ix3 += outerStride3;
                            }

                            if (counters.LongLength > 0)
                            {
                                //Basically a ripple carry adder
                                long p = counters.LongLength - 1;
                                while (++counters[p] == limits[p] && p > 0)
                                {
                                    counters[p] = 0;
                                    p--;
                                }
                            }
                        }
                    }
                }
            }
        }

        /// <summary>
        /// Unsafe implementation of applying a unary operation
        /// </summary>
        /// <typeparam name="C">The type of operation to perform</typeparam>
        /// <param name="op">The operation instance</param>
        /// <param name="scalar">The input scalar argument</param>
        /// <param name="out">The output target</param>
        internal static void UFunc_Op_Inner_Unary_Scalar_Flush_SByte_TypedImpl<C>(NumCIL.UInt32.ToUInt32 op, System.SByte scalar, NdArray<System.UInt32> @out)
            where C : IUnaryOp<System.SByte>
        {
            unsafe
            {
                using (var f2 = new Pinner(@out.DataAccessor))
                {
                    var d2 = (System.UInt32*)f2.ptr;

                    if (@out.Shape.Dimensions.Length == 1)
                    {
                        long totalOps = @out.Shape.Dimensions[0].Length;
                        long ix2 = @out.Shape.Offset;
                        long stride2 = @out.Shape.Dimensions[0].Stride;

                        for (long i = 0; i < totalOps; i++)
                        {
                            d2[ix2] = (System.UInt32)(scalar);
                            ix2 += stride2;
                        }
                    }
                    else if (@out.Shape.Dimensions.Length == 2)
                    {
                        long opsOuter = @out.Shape.Dimensions[0].Length;
                        long opsInner = @out.Shape.Dimensions[1].Length;

                        long ix2 = @out.Shape.Offset;
                        long outerStride2 = @out.Shape.Dimensions[0].Stride;
                        long innerStride2 = @out.Shape.Dimensions[1].Stride;
                        outerStride2 -= innerStride2 * @out.Shape.Dimensions[1].Length;

                        for (long i = 0; i < opsOuter; i++)
                        {
                            for (long j = 0; j < opsInner; j++)
                            {
                                d2[ix2] = (System.UInt32)(scalar);
                                ix2 += innerStride2;
                            }

                            ix2 += outerStride2;
                        }
                    }
                    else
                    {
                        long n = @out.Shape.Dimensions.LongLength - 3;
                        long[] limits = @out.Shape.Dimensions.Where(x => n-- > 0).Select(x => x.Length).ToArray();
                        long[] counters = new long[limits.LongLength];

                        long totalOps = limits.LongLength == 0 ? 1 : limits.Aggregate<long>((a, b) => a * b);

                        //This chunck of variables are used to prevent repeated calculations of offsets
                        long dimIndex0 = 0 + limits.LongLength;
                        long dimIndex1 = 1 + limits.LongLength;
                        long dimIndex2 = 2 + limits.LongLength;

                        long opsOuter = @out.Shape.Dimensions[0 + limits.LongLength].Length;
                        long opsInner = @out.Shape.Dimensions[1 + limits.LongLength].Length;
                        long opsInnerInner = @out.Shape.Dimensions[2 + limits.LongLength].Length;

                        long outerStride3 = @out.Shape.Dimensions[dimIndex0].Stride;
                        long innerStride3 = @out.Shape.Dimensions[dimIndex1].Stride;
                        long innerInnerStride3 = @out.Shape.Dimensions[dimIndex2].Stride;
                        outerStride3 -= innerStride3 * @out.Shape.Dimensions[dimIndex1].Length;
                        innerStride3 -= innerInnerStride3 * @out.Shape.Dimensions[dimIndex2].Length;

                        for (long outer = 0; outer < totalOps; outer++)
                        {
                            //Get the array offset for the first element in the outer dimension
                            long ix3 = @out.Shape[counters];

                            for (long i = 0; i < opsOuter; i++)
                            {
                                for (long j = 0; j < opsInner; j++)
                                {
                                    for (long k = 0; k < opsInnerInner; k++)
                                    {
                                        d2[ix3] = (System.UInt32)(scalar);
                                        ix3 += innerInnerStride3;
                                    }

                                    ix3 += innerStride3;
                                }

                                ix3 += outerStride3;
                            }

                            if (counters.LongLength > 0)
                            {
                                //Basically a ripple carry adder
                                long p = counters.LongLength - 1;
                                while (++counters[p] == limits[p] && p > 0)
                                {
                                    counters[p] = 0;
                                    p--;
                                }
                            }
                        }
                    }
                }
            }
        }
        /// <summary>
        /// Unsafe implementation of applying a unary operation
        /// </summary>
        /// <typeparam name="C">The type of operation to perform</typeparam>
        /// <param name="op">The operation instance</param>
        /// <param name="in1">The input argument</param>
        /// <param name="out">The output target</param>
        internal static void UFunc_Op_Inner_Unary_Flush_Byte_TypedImpl<C>(NumCIL.UInt32.ToUInt32 op, NdArray<System.Byte> in1, NdArray<System.UInt32> @out)
            where C : IUnaryOp<System.Byte>
        {
            unsafe
            {
                using (var f1 = new Pinner(in1.DataAccessor))
                using (var f2 = new Pinner(@out.DataAccessor))
                {
                    var d1 = (System.Byte*)f1.ptr;
                    var d2 = (System.UInt32*)f2.ptr;

                    if (@out.Shape.Dimensions.Length == 1)
                    {
                        long totalOps = @out.Shape.Dimensions[0].Length;

                        long ix1 = in1.Shape.Offset;
                        long ix2 = @out.Shape.Offset;

                        long stride1 = in1.Shape.Dimensions[0].Stride;
                        long stride2 = @out.Shape.Dimensions[0].Stride;


                        if (stride1 == stride2 && ix1 == ix2)
                        {
                            //Best case, all are equal, just keep a single counter
                            for (long i = 0; i < totalOps; i++)
                            {
                                d2[ix1] = (System.UInt32)(d1[ix1]);
                                ix1 += stride1;
                            }
                        }
                        else
                        {
                            for (long i = 0; i < totalOps; i++)
                            {
                                d2[ix2] = (System.UInt32)(d1[ix1]);
                                ix1 += stride1;
                                ix2 += stride2;
                            }
                        }
                    }
                    else if (@out.Shape.Dimensions.Length == 2)
                    {
                        long opsOuter = @out.Shape.Dimensions[0].Length;
                        long opsInner = @out.Shape.Dimensions[1].Length;

                        long ix1 = in1.Shape.Offset;
                        long ix2 = @out.Shape.Offset;

                        long outerStride1 = in1.Shape.Dimensions[0].Stride;
                        long outerStride2 = @out.Shape.Dimensions[0].Stride;

                        long innerStride1 = in1.Shape.Dimensions[1].Stride;
                        long innerStride2 = @out.Shape.Dimensions[1].Stride;

                        outerStride1 -= innerStride1 * in1.Shape.Dimensions[1].Length;
                        outerStride2 -= innerStride2 * @out.Shape.Dimensions[1].Length;

                        for (long i = 0; i < opsOuter; i++)
                        {
                            for (long j = 0; j < opsInner; j++)
                            {
                                d2[ix2] = (System.UInt32)(d1[ix1]);
                                ix1 += innerStride1;
                                ix2 += innerStride2;
                            }

                            ix1 += outerStride1;
                            ix2 += outerStride2;
                        }
                    }
                    else
                    {
                        long n = in1.Shape.Dimensions.LongLength - 3;
                        long[] limits = in1.Shape.Dimensions.Where(x => n-- > 0).Select(x => x.Length).ToArray();
                        long[] counters = new long[limits.LongLength];

                        long totalOps = limits.LongLength == 0 ? 1 : limits.Aggregate<long>((a, b) => a * b);

                        //This chunck of variables are used to prevent repeated calculations of offsets
                        long dimIndex0 = 0 + limits.LongLength;
                        long dimIndex1 = 1 + limits.LongLength;
                        long dimIndex2 = 2 + limits.LongLength;

                        long opsOuter = @out.Shape.Dimensions[0 + limits.LongLength].Length;
                        long opsInner = @out.Shape.Dimensions[1 + limits.LongLength].Length;
                        long opsInnerInner = @out.Shape.Dimensions[2 + limits.LongLength].Length;

                        long outerStride1 = in1.Shape.Dimensions[dimIndex0].Stride;
                        long outerStride3 = @out.Shape.Dimensions[dimIndex0].Stride;

                        long innerStride1 = in1.Shape.Dimensions[dimIndex1].Stride;
                        long innerStride3 = @out.Shape.Dimensions[dimIndex1].Stride;

                        long innerInnerStride1 = in1.Shape.Dimensions[dimIndex2].Stride;
                        long innerInnerStride3 = @out.Shape.Dimensions[dimIndex2].Stride;

                        outerStride1 -= innerStride1 * in1.Shape.Dimensions[dimIndex1].Length;
                        outerStride3 -= innerStride3 * @out.Shape.Dimensions[dimIndex1].Length;

                        innerStride1 -= innerInnerStride1 * in1.Shape.Dimensions[dimIndex2].Length;
                        innerStride3 -= innerInnerStride3 * @out.Shape.Dimensions[dimIndex2].Length;

                        for (long outer = 0; outer < totalOps; outer++)
                        {
                            //Get the array offset for the first element in the outer dimension
                            long ix1 = in1.Shape[counters];
                            long ix3 = @out.Shape[counters];


                            for (long i = 0; i < opsOuter; i++)
                            {
                                for (long j = 0; j < opsInner; j++)
                                {
                                    for (long k = 0; k < opsInnerInner; k++)
                                    {
                                        d2[ix3] = (System.UInt32)(d1[ix1]);
                                        ix1 += innerInnerStride1;
                                        ix3 += innerInnerStride3;
                                    }

                                    ix1 += innerStride1;
                                    ix3 += innerStride3;
                                }

                                ix1 += outerStride1;
                                ix3 += outerStride3;
                            }

                            if (counters.LongLength > 0)
                            {
                                //Basically a ripple carry adder
                                long p = counters.LongLength - 1;
                                while (++counters[p] == limits[p] && p > 0)
                                {
                                    counters[p] = 0;
                                    p--;
                                }
                            }
                        }
                    }
                }
            }
        }

        /// <summary>
        /// Unsafe implementation of applying a unary operation
        /// </summary>
        /// <typeparam name="C">The type of operation to perform</typeparam>
        /// <param name="op">The operation instance</param>
        /// <param name="scalar">The input scalar argument</param>
        /// <param name="out">The output target</param>
        internal static void UFunc_Op_Inner_Unary_Scalar_Flush_Byte_TypedImpl<C>(NumCIL.UInt32.ToUInt32 op, System.Byte scalar, NdArray<System.UInt32> @out)
            where C : IUnaryOp<System.Byte>
        {
            unsafe
            {
                using (var f2 = new Pinner(@out.DataAccessor))
                {
                    var d2 = (System.UInt32*)f2.ptr;

                    if (@out.Shape.Dimensions.Length == 1)
                    {
                        long totalOps = @out.Shape.Dimensions[0].Length;
                        long ix2 = @out.Shape.Offset;
                        long stride2 = @out.Shape.Dimensions[0].Stride;

                        for (long i = 0; i < totalOps; i++)
                        {
                            d2[ix2] = (System.UInt32)(scalar);
                            ix2 += stride2;
                        }
                    }
                    else if (@out.Shape.Dimensions.Length == 2)
                    {
                        long opsOuter = @out.Shape.Dimensions[0].Length;
                        long opsInner = @out.Shape.Dimensions[1].Length;

                        long ix2 = @out.Shape.Offset;
                        long outerStride2 = @out.Shape.Dimensions[0].Stride;
                        long innerStride2 = @out.Shape.Dimensions[1].Stride;
                        outerStride2 -= innerStride2 * @out.Shape.Dimensions[1].Length;

                        for (long i = 0; i < opsOuter; i++)
                        {
                            for (long j = 0; j < opsInner; j++)
                            {
                                d2[ix2] = (System.UInt32)(scalar);
                                ix2 += innerStride2;
                            }

                            ix2 += outerStride2;
                        }
                    }
                    else
                    {
                        long n = @out.Shape.Dimensions.LongLength - 3;
                        long[] limits = @out.Shape.Dimensions.Where(x => n-- > 0).Select(x => x.Length).ToArray();
                        long[] counters = new long[limits.LongLength];

                        long totalOps = limits.LongLength == 0 ? 1 : limits.Aggregate<long>((a, b) => a * b);

                        //This chunck of variables are used to prevent repeated calculations of offsets
                        long dimIndex0 = 0 + limits.LongLength;
                        long dimIndex1 = 1 + limits.LongLength;
                        long dimIndex2 = 2 + limits.LongLength;

                        long opsOuter = @out.Shape.Dimensions[0 + limits.LongLength].Length;
                        long opsInner = @out.Shape.Dimensions[1 + limits.LongLength].Length;
                        long opsInnerInner = @out.Shape.Dimensions[2 + limits.LongLength].Length;

                        long outerStride3 = @out.Shape.Dimensions[dimIndex0].Stride;
                        long innerStride3 = @out.Shape.Dimensions[dimIndex1].Stride;
                        long innerInnerStride3 = @out.Shape.Dimensions[dimIndex2].Stride;
                        outerStride3 -= innerStride3 * @out.Shape.Dimensions[dimIndex1].Length;
                        innerStride3 -= innerInnerStride3 * @out.Shape.Dimensions[dimIndex2].Length;

                        for (long outer = 0; outer < totalOps; outer++)
                        {
                            //Get the array offset for the first element in the outer dimension
                            long ix3 = @out.Shape[counters];

                            for (long i = 0; i < opsOuter; i++)
                            {
                                for (long j = 0; j < opsInner; j++)
                                {
                                    for (long k = 0; k < opsInnerInner; k++)
                                    {
                                        d2[ix3] = (System.UInt32)(scalar);
                                        ix3 += innerInnerStride3;
                                    }

                                    ix3 += innerStride3;
                                }

                                ix3 += outerStride3;
                            }

                            if (counters.LongLength > 0)
                            {
                                //Basically a ripple carry adder
                                long p = counters.LongLength - 1;
                                while (++counters[p] == limits[p] && p > 0)
                                {
                                    counters[p] = 0;
                                    p--;
                                }
                            }
                        }
                    }
                }
            }
        }
        /// <summary>
        /// Unsafe implementation of applying a unary operation
        /// </summary>
        /// <typeparam name="C">The type of operation to perform</typeparam>
        /// <param name="op">The operation instance</param>
        /// <param name="in1">The input argument</param>
        /// <param name="out">The output target</param>
        internal static void UFunc_Op_Inner_Unary_Flush_Int16_TypedImpl<C>(NumCIL.UInt32.ToUInt32 op, NdArray<System.Int16> in1, NdArray<System.UInt32> @out)
            where C : IUnaryOp<System.Int16>
        {
            unsafe
            {
                using (var f1 = new Pinner(in1.DataAccessor))
                using (var f2 = new Pinner(@out.DataAccessor))
                {
                    var d1 = (System.Int16*)f1.ptr;
                    var d2 = (System.UInt32*)f2.ptr;

                    if (@out.Shape.Dimensions.Length == 1)
                    {
                        long totalOps = @out.Shape.Dimensions[0].Length;

                        long ix1 = in1.Shape.Offset;
                        long ix2 = @out.Shape.Offset;

                        long stride1 = in1.Shape.Dimensions[0].Stride;
                        long stride2 = @out.Shape.Dimensions[0].Stride;


                        if (stride1 == stride2 && ix1 == ix2)
                        {
                            //Best case, all are equal, just keep a single counter
                            for (long i = 0; i < totalOps; i++)
                            {
                                d2[ix1] = (System.UInt32)(d1[ix1]);
                                ix1 += stride1;
                            }
                        }
                        else
                        {
                            for (long i = 0; i < totalOps; i++)
                            {
                                d2[ix2] = (System.UInt32)(d1[ix1]);
                                ix1 += stride1;
                                ix2 += stride2;
                            }
                        }
                    }
                    else if (@out.Shape.Dimensions.Length == 2)
                    {
                        long opsOuter = @out.Shape.Dimensions[0].Length;
                        long opsInner = @out.Shape.Dimensions[1].Length;

                        long ix1 = in1.Shape.Offset;
                        long ix2 = @out.Shape.Offset;

                        long outerStride1 = in1.Shape.Dimensions[0].Stride;
                        long outerStride2 = @out.Shape.Dimensions[0].Stride;

                        long innerStride1 = in1.Shape.Dimensions[1].Stride;
                        long innerStride2 = @out.Shape.Dimensions[1].Stride;

                        outerStride1 -= innerStride1 * in1.Shape.Dimensions[1].Length;
                        outerStride2 -= innerStride2 * @out.Shape.Dimensions[1].Length;

                        for (long i = 0; i < opsOuter; i++)
                        {
                            for (long j = 0; j < opsInner; j++)
                            {
                                d2[ix2] = (System.UInt32)(d1[ix1]);
                                ix1 += innerStride1;
                                ix2 += innerStride2;
                            }

                            ix1 += outerStride1;
                            ix2 += outerStride2;
                        }
                    }
                    else
                    {
                        long n = in1.Shape.Dimensions.LongLength - 3;
                        long[] limits = in1.Shape.Dimensions.Where(x => n-- > 0).Select(x => x.Length).ToArray();
                        long[] counters = new long[limits.LongLength];

                        long totalOps = limits.LongLength == 0 ? 1 : limits.Aggregate<long>((a, b) => a * b);

                        //This chunck of variables are used to prevent repeated calculations of offsets
                        long dimIndex0 = 0 + limits.LongLength;
                        long dimIndex1 = 1 + limits.LongLength;
                        long dimIndex2 = 2 + limits.LongLength;

                        long opsOuter = @out.Shape.Dimensions[0 + limits.LongLength].Length;
                        long opsInner = @out.Shape.Dimensions[1 + limits.LongLength].Length;
                        long opsInnerInner = @out.Shape.Dimensions[2 + limits.LongLength].Length;

                        long outerStride1 = in1.Shape.Dimensions[dimIndex0].Stride;
                        long outerStride3 = @out.Shape.Dimensions[dimIndex0].Stride;

                        long innerStride1 = in1.Shape.Dimensions[dimIndex1].Stride;
                        long innerStride3 = @out.Shape.Dimensions[dimIndex1].Stride;

                        long innerInnerStride1 = in1.Shape.Dimensions[dimIndex2].Stride;
                        long innerInnerStride3 = @out.Shape.Dimensions[dimIndex2].Stride;

                        outerStride1 -= innerStride1 * in1.Shape.Dimensions[dimIndex1].Length;
                        outerStride3 -= innerStride3 * @out.Shape.Dimensions[dimIndex1].Length;

                        innerStride1 -= innerInnerStride1 * in1.Shape.Dimensions[dimIndex2].Length;
                        innerStride3 -= innerInnerStride3 * @out.Shape.Dimensions[dimIndex2].Length;

                        for (long outer = 0; outer < totalOps; outer++)
                        {
                            //Get the array offset for the first element in the outer dimension
                            long ix1 = in1.Shape[counters];
                            long ix3 = @out.Shape[counters];


                            for (long i = 0; i < opsOuter; i++)
                            {
                                for (long j = 0; j < opsInner; j++)
                                {
                                    for (long k = 0; k < opsInnerInner; k++)
                                    {
                                        d2[ix3] = (System.UInt32)(d1[ix1]);
                                        ix1 += innerInnerStride1;
                                        ix3 += innerInnerStride3;
                                    }

                                    ix1 += innerStride1;
                                    ix3 += innerStride3;
                                }

                                ix1 += outerStride1;
                                ix3 += outerStride3;
                            }

                            if (counters.LongLength > 0)
                            {
                                //Basically a ripple carry adder
                                long p = counters.LongLength - 1;
                                while (++counters[p] == limits[p] && p > 0)
                                {
                                    counters[p] = 0;
                                    p--;
                                }
                            }
                        }
                    }
                }
            }
        }

        /// <summary>
        /// Unsafe implementation of applying a unary operation
        /// </summary>
        /// <typeparam name="C">The type of operation to perform</typeparam>
        /// <param name="op">The operation instance</param>
        /// <param name="scalar">The input scalar argument</param>
        /// <param name="out">The output target</param>
        internal static void UFunc_Op_Inner_Unary_Scalar_Flush_Int16_TypedImpl<C>(NumCIL.UInt32.ToUInt32 op, System.Int16 scalar, NdArray<System.UInt32> @out)
            where C : IUnaryOp<System.Int16>
        {
            unsafe
            {
                using (var f2 = new Pinner(@out.DataAccessor))
                {
                    var d2 = (System.UInt32*)f2.ptr;

                    if (@out.Shape.Dimensions.Length == 1)
                    {
                        long totalOps = @out.Shape.Dimensions[0].Length;
                        long ix2 = @out.Shape.Offset;
                        long stride2 = @out.Shape.Dimensions[0].Stride;

                        for (long i = 0; i < totalOps; i++)
                        {
                            d2[ix2] = (System.UInt32)(scalar);
                            ix2 += stride2;
                        }
                    }
                    else if (@out.Shape.Dimensions.Length == 2)
                    {
                        long opsOuter = @out.Shape.Dimensions[0].Length;
                        long opsInner = @out.Shape.Dimensions[1].Length;

                        long ix2 = @out.Shape.Offset;
                        long outerStride2 = @out.Shape.Dimensions[0].Stride;
                        long innerStride2 = @out.Shape.Dimensions[1].Stride;
                        outerStride2 -= innerStride2 * @out.Shape.Dimensions[1].Length;

                        for (long i = 0; i < opsOuter; i++)
                        {
                            for (long j = 0; j < opsInner; j++)
                            {
                                d2[ix2] = (System.UInt32)(scalar);
                                ix2 += innerStride2;
                            }

                            ix2 += outerStride2;
                        }
                    }
                    else
                    {
                        long n = @out.Shape.Dimensions.LongLength - 3;
                        long[] limits = @out.Shape.Dimensions.Where(x => n-- > 0).Select(x => x.Length).ToArray();
                        long[] counters = new long[limits.LongLength];

                        long totalOps = limits.LongLength == 0 ? 1 : limits.Aggregate<long>((a, b) => a * b);

                        //This chunck of variables are used to prevent repeated calculations of offsets
                        long dimIndex0 = 0 + limits.LongLength;
                        long dimIndex1 = 1 + limits.LongLength;
                        long dimIndex2 = 2 + limits.LongLength;

                        long opsOuter = @out.Shape.Dimensions[0 + limits.LongLength].Length;
                        long opsInner = @out.Shape.Dimensions[1 + limits.LongLength].Length;
                        long opsInnerInner = @out.Shape.Dimensions[2 + limits.LongLength].Length;

                        long outerStride3 = @out.Shape.Dimensions[dimIndex0].Stride;
                        long innerStride3 = @out.Shape.Dimensions[dimIndex1].Stride;
                        long innerInnerStride3 = @out.Shape.Dimensions[dimIndex2].Stride;
                        outerStride3 -= innerStride3 * @out.Shape.Dimensions[dimIndex1].Length;
                        innerStride3 -= innerInnerStride3 * @out.Shape.Dimensions[dimIndex2].Length;

                        for (long outer = 0; outer < totalOps; outer++)
                        {
                            //Get the array offset for the first element in the outer dimension
                            long ix3 = @out.Shape[counters];

                            for (long i = 0; i < opsOuter; i++)
                            {
                                for (long j = 0; j < opsInner; j++)
                                {
                                    for (long k = 0; k < opsInnerInner; k++)
                                    {
                                        d2[ix3] = (System.UInt32)(scalar);
                                        ix3 += innerInnerStride3;
                                    }

                                    ix3 += innerStride3;
                                }

                                ix3 += outerStride3;
                            }

                            if (counters.LongLength > 0)
                            {
                                //Basically a ripple carry adder
                                long p = counters.LongLength - 1;
                                while (++counters[p] == limits[p] && p > 0)
                                {
                                    counters[p] = 0;
                                    p--;
                                }
                            }
                        }
                    }
                }
            }
        }
        /// <summary>
        /// Unsafe implementation of applying a unary operation
        /// </summary>
        /// <typeparam name="C">The type of operation to perform</typeparam>
        /// <param name="op">The operation instance</param>
        /// <param name="in1">The input argument</param>
        /// <param name="out">The output target</param>
        internal static void UFunc_Op_Inner_Unary_Flush_UInt16_TypedImpl<C>(NumCIL.UInt32.ToUInt32 op, NdArray<System.UInt16> in1, NdArray<System.UInt32> @out)
            where C : IUnaryOp<System.UInt16>
        {
            unsafe
            {
                using (var f1 = new Pinner(in1.DataAccessor))
                using (var f2 = new Pinner(@out.DataAccessor))
                {
                    var d1 = (System.UInt16*)f1.ptr;
                    var d2 = (System.UInt32*)f2.ptr;

                    if (@out.Shape.Dimensions.Length == 1)
                    {
                        long totalOps = @out.Shape.Dimensions[0].Length;

                        long ix1 = in1.Shape.Offset;
                        long ix2 = @out.Shape.Offset;

                        long stride1 = in1.Shape.Dimensions[0].Stride;
                        long stride2 = @out.Shape.Dimensions[0].Stride;


                        if (stride1 == stride2 && ix1 == ix2)
                        {
                            //Best case, all are equal, just keep a single counter
                            for (long i = 0; i < totalOps; i++)
                            {
                                d2[ix1] = (System.UInt32)(d1[ix1]);
                                ix1 += stride1;
                            }
                        }
                        else
                        {
                            for (long i = 0; i < totalOps; i++)
                            {
                                d2[ix2] = (System.UInt32)(d1[ix1]);
                                ix1 += stride1;
                                ix2 += stride2;
                            }
                        }
                    }
                    else if (@out.Shape.Dimensions.Length == 2)
                    {
                        long opsOuter = @out.Shape.Dimensions[0].Length;
                        long opsInner = @out.Shape.Dimensions[1].Length;

                        long ix1 = in1.Shape.Offset;
                        long ix2 = @out.Shape.Offset;

                        long outerStride1 = in1.Shape.Dimensions[0].Stride;
                        long outerStride2 = @out.Shape.Dimensions[0].Stride;

                        long innerStride1 = in1.Shape.Dimensions[1].Stride;
                        long innerStride2 = @out.Shape.Dimensions[1].Stride;

                        outerStride1 -= innerStride1 * in1.Shape.Dimensions[1].Length;
                        outerStride2 -= innerStride2 * @out.Shape.Dimensions[1].Length;

                        for (long i = 0; i < opsOuter; i++)
                        {
                            for (long j = 0; j < opsInner; j++)
                            {
                                d2[ix2] = (System.UInt32)(d1[ix1]);
                                ix1 += innerStride1;
                                ix2 += innerStride2;
                            }

                            ix1 += outerStride1;
                            ix2 += outerStride2;
                        }
                    }
                    else
                    {
                        long n = in1.Shape.Dimensions.LongLength - 3;
                        long[] limits = in1.Shape.Dimensions.Where(x => n-- > 0).Select(x => x.Length).ToArray();
                        long[] counters = new long[limits.LongLength];

                        long totalOps = limits.LongLength == 0 ? 1 : limits.Aggregate<long>((a, b) => a * b);

                        //This chunck of variables are used to prevent repeated calculations of offsets
                        long dimIndex0 = 0 + limits.LongLength;
                        long dimIndex1 = 1 + limits.LongLength;
                        long dimIndex2 = 2 + limits.LongLength;

                        long opsOuter = @out.Shape.Dimensions[0 + limits.LongLength].Length;
                        long opsInner = @out.Shape.Dimensions[1 + limits.LongLength].Length;
                        long opsInnerInner = @out.Shape.Dimensions[2 + limits.LongLength].Length;

                        long outerStride1 = in1.Shape.Dimensions[dimIndex0].Stride;
                        long outerStride3 = @out.Shape.Dimensions[dimIndex0].Stride;

                        long innerStride1 = in1.Shape.Dimensions[dimIndex1].Stride;
                        long innerStride3 = @out.Shape.Dimensions[dimIndex1].Stride;

                        long innerInnerStride1 = in1.Shape.Dimensions[dimIndex2].Stride;
                        long innerInnerStride3 = @out.Shape.Dimensions[dimIndex2].Stride;

                        outerStride1 -= innerStride1 * in1.Shape.Dimensions[dimIndex1].Length;
                        outerStride3 -= innerStride3 * @out.Shape.Dimensions[dimIndex1].Length;

                        innerStride1 -= innerInnerStride1 * in1.Shape.Dimensions[dimIndex2].Length;
                        innerStride3 -= innerInnerStride3 * @out.Shape.Dimensions[dimIndex2].Length;

                        for (long outer = 0; outer < totalOps; outer++)
                        {
                            //Get the array offset for the first element in the outer dimension
                            long ix1 = in1.Shape[counters];
                            long ix3 = @out.Shape[counters];


                            for (long i = 0; i < opsOuter; i++)
                            {
                                for (long j = 0; j < opsInner; j++)
                                {
                                    for (long k = 0; k < opsInnerInner; k++)
                                    {
                                        d2[ix3] = (System.UInt32)(d1[ix1]);
                                        ix1 += innerInnerStride1;
                                        ix3 += innerInnerStride3;
                                    }

                                    ix1 += innerStride1;
                                    ix3 += innerStride3;
                                }

                                ix1 += outerStride1;
                                ix3 += outerStride3;
                            }

                            if (counters.LongLength > 0)
                            {
                                //Basically a ripple carry adder
                                long p = counters.LongLength - 1;
                                while (++counters[p] == limits[p] && p > 0)
                                {
                                    counters[p] = 0;
                                    p--;
                                }
                            }
                        }
                    }
                }
            }
        }

        /// <summary>
        /// Unsafe implementation of applying a unary operation
        /// </summary>
        /// <typeparam name="C">The type of operation to perform</typeparam>
        /// <param name="op">The operation instance</param>
        /// <param name="scalar">The input scalar argument</param>
        /// <param name="out">The output target</param>
        internal static void UFunc_Op_Inner_Unary_Scalar_Flush_UInt16_TypedImpl<C>(NumCIL.UInt32.ToUInt32 op, System.UInt16 scalar, NdArray<System.UInt32> @out)
            where C : IUnaryOp<System.UInt16>
        {
            unsafe
            {
                using (var f2 = new Pinner(@out.DataAccessor))
                {
                    var d2 = (System.UInt32*)f2.ptr;

                    if (@out.Shape.Dimensions.Length == 1)
                    {
                        long totalOps = @out.Shape.Dimensions[0].Length;
                        long ix2 = @out.Shape.Offset;
                        long stride2 = @out.Shape.Dimensions[0].Stride;

                        for (long i = 0; i < totalOps; i++)
                        {
                            d2[ix2] = (System.UInt32)(scalar);
                            ix2 += stride2;
                        }
                    }
                    else if (@out.Shape.Dimensions.Length == 2)
                    {
                        long opsOuter = @out.Shape.Dimensions[0].Length;
                        long opsInner = @out.Shape.Dimensions[1].Length;

                        long ix2 = @out.Shape.Offset;
                        long outerStride2 = @out.Shape.Dimensions[0].Stride;
                        long innerStride2 = @out.Shape.Dimensions[1].Stride;
                        outerStride2 -= innerStride2 * @out.Shape.Dimensions[1].Length;

                        for (long i = 0; i < opsOuter; i++)
                        {
                            for (long j = 0; j < opsInner; j++)
                            {
                                d2[ix2] = (System.UInt32)(scalar);
                                ix2 += innerStride2;
                            }

                            ix2 += outerStride2;
                        }
                    }
                    else
                    {
                        long n = @out.Shape.Dimensions.LongLength - 3;
                        long[] limits = @out.Shape.Dimensions.Where(x => n-- > 0).Select(x => x.Length).ToArray();
                        long[] counters = new long[limits.LongLength];

                        long totalOps = limits.LongLength == 0 ? 1 : limits.Aggregate<long>((a, b) => a * b);

                        //This chunck of variables are used to prevent repeated calculations of offsets
                        long dimIndex0 = 0 + limits.LongLength;
                        long dimIndex1 = 1 + limits.LongLength;
                        long dimIndex2 = 2 + limits.LongLength;

                        long opsOuter = @out.Shape.Dimensions[0 + limits.LongLength].Length;
                        long opsInner = @out.Shape.Dimensions[1 + limits.LongLength].Length;
                        long opsInnerInner = @out.Shape.Dimensions[2 + limits.LongLength].Length;

                        long outerStride3 = @out.Shape.Dimensions[dimIndex0].Stride;
                        long innerStride3 = @out.Shape.Dimensions[dimIndex1].Stride;
                        long innerInnerStride3 = @out.Shape.Dimensions[dimIndex2].Stride;
                        outerStride3 -= innerStride3 * @out.Shape.Dimensions[dimIndex1].Length;
                        innerStride3 -= innerInnerStride3 * @out.Shape.Dimensions[dimIndex2].Length;

                        for (long outer = 0; outer < totalOps; outer++)
                        {
                            //Get the array offset for the first element in the outer dimension
                            long ix3 = @out.Shape[counters];

                            for (long i = 0; i < opsOuter; i++)
                            {
                                for (long j = 0; j < opsInner; j++)
                                {
                                    for (long k = 0; k < opsInnerInner; k++)
                                    {
                                        d2[ix3] = (System.UInt32)(scalar);
                                        ix3 += innerInnerStride3;
                                    }

                                    ix3 += innerStride3;
                                }

                                ix3 += outerStride3;
                            }

                            if (counters.LongLength > 0)
                            {
                                //Basically a ripple carry adder
                                long p = counters.LongLength - 1;
                                while (++counters[p] == limits[p] && p > 0)
                                {
                                    counters[p] = 0;
                                    p--;
                                }
                            }
                        }
                    }
                }
            }
        }
        /// <summary>
        /// Unsafe implementation of applying a unary operation
        /// </summary>
        /// <typeparam name="C">The type of operation to perform</typeparam>
        /// <param name="op">The operation instance</param>
        /// <param name="in1">The input argument</param>
        /// <param name="out">The output target</param>
        internal static void UFunc_Op_Inner_Unary_Flush_Int32_TypedImpl<C>(NumCIL.UInt32.ToUInt32 op, NdArray<System.Int32> in1, NdArray<System.UInt32> @out)
            where C : IUnaryOp<System.Int32>
        {
            unsafe
            {
                using (var f1 = new Pinner(in1.DataAccessor))
                using (var f2 = new Pinner(@out.DataAccessor))
                {
                    var d1 = (System.Int32*)f1.ptr;
                    var d2 = (System.UInt32*)f2.ptr;

                    if (@out.Shape.Dimensions.Length == 1)
                    {
                        long totalOps = @out.Shape.Dimensions[0].Length;

                        long ix1 = in1.Shape.Offset;
                        long ix2 = @out.Shape.Offset;

                        long stride1 = in1.Shape.Dimensions[0].Stride;
                        long stride2 = @out.Shape.Dimensions[0].Stride;


                        if (stride1 == stride2 && ix1 == ix2)
                        {
                            //Best case, all are equal, just keep a single counter
                            for (long i = 0; i < totalOps; i++)
                            {
                                d2[ix1] = (System.UInt32)(d1[ix1]);
                                ix1 += stride1;
                            }
                        }
                        else
                        {
                            for (long i = 0; i < totalOps; i++)
                            {
                                d2[ix2] = (System.UInt32)(d1[ix1]);
                                ix1 += stride1;
                                ix2 += stride2;
                            }
                        }
                    }
                    else if (@out.Shape.Dimensions.Length == 2)
                    {
                        long opsOuter = @out.Shape.Dimensions[0].Length;
                        long opsInner = @out.Shape.Dimensions[1].Length;

                        long ix1 = in1.Shape.Offset;
                        long ix2 = @out.Shape.Offset;

                        long outerStride1 = in1.Shape.Dimensions[0].Stride;
                        long outerStride2 = @out.Shape.Dimensions[0].Stride;

                        long innerStride1 = in1.Shape.Dimensions[1].Stride;
                        long innerStride2 = @out.Shape.Dimensions[1].Stride;

                        outerStride1 -= innerStride1 * in1.Shape.Dimensions[1].Length;
                        outerStride2 -= innerStride2 * @out.Shape.Dimensions[1].Length;

                        for (long i = 0; i < opsOuter; i++)
                        {
                            for (long j = 0; j < opsInner; j++)
                            {
                                d2[ix2] = (System.UInt32)(d1[ix1]);
                                ix1 += innerStride1;
                                ix2 += innerStride2;
                            }

                            ix1 += outerStride1;
                            ix2 += outerStride2;
                        }
                    }
                    else
                    {
                        long n = in1.Shape.Dimensions.LongLength - 3;
                        long[] limits = in1.Shape.Dimensions.Where(x => n-- > 0).Select(x => x.Length).ToArray();
                        long[] counters = new long[limits.LongLength];

                        long totalOps = limits.LongLength == 0 ? 1 : limits.Aggregate<long>((a, b) => a * b);

                        //This chunck of variables are used to prevent repeated calculations of offsets
                        long dimIndex0 = 0 + limits.LongLength;
                        long dimIndex1 = 1 + limits.LongLength;
                        long dimIndex2 = 2 + limits.LongLength;

                        long opsOuter = @out.Shape.Dimensions[0 + limits.LongLength].Length;
                        long opsInner = @out.Shape.Dimensions[1 + limits.LongLength].Length;
                        long opsInnerInner = @out.Shape.Dimensions[2 + limits.LongLength].Length;

                        long outerStride1 = in1.Shape.Dimensions[dimIndex0].Stride;
                        long outerStride3 = @out.Shape.Dimensions[dimIndex0].Stride;

                        long innerStride1 = in1.Shape.Dimensions[dimIndex1].Stride;
                        long innerStride3 = @out.Shape.Dimensions[dimIndex1].Stride;

                        long innerInnerStride1 = in1.Shape.Dimensions[dimIndex2].Stride;
                        long innerInnerStride3 = @out.Shape.Dimensions[dimIndex2].Stride;

                        outerStride1 -= innerStride1 * in1.Shape.Dimensions[dimIndex1].Length;
                        outerStride3 -= innerStride3 * @out.Shape.Dimensions[dimIndex1].Length;

                        innerStride1 -= innerInnerStride1 * in1.Shape.Dimensions[dimIndex2].Length;
                        innerStride3 -= innerInnerStride3 * @out.Shape.Dimensions[dimIndex2].Length;

                        for (long outer = 0; outer < totalOps; outer++)
                        {
                            //Get the array offset for the first element in the outer dimension
                            long ix1 = in1.Shape[counters];
                            long ix3 = @out.Shape[counters];


                            for (long i = 0; i < opsOuter; i++)
                            {
                                for (long j = 0; j < opsInner; j++)
                                {
                                    for (long k = 0; k < opsInnerInner; k++)
                                    {
                                        d2[ix3] = (System.UInt32)(d1[ix1]);
                                        ix1 += innerInnerStride1;
                                        ix3 += innerInnerStride3;
                                    }

                                    ix1 += innerStride1;
                                    ix3 += innerStride3;
                                }

                                ix1 += outerStride1;
                                ix3 += outerStride3;
                            }

                            if (counters.LongLength > 0)
                            {
                                //Basically a ripple carry adder
                                long p = counters.LongLength - 1;
                                while (++counters[p] == limits[p] && p > 0)
                                {
                                    counters[p] = 0;
                                    p--;
                                }
                            }
                        }
                    }
                }
            }
        }

        /// <summary>
        /// Unsafe implementation of applying a unary operation
        /// </summary>
        /// <typeparam name="C">The type of operation to perform</typeparam>
        /// <param name="op">The operation instance</param>
        /// <param name="scalar">The input scalar argument</param>
        /// <param name="out">The output target</param>
        internal static void UFunc_Op_Inner_Unary_Scalar_Flush_Int32_TypedImpl<C>(NumCIL.UInt32.ToUInt32 op, System.Int32 scalar, NdArray<System.UInt32> @out)
            where C : IUnaryOp<System.Int32>
        {
            unsafe
            {
                using (var f2 = new Pinner(@out.DataAccessor))
                {
                    var d2 = (System.UInt32*)f2.ptr;

                    if (@out.Shape.Dimensions.Length == 1)
                    {
                        long totalOps = @out.Shape.Dimensions[0].Length;
                        long ix2 = @out.Shape.Offset;
                        long stride2 = @out.Shape.Dimensions[0].Stride;

                        for (long i = 0; i < totalOps; i++)
                        {
                            d2[ix2] = (System.UInt32)(scalar);
                            ix2 += stride2;
                        }
                    }
                    else if (@out.Shape.Dimensions.Length == 2)
                    {
                        long opsOuter = @out.Shape.Dimensions[0].Length;
                        long opsInner = @out.Shape.Dimensions[1].Length;

                        long ix2 = @out.Shape.Offset;
                        long outerStride2 = @out.Shape.Dimensions[0].Stride;
                        long innerStride2 = @out.Shape.Dimensions[1].Stride;
                        outerStride2 -= innerStride2 * @out.Shape.Dimensions[1].Length;

                        for (long i = 0; i < opsOuter; i++)
                        {
                            for (long j = 0; j < opsInner; j++)
                            {
                                d2[ix2] = (System.UInt32)(scalar);
                                ix2 += innerStride2;
                            }

                            ix2 += outerStride2;
                        }
                    }
                    else
                    {
                        long n = @out.Shape.Dimensions.LongLength - 3;
                        long[] limits = @out.Shape.Dimensions.Where(x => n-- > 0).Select(x => x.Length).ToArray();
                        long[] counters = new long[limits.LongLength];

                        long totalOps = limits.LongLength == 0 ? 1 : limits.Aggregate<long>((a, b) => a * b);

                        //This chunck of variables are used to prevent repeated calculations of offsets
                        long dimIndex0 = 0 + limits.LongLength;
                        long dimIndex1 = 1 + limits.LongLength;
                        long dimIndex2 = 2 + limits.LongLength;

                        long opsOuter = @out.Shape.Dimensions[0 + limits.LongLength].Length;
                        long opsInner = @out.Shape.Dimensions[1 + limits.LongLength].Length;
                        long opsInnerInner = @out.Shape.Dimensions[2 + limits.LongLength].Length;

                        long outerStride3 = @out.Shape.Dimensions[dimIndex0].Stride;
                        long innerStride3 = @out.Shape.Dimensions[dimIndex1].Stride;
                        long innerInnerStride3 = @out.Shape.Dimensions[dimIndex2].Stride;
                        outerStride3 -= innerStride3 * @out.Shape.Dimensions[dimIndex1].Length;
                        innerStride3 -= innerInnerStride3 * @out.Shape.Dimensions[dimIndex2].Length;

                        for (long outer = 0; outer < totalOps; outer++)
                        {
                            //Get the array offset for the first element in the outer dimension
                            long ix3 = @out.Shape[counters];

                            for (long i = 0; i < opsOuter; i++)
                            {
                                for (long j = 0; j < opsInner; j++)
                                {
                                    for (long k = 0; k < opsInnerInner; k++)
                                    {
                                        d2[ix3] = (System.UInt32)(scalar);
                                        ix3 += innerInnerStride3;
                                    }

                                    ix3 += innerStride3;
                                }

                                ix3 += outerStride3;
                            }

                            if (counters.LongLength > 0)
                            {
                                //Basically a ripple carry adder
                                long p = counters.LongLength - 1;
                                while (++counters[p] == limits[p] && p > 0)
                                {
                                    counters[p] = 0;
                                    p--;
                                }
                            }
                        }
                    }
                }
            }
        }
        /// <summary>
        /// Unsafe implementation of applying a unary operation
        /// </summary>
        /// <typeparam name="C">The type of operation to perform</typeparam>
        /// <param name="op">The operation instance</param>
        /// <param name="in1">The input argument</param>
        /// <param name="out">The output target</param>
        internal static void UFunc_Op_Inner_Unary_Flush_Int64_TypedImpl<C>(NumCIL.UInt32.ToUInt32 op, NdArray<System.Int64> in1, NdArray<System.UInt32> @out)
            where C : IUnaryOp<System.Int64>
        {
            unsafe
            {
                using (var f1 = new Pinner(in1.DataAccessor))
                using (var f2 = new Pinner(@out.DataAccessor))
                {
                    var d1 = (System.Int64*)f1.ptr;
                    var d2 = (System.UInt32*)f2.ptr;

                    if (@out.Shape.Dimensions.Length == 1)
                    {
                        long totalOps = @out.Shape.Dimensions[0].Length;

                        long ix1 = in1.Shape.Offset;
                        long ix2 = @out.Shape.Offset;

                        long stride1 = in1.Shape.Dimensions[0].Stride;
                        long stride2 = @out.Shape.Dimensions[0].Stride;


                        if (stride1 == stride2 && ix1 == ix2)
                        {
                            //Best case, all are equal, just keep a single counter
                            for (long i = 0; i < totalOps; i++)
                            {
                                d2[ix1] = (System.UInt32)(d1[ix1]);
                                ix1 += stride1;
                            }
                        }
                        else
                        {
                            for (long i = 0; i < totalOps; i++)
                            {
                                d2[ix2] = (System.UInt32)(d1[ix1]);
                                ix1 += stride1;
                                ix2 += stride2;
                            }
                        }
                    }
                    else if (@out.Shape.Dimensions.Length == 2)
                    {
                        long opsOuter = @out.Shape.Dimensions[0].Length;
                        long opsInner = @out.Shape.Dimensions[1].Length;

                        long ix1 = in1.Shape.Offset;
                        long ix2 = @out.Shape.Offset;

                        long outerStride1 = in1.Shape.Dimensions[0].Stride;
                        long outerStride2 = @out.Shape.Dimensions[0].Stride;

                        long innerStride1 = in1.Shape.Dimensions[1].Stride;
                        long innerStride2 = @out.Shape.Dimensions[1].Stride;

                        outerStride1 -= innerStride1 * in1.Shape.Dimensions[1].Length;
                        outerStride2 -= innerStride2 * @out.Shape.Dimensions[1].Length;

                        for (long i = 0; i < opsOuter; i++)
                        {
                            for (long j = 0; j < opsInner; j++)
                            {
                                d2[ix2] = (System.UInt32)(d1[ix1]);
                                ix1 += innerStride1;
                                ix2 += innerStride2;
                            }

                            ix1 += outerStride1;
                            ix2 += outerStride2;
                        }
                    }
                    else
                    {
                        long n = in1.Shape.Dimensions.LongLength - 3;
                        long[] limits = in1.Shape.Dimensions.Where(x => n-- > 0).Select(x => x.Length).ToArray();
                        long[] counters = new long[limits.LongLength];

                        long totalOps = limits.LongLength == 0 ? 1 : limits.Aggregate<long>((a, b) => a * b);

                        //This chunck of variables are used to prevent repeated calculations of offsets
                        long dimIndex0 = 0 + limits.LongLength;
                        long dimIndex1 = 1 + limits.LongLength;
                        long dimIndex2 = 2 + limits.LongLength;

                        long opsOuter = @out.Shape.Dimensions[0 + limits.LongLength].Length;
                        long opsInner = @out.Shape.Dimensions[1 + limits.LongLength].Length;
                        long opsInnerInner = @out.Shape.Dimensions[2 + limits.LongLength].Length;

                        long outerStride1 = in1.Shape.Dimensions[dimIndex0].Stride;
                        long outerStride3 = @out.Shape.Dimensions[dimIndex0].Stride;

                        long innerStride1 = in1.Shape.Dimensions[dimIndex1].Stride;
                        long innerStride3 = @out.Shape.Dimensions[dimIndex1].Stride;

                        long innerInnerStride1 = in1.Shape.Dimensions[dimIndex2].Stride;
                        long innerInnerStride3 = @out.Shape.Dimensions[dimIndex2].Stride;

                        outerStride1 -= innerStride1 * in1.Shape.Dimensions[dimIndex1].Length;
                        outerStride3 -= innerStride3 * @out.Shape.Dimensions[dimIndex1].Length;

                        innerStride1 -= innerInnerStride1 * in1.Shape.Dimensions[dimIndex2].Length;
                        innerStride3 -= innerInnerStride3 * @out.Shape.Dimensions[dimIndex2].Length;

                        for (long outer = 0; outer < totalOps; outer++)
                        {
                            //Get the array offset for the first element in the outer dimension
                            long ix1 = in1.Shape[counters];
                            long ix3 = @out.Shape[counters];


                            for (long i = 0; i < opsOuter; i++)
                            {
                                for (long j = 0; j < opsInner; j++)
                                {
                                    for (long k = 0; k < opsInnerInner; k++)
                                    {
                                        d2[ix3] = (System.UInt32)(d1[ix1]);
                                        ix1 += innerInnerStride1;
                                        ix3 += innerInnerStride3;
                                    }

                                    ix1 += innerStride1;
                                    ix3 += innerStride3;
                                }

                                ix1 += outerStride1;
                                ix3 += outerStride3;
                            }

                            if (counters.LongLength > 0)
                            {
                                //Basically a ripple carry adder
                                long p = counters.LongLength - 1;
                                while (++counters[p] == limits[p] && p > 0)
                                {
                                    counters[p] = 0;
                                    p--;
                                }
                            }
                        }
                    }
                }
            }
        }

        /// <summary>
        /// Unsafe implementation of applying a unary operation
        /// </summary>
        /// <typeparam name="C">The type of operation to perform</typeparam>
        /// <param name="op">The operation instance</param>
        /// <param name="scalar">The input scalar argument</param>
        /// <param name="out">The output target</param>
        internal static void UFunc_Op_Inner_Unary_Scalar_Flush_Int64_TypedImpl<C>(NumCIL.UInt32.ToUInt32 op, System.Int64 scalar, NdArray<System.UInt32> @out)
            where C : IUnaryOp<System.Int64>
        {
            unsafe
            {
                using (var f2 = new Pinner(@out.DataAccessor))
                {
                    var d2 = (System.UInt32*)f2.ptr;

                    if (@out.Shape.Dimensions.Length == 1)
                    {
                        long totalOps = @out.Shape.Dimensions[0].Length;
                        long ix2 = @out.Shape.Offset;
                        long stride2 = @out.Shape.Dimensions[0].Stride;

                        for (long i = 0; i < totalOps; i++)
                        {
                            d2[ix2] = (System.UInt32)(scalar);
                            ix2 += stride2;
                        }
                    }
                    else if (@out.Shape.Dimensions.Length == 2)
                    {
                        long opsOuter = @out.Shape.Dimensions[0].Length;
                        long opsInner = @out.Shape.Dimensions[1].Length;

                        long ix2 = @out.Shape.Offset;
                        long outerStride2 = @out.Shape.Dimensions[0].Stride;
                        long innerStride2 = @out.Shape.Dimensions[1].Stride;
                        outerStride2 -= innerStride2 * @out.Shape.Dimensions[1].Length;

                        for (long i = 0; i < opsOuter; i++)
                        {
                            for (long j = 0; j < opsInner; j++)
                            {
                                d2[ix2] = (System.UInt32)(scalar);
                                ix2 += innerStride2;
                            }

                            ix2 += outerStride2;
                        }
                    }
                    else
                    {
                        long n = @out.Shape.Dimensions.LongLength - 3;
                        long[] limits = @out.Shape.Dimensions.Where(x => n-- > 0).Select(x => x.Length).ToArray();
                        long[] counters = new long[limits.LongLength];

                        long totalOps = limits.LongLength == 0 ? 1 : limits.Aggregate<long>((a, b) => a * b);

                        //This chunck of variables are used to prevent repeated calculations of offsets
                        long dimIndex0 = 0 + limits.LongLength;
                        long dimIndex1 = 1 + limits.LongLength;
                        long dimIndex2 = 2 + limits.LongLength;

                        long opsOuter = @out.Shape.Dimensions[0 + limits.LongLength].Length;
                        long opsInner = @out.Shape.Dimensions[1 + limits.LongLength].Length;
                        long opsInnerInner = @out.Shape.Dimensions[2 + limits.LongLength].Length;

                        long outerStride3 = @out.Shape.Dimensions[dimIndex0].Stride;
                        long innerStride3 = @out.Shape.Dimensions[dimIndex1].Stride;
                        long innerInnerStride3 = @out.Shape.Dimensions[dimIndex2].Stride;
                        outerStride3 -= innerStride3 * @out.Shape.Dimensions[dimIndex1].Length;
                        innerStride3 -= innerInnerStride3 * @out.Shape.Dimensions[dimIndex2].Length;

                        for (long outer = 0; outer < totalOps; outer++)
                        {
                            //Get the array offset for the first element in the outer dimension
                            long ix3 = @out.Shape[counters];

                            for (long i = 0; i < opsOuter; i++)
                            {
                                for (long j = 0; j < opsInner; j++)
                                {
                                    for (long k = 0; k < opsInnerInner; k++)
                                    {
                                        d2[ix3] = (System.UInt32)(scalar);
                                        ix3 += innerInnerStride3;
                                    }

                                    ix3 += innerStride3;
                                }

                                ix3 += outerStride3;
                            }

                            if (counters.LongLength > 0)
                            {
                                //Basically a ripple carry adder
                                long p = counters.LongLength - 1;
                                while (++counters[p] == limits[p] && p > 0)
                                {
                                    counters[p] = 0;
                                    p--;
                                }
                            }
                        }
                    }
                }
            }
        }
        /// <summary>
        /// Unsafe implementation of applying a unary operation
        /// </summary>
        /// <typeparam name="C">The type of operation to perform</typeparam>
        /// <param name="op">The operation instance</param>
        /// <param name="in1">The input argument</param>
        /// <param name="out">The output target</param>
        internal static void UFunc_Op_Inner_Unary_Flush_UInt64_TypedImpl<C>(NumCIL.UInt32.ToUInt32 op, NdArray<System.UInt64> in1, NdArray<System.UInt32> @out)
            where C : IUnaryOp<System.UInt64>
        {
            unsafe
            {
                using (var f1 = new Pinner(in1.DataAccessor))
                using (var f2 = new Pinner(@out.DataAccessor))
                {
                    var d1 = (System.UInt64*)f1.ptr;
                    var d2 = (System.UInt32*)f2.ptr;

                    if (@out.Shape.Dimensions.Length == 1)
                    {
                        long totalOps = @out.Shape.Dimensions[0].Length;

                        long ix1 = in1.Shape.Offset;
                        long ix2 = @out.Shape.Offset;

                        long stride1 = in1.Shape.Dimensions[0].Stride;
                        long stride2 = @out.Shape.Dimensions[0].Stride;


                        if (stride1 == stride2 && ix1 == ix2)
                        {
                            //Best case, all are equal, just keep a single counter
                            for (long i = 0; i < totalOps; i++)
                            {
                                d2[ix1] = (System.UInt32)(d1[ix1]);
                                ix1 += stride1;
                            }
                        }
                        else
                        {
                            for (long i = 0; i < totalOps; i++)
                            {
                                d2[ix2] = (System.UInt32)(d1[ix1]);
                                ix1 += stride1;
                                ix2 += stride2;
                            }
                        }
                    }
                    else if (@out.Shape.Dimensions.Length == 2)
                    {
                        long opsOuter = @out.Shape.Dimensions[0].Length;
                        long opsInner = @out.Shape.Dimensions[1].Length;

                        long ix1 = in1.Shape.Offset;
                        long ix2 = @out.Shape.Offset;

                        long outerStride1 = in1.Shape.Dimensions[0].Stride;
                        long outerStride2 = @out.Shape.Dimensions[0].Stride;

                        long innerStride1 = in1.Shape.Dimensions[1].Stride;
                        long innerStride2 = @out.Shape.Dimensions[1].Stride;

                        outerStride1 -= innerStride1 * in1.Shape.Dimensions[1].Length;
                        outerStride2 -= innerStride2 * @out.Shape.Dimensions[1].Length;

                        for (long i = 0; i < opsOuter; i++)
                        {
                            for (long j = 0; j < opsInner; j++)
                            {
                                d2[ix2] = (System.UInt32)(d1[ix1]);
                                ix1 += innerStride1;
                                ix2 += innerStride2;
                            }

                            ix1 += outerStride1;
                            ix2 += outerStride2;
                        }
                    }
                    else
                    {
                        long n = in1.Shape.Dimensions.LongLength - 3;
                        long[] limits = in1.Shape.Dimensions.Where(x => n-- > 0).Select(x => x.Length).ToArray();
                        long[] counters = new long[limits.LongLength];

                        long totalOps = limits.LongLength == 0 ? 1 : limits.Aggregate<long>((a, b) => a * b);

                        //This chunck of variables are used to prevent repeated calculations of offsets
                        long dimIndex0 = 0 + limits.LongLength;
                        long dimIndex1 = 1 + limits.LongLength;
                        long dimIndex2 = 2 + limits.LongLength;

                        long opsOuter = @out.Shape.Dimensions[0 + limits.LongLength].Length;
                        long opsInner = @out.Shape.Dimensions[1 + limits.LongLength].Length;
                        long opsInnerInner = @out.Shape.Dimensions[2 + limits.LongLength].Length;

                        long outerStride1 = in1.Shape.Dimensions[dimIndex0].Stride;
                        long outerStride3 = @out.Shape.Dimensions[dimIndex0].Stride;

                        long innerStride1 = in1.Shape.Dimensions[dimIndex1].Stride;
                        long innerStride3 = @out.Shape.Dimensions[dimIndex1].Stride;

                        long innerInnerStride1 = in1.Shape.Dimensions[dimIndex2].Stride;
                        long innerInnerStride3 = @out.Shape.Dimensions[dimIndex2].Stride;

                        outerStride1 -= innerStride1 * in1.Shape.Dimensions[dimIndex1].Length;
                        outerStride3 -= innerStride3 * @out.Shape.Dimensions[dimIndex1].Length;

                        innerStride1 -= innerInnerStride1 * in1.Shape.Dimensions[dimIndex2].Length;
                        innerStride3 -= innerInnerStride3 * @out.Shape.Dimensions[dimIndex2].Length;

                        for (long outer = 0; outer < totalOps; outer++)
                        {
                            //Get the array offset for the first element in the outer dimension
                            long ix1 = in1.Shape[counters];
                            long ix3 = @out.Shape[counters];


                            for (long i = 0; i < opsOuter; i++)
                            {
                                for (long j = 0; j < opsInner; j++)
                                {
                                    for (long k = 0; k < opsInnerInner; k++)
                                    {
                                        d2[ix3] = (System.UInt32)(d1[ix1]);
                                        ix1 += innerInnerStride1;
                                        ix3 += innerInnerStride3;
                                    }

                                    ix1 += innerStride1;
                                    ix3 += innerStride3;
                                }

                                ix1 += outerStride1;
                                ix3 += outerStride3;
                            }

                            if (counters.LongLength > 0)
                            {
                                //Basically a ripple carry adder
                                long p = counters.LongLength - 1;
                                while (++counters[p] == limits[p] && p > 0)
                                {
                                    counters[p] = 0;
                                    p--;
                                }
                            }
                        }
                    }
                }
            }
        }

        /// <summary>
        /// Unsafe implementation of applying a unary operation
        /// </summary>
        /// <typeparam name="C">The type of operation to perform</typeparam>
        /// <param name="op">The operation instance</param>
        /// <param name="scalar">The input scalar argument</param>
        /// <param name="out">The output target</param>
        internal static void UFunc_Op_Inner_Unary_Scalar_Flush_UInt64_TypedImpl<C>(NumCIL.UInt32.ToUInt32 op, System.UInt64 scalar, NdArray<System.UInt32> @out)
            where C : IUnaryOp<System.UInt64>
        {
            unsafe
            {
                using (var f2 = new Pinner(@out.DataAccessor))
                {
                    var d2 = (System.UInt32*)f2.ptr;

                    if (@out.Shape.Dimensions.Length == 1)
                    {
                        long totalOps = @out.Shape.Dimensions[0].Length;
                        long ix2 = @out.Shape.Offset;
                        long stride2 = @out.Shape.Dimensions[0].Stride;

                        for (long i = 0; i < totalOps; i++)
                        {
                            d2[ix2] = (System.UInt32)(scalar);
                            ix2 += stride2;
                        }
                    }
                    else if (@out.Shape.Dimensions.Length == 2)
                    {
                        long opsOuter = @out.Shape.Dimensions[0].Length;
                        long opsInner = @out.Shape.Dimensions[1].Length;

                        long ix2 = @out.Shape.Offset;
                        long outerStride2 = @out.Shape.Dimensions[0].Stride;
                        long innerStride2 = @out.Shape.Dimensions[1].Stride;
                        outerStride2 -= innerStride2 * @out.Shape.Dimensions[1].Length;

                        for (long i = 0; i < opsOuter; i++)
                        {
                            for (long j = 0; j < opsInner; j++)
                            {
                                d2[ix2] = (System.UInt32)(scalar);
                                ix2 += innerStride2;
                            }

                            ix2 += outerStride2;
                        }
                    }
                    else
                    {
                        long n = @out.Shape.Dimensions.LongLength - 3;
                        long[] limits = @out.Shape.Dimensions.Where(x => n-- > 0).Select(x => x.Length).ToArray();
                        long[] counters = new long[limits.LongLength];

                        long totalOps = limits.LongLength == 0 ? 1 : limits.Aggregate<long>((a, b) => a * b);

                        //This chunck of variables are used to prevent repeated calculations of offsets
                        long dimIndex0 = 0 + limits.LongLength;
                        long dimIndex1 = 1 + limits.LongLength;
                        long dimIndex2 = 2 + limits.LongLength;

                        long opsOuter = @out.Shape.Dimensions[0 + limits.LongLength].Length;
                        long opsInner = @out.Shape.Dimensions[1 + limits.LongLength].Length;
                        long opsInnerInner = @out.Shape.Dimensions[2 + limits.LongLength].Length;

                        long outerStride3 = @out.Shape.Dimensions[dimIndex0].Stride;
                        long innerStride3 = @out.Shape.Dimensions[dimIndex1].Stride;
                        long innerInnerStride3 = @out.Shape.Dimensions[dimIndex2].Stride;
                        outerStride3 -= innerStride3 * @out.Shape.Dimensions[dimIndex1].Length;
                        innerStride3 -= innerInnerStride3 * @out.Shape.Dimensions[dimIndex2].Length;

                        for (long outer = 0; outer < totalOps; outer++)
                        {
                            //Get the array offset for the first element in the outer dimension
                            long ix3 = @out.Shape[counters];

                            for (long i = 0; i < opsOuter; i++)
                            {
                                for (long j = 0; j < opsInner; j++)
                                {
                                    for (long k = 0; k < opsInnerInner; k++)
                                    {
                                        d2[ix3] = (System.UInt32)(scalar);
                                        ix3 += innerInnerStride3;
                                    }

                                    ix3 += innerStride3;
                                }

                                ix3 += outerStride3;
                            }

                            if (counters.LongLength > 0)
                            {
                                //Basically a ripple carry adder
                                long p = counters.LongLength - 1;
                                while (++counters[p] == limits[p] && p > 0)
                                {
                                    counters[p] = 0;
                                    p--;
                                }
                            }
                        }
                    }
                }
            }
        }
        /// <summary>
        /// Unsafe implementation of applying a unary operation
        /// </summary>
        /// <typeparam name="C">The type of operation to perform</typeparam>
        /// <param name="op">The operation instance</param>
        /// <param name="in1">The input argument</param>
        /// <param name="out">The output target</param>
        internal static void UFunc_Op_Inner_Unary_Flush_Single_TypedImpl<C>(NumCIL.UInt32.ToUInt32 op, NdArray<System.Single> in1, NdArray<System.UInt32> @out)
            where C : IUnaryOp<System.Single>
        {
            unsafe
            {
                using (var f1 = new Pinner(in1.DataAccessor))
                using (var f2 = new Pinner(@out.DataAccessor))
                {
                    var d1 = (System.Single*)f1.ptr;
                    var d2 = (System.UInt32*)f2.ptr;

                    if (@out.Shape.Dimensions.Length == 1)
                    {
                        long totalOps = @out.Shape.Dimensions[0].Length;

                        long ix1 = in1.Shape.Offset;
                        long ix2 = @out.Shape.Offset;

                        long stride1 = in1.Shape.Dimensions[0].Stride;
                        long stride2 = @out.Shape.Dimensions[0].Stride;


                        if (stride1 == stride2 && ix1 == ix2)
                        {
                            //Best case, all are equal, just keep a single counter
                            for (long i = 0; i < totalOps; i++)
                            {
                                d2[ix1] = (System.UInt32)(d1[ix1]);
                                ix1 += stride1;
                            }
                        }
                        else
                        {
                            for (long i = 0; i < totalOps; i++)
                            {
                                d2[ix2] = (System.UInt32)(d1[ix1]);
                                ix1 += stride1;
                                ix2 += stride2;
                            }
                        }
                    }
                    else if (@out.Shape.Dimensions.Length == 2)
                    {
                        long opsOuter = @out.Shape.Dimensions[0].Length;
                        long opsInner = @out.Shape.Dimensions[1].Length;

                        long ix1 = in1.Shape.Offset;
                        long ix2 = @out.Shape.Offset;

                        long outerStride1 = in1.Shape.Dimensions[0].Stride;
                        long outerStride2 = @out.Shape.Dimensions[0].Stride;

                        long innerStride1 = in1.Shape.Dimensions[1].Stride;
                        long innerStride2 = @out.Shape.Dimensions[1].Stride;

                        outerStride1 -= innerStride1 * in1.Shape.Dimensions[1].Length;
                        outerStride2 -= innerStride2 * @out.Shape.Dimensions[1].Length;

                        for (long i = 0; i < opsOuter; i++)
                        {
                            for (long j = 0; j < opsInner; j++)
                            {
                                d2[ix2] = (System.UInt32)(d1[ix1]);
                                ix1 += innerStride1;
                                ix2 += innerStride2;
                            }

                            ix1 += outerStride1;
                            ix2 += outerStride2;
                        }
                    }
                    else
                    {
                        long n = in1.Shape.Dimensions.LongLength - 3;
                        long[] limits = in1.Shape.Dimensions.Where(x => n-- > 0).Select(x => x.Length).ToArray();
                        long[] counters = new long[limits.LongLength];

                        long totalOps = limits.LongLength == 0 ? 1 : limits.Aggregate<long>((a, b) => a * b);

                        //This chunck of variables are used to prevent repeated calculations of offsets
                        long dimIndex0 = 0 + limits.LongLength;
                        long dimIndex1 = 1 + limits.LongLength;
                        long dimIndex2 = 2 + limits.LongLength;

                        long opsOuter = @out.Shape.Dimensions[0 + limits.LongLength].Length;
                        long opsInner = @out.Shape.Dimensions[1 + limits.LongLength].Length;
                        long opsInnerInner = @out.Shape.Dimensions[2 + limits.LongLength].Length;

                        long outerStride1 = in1.Shape.Dimensions[dimIndex0].Stride;
                        long outerStride3 = @out.Shape.Dimensions[dimIndex0].Stride;

                        long innerStride1 = in1.Shape.Dimensions[dimIndex1].Stride;
                        long innerStride3 = @out.Shape.Dimensions[dimIndex1].Stride;

                        long innerInnerStride1 = in1.Shape.Dimensions[dimIndex2].Stride;
                        long innerInnerStride3 = @out.Shape.Dimensions[dimIndex2].Stride;

                        outerStride1 -= innerStride1 * in1.Shape.Dimensions[dimIndex1].Length;
                        outerStride3 -= innerStride3 * @out.Shape.Dimensions[dimIndex1].Length;

                        innerStride1 -= innerInnerStride1 * in1.Shape.Dimensions[dimIndex2].Length;
                        innerStride3 -= innerInnerStride3 * @out.Shape.Dimensions[dimIndex2].Length;

                        for (long outer = 0; outer < totalOps; outer++)
                        {
                            //Get the array offset for the first element in the outer dimension
                            long ix1 = in1.Shape[counters];
                            long ix3 = @out.Shape[counters];


                            for (long i = 0; i < opsOuter; i++)
                            {
                                for (long j = 0; j < opsInner; j++)
                                {
                                    for (long k = 0; k < opsInnerInner; k++)
                                    {
                                        d2[ix3] = (System.UInt32)(d1[ix1]);
                                        ix1 += innerInnerStride1;
                                        ix3 += innerInnerStride3;
                                    }

                                    ix1 += innerStride1;
                                    ix3 += innerStride3;
                                }

                                ix1 += outerStride1;
                                ix3 += outerStride3;
                            }

                            if (counters.LongLength > 0)
                            {
                                //Basically a ripple carry adder
                                long p = counters.LongLength - 1;
                                while (++counters[p] == limits[p] && p > 0)
                                {
                                    counters[p] = 0;
                                    p--;
                                }
                            }
                        }
                    }
                }
            }
        }

        /// <summary>
        /// Unsafe implementation of applying a unary operation
        /// </summary>
        /// <typeparam name="C">The type of operation to perform</typeparam>
        /// <param name="op">The operation instance</param>
        /// <param name="scalar">The input scalar argument</param>
        /// <param name="out">The output target</param>
        internal static void UFunc_Op_Inner_Unary_Scalar_Flush_Single_TypedImpl<C>(NumCIL.UInt32.ToUInt32 op, System.Single scalar, NdArray<System.UInt32> @out)
            where C : IUnaryOp<System.Single>
        {
            unsafe
            {
                using (var f2 = new Pinner(@out.DataAccessor))
                {
                    var d2 = (System.UInt32*)f2.ptr;

                    if (@out.Shape.Dimensions.Length == 1)
                    {
                        long totalOps = @out.Shape.Dimensions[0].Length;
                        long ix2 = @out.Shape.Offset;
                        long stride2 = @out.Shape.Dimensions[0].Stride;

                        for (long i = 0; i < totalOps; i++)
                        {
                            d2[ix2] = (System.UInt32)(scalar);
                            ix2 += stride2;
                        }
                    }
                    else if (@out.Shape.Dimensions.Length == 2)
                    {
                        long opsOuter = @out.Shape.Dimensions[0].Length;
                        long opsInner = @out.Shape.Dimensions[1].Length;

                        long ix2 = @out.Shape.Offset;
                        long outerStride2 = @out.Shape.Dimensions[0].Stride;
                        long innerStride2 = @out.Shape.Dimensions[1].Stride;
                        outerStride2 -= innerStride2 * @out.Shape.Dimensions[1].Length;

                        for (long i = 0; i < opsOuter; i++)
                        {
                            for (long j = 0; j < opsInner; j++)
                            {
                                d2[ix2] = (System.UInt32)(scalar);
                                ix2 += innerStride2;
                            }

                            ix2 += outerStride2;
                        }
                    }
                    else
                    {
                        long n = @out.Shape.Dimensions.LongLength - 3;
                        long[] limits = @out.Shape.Dimensions.Where(x => n-- > 0).Select(x => x.Length).ToArray();
                        long[] counters = new long[limits.LongLength];

                        long totalOps = limits.LongLength == 0 ? 1 : limits.Aggregate<long>((a, b) => a * b);

                        //This chunck of variables are used to prevent repeated calculations of offsets
                        long dimIndex0 = 0 + limits.LongLength;
                        long dimIndex1 = 1 + limits.LongLength;
                        long dimIndex2 = 2 + limits.LongLength;

                        long opsOuter = @out.Shape.Dimensions[0 + limits.LongLength].Length;
                        long opsInner = @out.Shape.Dimensions[1 + limits.LongLength].Length;
                        long opsInnerInner = @out.Shape.Dimensions[2 + limits.LongLength].Length;

                        long outerStride3 = @out.Shape.Dimensions[dimIndex0].Stride;
                        long innerStride3 = @out.Shape.Dimensions[dimIndex1].Stride;
                        long innerInnerStride3 = @out.Shape.Dimensions[dimIndex2].Stride;
                        outerStride3 -= innerStride3 * @out.Shape.Dimensions[dimIndex1].Length;
                        innerStride3 -= innerInnerStride3 * @out.Shape.Dimensions[dimIndex2].Length;

                        for (long outer = 0; outer < totalOps; outer++)
                        {
                            //Get the array offset for the first element in the outer dimension
                            long ix3 = @out.Shape[counters];

                            for (long i = 0; i < opsOuter; i++)
                            {
                                for (long j = 0; j < opsInner; j++)
                                {
                                    for (long k = 0; k < opsInnerInner; k++)
                                    {
                                        d2[ix3] = (System.UInt32)(scalar);
                                        ix3 += innerInnerStride3;
                                    }

                                    ix3 += innerStride3;
                                }

                                ix3 += outerStride3;
                            }

                            if (counters.LongLength > 0)
                            {
                                //Basically a ripple carry adder
                                long p = counters.LongLength - 1;
                                while (++counters[p] == limits[p] && p > 0)
                                {
                                    counters[p] = 0;
                                    p--;
                                }
                            }
                        }
                    }
                }
            }
        }
        /// <summary>
        /// Unsafe implementation of applying a unary operation
        /// </summary>
        /// <typeparam name="C">The type of operation to perform</typeparam>
        /// <param name="op">The operation instance</param>
        /// <param name="in1">The input argument</param>
        /// <param name="out">The output target</param>
        internal static void UFunc_Op_Inner_Unary_Flush_Double_TypedImpl<C>(NumCIL.UInt32.ToUInt32 op, NdArray<System.Double> in1, NdArray<System.UInt32> @out)
            where C : IUnaryOp<System.Double>
        {
            unsafe
            {
                using (var f1 = new Pinner(in1.DataAccessor))
                using (var f2 = new Pinner(@out.DataAccessor))
                {
                    var d1 = (System.Double*)f1.ptr;
                    var d2 = (System.UInt32*)f2.ptr;

                    if (@out.Shape.Dimensions.Length == 1)
                    {
                        long totalOps = @out.Shape.Dimensions[0].Length;

                        long ix1 = in1.Shape.Offset;
                        long ix2 = @out.Shape.Offset;

                        long stride1 = in1.Shape.Dimensions[0].Stride;
                        long stride2 = @out.Shape.Dimensions[0].Stride;


                        if (stride1 == stride2 && ix1 == ix2)
                        {
                            //Best case, all are equal, just keep a single counter
                            for (long i = 0; i < totalOps; i++)
                            {
                                d2[ix1] = (System.UInt32)(d1[ix1]);
                                ix1 += stride1;
                            }
                        }
                        else
                        {
                            for (long i = 0; i < totalOps; i++)
                            {
                                d2[ix2] = (System.UInt32)(d1[ix1]);
                                ix1 += stride1;
                                ix2 += stride2;
                            }
                        }
                    }
                    else if (@out.Shape.Dimensions.Length == 2)
                    {
                        long opsOuter = @out.Shape.Dimensions[0].Length;
                        long opsInner = @out.Shape.Dimensions[1].Length;

                        long ix1 = in1.Shape.Offset;
                        long ix2 = @out.Shape.Offset;

                        long outerStride1 = in1.Shape.Dimensions[0].Stride;
                        long outerStride2 = @out.Shape.Dimensions[0].Stride;

                        long innerStride1 = in1.Shape.Dimensions[1].Stride;
                        long innerStride2 = @out.Shape.Dimensions[1].Stride;

                        outerStride1 -= innerStride1 * in1.Shape.Dimensions[1].Length;
                        outerStride2 -= innerStride2 * @out.Shape.Dimensions[1].Length;

                        for (long i = 0; i < opsOuter; i++)
                        {
                            for (long j = 0; j < opsInner; j++)
                            {
                                d2[ix2] = (System.UInt32)(d1[ix1]);
                                ix1 += innerStride1;
                                ix2 += innerStride2;
                            }

                            ix1 += outerStride1;
                            ix2 += outerStride2;
                        }
                    }
                    else
                    {
                        long n = in1.Shape.Dimensions.LongLength - 3;
                        long[] limits = in1.Shape.Dimensions.Where(x => n-- > 0).Select(x => x.Length).ToArray();
                        long[] counters = new long[limits.LongLength];

                        long totalOps = limits.LongLength == 0 ? 1 : limits.Aggregate<long>((a, b) => a * b);

                        //This chunck of variables are used to prevent repeated calculations of offsets
                        long dimIndex0 = 0 + limits.LongLength;
                        long dimIndex1 = 1 + limits.LongLength;
                        long dimIndex2 = 2 + limits.LongLength;

                        long opsOuter = @out.Shape.Dimensions[0 + limits.LongLength].Length;
                        long opsInner = @out.Shape.Dimensions[1 + limits.LongLength].Length;
                        long opsInnerInner = @out.Shape.Dimensions[2 + limits.LongLength].Length;

                        long outerStride1 = in1.Shape.Dimensions[dimIndex0].Stride;
                        long outerStride3 = @out.Shape.Dimensions[dimIndex0].Stride;

                        long innerStride1 = in1.Shape.Dimensions[dimIndex1].Stride;
                        long innerStride3 = @out.Shape.Dimensions[dimIndex1].Stride;

                        long innerInnerStride1 = in1.Shape.Dimensions[dimIndex2].Stride;
                        long innerInnerStride3 = @out.Shape.Dimensions[dimIndex2].Stride;

                        outerStride1 -= innerStride1 * in1.Shape.Dimensions[dimIndex1].Length;
                        outerStride3 -= innerStride3 * @out.Shape.Dimensions[dimIndex1].Length;

                        innerStride1 -= innerInnerStride1 * in1.Shape.Dimensions[dimIndex2].Length;
                        innerStride3 -= innerInnerStride3 * @out.Shape.Dimensions[dimIndex2].Length;

                        for (long outer = 0; outer < totalOps; outer++)
                        {
                            //Get the array offset for the first element in the outer dimension
                            long ix1 = in1.Shape[counters];
                            long ix3 = @out.Shape[counters];


                            for (long i = 0; i < opsOuter; i++)
                            {
                                for (long j = 0; j < opsInner; j++)
                                {
                                    for (long k = 0; k < opsInnerInner; k++)
                                    {
                                        d2[ix3] = (System.UInt32)(d1[ix1]);
                                        ix1 += innerInnerStride1;
                                        ix3 += innerInnerStride3;
                                    }

                                    ix1 += innerStride1;
                                    ix3 += innerStride3;
                                }

                                ix1 += outerStride1;
                                ix3 += outerStride3;
                            }

                            if (counters.LongLength > 0)
                            {
                                //Basically a ripple carry adder
                                long p = counters.LongLength - 1;
                                while (++counters[p] == limits[p] && p > 0)
                                {
                                    counters[p] = 0;
                                    p--;
                                }
                            }
                        }
                    }
                }
            }
        }

        /// <summary>
        /// Unsafe implementation of applying a unary operation
        /// </summary>
        /// <typeparam name="C">The type of operation to perform</typeparam>
        /// <param name="op">The operation instance</param>
        /// <param name="scalar">The input scalar argument</param>
        /// <param name="out">The output target</param>
        internal static void UFunc_Op_Inner_Unary_Scalar_Flush_Double_TypedImpl<C>(NumCIL.UInt32.ToUInt32 op, System.Double scalar, NdArray<System.UInt32> @out)
            where C : IUnaryOp<System.Double>
        {
            unsafe
            {
                using (var f2 = new Pinner(@out.DataAccessor))
                {
                    var d2 = (System.UInt32*)f2.ptr;

                    if (@out.Shape.Dimensions.Length == 1)
                    {
                        long totalOps = @out.Shape.Dimensions[0].Length;
                        long ix2 = @out.Shape.Offset;
                        long stride2 = @out.Shape.Dimensions[0].Stride;

                        for (long i = 0; i < totalOps; i++)
                        {
                            d2[ix2] = (System.UInt32)(scalar);
                            ix2 += stride2;
                        }
                    }
                    else if (@out.Shape.Dimensions.Length == 2)
                    {
                        long opsOuter = @out.Shape.Dimensions[0].Length;
                        long opsInner = @out.Shape.Dimensions[1].Length;

                        long ix2 = @out.Shape.Offset;
                        long outerStride2 = @out.Shape.Dimensions[0].Stride;
                        long innerStride2 = @out.Shape.Dimensions[1].Stride;
                        outerStride2 -= innerStride2 * @out.Shape.Dimensions[1].Length;

                        for (long i = 0; i < opsOuter; i++)
                        {
                            for (long j = 0; j < opsInner; j++)
                            {
                                d2[ix2] = (System.UInt32)(scalar);
                                ix2 += innerStride2;
                            }

                            ix2 += outerStride2;
                        }
                    }
                    else
                    {
                        long n = @out.Shape.Dimensions.LongLength - 3;
                        long[] limits = @out.Shape.Dimensions.Where(x => n-- > 0).Select(x => x.Length).ToArray();
                        long[] counters = new long[limits.LongLength];

                        long totalOps = limits.LongLength == 0 ? 1 : limits.Aggregate<long>((a, b) => a * b);

                        //This chunck of variables are used to prevent repeated calculations of offsets
                        long dimIndex0 = 0 + limits.LongLength;
                        long dimIndex1 = 1 + limits.LongLength;
                        long dimIndex2 = 2 + limits.LongLength;

                        long opsOuter = @out.Shape.Dimensions[0 + limits.LongLength].Length;
                        long opsInner = @out.Shape.Dimensions[1 + limits.LongLength].Length;
                        long opsInnerInner = @out.Shape.Dimensions[2 + limits.LongLength].Length;

                        long outerStride3 = @out.Shape.Dimensions[dimIndex0].Stride;
                        long innerStride3 = @out.Shape.Dimensions[dimIndex1].Stride;
                        long innerInnerStride3 = @out.Shape.Dimensions[dimIndex2].Stride;
                        outerStride3 -= innerStride3 * @out.Shape.Dimensions[dimIndex1].Length;
                        innerStride3 -= innerInnerStride3 * @out.Shape.Dimensions[dimIndex2].Length;

                        for (long outer = 0; outer < totalOps; outer++)
                        {
                            //Get the array offset for the first element in the outer dimension
                            long ix3 = @out.Shape[counters];

                            for (long i = 0; i < opsOuter; i++)
                            {
                                for (long j = 0; j < opsInner; j++)
                                {
                                    for (long k = 0; k < opsInnerInner; k++)
                                    {
                                        d2[ix3] = (System.UInt32)(scalar);
                                        ix3 += innerInnerStride3;
                                    }

                                    ix3 += innerStride3;
                                }

                                ix3 += outerStride3;
                            }

                            if (counters.LongLength > 0)
                            {
                                //Basically a ripple carry adder
                                long p = counters.LongLength - 1;
                                while (++counters[p] == limits[p] && p > 0)
                                {
                                    counters[p] = 0;
                                    p--;
                                }
                            }
                        }
                    }
                }
            }
        }
        /// <summary>
        /// Unsafe implementation of applying a unary operation
        /// </summary>
        /// <typeparam name="C">The type of operation to perform</typeparam>
        /// <param name="op">The operation instance</param>
        /// <param name="in1">The input argument</param>
        /// <param name="out">The output target</param>
        internal static void UFunc_Op_Inner_Unary_Flush_Boolean_TypedImpl<C>(NumCIL.Boolean.ToUInt32 op, NdArray<System.Boolean> in1, NdArray<System.UInt32> @out)
            where C : IUnaryOp<System.Boolean>
        {
            unsafe
            {
                using (var f1 = new Pinner(in1.DataAccessor))
                using (var f2 = new Pinner(@out.DataAccessor))
                {
                    var d1 = (System.Boolean*)f1.ptr;
                    var d2 = (System.UInt32*)f2.ptr;

                    if (@out.Shape.Dimensions.Length == 1)
                    {
                        long totalOps = @out.Shape.Dimensions[0].Length;

                        long ix1 = in1.Shape.Offset;
                        long ix2 = @out.Shape.Offset;

                        long stride1 = in1.Shape.Dimensions[0].Stride;
                        long stride2 = @out.Shape.Dimensions[0].Stride;


                        if (stride1 == stride2 && ix1 == ix2)
                        {
                            //Best case, all are equal, just keep a single counter
                            for (long i = 0; i < totalOps; i++)
                            {
                                d2[ix1] = (System.UInt32)(d1[ix1] ? 1 : 0 );
                                ix1 += stride1;
                            }
                        }
                        else
                        {
                            for (long i = 0; i < totalOps; i++)
                            {
                                d2[ix2] = (System.UInt32)(d1[ix1] ? 1 : 0 );
                                ix1 += stride1;
                                ix2 += stride2;
                            }
                        }
                    }
                    else if (@out.Shape.Dimensions.Length == 2)
                    {
                        long opsOuter = @out.Shape.Dimensions[0].Length;
                        long opsInner = @out.Shape.Dimensions[1].Length;

                        long ix1 = in1.Shape.Offset;
                        long ix2 = @out.Shape.Offset;

                        long outerStride1 = in1.Shape.Dimensions[0].Stride;
                        long outerStride2 = @out.Shape.Dimensions[0].Stride;

                        long innerStride1 = in1.Shape.Dimensions[1].Stride;
                        long innerStride2 = @out.Shape.Dimensions[1].Stride;

                        outerStride1 -= innerStride1 * in1.Shape.Dimensions[1].Length;
                        outerStride2 -= innerStride2 * @out.Shape.Dimensions[1].Length;

                        for (long i = 0; i < opsOuter; i++)
                        {
                            for (long j = 0; j < opsInner; j++)
                            {
                                d2[ix2] = (System.UInt32)(d1[ix1] ? 1 : 0 );
                                ix1 += innerStride1;
                                ix2 += innerStride2;
                            }

                            ix1 += outerStride1;
                            ix2 += outerStride2;
                        }
                    }
                    else
                    {
                        long n = in1.Shape.Dimensions.LongLength - 3;
                        long[] limits = in1.Shape.Dimensions.Where(x => n-- > 0).Select(x => x.Length).ToArray();
                        long[] counters = new long[limits.LongLength];

                        long totalOps = limits.LongLength == 0 ? 1 : limits.Aggregate<long>((a, b) => a * b);

                        //This chunck of variables are used to prevent repeated calculations of offsets
                        long dimIndex0 = 0 + limits.LongLength;
                        long dimIndex1 = 1 + limits.LongLength;
                        long dimIndex2 = 2 + limits.LongLength;

                        long opsOuter = @out.Shape.Dimensions[0 + limits.LongLength].Length;
                        long opsInner = @out.Shape.Dimensions[1 + limits.LongLength].Length;
                        long opsInnerInner = @out.Shape.Dimensions[2 + limits.LongLength].Length;

                        long outerStride1 = in1.Shape.Dimensions[dimIndex0].Stride;
                        long outerStride3 = @out.Shape.Dimensions[dimIndex0].Stride;

                        long innerStride1 = in1.Shape.Dimensions[dimIndex1].Stride;
                        long innerStride3 = @out.Shape.Dimensions[dimIndex1].Stride;

                        long innerInnerStride1 = in1.Shape.Dimensions[dimIndex2].Stride;
                        long innerInnerStride3 = @out.Shape.Dimensions[dimIndex2].Stride;

                        outerStride1 -= innerStride1 * in1.Shape.Dimensions[dimIndex1].Length;
                        outerStride3 -= innerStride3 * @out.Shape.Dimensions[dimIndex1].Length;

                        innerStride1 -= innerInnerStride1 * in1.Shape.Dimensions[dimIndex2].Length;
                        innerStride3 -= innerInnerStride3 * @out.Shape.Dimensions[dimIndex2].Length;

                        for (long outer = 0; outer < totalOps; outer++)
                        {
                            //Get the array offset for the first element in the outer dimension
                            long ix1 = in1.Shape[counters];
                            long ix3 = @out.Shape[counters];


                            for (long i = 0; i < opsOuter; i++)
                            {
                                for (long j = 0; j < opsInner; j++)
                                {
                                    for (long k = 0; k < opsInnerInner; k++)
                                    {
                                        d2[ix3] = (System.UInt32)(d1[ix1] ? 1 : 0 );
                                        ix1 += innerInnerStride1;
                                        ix3 += innerInnerStride3;
                                    }

                                    ix1 += innerStride1;
                                    ix3 += innerStride3;
                                }

                                ix1 += outerStride1;
                                ix3 += outerStride3;
                            }

                            if (counters.LongLength > 0)
                            {
                                //Basically a ripple carry adder
                                long p = counters.LongLength - 1;
                                while (++counters[p] == limits[p] && p > 0)
                                {
                                    counters[p] = 0;
                                    p--;
                                }
                            }
                        }
                    }
                }
            }
        }

        /// <summary>
        /// Unsafe implementation of applying a unary operation
        /// </summary>
        /// <typeparam name="C">The type of operation to perform</typeparam>
        /// <param name="op">The operation instance</param>
        /// <param name="scalar">The input scalar argument</param>
        /// <param name="out">The output target</param>
        internal static void UFunc_Op_Inner_Unary_Scalar_Flush_Boolean_TypedImpl<C>(NumCIL.Boolean.ToUInt32 op, System.Boolean scalar, NdArray<System.UInt32> @out)
            where C : IUnaryOp<System.Boolean>
        {
            unsafe
            {
                using (var f2 = new Pinner(@out.DataAccessor))
                {
                    var d2 = (System.UInt32*)f2.ptr;

                    if (@out.Shape.Dimensions.Length == 1)
                    {
                        long totalOps = @out.Shape.Dimensions[0].Length;
                        long ix2 = @out.Shape.Offset;
                        long stride2 = @out.Shape.Dimensions[0].Stride;

                        for (long i = 0; i < totalOps; i++)
                        {
                            d2[ix2] = (System.UInt32)(scalar ? 1 : 0 );
                            ix2 += stride2;
                        }
                    }
                    else if (@out.Shape.Dimensions.Length == 2)
                    {
                        long opsOuter = @out.Shape.Dimensions[0].Length;
                        long opsInner = @out.Shape.Dimensions[1].Length;

                        long ix2 = @out.Shape.Offset;
                        long outerStride2 = @out.Shape.Dimensions[0].Stride;
                        long innerStride2 = @out.Shape.Dimensions[1].Stride;
                        outerStride2 -= innerStride2 * @out.Shape.Dimensions[1].Length;

                        for (long i = 0; i < opsOuter; i++)
                        {
                            for (long j = 0; j < opsInner; j++)
                            {
                                d2[ix2] = (System.UInt32)(scalar ? 1 : 0 );
                                ix2 += innerStride2;
                            }

                            ix2 += outerStride2;
                        }
                    }
                    else
                    {
                        long n = @out.Shape.Dimensions.LongLength - 3;
                        long[] limits = @out.Shape.Dimensions.Where(x => n-- > 0).Select(x => x.Length).ToArray();
                        long[] counters = new long[limits.LongLength];

                        long totalOps = limits.LongLength == 0 ? 1 : limits.Aggregate<long>((a, b) => a * b);

                        //This chunck of variables are used to prevent repeated calculations of offsets
                        long dimIndex0 = 0 + limits.LongLength;
                        long dimIndex1 = 1 + limits.LongLength;
                        long dimIndex2 = 2 + limits.LongLength;

                        long opsOuter = @out.Shape.Dimensions[0 + limits.LongLength].Length;
                        long opsInner = @out.Shape.Dimensions[1 + limits.LongLength].Length;
                        long opsInnerInner = @out.Shape.Dimensions[2 + limits.LongLength].Length;

                        long outerStride3 = @out.Shape.Dimensions[dimIndex0].Stride;
                        long innerStride3 = @out.Shape.Dimensions[dimIndex1].Stride;
                        long innerInnerStride3 = @out.Shape.Dimensions[dimIndex2].Stride;
                        outerStride3 -= innerStride3 * @out.Shape.Dimensions[dimIndex1].Length;
                        innerStride3 -= innerInnerStride3 * @out.Shape.Dimensions[dimIndex2].Length;

                        for (long outer = 0; outer < totalOps; outer++)
                        {
                            //Get the array offset for the first element in the outer dimension
                            long ix3 = @out.Shape[counters];

                            for (long i = 0; i < opsOuter; i++)
                            {
                                for (long j = 0; j < opsInner; j++)
                                {
                                    for (long k = 0; k < opsInnerInner; k++)
                                    {
                                        d2[ix3] = (System.UInt32)(scalar ? 1 : 0 );
                                        ix3 += innerInnerStride3;
                                    }

                                    ix3 += innerStride3;
                                }

                                ix3 += outerStride3;
                            }

                            if (counters.LongLength > 0)
                            {
                                //Basically a ripple carry adder
                                long p = counters.LongLength - 1;
                                while (++counters[p] == limits[p] && p > 0)
                                {
                                    counters[p] = 0;
                                    p--;
                                }
                            }
                        }
                    }
                }
            }
        }
        /// <summary>
        /// Unsafe implementation of applying a unary operation
        /// </summary>
        /// <typeparam name="C">The type of operation to perform</typeparam>
        /// <param name="op">The operation instance</param>
        /// <param name="in1">The input argument</param>
        /// <param name="out">The output target</param>
        internal static void UFunc_Op_Inner_Unary_Flush_SByte_TypedImpl<C>(NumCIL.Int64.ToInt64 op, NdArray<System.SByte> in1, NdArray<System.Int64> @out)
            where C : IUnaryOp<System.SByte>
        {
            unsafe
            {
                using (var f1 = new Pinner(in1.DataAccessor))
                using (var f2 = new Pinner(@out.DataAccessor))
                {
                    var d1 = (System.SByte*)f1.ptr;
                    var d2 = (System.Int64*)f2.ptr;

                    if (@out.Shape.Dimensions.Length == 1)
                    {
                        long totalOps = @out.Shape.Dimensions[0].Length;

                        long ix1 = in1.Shape.Offset;
                        long ix2 = @out.Shape.Offset;

                        long stride1 = in1.Shape.Dimensions[0].Stride;
                        long stride2 = @out.Shape.Dimensions[0].Stride;


                        if (stride1 == stride2 && ix1 == ix2)
                        {
                            //Best case, all are equal, just keep a single counter
                            for (long i = 0; i < totalOps; i++)
                            {
                                d2[ix1] = (System.Int64)(d1[ix1]);
                                ix1 += stride1;
                            }
                        }
                        else
                        {
                            for (long i = 0; i < totalOps; i++)
                            {
                                d2[ix2] = (System.Int64)(d1[ix1]);
                                ix1 += stride1;
                                ix2 += stride2;
                            }
                        }
                    }
                    else if (@out.Shape.Dimensions.Length == 2)
                    {
                        long opsOuter = @out.Shape.Dimensions[0].Length;
                        long opsInner = @out.Shape.Dimensions[1].Length;

                        long ix1 = in1.Shape.Offset;
                        long ix2 = @out.Shape.Offset;

                        long outerStride1 = in1.Shape.Dimensions[0].Stride;
                        long outerStride2 = @out.Shape.Dimensions[0].Stride;

                        long innerStride1 = in1.Shape.Dimensions[1].Stride;
                        long innerStride2 = @out.Shape.Dimensions[1].Stride;

                        outerStride1 -= innerStride1 * in1.Shape.Dimensions[1].Length;
                        outerStride2 -= innerStride2 * @out.Shape.Dimensions[1].Length;

                        for (long i = 0; i < opsOuter; i++)
                        {
                            for (long j = 0; j < opsInner; j++)
                            {
                                d2[ix2] = (System.Int64)(d1[ix1]);
                                ix1 += innerStride1;
                                ix2 += innerStride2;
                            }

                            ix1 += outerStride1;
                            ix2 += outerStride2;
                        }
                    }
                    else
                    {
                        long n = in1.Shape.Dimensions.LongLength - 3;
                        long[] limits = in1.Shape.Dimensions.Where(x => n-- > 0).Select(x => x.Length).ToArray();
                        long[] counters = new long[limits.LongLength];

                        long totalOps = limits.LongLength == 0 ? 1 : limits.Aggregate<long>((a, b) => a * b);

                        //This chunck of variables are used to prevent repeated calculations of offsets
                        long dimIndex0 = 0 + limits.LongLength;
                        long dimIndex1 = 1 + limits.LongLength;
                        long dimIndex2 = 2 + limits.LongLength;

                        long opsOuter = @out.Shape.Dimensions[0 + limits.LongLength].Length;
                        long opsInner = @out.Shape.Dimensions[1 + limits.LongLength].Length;
                        long opsInnerInner = @out.Shape.Dimensions[2 + limits.LongLength].Length;

                        long outerStride1 = in1.Shape.Dimensions[dimIndex0].Stride;
                        long outerStride3 = @out.Shape.Dimensions[dimIndex0].Stride;

                        long innerStride1 = in1.Shape.Dimensions[dimIndex1].Stride;
                        long innerStride3 = @out.Shape.Dimensions[dimIndex1].Stride;

                        long innerInnerStride1 = in1.Shape.Dimensions[dimIndex2].Stride;
                        long innerInnerStride3 = @out.Shape.Dimensions[dimIndex2].Stride;

                        outerStride1 -= innerStride1 * in1.Shape.Dimensions[dimIndex1].Length;
                        outerStride3 -= innerStride3 * @out.Shape.Dimensions[dimIndex1].Length;

                        innerStride1 -= innerInnerStride1 * in1.Shape.Dimensions[dimIndex2].Length;
                        innerStride3 -= innerInnerStride3 * @out.Shape.Dimensions[dimIndex2].Length;

                        for (long outer = 0; outer < totalOps; outer++)
                        {
                            //Get the array offset for the first element in the outer dimension
                            long ix1 = in1.Shape[counters];
                            long ix3 = @out.Shape[counters];


                            for (long i = 0; i < opsOuter; i++)
                            {
                                for (long j = 0; j < opsInner; j++)
                                {
                                    for (long k = 0; k < opsInnerInner; k++)
                                    {
                                        d2[ix3] = (System.Int64)(d1[ix1]);
                                        ix1 += innerInnerStride1;
                                        ix3 += innerInnerStride3;
                                    }

                                    ix1 += innerStride1;
                                    ix3 += innerStride3;
                                }

                                ix1 += outerStride1;
                                ix3 += outerStride3;
                            }

                            if (counters.LongLength > 0)
                            {
                                //Basically a ripple carry adder
                                long p = counters.LongLength - 1;
                                while (++counters[p] == limits[p] && p > 0)
                                {
                                    counters[p] = 0;
                                    p--;
                                }
                            }
                        }
                    }
                }
            }
        }

        /// <summary>
        /// Unsafe implementation of applying a unary operation
        /// </summary>
        /// <typeparam name="C">The type of operation to perform</typeparam>
        /// <param name="op">The operation instance</param>
        /// <param name="scalar">The input scalar argument</param>
        /// <param name="out">The output target</param>
        internal static void UFunc_Op_Inner_Unary_Scalar_Flush_SByte_TypedImpl<C>(NumCIL.Int64.ToInt64 op, System.SByte scalar, NdArray<System.Int64> @out)
            where C : IUnaryOp<System.SByte>
        {
            unsafe
            {
                using (var f2 = new Pinner(@out.DataAccessor))
                {
                    var d2 = (System.Int64*)f2.ptr;

                    if (@out.Shape.Dimensions.Length == 1)
                    {
                        long totalOps = @out.Shape.Dimensions[0].Length;
                        long ix2 = @out.Shape.Offset;
                        long stride2 = @out.Shape.Dimensions[0].Stride;

                        for (long i = 0; i < totalOps; i++)
                        {
                            d2[ix2] = (System.Int64)(scalar);
                            ix2 += stride2;
                        }
                    }
                    else if (@out.Shape.Dimensions.Length == 2)
                    {
                        long opsOuter = @out.Shape.Dimensions[0].Length;
                        long opsInner = @out.Shape.Dimensions[1].Length;

                        long ix2 = @out.Shape.Offset;
                        long outerStride2 = @out.Shape.Dimensions[0].Stride;
                        long innerStride2 = @out.Shape.Dimensions[1].Stride;
                        outerStride2 -= innerStride2 * @out.Shape.Dimensions[1].Length;

                        for (long i = 0; i < opsOuter; i++)
                        {
                            for (long j = 0; j < opsInner; j++)
                            {
                                d2[ix2] = (System.Int64)(scalar);
                                ix2 += innerStride2;
                            }

                            ix2 += outerStride2;
                        }
                    }
                    else
                    {
                        long n = @out.Shape.Dimensions.LongLength - 3;
                        long[] limits = @out.Shape.Dimensions.Where(x => n-- > 0).Select(x => x.Length).ToArray();
                        long[] counters = new long[limits.LongLength];

                        long totalOps = limits.LongLength == 0 ? 1 : limits.Aggregate<long>((a, b) => a * b);

                        //This chunck of variables are used to prevent repeated calculations of offsets
                        long dimIndex0 = 0 + limits.LongLength;
                        long dimIndex1 = 1 + limits.LongLength;
                        long dimIndex2 = 2 + limits.LongLength;

                        long opsOuter = @out.Shape.Dimensions[0 + limits.LongLength].Length;
                        long opsInner = @out.Shape.Dimensions[1 + limits.LongLength].Length;
                        long opsInnerInner = @out.Shape.Dimensions[2 + limits.LongLength].Length;

                        long outerStride3 = @out.Shape.Dimensions[dimIndex0].Stride;
                        long innerStride3 = @out.Shape.Dimensions[dimIndex1].Stride;
                        long innerInnerStride3 = @out.Shape.Dimensions[dimIndex2].Stride;
                        outerStride3 -= innerStride3 * @out.Shape.Dimensions[dimIndex1].Length;
                        innerStride3 -= innerInnerStride3 * @out.Shape.Dimensions[dimIndex2].Length;

                        for (long outer = 0; outer < totalOps; outer++)
                        {
                            //Get the array offset for the first element in the outer dimension
                            long ix3 = @out.Shape[counters];

                            for (long i = 0; i < opsOuter; i++)
                            {
                                for (long j = 0; j < opsInner; j++)
                                {
                                    for (long k = 0; k < opsInnerInner; k++)
                                    {
                                        d2[ix3] = (System.Int64)(scalar);
                                        ix3 += innerInnerStride3;
                                    }

                                    ix3 += innerStride3;
                                }

                                ix3 += outerStride3;
                            }

                            if (counters.LongLength > 0)
                            {
                                //Basically a ripple carry adder
                                long p = counters.LongLength - 1;
                                while (++counters[p] == limits[p] && p > 0)
                                {
                                    counters[p] = 0;
                                    p--;
                                }
                            }
                        }
                    }
                }
            }
        }
        /// <summary>
        /// Unsafe implementation of applying a unary operation
        /// </summary>
        /// <typeparam name="C">The type of operation to perform</typeparam>
        /// <param name="op">The operation instance</param>
        /// <param name="in1">The input argument</param>
        /// <param name="out">The output target</param>
        internal static void UFunc_Op_Inner_Unary_Flush_Byte_TypedImpl<C>(NumCIL.Int64.ToInt64 op, NdArray<System.Byte> in1, NdArray<System.Int64> @out)
            where C : IUnaryOp<System.Byte>
        {
            unsafe
            {
                using (var f1 = new Pinner(in1.DataAccessor))
                using (var f2 = new Pinner(@out.DataAccessor))
                {
                    var d1 = (System.Byte*)f1.ptr;
                    var d2 = (System.Int64*)f2.ptr;

                    if (@out.Shape.Dimensions.Length == 1)
                    {
                        long totalOps = @out.Shape.Dimensions[0].Length;

                        long ix1 = in1.Shape.Offset;
                        long ix2 = @out.Shape.Offset;

                        long stride1 = in1.Shape.Dimensions[0].Stride;
                        long stride2 = @out.Shape.Dimensions[0].Stride;


                        if (stride1 == stride2 && ix1 == ix2)
                        {
                            //Best case, all are equal, just keep a single counter
                            for (long i = 0; i < totalOps; i++)
                            {
                                d2[ix1] = (System.Int64)(d1[ix1]);
                                ix1 += stride1;
                            }
                        }
                        else
                        {
                            for (long i = 0; i < totalOps; i++)
                            {
                                d2[ix2] = (System.Int64)(d1[ix1]);
                                ix1 += stride1;
                                ix2 += stride2;
                            }
                        }
                    }
                    else if (@out.Shape.Dimensions.Length == 2)
                    {
                        long opsOuter = @out.Shape.Dimensions[0].Length;
                        long opsInner = @out.Shape.Dimensions[1].Length;

                        long ix1 = in1.Shape.Offset;
                        long ix2 = @out.Shape.Offset;

                        long outerStride1 = in1.Shape.Dimensions[0].Stride;
                        long outerStride2 = @out.Shape.Dimensions[0].Stride;

                        long innerStride1 = in1.Shape.Dimensions[1].Stride;
                        long innerStride2 = @out.Shape.Dimensions[1].Stride;

                        outerStride1 -= innerStride1 * in1.Shape.Dimensions[1].Length;
                        outerStride2 -= innerStride2 * @out.Shape.Dimensions[1].Length;

                        for (long i = 0; i < opsOuter; i++)
                        {
                            for (long j = 0; j < opsInner; j++)
                            {
                                d2[ix2] = (System.Int64)(d1[ix1]);
                                ix1 += innerStride1;
                                ix2 += innerStride2;
                            }

                            ix1 += outerStride1;
                            ix2 += outerStride2;
                        }
                    }
                    else
                    {
                        long n = in1.Shape.Dimensions.LongLength - 3;
                        long[] limits = in1.Shape.Dimensions.Where(x => n-- > 0).Select(x => x.Length).ToArray();
                        long[] counters = new long[limits.LongLength];

                        long totalOps = limits.LongLength == 0 ? 1 : limits.Aggregate<long>((a, b) => a * b);

                        //This chunck of variables are used to prevent repeated calculations of offsets
                        long dimIndex0 = 0 + limits.LongLength;
                        long dimIndex1 = 1 + limits.LongLength;
                        long dimIndex2 = 2 + limits.LongLength;

                        long opsOuter = @out.Shape.Dimensions[0 + limits.LongLength].Length;
                        long opsInner = @out.Shape.Dimensions[1 + limits.LongLength].Length;
                        long opsInnerInner = @out.Shape.Dimensions[2 + limits.LongLength].Length;

                        long outerStride1 = in1.Shape.Dimensions[dimIndex0].Stride;
                        long outerStride3 = @out.Shape.Dimensions[dimIndex0].Stride;

                        long innerStride1 = in1.Shape.Dimensions[dimIndex1].Stride;
                        long innerStride3 = @out.Shape.Dimensions[dimIndex1].Stride;

                        long innerInnerStride1 = in1.Shape.Dimensions[dimIndex2].Stride;
                        long innerInnerStride3 = @out.Shape.Dimensions[dimIndex2].Stride;

                        outerStride1 -= innerStride1 * in1.Shape.Dimensions[dimIndex1].Length;
                        outerStride3 -= innerStride3 * @out.Shape.Dimensions[dimIndex1].Length;

                        innerStride1 -= innerInnerStride1 * in1.Shape.Dimensions[dimIndex2].Length;
                        innerStride3 -= innerInnerStride3 * @out.Shape.Dimensions[dimIndex2].Length;

                        for (long outer = 0; outer < totalOps; outer++)
                        {
                            //Get the array offset for the first element in the outer dimension
                            long ix1 = in1.Shape[counters];
                            long ix3 = @out.Shape[counters];


                            for (long i = 0; i < opsOuter; i++)
                            {
                                for (long j = 0; j < opsInner; j++)
                                {
                                    for (long k = 0; k < opsInnerInner; k++)
                                    {
                                        d2[ix3] = (System.Int64)(d1[ix1]);
                                        ix1 += innerInnerStride1;
                                        ix3 += innerInnerStride3;
                                    }

                                    ix1 += innerStride1;
                                    ix3 += innerStride3;
                                }

                                ix1 += outerStride1;
                                ix3 += outerStride3;
                            }

                            if (counters.LongLength > 0)
                            {
                                //Basically a ripple carry adder
                                long p = counters.LongLength - 1;
                                while (++counters[p] == limits[p] && p > 0)
                                {
                                    counters[p] = 0;
                                    p--;
                                }
                            }
                        }
                    }
                }
            }
        }

        /// <summary>
        /// Unsafe implementation of applying a unary operation
        /// </summary>
        /// <typeparam name="C">The type of operation to perform</typeparam>
        /// <param name="op">The operation instance</param>
        /// <param name="scalar">The input scalar argument</param>
        /// <param name="out">The output target</param>
        internal static void UFunc_Op_Inner_Unary_Scalar_Flush_Byte_TypedImpl<C>(NumCIL.Int64.ToInt64 op, System.Byte scalar, NdArray<System.Int64> @out)
            where C : IUnaryOp<System.Byte>
        {
            unsafe
            {
                using (var f2 = new Pinner(@out.DataAccessor))
                {
                    var d2 = (System.Int64*)f2.ptr;

                    if (@out.Shape.Dimensions.Length == 1)
                    {
                        long totalOps = @out.Shape.Dimensions[0].Length;
                        long ix2 = @out.Shape.Offset;
                        long stride2 = @out.Shape.Dimensions[0].Stride;

                        for (long i = 0; i < totalOps; i++)
                        {
                            d2[ix2] = (System.Int64)(scalar);
                            ix2 += stride2;
                        }
                    }
                    else if (@out.Shape.Dimensions.Length == 2)
                    {
                        long opsOuter = @out.Shape.Dimensions[0].Length;
                        long opsInner = @out.Shape.Dimensions[1].Length;

                        long ix2 = @out.Shape.Offset;
                        long outerStride2 = @out.Shape.Dimensions[0].Stride;
                        long innerStride2 = @out.Shape.Dimensions[1].Stride;
                        outerStride2 -= innerStride2 * @out.Shape.Dimensions[1].Length;

                        for (long i = 0; i < opsOuter; i++)
                        {
                            for (long j = 0; j < opsInner; j++)
                            {
                                d2[ix2] = (System.Int64)(scalar);
                                ix2 += innerStride2;
                            }

                            ix2 += outerStride2;
                        }
                    }
                    else
                    {
                        long n = @out.Shape.Dimensions.LongLength - 3;
                        long[] limits = @out.Shape.Dimensions.Where(x => n-- > 0).Select(x => x.Length).ToArray();
                        long[] counters = new long[limits.LongLength];

                        long totalOps = limits.LongLength == 0 ? 1 : limits.Aggregate<long>((a, b) => a * b);

                        //This chunck of variables are used to prevent repeated calculations of offsets
                        long dimIndex0 = 0 + limits.LongLength;
                        long dimIndex1 = 1 + limits.LongLength;
                        long dimIndex2 = 2 + limits.LongLength;

                        long opsOuter = @out.Shape.Dimensions[0 + limits.LongLength].Length;
                        long opsInner = @out.Shape.Dimensions[1 + limits.LongLength].Length;
                        long opsInnerInner = @out.Shape.Dimensions[2 + limits.LongLength].Length;

                        long outerStride3 = @out.Shape.Dimensions[dimIndex0].Stride;
                        long innerStride3 = @out.Shape.Dimensions[dimIndex1].Stride;
                        long innerInnerStride3 = @out.Shape.Dimensions[dimIndex2].Stride;
                        outerStride3 -= innerStride3 * @out.Shape.Dimensions[dimIndex1].Length;
                        innerStride3 -= innerInnerStride3 * @out.Shape.Dimensions[dimIndex2].Length;

                        for (long outer = 0; outer < totalOps; outer++)
                        {
                            //Get the array offset for the first element in the outer dimension
                            long ix3 = @out.Shape[counters];

                            for (long i = 0; i < opsOuter; i++)
                            {
                                for (long j = 0; j < opsInner; j++)
                                {
                                    for (long k = 0; k < opsInnerInner; k++)
                                    {
                                        d2[ix3] = (System.Int64)(scalar);
                                        ix3 += innerInnerStride3;
                                    }

                                    ix3 += innerStride3;
                                }

                                ix3 += outerStride3;
                            }

                            if (counters.LongLength > 0)
                            {
                                //Basically a ripple carry adder
                                long p = counters.LongLength - 1;
                                while (++counters[p] == limits[p] && p > 0)
                                {
                                    counters[p] = 0;
                                    p--;
                                }
                            }
                        }
                    }
                }
            }
        }
        /// <summary>
        /// Unsafe implementation of applying a unary operation
        /// </summary>
        /// <typeparam name="C">The type of operation to perform</typeparam>
        /// <param name="op">The operation instance</param>
        /// <param name="in1">The input argument</param>
        /// <param name="out">The output target</param>
        internal static void UFunc_Op_Inner_Unary_Flush_Int16_TypedImpl<C>(NumCIL.Int64.ToInt64 op, NdArray<System.Int16> in1, NdArray<System.Int64> @out)
            where C : IUnaryOp<System.Int16>
        {
            unsafe
            {
                using (var f1 = new Pinner(in1.DataAccessor))
                using (var f2 = new Pinner(@out.DataAccessor))
                {
                    var d1 = (System.Int16*)f1.ptr;
                    var d2 = (System.Int64*)f2.ptr;

                    if (@out.Shape.Dimensions.Length == 1)
                    {
                        long totalOps = @out.Shape.Dimensions[0].Length;

                        long ix1 = in1.Shape.Offset;
                        long ix2 = @out.Shape.Offset;

                        long stride1 = in1.Shape.Dimensions[0].Stride;
                        long stride2 = @out.Shape.Dimensions[0].Stride;


                        if (stride1 == stride2 && ix1 == ix2)
                        {
                            //Best case, all are equal, just keep a single counter
                            for (long i = 0; i < totalOps; i++)
                            {
                                d2[ix1] = (System.Int64)(d1[ix1]);
                                ix1 += stride1;
                            }
                        }
                        else
                        {
                            for (long i = 0; i < totalOps; i++)
                            {
                                d2[ix2] = (System.Int64)(d1[ix1]);
                                ix1 += stride1;
                                ix2 += stride2;
                            }
                        }
                    }
                    else if (@out.Shape.Dimensions.Length == 2)
                    {
                        long opsOuter = @out.Shape.Dimensions[0].Length;
                        long opsInner = @out.Shape.Dimensions[1].Length;

                        long ix1 = in1.Shape.Offset;
                        long ix2 = @out.Shape.Offset;

                        long outerStride1 = in1.Shape.Dimensions[0].Stride;
                        long outerStride2 = @out.Shape.Dimensions[0].Stride;

                        long innerStride1 = in1.Shape.Dimensions[1].Stride;
                        long innerStride2 = @out.Shape.Dimensions[1].Stride;

                        outerStride1 -= innerStride1 * in1.Shape.Dimensions[1].Length;
                        outerStride2 -= innerStride2 * @out.Shape.Dimensions[1].Length;

                        for (long i = 0; i < opsOuter; i++)
                        {
                            for (long j = 0; j < opsInner; j++)
                            {
                                d2[ix2] = (System.Int64)(d1[ix1]);
                                ix1 += innerStride1;
                                ix2 += innerStride2;
                            }

                            ix1 += outerStride1;
                            ix2 += outerStride2;
                        }
                    }
                    else
                    {
                        long n = in1.Shape.Dimensions.LongLength - 3;
                        long[] limits = in1.Shape.Dimensions.Where(x => n-- > 0).Select(x => x.Length).ToArray();
                        long[] counters = new long[limits.LongLength];

                        long totalOps = limits.LongLength == 0 ? 1 : limits.Aggregate<long>((a, b) => a * b);

                        //This chunck of variables are used to prevent repeated calculations of offsets
                        long dimIndex0 = 0 + limits.LongLength;
                        long dimIndex1 = 1 + limits.LongLength;
                        long dimIndex2 = 2 + limits.LongLength;

                        long opsOuter = @out.Shape.Dimensions[0 + limits.LongLength].Length;
                        long opsInner = @out.Shape.Dimensions[1 + limits.LongLength].Length;
                        long opsInnerInner = @out.Shape.Dimensions[2 + limits.LongLength].Length;

                        long outerStride1 = in1.Shape.Dimensions[dimIndex0].Stride;
                        long outerStride3 = @out.Shape.Dimensions[dimIndex0].Stride;

                        long innerStride1 = in1.Shape.Dimensions[dimIndex1].Stride;
                        long innerStride3 = @out.Shape.Dimensions[dimIndex1].Stride;

                        long innerInnerStride1 = in1.Shape.Dimensions[dimIndex2].Stride;
                        long innerInnerStride3 = @out.Shape.Dimensions[dimIndex2].Stride;

                        outerStride1 -= innerStride1 * in1.Shape.Dimensions[dimIndex1].Length;
                        outerStride3 -= innerStride3 * @out.Shape.Dimensions[dimIndex1].Length;

                        innerStride1 -= innerInnerStride1 * in1.Shape.Dimensions[dimIndex2].Length;
                        innerStride3 -= innerInnerStride3 * @out.Shape.Dimensions[dimIndex2].Length;

                        for (long outer = 0; outer < totalOps; outer++)
                        {
                            //Get the array offset for the first element in the outer dimension
                            long ix1 = in1.Shape[counters];
                            long ix3 = @out.Shape[counters];


                            for (long i = 0; i < opsOuter; i++)
                            {
                                for (long j = 0; j < opsInner; j++)
                                {
                                    for (long k = 0; k < opsInnerInner; k++)
                                    {
                                        d2[ix3] = (System.Int64)(d1[ix1]);
                                        ix1 += innerInnerStride1;
                                        ix3 += innerInnerStride3;
                                    }

                                    ix1 += innerStride1;
                                    ix3 += innerStride3;
                                }

                                ix1 += outerStride1;
                                ix3 += outerStride3;
                            }

                            if (counters.LongLength > 0)
                            {
                                //Basically a ripple carry adder
                                long p = counters.LongLength - 1;
                                while (++counters[p] == limits[p] && p > 0)
                                {
                                    counters[p] = 0;
                                    p--;
                                }
                            }
                        }
                    }
                }
            }
        }

        /// <summary>
        /// Unsafe implementation of applying a unary operation
        /// </summary>
        /// <typeparam name="C">The type of operation to perform</typeparam>
        /// <param name="op">The operation instance</param>
        /// <param name="scalar">The input scalar argument</param>
        /// <param name="out">The output target</param>
        internal static void UFunc_Op_Inner_Unary_Scalar_Flush_Int16_TypedImpl<C>(NumCIL.Int64.ToInt64 op, System.Int16 scalar, NdArray<System.Int64> @out)
            where C : IUnaryOp<System.Int16>
        {
            unsafe
            {
                using (var f2 = new Pinner(@out.DataAccessor))
                {
                    var d2 = (System.Int64*)f2.ptr;

                    if (@out.Shape.Dimensions.Length == 1)
                    {
                        long totalOps = @out.Shape.Dimensions[0].Length;
                        long ix2 = @out.Shape.Offset;
                        long stride2 = @out.Shape.Dimensions[0].Stride;

                        for (long i = 0; i < totalOps; i++)
                        {
                            d2[ix2] = (System.Int64)(scalar);
                            ix2 += stride2;
                        }
                    }
                    else if (@out.Shape.Dimensions.Length == 2)
                    {
                        long opsOuter = @out.Shape.Dimensions[0].Length;
                        long opsInner = @out.Shape.Dimensions[1].Length;

                        long ix2 = @out.Shape.Offset;
                        long outerStride2 = @out.Shape.Dimensions[0].Stride;
                        long innerStride2 = @out.Shape.Dimensions[1].Stride;
                        outerStride2 -= innerStride2 * @out.Shape.Dimensions[1].Length;

                        for (long i = 0; i < opsOuter; i++)
                        {
                            for (long j = 0; j < opsInner; j++)
                            {
                                d2[ix2] = (System.Int64)(scalar);
                                ix2 += innerStride2;
                            }

                            ix2 += outerStride2;
                        }
                    }
                    else
                    {
                        long n = @out.Shape.Dimensions.LongLength - 3;
                        long[] limits = @out.Shape.Dimensions.Where(x => n-- > 0).Select(x => x.Length).ToArray();
                        long[] counters = new long[limits.LongLength];

                        long totalOps = limits.LongLength == 0 ? 1 : limits.Aggregate<long>((a, b) => a * b);

                        //This chunck of variables are used to prevent repeated calculations of offsets
                        long dimIndex0 = 0 + limits.LongLength;
                        long dimIndex1 = 1 + limits.LongLength;
                        long dimIndex2 = 2 + limits.LongLength;

                        long opsOuter = @out.Shape.Dimensions[0 + limits.LongLength].Length;
                        long opsInner = @out.Shape.Dimensions[1 + limits.LongLength].Length;
                        long opsInnerInner = @out.Shape.Dimensions[2 + limits.LongLength].Length;

                        long outerStride3 = @out.Shape.Dimensions[dimIndex0].Stride;
                        long innerStride3 = @out.Shape.Dimensions[dimIndex1].Stride;
                        long innerInnerStride3 = @out.Shape.Dimensions[dimIndex2].Stride;
                        outerStride3 -= innerStride3 * @out.Shape.Dimensions[dimIndex1].Length;
                        innerStride3 -= innerInnerStride3 * @out.Shape.Dimensions[dimIndex2].Length;

                        for (long outer = 0; outer < totalOps; outer++)
                        {
                            //Get the array offset for the first element in the outer dimension
                            long ix3 = @out.Shape[counters];

                            for (long i = 0; i < opsOuter; i++)
                            {
                                for (long j = 0; j < opsInner; j++)
                                {
                                    for (long k = 0; k < opsInnerInner; k++)
                                    {
                                        d2[ix3] = (System.Int64)(scalar);
                                        ix3 += innerInnerStride3;
                                    }

                                    ix3 += innerStride3;
                                }

                                ix3 += outerStride3;
                            }

                            if (counters.LongLength > 0)
                            {
                                //Basically a ripple carry adder
                                long p = counters.LongLength - 1;
                                while (++counters[p] == limits[p] && p > 0)
                                {
                                    counters[p] = 0;
                                    p--;
                                }
                            }
                        }
                    }
                }
            }
        }
        /// <summary>
        /// Unsafe implementation of applying a unary operation
        /// </summary>
        /// <typeparam name="C">The type of operation to perform</typeparam>
        /// <param name="op">The operation instance</param>
        /// <param name="in1">The input argument</param>
        /// <param name="out">The output target</param>
        internal static void UFunc_Op_Inner_Unary_Flush_UInt16_TypedImpl<C>(NumCIL.Int64.ToInt64 op, NdArray<System.UInt16> in1, NdArray<System.Int64> @out)
            where C : IUnaryOp<System.UInt16>
        {
            unsafe
            {
                using (var f1 = new Pinner(in1.DataAccessor))
                using (var f2 = new Pinner(@out.DataAccessor))
                {
                    var d1 = (System.UInt16*)f1.ptr;
                    var d2 = (System.Int64*)f2.ptr;

                    if (@out.Shape.Dimensions.Length == 1)
                    {
                        long totalOps = @out.Shape.Dimensions[0].Length;

                        long ix1 = in1.Shape.Offset;
                        long ix2 = @out.Shape.Offset;

                        long stride1 = in1.Shape.Dimensions[0].Stride;
                        long stride2 = @out.Shape.Dimensions[0].Stride;


                        if (stride1 == stride2 && ix1 == ix2)
                        {
                            //Best case, all are equal, just keep a single counter
                            for (long i = 0; i < totalOps; i++)
                            {
                                d2[ix1] = (System.Int64)(d1[ix1]);
                                ix1 += stride1;
                            }
                        }
                        else
                        {
                            for (long i = 0; i < totalOps; i++)
                            {
                                d2[ix2] = (System.Int64)(d1[ix1]);
                                ix1 += stride1;
                                ix2 += stride2;
                            }
                        }
                    }
                    else if (@out.Shape.Dimensions.Length == 2)
                    {
                        long opsOuter = @out.Shape.Dimensions[0].Length;
                        long opsInner = @out.Shape.Dimensions[1].Length;

                        long ix1 = in1.Shape.Offset;
                        long ix2 = @out.Shape.Offset;

                        long outerStride1 = in1.Shape.Dimensions[0].Stride;
                        long outerStride2 = @out.Shape.Dimensions[0].Stride;

                        long innerStride1 = in1.Shape.Dimensions[1].Stride;
                        long innerStride2 = @out.Shape.Dimensions[1].Stride;

                        outerStride1 -= innerStride1 * in1.Shape.Dimensions[1].Length;
                        outerStride2 -= innerStride2 * @out.Shape.Dimensions[1].Length;

                        for (long i = 0; i < opsOuter; i++)
                        {
                            for (long j = 0; j < opsInner; j++)
                            {
                                d2[ix2] = (System.Int64)(d1[ix1]);
                                ix1 += innerStride1;
                                ix2 += innerStride2;
                            }

                            ix1 += outerStride1;
                            ix2 += outerStride2;
                        }
                    }
                    else
                    {
                        long n = in1.Shape.Dimensions.LongLength - 3;
                        long[] limits = in1.Shape.Dimensions.Where(x => n-- > 0).Select(x => x.Length).ToArray();
                        long[] counters = new long[limits.LongLength];

                        long totalOps = limits.LongLength == 0 ? 1 : limits.Aggregate<long>((a, b) => a * b);

                        //This chunck of variables are used to prevent repeated calculations of offsets
                        long dimIndex0 = 0 + limits.LongLength;
                        long dimIndex1 = 1 + limits.LongLength;
                        long dimIndex2 = 2 + limits.LongLength;

                        long opsOuter = @out.Shape.Dimensions[0 + limits.LongLength].Length;
                        long opsInner = @out.Shape.Dimensions[1 + limits.LongLength].Length;
                        long opsInnerInner = @out.Shape.Dimensions[2 + limits.LongLength].Length;

                        long outerStride1 = in1.Shape.Dimensions[dimIndex0].Stride;
                        long outerStride3 = @out.Shape.Dimensions[dimIndex0].Stride;

                        long innerStride1 = in1.Shape.Dimensions[dimIndex1].Stride;
                        long innerStride3 = @out.Shape.Dimensions[dimIndex1].Stride;

                        long innerInnerStride1 = in1.Shape.Dimensions[dimIndex2].Stride;
                        long innerInnerStride3 = @out.Shape.Dimensions[dimIndex2].Stride;

                        outerStride1 -= innerStride1 * in1.Shape.Dimensions[dimIndex1].Length;
                        outerStride3 -= innerStride3 * @out.Shape.Dimensions[dimIndex1].Length;

                        innerStride1 -= innerInnerStride1 * in1.Shape.Dimensions[dimIndex2].Length;
                        innerStride3 -= innerInnerStride3 * @out.Shape.Dimensions[dimIndex2].Length;

                        for (long outer = 0; outer < totalOps; outer++)
                        {
                            //Get the array offset for the first element in the outer dimension
                            long ix1 = in1.Shape[counters];
                            long ix3 = @out.Shape[counters];


                            for (long i = 0; i < opsOuter; i++)
                            {
                                for (long j = 0; j < opsInner; j++)
                                {
                                    for (long k = 0; k < opsInnerInner; k++)
                                    {
                                        d2[ix3] = (System.Int64)(d1[ix1]);
                                        ix1 += innerInnerStride1;
                                        ix3 += innerInnerStride3;
                                    }

                                    ix1 += innerStride1;
                                    ix3 += innerStride3;
                                }

                                ix1 += outerStride1;
                                ix3 += outerStride3;
                            }

                            if (counters.LongLength > 0)
                            {
                                //Basically a ripple carry adder
                                long p = counters.LongLength - 1;
                                while (++counters[p] == limits[p] && p > 0)
                                {
                                    counters[p] = 0;
                                    p--;
                                }
                            }
                        }
                    }
                }
            }
        }

        /// <summary>
        /// Unsafe implementation of applying a unary operation
        /// </summary>
        /// <typeparam name="C">The type of operation to perform</typeparam>
        /// <param name="op">The operation instance</param>
        /// <param name="scalar">The input scalar argument</param>
        /// <param name="out">The output target</param>
        internal static void UFunc_Op_Inner_Unary_Scalar_Flush_UInt16_TypedImpl<C>(NumCIL.Int64.ToInt64 op, System.UInt16 scalar, NdArray<System.Int64> @out)
            where C : IUnaryOp<System.UInt16>
        {
            unsafe
            {
                using (var f2 = new Pinner(@out.DataAccessor))
                {
                    var d2 = (System.Int64*)f2.ptr;

                    if (@out.Shape.Dimensions.Length == 1)
                    {
                        long totalOps = @out.Shape.Dimensions[0].Length;
                        long ix2 = @out.Shape.Offset;
                        long stride2 = @out.Shape.Dimensions[0].Stride;

                        for (long i = 0; i < totalOps; i++)
                        {
                            d2[ix2] = (System.Int64)(scalar);
                            ix2 += stride2;
                        }
                    }
                    else if (@out.Shape.Dimensions.Length == 2)
                    {
                        long opsOuter = @out.Shape.Dimensions[0].Length;
                        long opsInner = @out.Shape.Dimensions[1].Length;

                        long ix2 = @out.Shape.Offset;
                        long outerStride2 = @out.Shape.Dimensions[0].Stride;
                        long innerStride2 = @out.Shape.Dimensions[1].Stride;
                        outerStride2 -= innerStride2 * @out.Shape.Dimensions[1].Length;

                        for (long i = 0; i < opsOuter; i++)
                        {
                            for (long j = 0; j < opsInner; j++)
                            {
                                d2[ix2] = (System.Int64)(scalar);
                                ix2 += innerStride2;
                            }

                            ix2 += outerStride2;
                        }
                    }
                    else
                    {
                        long n = @out.Shape.Dimensions.LongLength - 3;
                        long[] limits = @out.Shape.Dimensions.Where(x => n-- > 0).Select(x => x.Length).ToArray();
                        long[] counters = new long[limits.LongLength];

                        long totalOps = limits.LongLength == 0 ? 1 : limits.Aggregate<long>((a, b) => a * b);

                        //This chunck of variables are used to prevent repeated calculations of offsets
                        long dimIndex0 = 0 + limits.LongLength;
                        long dimIndex1 = 1 + limits.LongLength;
                        long dimIndex2 = 2 + limits.LongLength;

                        long opsOuter = @out.Shape.Dimensions[0 + limits.LongLength].Length;
                        long opsInner = @out.Shape.Dimensions[1 + limits.LongLength].Length;
                        long opsInnerInner = @out.Shape.Dimensions[2 + limits.LongLength].Length;

                        long outerStride3 = @out.Shape.Dimensions[dimIndex0].Stride;
                        long innerStride3 = @out.Shape.Dimensions[dimIndex1].Stride;
                        long innerInnerStride3 = @out.Shape.Dimensions[dimIndex2].Stride;
                        outerStride3 -= innerStride3 * @out.Shape.Dimensions[dimIndex1].Length;
                        innerStride3 -= innerInnerStride3 * @out.Shape.Dimensions[dimIndex2].Length;

                        for (long outer = 0; outer < totalOps; outer++)
                        {
                            //Get the array offset for the first element in the outer dimension
                            long ix3 = @out.Shape[counters];

                            for (long i = 0; i < opsOuter; i++)
                            {
                                for (long j = 0; j < opsInner; j++)
                                {
                                    for (long k = 0; k < opsInnerInner; k++)
                                    {
                                        d2[ix3] = (System.Int64)(scalar);
                                        ix3 += innerInnerStride3;
                                    }

                                    ix3 += innerStride3;
                                }

                                ix3 += outerStride3;
                            }

                            if (counters.LongLength > 0)
                            {
                                //Basically a ripple carry adder
                                long p = counters.LongLength - 1;
                                while (++counters[p] == limits[p] && p > 0)
                                {
                                    counters[p] = 0;
                                    p--;
                                }
                            }
                        }
                    }
                }
            }
        }
        /// <summary>
        /// Unsafe implementation of applying a unary operation
        /// </summary>
        /// <typeparam name="C">The type of operation to perform</typeparam>
        /// <param name="op">The operation instance</param>
        /// <param name="in1">The input argument</param>
        /// <param name="out">The output target</param>
        internal static void UFunc_Op_Inner_Unary_Flush_Int32_TypedImpl<C>(NumCIL.Int64.ToInt64 op, NdArray<System.Int32> in1, NdArray<System.Int64> @out)
            where C : IUnaryOp<System.Int32>
        {
            unsafe
            {
                using (var f1 = new Pinner(in1.DataAccessor))
                using (var f2 = new Pinner(@out.DataAccessor))
                {
                    var d1 = (System.Int32*)f1.ptr;
                    var d2 = (System.Int64*)f2.ptr;

                    if (@out.Shape.Dimensions.Length == 1)
                    {
                        long totalOps = @out.Shape.Dimensions[0].Length;

                        long ix1 = in1.Shape.Offset;
                        long ix2 = @out.Shape.Offset;

                        long stride1 = in1.Shape.Dimensions[0].Stride;
                        long stride2 = @out.Shape.Dimensions[0].Stride;


                        if (stride1 == stride2 && ix1 == ix2)
                        {
                            //Best case, all are equal, just keep a single counter
                            for (long i = 0; i < totalOps; i++)
                            {
                                d2[ix1] = (System.Int64)(d1[ix1]);
                                ix1 += stride1;
                            }
                        }
                        else
                        {
                            for (long i = 0; i < totalOps; i++)
                            {
                                d2[ix2] = (System.Int64)(d1[ix1]);
                                ix1 += stride1;
                                ix2 += stride2;
                            }
                        }
                    }
                    else if (@out.Shape.Dimensions.Length == 2)
                    {
                        long opsOuter = @out.Shape.Dimensions[0].Length;
                        long opsInner = @out.Shape.Dimensions[1].Length;

                        long ix1 = in1.Shape.Offset;
                        long ix2 = @out.Shape.Offset;

                        long outerStride1 = in1.Shape.Dimensions[0].Stride;
                        long outerStride2 = @out.Shape.Dimensions[0].Stride;

                        long innerStride1 = in1.Shape.Dimensions[1].Stride;
                        long innerStride2 = @out.Shape.Dimensions[1].Stride;

                        outerStride1 -= innerStride1 * in1.Shape.Dimensions[1].Length;
                        outerStride2 -= innerStride2 * @out.Shape.Dimensions[1].Length;

                        for (long i = 0; i < opsOuter; i++)
                        {
                            for (long j = 0; j < opsInner; j++)
                            {
                                d2[ix2] = (System.Int64)(d1[ix1]);
                                ix1 += innerStride1;
                                ix2 += innerStride2;
                            }

                            ix1 += outerStride1;
                            ix2 += outerStride2;
                        }
                    }
                    else
                    {
                        long n = in1.Shape.Dimensions.LongLength - 3;
                        long[] limits = in1.Shape.Dimensions.Where(x => n-- > 0).Select(x => x.Length).ToArray();
                        long[] counters = new long[limits.LongLength];

                        long totalOps = limits.LongLength == 0 ? 1 : limits.Aggregate<long>((a, b) => a * b);

                        //This chunck of variables are used to prevent repeated calculations of offsets
                        long dimIndex0 = 0 + limits.LongLength;
                        long dimIndex1 = 1 + limits.LongLength;
                        long dimIndex2 = 2 + limits.LongLength;

                        long opsOuter = @out.Shape.Dimensions[0 + limits.LongLength].Length;
                        long opsInner = @out.Shape.Dimensions[1 + limits.LongLength].Length;
                        long opsInnerInner = @out.Shape.Dimensions[2 + limits.LongLength].Length;

                        long outerStride1 = in1.Shape.Dimensions[dimIndex0].Stride;
                        long outerStride3 = @out.Shape.Dimensions[dimIndex0].Stride;

                        long innerStride1 = in1.Shape.Dimensions[dimIndex1].Stride;
                        long innerStride3 = @out.Shape.Dimensions[dimIndex1].Stride;

                        long innerInnerStride1 = in1.Shape.Dimensions[dimIndex2].Stride;
                        long innerInnerStride3 = @out.Shape.Dimensions[dimIndex2].Stride;

                        outerStride1 -= innerStride1 * in1.Shape.Dimensions[dimIndex1].Length;
                        outerStride3 -= innerStride3 * @out.Shape.Dimensions[dimIndex1].Length;

                        innerStride1 -= innerInnerStride1 * in1.Shape.Dimensions[dimIndex2].Length;
                        innerStride3 -= innerInnerStride3 * @out.Shape.Dimensions[dimIndex2].Length;

                        for (long outer = 0; outer < totalOps; outer++)
                        {
                            //Get the array offset for the first element in the outer dimension
                            long ix1 = in1.Shape[counters];
                            long ix3 = @out.Shape[counters];


                            for (long i = 0; i < opsOuter; i++)
                            {
                                for (long j = 0; j < opsInner; j++)
                                {
                                    for (long k = 0; k < opsInnerInner; k++)
                                    {
                                        d2[ix3] = (System.Int64)(d1[ix1]);
                                        ix1 += innerInnerStride1;
                                        ix3 += innerInnerStride3;
                                    }

                                    ix1 += innerStride1;
                                    ix3 += innerStride3;
                                }

                                ix1 += outerStride1;
                                ix3 += outerStride3;
                            }

                            if (counters.LongLength > 0)
                            {
                                //Basically a ripple carry adder
                                long p = counters.LongLength - 1;
                                while (++counters[p] == limits[p] && p > 0)
                                {
                                    counters[p] = 0;
                                    p--;
                                }
                            }
                        }
                    }
                }
            }
        }

        /// <summary>
        /// Unsafe implementation of applying a unary operation
        /// </summary>
        /// <typeparam name="C">The type of operation to perform</typeparam>
        /// <param name="op">The operation instance</param>
        /// <param name="scalar">The input scalar argument</param>
        /// <param name="out">The output target</param>
        internal static void UFunc_Op_Inner_Unary_Scalar_Flush_Int32_TypedImpl<C>(NumCIL.Int64.ToInt64 op, System.Int32 scalar, NdArray<System.Int64> @out)
            where C : IUnaryOp<System.Int32>
        {
            unsafe
            {
                using (var f2 = new Pinner(@out.DataAccessor))
                {
                    var d2 = (System.Int64*)f2.ptr;

                    if (@out.Shape.Dimensions.Length == 1)
                    {
                        long totalOps = @out.Shape.Dimensions[0].Length;
                        long ix2 = @out.Shape.Offset;
                        long stride2 = @out.Shape.Dimensions[0].Stride;

                        for (long i = 0; i < totalOps; i++)
                        {
                            d2[ix2] = (System.Int64)(scalar);
                            ix2 += stride2;
                        }
                    }
                    else if (@out.Shape.Dimensions.Length == 2)
                    {
                        long opsOuter = @out.Shape.Dimensions[0].Length;
                        long opsInner = @out.Shape.Dimensions[1].Length;

                        long ix2 = @out.Shape.Offset;
                        long outerStride2 = @out.Shape.Dimensions[0].Stride;
                        long innerStride2 = @out.Shape.Dimensions[1].Stride;
                        outerStride2 -= innerStride2 * @out.Shape.Dimensions[1].Length;

                        for (long i = 0; i < opsOuter; i++)
                        {
                            for (long j = 0; j < opsInner; j++)
                            {
                                d2[ix2] = (System.Int64)(scalar);
                                ix2 += innerStride2;
                            }

                            ix2 += outerStride2;
                        }
                    }
                    else
                    {
                        long n = @out.Shape.Dimensions.LongLength - 3;
                        long[] limits = @out.Shape.Dimensions.Where(x => n-- > 0).Select(x => x.Length).ToArray();
                        long[] counters = new long[limits.LongLength];

                        long totalOps = limits.LongLength == 0 ? 1 : limits.Aggregate<long>((a, b) => a * b);

                        //This chunck of variables are used to prevent repeated calculations of offsets
                        long dimIndex0 = 0 + limits.LongLength;
                        long dimIndex1 = 1 + limits.LongLength;
                        long dimIndex2 = 2 + limits.LongLength;

                        long opsOuter = @out.Shape.Dimensions[0 + limits.LongLength].Length;
                        long opsInner = @out.Shape.Dimensions[1 + limits.LongLength].Length;
                        long opsInnerInner = @out.Shape.Dimensions[2 + limits.LongLength].Length;

                        long outerStride3 = @out.Shape.Dimensions[dimIndex0].Stride;
                        long innerStride3 = @out.Shape.Dimensions[dimIndex1].Stride;
                        long innerInnerStride3 = @out.Shape.Dimensions[dimIndex2].Stride;
                        outerStride3 -= innerStride3 * @out.Shape.Dimensions[dimIndex1].Length;
                        innerStride3 -= innerInnerStride3 * @out.Shape.Dimensions[dimIndex2].Length;

                        for (long outer = 0; outer < totalOps; outer++)
                        {
                            //Get the array offset for the first element in the outer dimension
                            long ix3 = @out.Shape[counters];

                            for (long i = 0; i < opsOuter; i++)
                            {
                                for (long j = 0; j < opsInner; j++)
                                {
                                    for (long k = 0; k < opsInnerInner; k++)
                                    {
                                        d2[ix3] = (System.Int64)(scalar);
                                        ix3 += innerInnerStride3;
                                    }

                                    ix3 += innerStride3;
                                }

                                ix3 += outerStride3;
                            }

                            if (counters.LongLength > 0)
                            {
                                //Basically a ripple carry adder
                                long p = counters.LongLength - 1;
                                while (++counters[p] == limits[p] && p > 0)
                                {
                                    counters[p] = 0;
                                    p--;
                                }
                            }
                        }
                    }
                }
            }
        }
        /// <summary>
        /// Unsafe implementation of applying a unary operation
        /// </summary>
        /// <typeparam name="C">The type of operation to perform</typeparam>
        /// <param name="op">The operation instance</param>
        /// <param name="in1">The input argument</param>
        /// <param name="out">The output target</param>
        internal static void UFunc_Op_Inner_Unary_Flush_UInt32_TypedImpl<C>(NumCIL.Int64.ToInt64 op, NdArray<System.UInt32> in1, NdArray<System.Int64> @out)
            where C : IUnaryOp<System.UInt32>
        {
            unsafe
            {
                using (var f1 = new Pinner(in1.DataAccessor))
                using (var f2 = new Pinner(@out.DataAccessor))
                {
                    var d1 = (System.UInt32*)f1.ptr;
                    var d2 = (System.Int64*)f2.ptr;

                    if (@out.Shape.Dimensions.Length == 1)
                    {
                        long totalOps = @out.Shape.Dimensions[0].Length;

                        long ix1 = in1.Shape.Offset;
                        long ix2 = @out.Shape.Offset;

                        long stride1 = in1.Shape.Dimensions[0].Stride;
                        long stride2 = @out.Shape.Dimensions[0].Stride;


                        if (stride1 == stride2 && ix1 == ix2)
                        {
                            //Best case, all are equal, just keep a single counter
                            for (long i = 0; i < totalOps; i++)
                            {
                                d2[ix1] = (System.Int64)(d1[ix1]);
                                ix1 += stride1;
                            }
                        }
                        else
                        {
                            for (long i = 0; i < totalOps; i++)
                            {
                                d2[ix2] = (System.Int64)(d1[ix1]);
                                ix1 += stride1;
                                ix2 += stride2;
                            }
                        }
                    }
                    else if (@out.Shape.Dimensions.Length == 2)
                    {
                        long opsOuter = @out.Shape.Dimensions[0].Length;
                        long opsInner = @out.Shape.Dimensions[1].Length;

                        long ix1 = in1.Shape.Offset;
                        long ix2 = @out.Shape.Offset;

                        long outerStride1 = in1.Shape.Dimensions[0].Stride;
                        long outerStride2 = @out.Shape.Dimensions[0].Stride;

                        long innerStride1 = in1.Shape.Dimensions[1].Stride;
                        long innerStride2 = @out.Shape.Dimensions[1].Stride;

                        outerStride1 -= innerStride1 * in1.Shape.Dimensions[1].Length;
                        outerStride2 -= innerStride2 * @out.Shape.Dimensions[1].Length;

                        for (long i = 0; i < opsOuter; i++)
                        {
                            for (long j = 0; j < opsInner; j++)
                            {
                                d2[ix2] = (System.Int64)(d1[ix1]);
                                ix1 += innerStride1;
                                ix2 += innerStride2;
                            }

                            ix1 += outerStride1;
                            ix2 += outerStride2;
                        }
                    }
                    else
                    {
                        long n = in1.Shape.Dimensions.LongLength - 3;
                        long[] limits = in1.Shape.Dimensions.Where(x => n-- > 0).Select(x => x.Length).ToArray();
                        long[] counters = new long[limits.LongLength];

                        long totalOps = limits.LongLength == 0 ? 1 : limits.Aggregate<long>((a, b) => a * b);

                        //This chunck of variables are used to prevent repeated calculations of offsets
                        long dimIndex0 = 0 + limits.LongLength;
                        long dimIndex1 = 1 + limits.LongLength;
                        long dimIndex2 = 2 + limits.LongLength;

                        long opsOuter = @out.Shape.Dimensions[0 + limits.LongLength].Length;
                        long opsInner = @out.Shape.Dimensions[1 + limits.LongLength].Length;
                        long opsInnerInner = @out.Shape.Dimensions[2 + limits.LongLength].Length;

                        long outerStride1 = in1.Shape.Dimensions[dimIndex0].Stride;
                        long outerStride3 = @out.Shape.Dimensions[dimIndex0].Stride;

                        long innerStride1 = in1.Shape.Dimensions[dimIndex1].Stride;
                        long innerStride3 = @out.Shape.Dimensions[dimIndex1].Stride;

                        long innerInnerStride1 = in1.Shape.Dimensions[dimIndex2].Stride;
                        long innerInnerStride3 = @out.Shape.Dimensions[dimIndex2].Stride;

                        outerStride1 -= innerStride1 * in1.Shape.Dimensions[dimIndex1].Length;
                        outerStride3 -= innerStride3 * @out.Shape.Dimensions[dimIndex1].Length;

                        innerStride1 -= innerInnerStride1 * in1.Shape.Dimensions[dimIndex2].Length;
                        innerStride3 -= innerInnerStride3 * @out.Shape.Dimensions[dimIndex2].Length;

                        for (long outer = 0; outer < totalOps; outer++)
                        {
                            //Get the array offset for the first element in the outer dimension
                            long ix1 = in1.Shape[counters];
                            long ix3 = @out.Shape[counters];


                            for (long i = 0; i < opsOuter; i++)
                            {
                                for (long j = 0; j < opsInner; j++)
                                {
                                    for (long k = 0; k < opsInnerInner; k++)
                                    {
                                        d2[ix3] = (System.Int64)(d1[ix1]);
                                        ix1 += innerInnerStride1;
                                        ix3 += innerInnerStride3;
                                    }

                                    ix1 += innerStride1;
                                    ix3 += innerStride3;
                                }

                                ix1 += outerStride1;
                                ix3 += outerStride3;
                            }

                            if (counters.LongLength > 0)
                            {
                                //Basically a ripple carry adder
                                long p = counters.LongLength - 1;
                                while (++counters[p] == limits[p] && p > 0)
                                {
                                    counters[p] = 0;
                                    p--;
                                }
                            }
                        }
                    }
                }
            }
        }

        /// <summary>
        /// Unsafe implementation of applying a unary operation
        /// </summary>
        /// <typeparam name="C">The type of operation to perform</typeparam>
        /// <param name="op">The operation instance</param>
        /// <param name="scalar">The input scalar argument</param>
        /// <param name="out">The output target</param>
        internal static void UFunc_Op_Inner_Unary_Scalar_Flush_UInt32_TypedImpl<C>(NumCIL.Int64.ToInt64 op, System.UInt32 scalar, NdArray<System.Int64> @out)
            where C : IUnaryOp<System.UInt32>
        {
            unsafe
            {
                using (var f2 = new Pinner(@out.DataAccessor))
                {
                    var d2 = (System.Int64*)f2.ptr;

                    if (@out.Shape.Dimensions.Length == 1)
                    {
                        long totalOps = @out.Shape.Dimensions[0].Length;
                        long ix2 = @out.Shape.Offset;
                        long stride2 = @out.Shape.Dimensions[0].Stride;

                        for (long i = 0; i < totalOps; i++)
                        {
                            d2[ix2] = (System.Int64)(scalar);
                            ix2 += stride2;
                        }
                    }
                    else if (@out.Shape.Dimensions.Length == 2)
                    {
                        long opsOuter = @out.Shape.Dimensions[0].Length;
                        long opsInner = @out.Shape.Dimensions[1].Length;

                        long ix2 = @out.Shape.Offset;
                        long outerStride2 = @out.Shape.Dimensions[0].Stride;
                        long innerStride2 = @out.Shape.Dimensions[1].Stride;
                        outerStride2 -= innerStride2 * @out.Shape.Dimensions[1].Length;

                        for (long i = 0; i < opsOuter; i++)
                        {
                            for (long j = 0; j < opsInner; j++)
                            {
                                d2[ix2] = (System.Int64)(scalar);
                                ix2 += innerStride2;
                            }

                            ix2 += outerStride2;
                        }
                    }
                    else
                    {
                        long n = @out.Shape.Dimensions.LongLength - 3;
                        long[] limits = @out.Shape.Dimensions.Where(x => n-- > 0).Select(x => x.Length).ToArray();
                        long[] counters = new long[limits.LongLength];

                        long totalOps = limits.LongLength == 0 ? 1 : limits.Aggregate<long>((a, b) => a * b);

                        //This chunck of variables are used to prevent repeated calculations of offsets
                        long dimIndex0 = 0 + limits.LongLength;
                        long dimIndex1 = 1 + limits.LongLength;
                        long dimIndex2 = 2 + limits.LongLength;

                        long opsOuter = @out.Shape.Dimensions[0 + limits.LongLength].Length;
                        long opsInner = @out.Shape.Dimensions[1 + limits.LongLength].Length;
                        long opsInnerInner = @out.Shape.Dimensions[2 + limits.LongLength].Length;

                        long outerStride3 = @out.Shape.Dimensions[dimIndex0].Stride;
                        long innerStride3 = @out.Shape.Dimensions[dimIndex1].Stride;
                        long innerInnerStride3 = @out.Shape.Dimensions[dimIndex2].Stride;
                        outerStride3 -= innerStride3 * @out.Shape.Dimensions[dimIndex1].Length;
                        innerStride3 -= innerInnerStride3 * @out.Shape.Dimensions[dimIndex2].Length;

                        for (long outer = 0; outer < totalOps; outer++)
                        {
                            //Get the array offset for the first element in the outer dimension
                            long ix3 = @out.Shape[counters];

                            for (long i = 0; i < opsOuter; i++)
                            {
                                for (long j = 0; j < opsInner; j++)
                                {
                                    for (long k = 0; k < opsInnerInner; k++)
                                    {
                                        d2[ix3] = (System.Int64)(scalar);
                                        ix3 += innerInnerStride3;
                                    }

                                    ix3 += innerStride3;
                                }

                                ix3 += outerStride3;
                            }

                            if (counters.LongLength > 0)
                            {
                                //Basically a ripple carry adder
                                long p = counters.LongLength - 1;
                                while (++counters[p] == limits[p] && p > 0)
                                {
                                    counters[p] = 0;
                                    p--;
                                }
                            }
                        }
                    }
                }
            }
        }
        /// <summary>
        /// Unsafe implementation of applying a unary operation
        /// </summary>
        /// <typeparam name="C">The type of operation to perform</typeparam>
        /// <param name="op">The operation instance</param>
        /// <param name="in1">The input argument</param>
        /// <param name="out">The output target</param>
        internal static void UFunc_Op_Inner_Unary_Flush_UInt64_TypedImpl<C>(NumCIL.Int64.ToInt64 op, NdArray<System.UInt64> in1, NdArray<System.Int64> @out)
            where C : IUnaryOp<System.UInt64>
        {
            unsafe
            {
                using (var f1 = new Pinner(in1.DataAccessor))
                using (var f2 = new Pinner(@out.DataAccessor))
                {
                    var d1 = (System.UInt64*)f1.ptr;
                    var d2 = (System.Int64*)f2.ptr;

                    if (@out.Shape.Dimensions.Length == 1)
                    {
                        long totalOps = @out.Shape.Dimensions[0].Length;

                        long ix1 = in1.Shape.Offset;
                        long ix2 = @out.Shape.Offset;

                        long stride1 = in1.Shape.Dimensions[0].Stride;
                        long stride2 = @out.Shape.Dimensions[0].Stride;


                        if (stride1 == stride2 && ix1 == ix2)
                        {
                            //Best case, all are equal, just keep a single counter
                            for (long i = 0; i < totalOps; i++)
                            {
                                d2[ix1] = (System.Int64)(d1[ix1]);
                                ix1 += stride1;
                            }
                        }
                        else
                        {
                            for (long i = 0; i < totalOps; i++)
                            {
                                d2[ix2] = (System.Int64)(d1[ix1]);
                                ix1 += stride1;
                                ix2 += stride2;
                            }
                        }
                    }
                    else if (@out.Shape.Dimensions.Length == 2)
                    {
                        long opsOuter = @out.Shape.Dimensions[0].Length;
                        long opsInner = @out.Shape.Dimensions[1].Length;

                        long ix1 = in1.Shape.Offset;
                        long ix2 = @out.Shape.Offset;

                        long outerStride1 = in1.Shape.Dimensions[0].Stride;
                        long outerStride2 = @out.Shape.Dimensions[0].Stride;

                        long innerStride1 = in1.Shape.Dimensions[1].Stride;
                        long innerStride2 = @out.Shape.Dimensions[1].Stride;

                        outerStride1 -= innerStride1 * in1.Shape.Dimensions[1].Length;
                        outerStride2 -= innerStride2 * @out.Shape.Dimensions[1].Length;

                        for (long i = 0; i < opsOuter; i++)
                        {
                            for (long j = 0; j < opsInner; j++)
                            {
                                d2[ix2] = (System.Int64)(d1[ix1]);
                                ix1 += innerStride1;
                                ix2 += innerStride2;
                            }

                            ix1 += outerStride1;
                            ix2 += outerStride2;
                        }
                    }
                    else
                    {
                        long n = in1.Shape.Dimensions.LongLength - 3;
                        long[] limits = in1.Shape.Dimensions.Where(x => n-- > 0).Select(x => x.Length).ToArray();
                        long[] counters = new long[limits.LongLength];

                        long totalOps = limits.LongLength == 0 ? 1 : limits.Aggregate<long>((a, b) => a * b);

                        //This chunck of variables are used to prevent repeated calculations of offsets
                        long dimIndex0 = 0 + limits.LongLength;
                        long dimIndex1 = 1 + limits.LongLength;
                        long dimIndex2 = 2 + limits.LongLength;

                        long opsOuter = @out.Shape.Dimensions[0 + limits.LongLength].Length;
                        long opsInner = @out.Shape.Dimensions[1 + limits.LongLength].Length;
                        long opsInnerInner = @out.Shape.Dimensions[2 + limits.LongLength].Length;

                        long outerStride1 = in1.Shape.Dimensions[dimIndex0].Stride;
                        long outerStride3 = @out.Shape.Dimensions[dimIndex0].Stride;

                        long innerStride1 = in1.Shape.Dimensions[dimIndex1].Stride;
                        long innerStride3 = @out.Shape.Dimensions[dimIndex1].Stride;

                        long innerInnerStride1 = in1.Shape.Dimensions[dimIndex2].Stride;
                        long innerInnerStride3 = @out.Shape.Dimensions[dimIndex2].Stride;

                        outerStride1 -= innerStride1 * in1.Shape.Dimensions[dimIndex1].Length;
                        outerStride3 -= innerStride3 * @out.Shape.Dimensions[dimIndex1].Length;

                        innerStride1 -= innerInnerStride1 * in1.Shape.Dimensions[dimIndex2].Length;
                        innerStride3 -= innerInnerStride3 * @out.Shape.Dimensions[dimIndex2].Length;

                        for (long outer = 0; outer < totalOps; outer++)
                        {
                            //Get the array offset for the first element in the outer dimension
                            long ix1 = in1.Shape[counters];
                            long ix3 = @out.Shape[counters];


                            for (long i = 0; i < opsOuter; i++)
                            {
                                for (long j = 0; j < opsInner; j++)
                                {
                                    for (long k = 0; k < opsInnerInner; k++)
                                    {
                                        d2[ix3] = (System.Int64)(d1[ix1]);
                                        ix1 += innerInnerStride1;
                                        ix3 += innerInnerStride3;
                                    }

                                    ix1 += innerStride1;
                                    ix3 += innerStride3;
                                }

                                ix1 += outerStride1;
                                ix3 += outerStride3;
                            }

                            if (counters.LongLength > 0)
                            {
                                //Basically a ripple carry adder
                                long p = counters.LongLength - 1;
                                while (++counters[p] == limits[p] && p > 0)
                                {
                                    counters[p] = 0;
                                    p--;
                                }
                            }
                        }
                    }
                }
            }
        }

        /// <summary>
        /// Unsafe implementation of applying a unary operation
        /// </summary>
        /// <typeparam name="C">The type of operation to perform</typeparam>
        /// <param name="op">The operation instance</param>
        /// <param name="scalar">The input scalar argument</param>
        /// <param name="out">The output target</param>
        internal static void UFunc_Op_Inner_Unary_Scalar_Flush_UInt64_TypedImpl<C>(NumCIL.Int64.ToInt64 op, System.UInt64 scalar, NdArray<System.Int64> @out)
            where C : IUnaryOp<System.UInt64>
        {
            unsafe
            {
                using (var f2 = new Pinner(@out.DataAccessor))
                {
                    var d2 = (System.Int64*)f2.ptr;

                    if (@out.Shape.Dimensions.Length == 1)
                    {
                        long totalOps = @out.Shape.Dimensions[0].Length;
                        long ix2 = @out.Shape.Offset;
                        long stride2 = @out.Shape.Dimensions[0].Stride;

                        for (long i = 0; i < totalOps; i++)
                        {
                            d2[ix2] = (System.Int64)(scalar);
                            ix2 += stride2;
                        }
                    }
                    else if (@out.Shape.Dimensions.Length == 2)
                    {
                        long opsOuter = @out.Shape.Dimensions[0].Length;
                        long opsInner = @out.Shape.Dimensions[1].Length;

                        long ix2 = @out.Shape.Offset;
                        long outerStride2 = @out.Shape.Dimensions[0].Stride;
                        long innerStride2 = @out.Shape.Dimensions[1].Stride;
                        outerStride2 -= innerStride2 * @out.Shape.Dimensions[1].Length;

                        for (long i = 0; i < opsOuter; i++)
                        {
                            for (long j = 0; j < opsInner; j++)
                            {
                                d2[ix2] = (System.Int64)(scalar);
                                ix2 += innerStride2;
                            }

                            ix2 += outerStride2;
                        }
                    }
                    else
                    {
                        long n = @out.Shape.Dimensions.LongLength - 3;
                        long[] limits = @out.Shape.Dimensions.Where(x => n-- > 0).Select(x => x.Length).ToArray();
                        long[] counters = new long[limits.LongLength];

                        long totalOps = limits.LongLength == 0 ? 1 : limits.Aggregate<long>((a, b) => a * b);

                        //This chunck of variables are used to prevent repeated calculations of offsets
                        long dimIndex0 = 0 + limits.LongLength;
                        long dimIndex1 = 1 + limits.LongLength;
                        long dimIndex2 = 2 + limits.LongLength;

                        long opsOuter = @out.Shape.Dimensions[0 + limits.LongLength].Length;
                        long opsInner = @out.Shape.Dimensions[1 + limits.LongLength].Length;
                        long opsInnerInner = @out.Shape.Dimensions[2 + limits.LongLength].Length;

                        long outerStride3 = @out.Shape.Dimensions[dimIndex0].Stride;
                        long innerStride3 = @out.Shape.Dimensions[dimIndex1].Stride;
                        long innerInnerStride3 = @out.Shape.Dimensions[dimIndex2].Stride;
                        outerStride3 -= innerStride3 * @out.Shape.Dimensions[dimIndex1].Length;
                        innerStride3 -= innerInnerStride3 * @out.Shape.Dimensions[dimIndex2].Length;

                        for (long outer = 0; outer < totalOps; outer++)
                        {
                            //Get the array offset for the first element in the outer dimension
                            long ix3 = @out.Shape[counters];

                            for (long i = 0; i < opsOuter; i++)
                            {
                                for (long j = 0; j < opsInner; j++)
                                {
                                    for (long k = 0; k < opsInnerInner; k++)
                                    {
                                        d2[ix3] = (System.Int64)(scalar);
                                        ix3 += innerInnerStride3;
                                    }

                                    ix3 += innerStride3;
                                }

                                ix3 += outerStride3;
                            }

                            if (counters.LongLength > 0)
                            {
                                //Basically a ripple carry adder
                                long p = counters.LongLength - 1;
                                while (++counters[p] == limits[p] && p > 0)
                                {
                                    counters[p] = 0;
                                    p--;
                                }
                            }
                        }
                    }
                }
            }
        }
        /// <summary>
        /// Unsafe implementation of applying a unary operation
        /// </summary>
        /// <typeparam name="C">The type of operation to perform</typeparam>
        /// <param name="op">The operation instance</param>
        /// <param name="in1">The input argument</param>
        /// <param name="out">The output target</param>
        internal static void UFunc_Op_Inner_Unary_Flush_Single_TypedImpl<C>(NumCIL.Int64.ToInt64 op, NdArray<System.Single> in1, NdArray<System.Int64> @out)
            where C : IUnaryOp<System.Single>
        {
            unsafe
            {
                using (var f1 = new Pinner(in1.DataAccessor))
                using (var f2 = new Pinner(@out.DataAccessor))
                {
                    var d1 = (System.Single*)f1.ptr;
                    var d2 = (System.Int64*)f2.ptr;

                    if (@out.Shape.Dimensions.Length == 1)
                    {
                        long totalOps = @out.Shape.Dimensions[0].Length;

                        long ix1 = in1.Shape.Offset;
                        long ix2 = @out.Shape.Offset;

                        long stride1 = in1.Shape.Dimensions[0].Stride;
                        long stride2 = @out.Shape.Dimensions[0].Stride;


                        if (stride1 == stride2 && ix1 == ix2)
                        {
                            //Best case, all are equal, just keep a single counter
                            for (long i = 0; i < totalOps; i++)
                            {
                                d2[ix1] = (System.Int64)(d1[ix1]);
                                ix1 += stride1;
                            }
                        }
                        else
                        {
                            for (long i = 0; i < totalOps; i++)
                            {
                                d2[ix2] = (System.Int64)(d1[ix1]);
                                ix1 += stride1;
                                ix2 += stride2;
                            }
                        }
                    }
                    else if (@out.Shape.Dimensions.Length == 2)
                    {
                        long opsOuter = @out.Shape.Dimensions[0].Length;
                        long opsInner = @out.Shape.Dimensions[1].Length;

                        long ix1 = in1.Shape.Offset;
                        long ix2 = @out.Shape.Offset;

                        long outerStride1 = in1.Shape.Dimensions[0].Stride;
                        long outerStride2 = @out.Shape.Dimensions[0].Stride;

                        long innerStride1 = in1.Shape.Dimensions[1].Stride;
                        long innerStride2 = @out.Shape.Dimensions[1].Stride;

                        outerStride1 -= innerStride1 * in1.Shape.Dimensions[1].Length;
                        outerStride2 -= innerStride2 * @out.Shape.Dimensions[1].Length;

                        for (long i = 0; i < opsOuter; i++)
                        {
                            for (long j = 0; j < opsInner; j++)
                            {
                                d2[ix2] = (System.Int64)(d1[ix1]);
                                ix1 += innerStride1;
                                ix2 += innerStride2;
                            }

                            ix1 += outerStride1;
                            ix2 += outerStride2;
                        }
                    }
                    else
                    {
                        long n = in1.Shape.Dimensions.LongLength - 3;
                        long[] limits = in1.Shape.Dimensions.Where(x => n-- > 0).Select(x => x.Length).ToArray();
                        long[] counters = new long[limits.LongLength];

                        long totalOps = limits.LongLength == 0 ? 1 : limits.Aggregate<long>((a, b) => a * b);

                        //This chunck of variables are used to prevent repeated calculations of offsets
                        long dimIndex0 = 0 + limits.LongLength;
                        long dimIndex1 = 1 + limits.LongLength;
                        long dimIndex2 = 2 + limits.LongLength;

                        long opsOuter = @out.Shape.Dimensions[0 + limits.LongLength].Length;
                        long opsInner = @out.Shape.Dimensions[1 + limits.LongLength].Length;
                        long opsInnerInner = @out.Shape.Dimensions[2 + limits.LongLength].Length;

                        long outerStride1 = in1.Shape.Dimensions[dimIndex0].Stride;
                        long outerStride3 = @out.Shape.Dimensions[dimIndex0].Stride;

                        long innerStride1 = in1.Shape.Dimensions[dimIndex1].Stride;
                        long innerStride3 = @out.Shape.Dimensions[dimIndex1].Stride;

                        long innerInnerStride1 = in1.Shape.Dimensions[dimIndex2].Stride;
                        long innerInnerStride3 = @out.Shape.Dimensions[dimIndex2].Stride;

                        outerStride1 -= innerStride1 * in1.Shape.Dimensions[dimIndex1].Length;
                        outerStride3 -= innerStride3 * @out.Shape.Dimensions[dimIndex1].Length;

                        innerStride1 -= innerInnerStride1 * in1.Shape.Dimensions[dimIndex2].Length;
                        innerStride3 -= innerInnerStride3 * @out.Shape.Dimensions[dimIndex2].Length;

                        for (long outer = 0; outer < totalOps; outer++)
                        {
                            //Get the array offset for the first element in the outer dimension
                            long ix1 = in1.Shape[counters];
                            long ix3 = @out.Shape[counters];


                            for (long i = 0; i < opsOuter; i++)
                            {
                                for (long j = 0; j < opsInner; j++)
                                {
                                    for (long k = 0; k < opsInnerInner; k++)
                                    {
                                        d2[ix3] = (System.Int64)(d1[ix1]);
                                        ix1 += innerInnerStride1;
                                        ix3 += innerInnerStride3;
                                    }

                                    ix1 += innerStride1;
                                    ix3 += innerStride3;
                                }

                                ix1 += outerStride1;
                                ix3 += outerStride3;
                            }

                            if (counters.LongLength > 0)
                            {
                                //Basically a ripple carry adder
                                long p = counters.LongLength - 1;
                                while (++counters[p] == limits[p] && p > 0)
                                {
                                    counters[p] = 0;
                                    p--;
                                }
                            }
                        }
                    }
                }
            }
        }

        /// <summary>
        /// Unsafe implementation of applying a unary operation
        /// </summary>
        /// <typeparam name="C">The type of operation to perform</typeparam>
        /// <param name="op">The operation instance</param>
        /// <param name="scalar">The input scalar argument</param>
        /// <param name="out">The output target</param>
        internal static void UFunc_Op_Inner_Unary_Scalar_Flush_Single_TypedImpl<C>(NumCIL.Int64.ToInt64 op, System.Single scalar, NdArray<System.Int64> @out)
            where C : IUnaryOp<System.Single>
        {
            unsafe
            {
                using (var f2 = new Pinner(@out.DataAccessor))
                {
                    var d2 = (System.Int64*)f2.ptr;

                    if (@out.Shape.Dimensions.Length == 1)
                    {
                        long totalOps = @out.Shape.Dimensions[0].Length;
                        long ix2 = @out.Shape.Offset;
                        long stride2 = @out.Shape.Dimensions[0].Stride;

                        for (long i = 0; i < totalOps; i++)
                        {
                            d2[ix2] = (System.Int64)(scalar);
                            ix2 += stride2;
                        }
                    }
                    else if (@out.Shape.Dimensions.Length == 2)
                    {
                        long opsOuter = @out.Shape.Dimensions[0].Length;
                        long opsInner = @out.Shape.Dimensions[1].Length;

                        long ix2 = @out.Shape.Offset;
                        long outerStride2 = @out.Shape.Dimensions[0].Stride;
                        long innerStride2 = @out.Shape.Dimensions[1].Stride;
                        outerStride2 -= innerStride2 * @out.Shape.Dimensions[1].Length;

                        for (long i = 0; i < opsOuter; i++)
                        {
                            for (long j = 0; j < opsInner; j++)
                            {
                                d2[ix2] = (System.Int64)(scalar);
                                ix2 += innerStride2;
                            }

                            ix2 += outerStride2;
                        }
                    }
                    else
                    {
                        long n = @out.Shape.Dimensions.LongLength - 3;
                        long[] limits = @out.Shape.Dimensions.Where(x => n-- > 0).Select(x => x.Length).ToArray();
                        long[] counters = new long[limits.LongLength];

                        long totalOps = limits.LongLength == 0 ? 1 : limits.Aggregate<long>((a, b) => a * b);

                        //This chunck of variables are used to prevent repeated calculations of offsets
                        long dimIndex0 = 0 + limits.LongLength;
                        long dimIndex1 = 1 + limits.LongLength;
                        long dimIndex2 = 2 + limits.LongLength;

                        long opsOuter = @out.Shape.Dimensions[0 + limits.LongLength].Length;
                        long opsInner = @out.Shape.Dimensions[1 + limits.LongLength].Length;
                        long opsInnerInner = @out.Shape.Dimensions[2 + limits.LongLength].Length;

                        long outerStride3 = @out.Shape.Dimensions[dimIndex0].Stride;
                        long innerStride3 = @out.Shape.Dimensions[dimIndex1].Stride;
                        long innerInnerStride3 = @out.Shape.Dimensions[dimIndex2].Stride;
                        outerStride3 -= innerStride3 * @out.Shape.Dimensions[dimIndex1].Length;
                        innerStride3 -= innerInnerStride3 * @out.Shape.Dimensions[dimIndex2].Length;

                        for (long outer = 0; outer < totalOps; outer++)
                        {
                            //Get the array offset for the first element in the outer dimension
                            long ix3 = @out.Shape[counters];

                            for (long i = 0; i < opsOuter; i++)
                            {
                                for (long j = 0; j < opsInner; j++)
                                {
                                    for (long k = 0; k < opsInnerInner; k++)
                                    {
                                        d2[ix3] = (System.Int64)(scalar);
                                        ix3 += innerInnerStride3;
                                    }

                                    ix3 += innerStride3;
                                }

                                ix3 += outerStride3;
                            }

                            if (counters.LongLength > 0)
                            {
                                //Basically a ripple carry adder
                                long p = counters.LongLength - 1;
                                while (++counters[p] == limits[p] && p > 0)
                                {
                                    counters[p] = 0;
                                    p--;
                                }
                            }
                        }
                    }
                }
            }
        }
        /// <summary>
        /// Unsafe implementation of applying a unary operation
        /// </summary>
        /// <typeparam name="C">The type of operation to perform</typeparam>
        /// <param name="op">The operation instance</param>
        /// <param name="in1">The input argument</param>
        /// <param name="out">The output target</param>
        internal static void UFunc_Op_Inner_Unary_Flush_Double_TypedImpl<C>(NumCIL.Int64.ToInt64 op, NdArray<System.Double> in1, NdArray<System.Int64> @out)
            where C : IUnaryOp<System.Double>
        {
            unsafe
            {
                using (var f1 = new Pinner(in1.DataAccessor))
                using (var f2 = new Pinner(@out.DataAccessor))
                {
                    var d1 = (System.Double*)f1.ptr;
                    var d2 = (System.Int64*)f2.ptr;

                    if (@out.Shape.Dimensions.Length == 1)
                    {
                        long totalOps = @out.Shape.Dimensions[0].Length;

                        long ix1 = in1.Shape.Offset;
                        long ix2 = @out.Shape.Offset;

                        long stride1 = in1.Shape.Dimensions[0].Stride;
                        long stride2 = @out.Shape.Dimensions[0].Stride;


                        if (stride1 == stride2 && ix1 == ix2)
                        {
                            //Best case, all are equal, just keep a single counter
                            for (long i = 0; i < totalOps; i++)
                            {
                                d2[ix1] = (System.Int64)(d1[ix1]);
                                ix1 += stride1;
                            }
                        }
                        else
                        {
                            for (long i = 0; i < totalOps; i++)
                            {
                                d2[ix2] = (System.Int64)(d1[ix1]);
                                ix1 += stride1;
                                ix2 += stride2;
                            }
                        }
                    }
                    else if (@out.Shape.Dimensions.Length == 2)
                    {
                        long opsOuter = @out.Shape.Dimensions[0].Length;
                        long opsInner = @out.Shape.Dimensions[1].Length;

                        long ix1 = in1.Shape.Offset;
                        long ix2 = @out.Shape.Offset;

                        long outerStride1 = in1.Shape.Dimensions[0].Stride;
                        long outerStride2 = @out.Shape.Dimensions[0].Stride;

                        long innerStride1 = in1.Shape.Dimensions[1].Stride;
                        long innerStride2 = @out.Shape.Dimensions[1].Stride;

                        outerStride1 -= innerStride1 * in1.Shape.Dimensions[1].Length;
                        outerStride2 -= innerStride2 * @out.Shape.Dimensions[1].Length;

                        for (long i = 0; i < opsOuter; i++)
                        {
                            for (long j = 0; j < opsInner; j++)
                            {
                                d2[ix2] = (System.Int64)(d1[ix1]);
                                ix1 += innerStride1;
                                ix2 += innerStride2;
                            }

                            ix1 += outerStride1;
                            ix2 += outerStride2;
                        }
                    }
                    else
                    {
                        long n = in1.Shape.Dimensions.LongLength - 3;
                        long[] limits = in1.Shape.Dimensions.Where(x => n-- > 0).Select(x => x.Length).ToArray();
                        long[] counters = new long[limits.LongLength];

                        long totalOps = limits.LongLength == 0 ? 1 : limits.Aggregate<long>((a, b) => a * b);

                        //This chunck of variables are used to prevent repeated calculations of offsets
                        long dimIndex0 = 0 + limits.LongLength;
                        long dimIndex1 = 1 + limits.LongLength;
                        long dimIndex2 = 2 + limits.LongLength;

                        long opsOuter = @out.Shape.Dimensions[0 + limits.LongLength].Length;
                        long opsInner = @out.Shape.Dimensions[1 + limits.LongLength].Length;
                        long opsInnerInner = @out.Shape.Dimensions[2 + limits.LongLength].Length;

                        long outerStride1 = in1.Shape.Dimensions[dimIndex0].Stride;
                        long outerStride3 = @out.Shape.Dimensions[dimIndex0].Stride;

                        long innerStride1 = in1.Shape.Dimensions[dimIndex1].Stride;
                        long innerStride3 = @out.Shape.Dimensions[dimIndex1].Stride;

                        long innerInnerStride1 = in1.Shape.Dimensions[dimIndex2].Stride;
                        long innerInnerStride3 = @out.Shape.Dimensions[dimIndex2].Stride;

                        outerStride1 -= innerStride1 * in1.Shape.Dimensions[dimIndex1].Length;
                        outerStride3 -= innerStride3 * @out.Shape.Dimensions[dimIndex1].Length;

                        innerStride1 -= innerInnerStride1 * in1.Shape.Dimensions[dimIndex2].Length;
                        innerStride3 -= innerInnerStride3 * @out.Shape.Dimensions[dimIndex2].Length;

                        for (long outer = 0; outer < totalOps; outer++)
                        {
                            //Get the array offset for the first element in the outer dimension
                            long ix1 = in1.Shape[counters];
                            long ix3 = @out.Shape[counters];


                            for (long i = 0; i < opsOuter; i++)
                            {
                                for (long j = 0; j < opsInner; j++)
                                {
                                    for (long k = 0; k < opsInnerInner; k++)
                                    {
                                        d2[ix3] = (System.Int64)(d1[ix1]);
                                        ix1 += innerInnerStride1;
                                        ix3 += innerInnerStride3;
                                    }

                                    ix1 += innerStride1;
                                    ix3 += innerStride3;
                                }

                                ix1 += outerStride1;
                                ix3 += outerStride3;
                            }

                            if (counters.LongLength > 0)
                            {
                                //Basically a ripple carry adder
                                long p = counters.LongLength - 1;
                                while (++counters[p] == limits[p] && p > 0)
                                {
                                    counters[p] = 0;
                                    p--;
                                }
                            }
                        }
                    }
                }
            }
        }

        /// <summary>
        /// Unsafe implementation of applying a unary operation
        /// </summary>
        /// <typeparam name="C">The type of operation to perform</typeparam>
        /// <param name="op">The operation instance</param>
        /// <param name="scalar">The input scalar argument</param>
        /// <param name="out">The output target</param>
        internal static void UFunc_Op_Inner_Unary_Scalar_Flush_Double_TypedImpl<C>(NumCIL.Int64.ToInt64 op, System.Double scalar, NdArray<System.Int64> @out)
            where C : IUnaryOp<System.Double>
        {
            unsafe
            {
                using (var f2 = new Pinner(@out.DataAccessor))
                {
                    var d2 = (System.Int64*)f2.ptr;

                    if (@out.Shape.Dimensions.Length == 1)
                    {
                        long totalOps = @out.Shape.Dimensions[0].Length;
                        long ix2 = @out.Shape.Offset;
                        long stride2 = @out.Shape.Dimensions[0].Stride;

                        for (long i = 0; i < totalOps; i++)
                        {
                            d2[ix2] = (System.Int64)(scalar);
                            ix2 += stride2;
                        }
                    }
                    else if (@out.Shape.Dimensions.Length == 2)
                    {
                        long opsOuter = @out.Shape.Dimensions[0].Length;
                        long opsInner = @out.Shape.Dimensions[1].Length;

                        long ix2 = @out.Shape.Offset;
                        long outerStride2 = @out.Shape.Dimensions[0].Stride;
                        long innerStride2 = @out.Shape.Dimensions[1].Stride;
                        outerStride2 -= innerStride2 * @out.Shape.Dimensions[1].Length;

                        for (long i = 0; i < opsOuter; i++)
                        {
                            for (long j = 0; j < opsInner; j++)
                            {
                                d2[ix2] = (System.Int64)(scalar);
                                ix2 += innerStride2;
                            }

                            ix2 += outerStride2;
                        }
                    }
                    else
                    {
                        long n = @out.Shape.Dimensions.LongLength - 3;
                        long[] limits = @out.Shape.Dimensions.Where(x => n-- > 0).Select(x => x.Length).ToArray();
                        long[] counters = new long[limits.LongLength];

                        long totalOps = limits.LongLength == 0 ? 1 : limits.Aggregate<long>((a, b) => a * b);

                        //This chunck of variables are used to prevent repeated calculations of offsets
                        long dimIndex0 = 0 + limits.LongLength;
                        long dimIndex1 = 1 + limits.LongLength;
                        long dimIndex2 = 2 + limits.LongLength;

                        long opsOuter = @out.Shape.Dimensions[0 + limits.LongLength].Length;
                        long opsInner = @out.Shape.Dimensions[1 + limits.LongLength].Length;
                        long opsInnerInner = @out.Shape.Dimensions[2 + limits.LongLength].Length;

                        long outerStride3 = @out.Shape.Dimensions[dimIndex0].Stride;
                        long innerStride3 = @out.Shape.Dimensions[dimIndex1].Stride;
                        long innerInnerStride3 = @out.Shape.Dimensions[dimIndex2].Stride;
                        outerStride3 -= innerStride3 * @out.Shape.Dimensions[dimIndex1].Length;
                        innerStride3 -= innerInnerStride3 * @out.Shape.Dimensions[dimIndex2].Length;

                        for (long outer = 0; outer < totalOps; outer++)
                        {
                            //Get the array offset for the first element in the outer dimension
                            long ix3 = @out.Shape[counters];

                            for (long i = 0; i < opsOuter; i++)
                            {
                                for (long j = 0; j < opsInner; j++)
                                {
                                    for (long k = 0; k < opsInnerInner; k++)
                                    {
                                        d2[ix3] = (System.Int64)(scalar);
                                        ix3 += innerInnerStride3;
                                    }

                                    ix3 += innerStride3;
                                }

                                ix3 += outerStride3;
                            }

                            if (counters.LongLength > 0)
                            {
                                //Basically a ripple carry adder
                                long p = counters.LongLength - 1;
                                while (++counters[p] == limits[p] && p > 0)
                                {
                                    counters[p] = 0;
                                    p--;
                                }
                            }
                        }
                    }
                }
            }
        }
        /// <summary>
        /// Unsafe implementation of applying a unary operation
        /// </summary>
        /// <typeparam name="C">The type of operation to perform</typeparam>
        /// <param name="op">The operation instance</param>
        /// <param name="in1">The input argument</param>
        /// <param name="out">The output target</param>
        internal static void UFunc_Op_Inner_Unary_Flush_Boolean_TypedImpl<C>(NumCIL.Boolean.ToInt64 op, NdArray<System.Boolean> in1, NdArray<System.Int64> @out)
            where C : IUnaryOp<System.Boolean>
        {
            unsafe
            {
                using (var f1 = new Pinner(in1.DataAccessor))
                using (var f2 = new Pinner(@out.DataAccessor))
                {
                    var d1 = (System.Boolean*)f1.ptr;
                    var d2 = (System.Int64*)f2.ptr;

                    if (@out.Shape.Dimensions.Length == 1)
                    {
                        long totalOps = @out.Shape.Dimensions[0].Length;

                        long ix1 = in1.Shape.Offset;
                        long ix2 = @out.Shape.Offset;

                        long stride1 = in1.Shape.Dimensions[0].Stride;
                        long stride2 = @out.Shape.Dimensions[0].Stride;


                        if (stride1 == stride2 && ix1 == ix2)
                        {
                            //Best case, all are equal, just keep a single counter
                            for (long i = 0; i < totalOps; i++)
                            {
                                d2[ix1] = (System.Int64)(d1[ix1] ? 1 : 0 );
                                ix1 += stride1;
                            }
                        }
                        else
                        {
                            for (long i = 0; i < totalOps; i++)
                            {
                                d2[ix2] = (System.Int64)(d1[ix1] ? 1 : 0 );
                                ix1 += stride1;
                                ix2 += stride2;
                            }
                        }
                    }
                    else if (@out.Shape.Dimensions.Length == 2)
                    {
                        long opsOuter = @out.Shape.Dimensions[0].Length;
                        long opsInner = @out.Shape.Dimensions[1].Length;

                        long ix1 = in1.Shape.Offset;
                        long ix2 = @out.Shape.Offset;

                        long outerStride1 = in1.Shape.Dimensions[0].Stride;
                        long outerStride2 = @out.Shape.Dimensions[0].Stride;

                        long innerStride1 = in1.Shape.Dimensions[1].Stride;
                        long innerStride2 = @out.Shape.Dimensions[1].Stride;

                        outerStride1 -= innerStride1 * in1.Shape.Dimensions[1].Length;
                        outerStride2 -= innerStride2 * @out.Shape.Dimensions[1].Length;

                        for (long i = 0; i < opsOuter; i++)
                        {
                            for (long j = 0; j < opsInner; j++)
                            {
                                d2[ix2] = (System.Int64)(d1[ix1] ? 1 : 0 );
                                ix1 += innerStride1;
                                ix2 += innerStride2;
                            }

                            ix1 += outerStride1;
                            ix2 += outerStride2;
                        }
                    }
                    else
                    {
                        long n = in1.Shape.Dimensions.LongLength - 3;
                        long[] limits = in1.Shape.Dimensions.Where(x => n-- > 0).Select(x => x.Length).ToArray();
                        long[] counters = new long[limits.LongLength];

                        long totalOps = limits.LongLength == 0 ? 1 : limits.Aggregate<long>((a, b) => a * b);

                        //This chunck of variables are used to prevent repeated calculations of offsets
                        long dimIndex0 = 0 + limits.LongLength;
                        long dimIndex1 = 1 + limits.LongLength;
                        long dimIndex2 = 2 + limits.LongLength;

                        long opsOuter = @out.Shape.Dimensions[0 + limits.LongLength].Length;
                        long opsInner = @out.Shape.Dimensions[1 + limits.LongLength].Length;
                        long opsInnerInner = @out.Shape.Dimensions[2 + limits.LongLength].Length;

                        long outerStride1 = in1.Shape.Dimensions[dimIndex0].Stride;
                        long outerStride3 = @out.Shape.Dimensions[dimIndex0].Stride;

                        long innerStride1 = in1.Shape.Dimensions[dimIndex1].Stride;
                        long innerStride3 = @out.Shape.Dimensions[dimIndex1].Stride;

                        long innerInnerStride1 = in1.Shape.Dimensions[dimIndex2].Stride;
                        long innerInnerStride3 = @out.Shape.Dimensions[dimIndex2].Stride;

                        outerStride1 -= innerStride1 * in1.Shape.Dimensions[dimIndex1].Length;
                        outerStride3 -= innerStride3 * @out.Shape.Dimensions[dimIndex1].Length;

                        innerStride1 -= innerInnerStride1 * in1.Shape.Dimensions[dimIndex2].Length;
                        innerStride3 -= innerInnerStride3 * @out.Shape.Dimensions[dimIndex2].Length;

                        for (long outer = 0; outer < totalOps; outer++)
                        {
                            //Get the array offset for the first element in the outer dimension
                            long ix1 = in1.Shape[counters];
                            long ix3 = @out.Shape[counters];


                            for (long i = 0; i < opsOuter; i++)
                            {
                                for (long j = 0; j < opsInner; j++)
                                {
                                    for (long k = 0; k < opsInnerInner; k++)
                                    {
                                        d2[ix3] = (System.Int64)(d1[ix1] ? 1 : 0 );
                                        ix1 += innerInnerStride1;
                                        ix3 += innerInnerStride3;
                                    }

                                    ix1 += innerStride1;
                                    ix3 += innerStride3;
                                }

                                ix1 += outerStride1;
                                ix3 += outerStride3;
                            }

                            if (counters.LongLength > 0)
                            {
                                //Basically a ripple carry adder
                                long p = counters.LongLength - 1;
                                while (++counters[p] == limits[p] && p > 0)
                                {
                                    counters[p] = 0;
                                    p--;
                                }
                            }
                        }
                    }
                }
            }
        }

        /// <summary>
        /// Unsafe implementation of applying a unary operation
        /// </summary>
        /// <typeparam name="C">The type of operation to perform</typeparam>
        /// <param name="op">The operation instance</param>
        /// <param name="scalar">The input scalar argument</param>
        /// <param name="out">The output target</param>
        internal static void UFunc_Op_Inner_Unary_Scalar_Flush_Boolean_TypedImpl<C>(NumCIL.Boolean.ToInt64 op, System.Boolean scalar, NdArray<System.Int64> @out)
            where C : IUnaryOp<System.Boolean>
        {
            unsafe
            {
                using (var f2 = new Pinner(@out.DataAccessor))
                {
                    var d2 = (System.Int64*)f2.ptr;

                    if (@out.Shape.Dimensions.Length == 1)
                    {
                        long totalOps = @out.Shape.Dimensions[0].Length;
                        long ix2 = @out.Shape.Offset;
                        long stride2 = @out.Shape.Dimensions[0].Stride;

                        for (long i = 0; i < totalOps; i++)
                        {
                            d2[ix2] = (System.Int64)(scalar ? 1 : 0 );
                            ix2 += stride2;
                        }
                    }
                    else if (@out.Shape.Dimensions.Length == 2)
                    {
                        long opsOuter = @out.Shape.Dimensions[0].Length;
                        long opsInner = @out.Shape.Dimensions[1].Length;

                        long ix2 = @out.Shape.Offset;
                        long outerStride2 = @out.Shape.Dimensions[0].Stride;
                        long innerStride2 = @out.Shape.Dimensions[1].Stride;
                        outerStride2 -= innerStride2 * @out.Shape.Dimensions[1].Length;

                        for (long i = 0; i < opsOuter; i++)
                        {
                            for (long j = 0; j < opsInner; j++)
                            {
                                d2[ix2] = (System.Int64)(scalar ? 1 : 0 );
                                ix2 += innerStride2;
                            }

                            ix2 += outerStride2;
                        }
                    }
                    else
                    {
                        long n = @out.Shape.Dimensions.LongLength - 3;
                        long[] limits = @out.Shape.Dimensions.Where(x => n-- > 0).Select(x => x.Length).ToArray();
                        long[] counters = new long[limits.LongLength];

                        long totalOps = limits.LongLength == 0 ? 1 : limits.Aggregate<long>((a, b) => a * b);

                        //This chunck of variables are used to prevent repeated calculations of offsets
                        long dimIndex0 = 0 + limits.LongLength;
                        long dimIndex1 = 1 + limits.LongLength;
                        long dimIndex2 = 2 + limits.LongLength;

                        long opsOuter = @out.Shape.Dimensions[0 + limits.LongLength].Length;
                        long opsInner = @out.Shape.Dimensions[1 + limits.LongLength].Length;
                        long opsInnerInner = @out.Shape.Dimensions[2 + limits.LongLength].Length;

                        long outerStride3 = @out.Shape.Dimensions[dimIndex0].Stride;
                        long innerStride3 = @out.Shape.Dimensions[dimIndex1].Stride;
                        long innerInnerStride3 = @out.Shape.Dimensions[dimIndex2].Stride;
                        outerStride3 -= innerStride3 * @out.Shape.Dimensions[dimIndex1].Length;
                        innerStride3 -= innerInnerStride3 * @out.Shape.Dimensions[dimIndex2].Length;

                        for (long outer = 0; outer < totalOps; outer++)
                        {
                            //Get the array offset for the first element in the outer dimension
                            long ix3 = @out.Shape[counters];

                            for (long i = 0; i < opsOuter; i++)
                            {
                                for (long j = 0; j < opsInner; j++)
                                {
                                    for (long k = 0; k < opsInnerInner; k++)
                                    {
                                        d2[ix3] = (System.Int64)(scalar ? 1 : 0 );
                                        ix3 += innerInnerStride3;
                                    }

                                    ix3 += innerStride3;
                                }

                                ix3 += outerStride3;
                            }

                            if (counters.LongLength > 0)
                            {
                                //Basically a ripple carry adder
                                long p = counters.LongLength - 1;
                                while (++counters[p] == limits[p] && p > 0)
                                {
                                    counters[p] = 0;
                                    p--;
                                }
                            }
                        }
                    }
                }
            }
        }
        /// <summary>
        /// Unsafe implementation of applying a unary operation
        /// </summary>
        /// <typeparam name="C">The type of operation to perform</typeparam>
        /// <param name="op">The operation instance</param>
        /// <param name="in1">The input argument</param>
        /// <param name="out">The output target</param>
        internal static void UFunc_Op_Inner_Unary_Flush_SByte_TypedImpl<C>(NumCIL.UInt64.ToUInt64 op, NdArray<System.SByte> in1, NdArray<System.UInt64> @out)
            where C : IUnaryOp<System.SByte>
        {
            unsafe
            {
                using (var f1 = new Pinner(in1.DataAccessor))
                using (var f2 = new Pinner(@out.DataAccessor))
                {
                    var d1 = (System.SByte*)f1.ptr;
                    var d2 = (System.UInt64*)f2.ptr;

                    if (@out.Shape.Dimensions.Length == 1)
                    {
                        long totalOps = @out.Shape.Dimensions[0].Length;

                        long ix1 = in1.Shape.Offset;
                        long ix2 = @out.Shape.Offset;

                        long stride1 = in1.Shape.Dimensions[0].Stride;
                        long stride2 = @out.Shape.Dimensions[0].Stride;


                        if (stride1 == stride2 && ix1 == ix2)
                        {
                            //Best case, all are equal, just keep a single counter
                            for (long i = 0; i < totalOps; i++)
                            {
                                d2[ix1] = (System.UInt64)(d1[ix1]);
                                ix1 += stride1;
                            }
                        }
                        else
                        {
                            for (long i = 0; i < totalOps; i++)
                            {
                                d2[ix2] = (System.UInt64)(d1[ix1]);
                                ix1 += stride1;
                                ix2 += stride2;
                            }
                        }
                    }
                    else if (@out.Shape.Dimensions.Length == 2)
                    {
                        long opsOuter = @out.Shape.Dimensions[0].Length;
                        long opsInner = @out.Shape.Dimensions[1].Length;

                        long ix1 = in1.Shape.Offset;
                        long ix2 = @out.Shape.Offset;

                        long outerStride1 = in1.Shape.Dimensions[0].Stride;
                        long outerStride2 = @out.Shape.Dimensions[0].Stride;

                        long innerStride1 = in1.Shape.Dimensions[1].Stride;
                        long innerStride2 = @out.Shape.Dimensions[1].Stride;

                        outerStride1 -= innerStride1 * in1.Shape.Dimensions[1].Length;
                        outerStride2 -= innerStride2 * @out.Shape.Dimensions[1].Length;

                        for (long i = 0; i < opsOuter; i++)
                        {
                            for (long j = 0; j < opsInner; j++)
                            {
                                d2[ix2] = (System.UInt64)(d1[ix1]);
                                ix1 += innerStride1;
                                ix2 += innerStride2;
                            }

                            ix1 += outerStride1;
                            ix2 += outerStride2;
                        }
                    }
                    else
                    {
                        long n = in1.Shape.Dimensions.LongLength - 3;
                        long[] limits = in1.Shape.Dimensions.Where(x => n-- > 0).Select(x => x.Length).ToArray();
                        long[] counters = new long[limits.LongLength];

                        long totalOps = limits.LongLength == 0 ? 1 : limits.Aggregate<long>((a, b) => a * b);

                        //This chunck of variables are used to prevent repeated calculations of offsets
                        long dimIndex0 = 0 + limits.LongLength;
                        long dimIndex1 = 1 + limits.LongLength;
                        long dimIndex2 = 2 + limits.LongLength;

                        long opsOuter = @out.Shape.Dimensions[0 + limits.LongLength].Length;
                        long opsInner = @out.Shape.Dimensions[1 + limits.LongLength].Length;
                        long opsInnerInner = @out.Shape.Dimensions[2 + limits.LongLength].Length;

                        long outerStride1 = in1.Shape.Dimensions[dimIndex0].Stride;
                        long outerStride3 = @out.Shape.Dimensions[dimIndex0].Stride;

                        long innerStride1 = in1.Shape.Dimensions[dimIndex1].Stride;
                        long innerStride3 = @out.Shape.Dimensions[dimIndex1].Stride;

                        long innerInnerStride1 = in1.Shape.Dimensions[dimIndex2].Stride;
                        long innerInnerStride3 = @out.Shape.Dimensions[dimIndex2].Stride;

                        outerStride1 -= innerStride1 * in1.Shape.Dimensions[dimIndex1].Length;
                        outerStride3 -= innerStride3 * @out.Shape.Dimensions[dimIndex1].Length;

                        innerStride1 -= innerInnerStride1 * in1.Shape.Dimensions[dimIndex2].Length;
                        innerStride3 -= innerInnerStride3 * @out.Shape.Dimensions[dimIndex2].Length;

                        for (long outer = 0; outer < totalOps; outer++)
                        {
                            //Get the array offset for the first element in the outer dimension
                            long ix1 = in1.Shape[counters];
                            long ix3 = @out.Shape[counters];


                            for (long i = 0; i < opsOuter; i++)
                            {
                                for (long j = 0; j < opsInner; j++)
                                {
                                    for (long k = 0; k < opsInnerInner; k++)
                                    {
                                        d2[ix3] = (System.UInt64)(d1[ix1]);
                                        ix1 += innerInnerStride1;
                                        ix3 += innerInnerStride3;
                                    }

                                    ix1 += innerStride1;
                                    ix3 += innerStride3;
                                }

                                ix1 += outerStride1;
                                ix3 += outerStride3;
                            }

                            if (counters.LongLength > 0)
                            {
                                //Basically a ripple carry adder
                                long p = counters.LongLength - 1;
                                while (++counters[p] == limits[p] && p > 0)
                                {
                                    counters[p] = 0;
                                    p--;
                                }
                            }
                        }
                    }
                }
            }
        }

        /// <summary>
        /// Unsafe implementation of applying a unary operation
        /// </summary>
        /// <typeparam name="C">The type of operation to perform</typeparam>
        /// <param name="op">The operation instance</param>
        /// <param name="scalar">The input scalar argument</param>
        /// <param name="out">The output target</param>
        internal static void UFunc_Op_Inner_Unary_Scalar_Flush_SByte_TypedImpl<C>(NumCIL.UInt64.ToUInt64 op, System.SByte scalar, NdArray<System.UInt64> @out)
            where C : IUnaryOp<System.SByte>
        {
            unsafe
            {
                using (var f2 = new Pinner(@out.DataAccessor))
                {
                    var d2 = (System.UInt64*)f2.ptr;

                    if (@out.Shape.Dimensions.Length == 1)
                    {
                        long totalOps = @out.Shape.Dimensions[0].Length;
                        long ix2 = @out.Shape.Offset;
                        long stride2 = @out.Shape.Dimensions[0].Stride;

                        for (long i = 0; i < totalOps; i++)
                        {
                            d2[ix2] = (System.UInt64)(scalar);
                            ix2 += stride2;
                        }
                    }
                    else if (@out.Shape.Dimensions.Length == 2)
                    {
                        long opsOuter = @out.Shape.Dimensions[0].Length;
                        long opsInner = @out.Shape.Dimensions[1].Length;

                        long ix2 = @out.Shape.Offset;
                        long outerStride2 = @out.Shape.Dimensions[0].Stride;
                        long innerStride2 = @out.Shape.Dimensions[1].Stride;
                        outerStride2 -= innerStride2 * @out.Shape.Dimensions[1].Length;

                        for (long i = 0; i < opsOuter; i++)
                        {
                            for (long j = 0; j < opsInner; j++)
                            {
                                d2[ix2] = (System.UInt64)(scalar);
                                ix2 += innerStride2;
                            }

                            ix2 += outerStride2;
                        }
                    }
                    else
                    {
                        long n = @out.Shape.Dimensions.LongLength - 3;
                        long[] limits = @out.Shape.Dimensions.Where(x => n-- > 0).Select(x => x.Length).ToArray();
                        long[] counters = new long[limits.LongLength];

                        long totalOps = limits.LongLength == 0 ? 1 : limits.Aggregate<long>((a, b) => a * b);

                        //This chunck of variables are used to prevent repeated calculations of offsets
                        long dimIndex0 = 0 + limits.LongLength;
                        long dimIndex1 = 1 + limits.LongLength;
                        long dimIndex2 = 2 + limits.LongLength;

                        long opsOuter = @out.Shape.Dimensions[0 + limits.LongLength].Length;
                        long opsInner = @out.Shape.Dimensions[1 + limits.LongLength].Length;
                        long opsInnerInner = @out.Shape.Dimensions[2 + limits.LongLength].Length;

                        long outerStride3 = @out.Shape.Dimensions[dimIndex0].Stride;
                        long innerStride3 = @out.Shape.Dimensions[dimIndex1].Stride;
                        long innerInnerStride3 = @out.Shape.Dimensions[dimIndex2].Stride;
                        outerStride3 -= innerStride3 * @out.Shape.Dimensions[dimIndex1].Length;
                        innerStride3 -= innerInnerStride3 * @out.Shape.Dimensions[dimIndex2].Length;

                        for (long outer = 0; outer < totalOps; outer++)
                        {
                            //Get the array offset for the first element in the outer dimension
                            long ix3 = @out.Shape[counters];

                            for (long i = 0; i < opsOuter; i++)
                            {
                                for (long j = 0; j < opsInner; j++)
                                {
                                    for (long k = 0; k < opsInnerInner; k++)
                                    {
                                        d2[ix3] = (System.UInt64)(scalar);
                                        ix3 += innerInnerStride3;
                                    }

                                    ix3 += innerStride3;
                                }

                                ix3 += outerStride3;
                            }

                            if (counters.LongLength > 0)
                            {
                                //Basically a ripple carry adder
                                long p = counters.LongLength - 1;
                                while (++counters[p] == limits[p] && p > 0)
                                {
                                    counters[p] = 0;
                                    p--;
                                }
                            }
                        }
                    }
                }
            }
        }
        /// <summary>
        /// Unsafe implementation of applying a unary operation
        /// </summary>
        /// <typeparam name="C">The type of operation to perform</typeparam>
        /// <param name="op">The operation instance</param>
        /// <param name="in1">The input argument</param>
        /// <param name="out">The output target</param>
        internal static void UFunc_Op_Inner_Unary_Flush_Byte_TypedImpl<C>(NumCIL.UInt64.ToUInt64 op, NdArray<System.Byte> in1, NdArray<System.UInt64> @out)
            where C : IUnaryOp<System.Byte>
        {
            unsafe
            {
                using (var f1 = new Pinner(in1.DataAccessor))
                using (var f2 = new Pinner(@out.DataAccessor))
                {
                    var d1 = (System.Byte*)f1.ptr;
                    var d2 = (System.UInt64*)f2.ptr;

                    if (@out.Shape.Dimensions.Length == 1)
                    {
                        long totalOps = @out.Shape.Dimensions[0].Length;

                        long ix1 = in1.Shape.Offset;
                        long ix2 = @out.Shape.Offset;

                        long stride1 = in1.Shape.Dimensions[0].Stride;
                        long stride2 = @out.Shape.Dimensions[0].Stride;


                        if (stride1 == stride2 && ix1 == ix2)
                        {
                            //Best case, all are equal, just keep a single counter
                            for (long i = 0; i < totalOps; i++)
                            {
                                d2[ix1] = (System.UInt64)(d1[ix1]);
                                ix1 += stride1;
                            }
                        }
                        else
                        {
                            for (long i = 0; i < totalOps; i++)
                            {
                                d2[ix2] = (System.UInt64)(d1[ix1]);
                                ix1 += stride1;
                                ix2 += stride2;
                            }
                        }
                    }
                    else if (@out.Shape.Dimensions.Length == 2)
                    {
                        long opsOuter = @out.Shape.Dimensions[0].Length;
                        long opsInner = @out.Shape.Dimensions[1].Length;

                        long ix1 = in1.Shape.Offset;
                        long ix2 = @out.Shape.Offset;

                        long outerStride1 = in1.Shape.Dimensions[0].Stride;
                        long outerStride2 = @out.Shape.Dimensions[0].Stride;

                        long innerStride1 = in1.Shape.Dimensions[1].Stride;
                        long innerStride2 = @out.Shape.Dimensions[1].Stride;

                        outerStride1 -= innerStride1 * in1.Shape.Dimensions[1].Length;
                        outerStride2 -= innerStride2 * @out.Shape.Dimensions[1].Length;

                        for (long i = 0; i < opsOuter; i++)
                        {
                            for (long j = 0; j < opsInner; j++)
                            {
                                d2[ix2] = (System.UInt64)(d1[ix1]);
                                ix1 += innerStride1;
                                ix2 += innerStride2;
                            }

                            ix1 += outerStride1;
                            ix2 += outerStride2;
                        }
                    }
                    else
                    {
                        long n = in1.Shape.Dimensions.LongLength - 3;
                        long[] limits = in1.Shape.Dimensions.Where(x => n-- > 0).Select(x => x.Length).ToArray();
                        long[] counters = new long[limits.LongLength];

                        long totalOps = limits.LongLength == 0 ? 1 : limits.Aggregate<long>((a, b) => a * b);

                        //This chunck of variables are used to prevent repeated calculations of offsets
                        long dimIndex0 = 0 + limits.LongLength;
                        long dimIndex1 = 1 + limits.LongLength;
                        long dimIndex2 = 2 + limits.LongLength;

                        long opsOuter = @out.Shape.Dimensions[0 + limits.LongLength].Length;
                        long opsInner = @out.Shape.Dimensions[1 + limits.LongLength].Length;
                        long opsInnerInner = @out.Shape.Dimensions[2 + limits.LongLength].Length;

                        long outerStride1 = in1.Shape.Dimensions[dimIndex0].Stride;
                        long outerStride3 = @out.Shape.Dimensions[dimIndex0].Stride;

                        long innerStride1 = in1.Shape.Dimensions[dimIndex1].Stride;
                        long innerStride3 = @out.Shape.Dimensions[dimIndex1].Stride;

                        long innerInnerStride1 = in1.Shape.Dimensions[dimIndex2].Stride;
                        long innerInnerStride3 = @out.Shape.Dimensions[dimIndex2].Stride;

                        outerStride1 -= innerStride1 * in1.Shape.Dimensions[dimIndex1].Length;
                        outerStride3 -= innerStride3 * @out.Shape.Dimensions[dimIndex1].Length;

                        innerStride1 -= innerInnerStride1 * in1.Shape.Dimensions[dimIndex2].Length;
                        innerStride3 -= innerInnerStride3 * @out.Shape.Dimensions[dimIndex2].Length;

                        for (long outer = 0; outer < totalOps; outer++)
                        {
                            //Get the array offset for the first element in the outer dimension
                            long ix1 = in1.Shape[counters];
                            long ix3 = @out.Shape[counters];


                            for (long i = 0; i < opsOuter; i++)
                            {
                                for (long j = 0; j < opsInner; j++)
                                {
                                    for (long k = 0; k < opsInnerInner; k++)
                                    {
                                        d2[ix3] = (System.UInt64)(d1[ix1]);
                                        ix1 += innerInnerStride1;
                                        ix3 += innerInnerStride3;
                                    }

                                    ix1 += innerStride1;
                                    ix3 += innerStride3;
                                }

                                ix1 += outerStride1;
                                ix3 += outerStride3;
                            }

                            if (counters.LongLength > 0)
                            {
                                //Basically a ripple carry adder
                                long p = counters.LongLength - 1;
                                while (++counters[p] == limits[p] && p > 0)
                                {
                                    counters[p] = 0;
                                    p--;
                                }
                            }
                        }
                    }
                }
            }
        }

        /// <summary>
        /// Unsafe implementation of applying a unary operation
        /// </summary>
        /// <typeparam name="C">The type of operation to perform</typeparam>
        /// <param name="op">The operation instance</param>
        /// <param name="scalar">The input scalar argument</param>
        /// <param name="out">The output target</param>
        internal static void UFunc_Op_Inner_Unary_Scalar_Flush_Byte_TypedImpl<C>(NumCIL.UInt64.ToUInt64 op, System.Byte scalar, NdArray<System.UInt64> @out)
            where C : IUnaryOp<System.Byte>
        {
            unsafe
            {
                using (var f2 = new Pinner(@out.DataAccessor))
                {
                    var d2 = (System.UInt64*)f2.ptr;

                    if (@out.Shape.Dimensions.Length == 1)
                    {
                        long totalOps = @out.Shape.Dimensions[0].Length;
                        long ix2 = @out.Shape.Offset;
                        long stride2 = @out.Shape.Dimensions[0].Stride;

                        for (long i = 0; i < totalOps; i++)
                        {
                            d2[ix2] = (System.UInt64)(scalar);
                            ix2 += stride2;
                        }
                    }
                    else if (@out.Shape.Dimensions.Length == 2)
                    {
                        long opsOuter = @out.Shape.Dimensions[0].Length;
                        long opsInner = @out.Shape.Dimensions[1].Length;

                        long ix2 = @out.Shape.Offset;
                        long outerStride2 = @out.Shape.Dimensions[0].Stride;
                        long innerStride2 = @out.Shape.Dimensions[1].Stride;
                        outerStride2 -= innerStride2 * @out.Shape.Dimensions[1].Length;

                        for (long i = 0; i < opsOuter; i++)
                        {
                            for (long j = 0; j < opsInner; j++)
                            {
                                d2[ix2] = (System.UInt64)(scalar);
                                ix2 += innerStride2;
                            }

                            ix2 += outerStride2;
                        }
                    }
                    else
                    {
                        long n = @out.Shape.Dimensions.LongLength - 3;
                        long[] limits = @out.Shape.Dimensions.Where(x => n-- > 0).Select(x => x.Length).ToArray();
                        long[] counters = new long[limits.LongLength];

                        long totalOps = limits.LongLength == 0 ? 1 : limits.Aggregate<long>((a, b) => a * b);

                        //This chunck of variables are used to prevent repeated calculations of offsets
                        long dimIndex0 = 0 + limits.LongLength;
                        long dimIndex1 = 1 + limits.LongLength;
                        long dimIndex2 = 2 + limits.LongLength;

                        long opsOuter = @out.Shape.Dimensions[0 + limits.LongLength].Length;
                        long opsInner = @out.Shape.Dimensions[1 + limits.LongLength].Length;
                        long opsInnerInner = @out.Shape.Dimensions[2 + limits.LongLength].Length;

                        long outerStride3 = @out.Shape.Dimensions[dimIndex0].Stride;
                        long innerStride3 = @out.Shape.Dimensions[dimIndex1].Stride;
                        long innerInnerStride3 = @out.Shape.Dimensions[dimIndex2].Stride;
                        outerStride3 -= innerStride3 * @out.Shape.Dimensions[dimIndex1].Length;
                        innerStride3 -= innerInnerStride3 * @out.Shape.Dimensions[dimIndex2].Length;

                        for (long outer = 0; outer < totalOps; outer++)
                        {
                            //Get the array offset for the first element in the outer dimension
                            long ix3 = @out.Shape[counters];

                            for (long i = 0; i < opsOuter; i++)
                            {
                                for (long j = 0; j < opsInner; j++)
                                {
                                    for (long k = 0; k < opsInnerInner; k++)
                                    {
                                        d2[ix3] = (System.UInt64)(scalar);
                                        ix3 += innerInnerStride3;
                                    }

                                    ix3 += innerStride3;
                                }

                                ix3 += outerStride3;
                            }

                            if (counters.LongLength > 0)
                            {
                                //Basically a ripple carry adder
                                long p = counters.LongLength - 1;
                                while (++counters[p] == limits[p] && p > 0)
                                {
                                    counters[p] = 0;
                                    p--;
                                }
                            }
                        }
                    }
                }
            }
        }
        /// <summary>
        /// Unsafe implementation of applying a unary operation
        /// </summary>
        /// <typeparam name="C">The type of operation to perform</typeparam>
        /// <param name="op">The operation instance</param>
        /// <param name="in1">The input argument</param>
        /// <param name="out">The output target</param>
        internal static void UFunc_Op_Inner_Unary_Flush_Int16_TypedImpl<C>(NumCIL.UInt64.ToUInt64 op, NdArray<System.Int16> in1, NdArray<System.UInt64> @out)
            where C : IUnaryOp<System.Int16>
        {
            unsafe
            {
                using (var f1 = new Pinner(in1.DataAccessor))
                using (var f2 = new Pinner(@out.DataAccessor))
                {
                    var d1 = (System.Int16*)f1.ptr;
                    var d2 = (System.UInt64*)f2.ptr;

                    if (@out.Shape.Dimensions.Length == 1)
                    {
                        long totalOps = @out.Shape.Dimensions[0].Length;

                        long ix1 = in1.Shape.Offset;
                        long ix2 = @out.Shape.Offset;

                        long stride1 = in1.Shape.Dimensions[0].Stride;
                        long stride2 = @out.Shape.Dimensions[0].Stride;


                        if (stride1 == stride2 && ix1 == ix2)
                        {
                            //Best case, all are equal, just keep a single counter
                            for (long i = 0; i < totalOps; i++)
                            {
                                d2[ix1] = (System.UInt64)(d1[ix1]);
                                ix1 += stride1;
                            }
                        }
                        else
                        {
                            for (long i = 0; i < totalOps; i++)
                            {
                                d2[ix2] = (System.UInt64)(d1[ix1]);
                                ix1 += stride1;
                                ix2 += stride2;
                            }
                        }
                    }
                    else if (@out.Shape.Dimensions.Length == 2)
                    {
                        long opsOuter = @out.Shape.Dimensions[0].Length;
                        long opsInner = @out.Shape.Dimensions[1].Length;

                        long ix1 = in1.Shape.Offset;
                        long ix2 = @out.Shape.Offset;

                        long outerStride1 = in1.Shape.Dimensions[0].Stride;
                        long outerStride2 = @out.Shape.Dimensions[0].Stride;

                        long innerStride1 = in1.Shape.Dimensions[1].Stride;
                        long innerStride2 = @out.Shape.Dimensions[1].Stride;

                        outerStride1 -= innerStride1 * in1.Shape.Dimensions[1].Length;
                        outerStride2 -= innerStride2 * @out.Shape.Dimensions[1].Length;

                        for (long i = 0; i < opsOuter; i++)
                        {
                            for (long j = 0; j < opsInner; j++)
                            {
                                d2[ix2] = (System.UInt64)(d1[ix1]);
                                ix1 += innerStride1;
                                ix2 += innerStride2;
                            }

                            ix1 += outerStride1;
                            ix2 += outerStride2;
                        }
                    }
                    else
                    {
                        long n = in1.Shape.Dimensions.LongLength - 3;
                        long[] limits = in1.Shape.Dimensions.Where(x => n-- > 0).Select(x => x.Length).ToArray();
                        long[] counters = new long[limits.LongLength];

                        long totalOps = limits.LongLength == 0 ? 1 : limits.Aggregate<long>((a, b) => a * b);

                        //This chunck of variables are used to prevent repeated calculations of offsets
                        long dimIndex0 = 0 + limits.LongLength;
                        long dimIndex1 = 1 + limits.LongLength;
                        long dimIndex2 = 2 + limits.LongLength;

                        long opsOuter = @out.Shape.Dimensions[0 + limits.LongLength].Length;
                        long opsInner = @out.Shape.Dimensions[1 + limits.LongLength].Length;
                        long opsInnerInner = @out.Shape.Dimensions[2 + limits.LongLength].Length;

                        long outerStride1 = in1.Shape.Dimensions[dimIndex0].Stride;
                        long outerStride3 = @out.Shape.Dimensions[dimIndex0].Stride;

                        long innerStride1 = in1.Shape.Dimensions[dimIndex1].Stride;
                        long innerStride3 = @out.Shape.Dimensions[dimIndex1].Stride;

                        long innerInnerStride1 = in1.Shape.Dimensions[dimIndex2].Stride;
                        long innerInnerStride3 = @out.Shape.Dimensions[dimIndex2].Stride;

                        outerStride1 -= innerStride1 * in1.Shape.Dimensions[dimIndex1].Length;
                        outerStride3 -= innerStride3 * @out.Shape.Dimensions[dimIndex1].Length;

                        innerStride1 -= innerInnerStride1 * in1.Shape.Dimensions[dimIndex2].Length;
                        innerStride3 -= innerInnerStride3 * @out.Shape.Dimensions[dimIndex2].Length;

                        for (long outer = 0; outer < totalOps; outer++)
                        {
                            //Get the array offset for the first element in the outer dimension
                            long ix1 = in1.Shape[counters];
                            long ix3 = @out.Shape[counters];


                            for (long i = 0; i < opsOuter; i++)
                            {
                                for (long j = 0; j < opsInner; j++)
                                {
                                    for (long k = 0; k < opsInnerInner; k++)
                                    {
                                        d2[ix3] = (System.UInt64)(d1[ix1]);
                                        ix1 += innerInnerStride1;
                                        ix3 += innerInnerStride3;
                                    }

                                    ix1 += innerStride1;
                                    ix3 += innerStride3;
                                }

                                ix1 += outerStride1;
                                ix3 += outerStride3;
                            }

                            if (counters.LongLength > 0)
                            {
                                //Basically a ripple carry adder
                                long p = counters.LongLength - 1;
                                while (++counters[p] == limits[p] && p > 0)
                                {
                                    counters[p] = 0;
                                    p--;
                                }
                            }
                        }
                    }
                }
            }
        }

        /// <summary>
        /// Unsafe implementation of applying a unary operation
        /// </summary>
        /// <typeparam name="C">The type of operation to perform</typeparam>
        /// <param name="op">The operation instance</param>
        /// <param name="scalar">The input scalar argument</param>
        /// <param name="out">The output target</param>
        internal static void UFunc_Op_Inner_Unary_Scalar_Flush_Int16_TypedImpl<C>(NumCIL.UInt64.ToUInt64 op, System.Int16 scalar, NdArray<System.UInt64> @out)
            where C : IUnaryOp<System.Int16>
        {
            unsafe
            {
                using (var f2 = new Pinner(@out.DataAccessor))
                {
                    var d2 = (System.UInt64*)f2.ptr;

                    if (@out.Shape.Dimensions.Length == 1)
                    {
                        long totalOps = @out.Shape.Dimensions[0].Length;
                        long ix2 = @out.Shape.Offset;
                        long stride2 = @out.Shape.Dimensions[0].Stride;

                        for (long i = 0; i < totalOps; i++)
                        {
                            d2[ix2] = (System.UInt64)(scalar);
                            ix2 += stride2;
                        }
                    }
                    else if (@out.Shape.Dimensions.Length == 2)
                    {
                        long opsOuter = @out.Shape.Dimensions[0].Length;
                        long opsInner = @out.Shape.Dimensions[1].Length;

                        long ix2 = @out.Shape.Offset;
                        long outerStride2 = @out.Shape.Dimensions[0].Stride;
                        long innerStride2 = @out.Shape.Dimensions[1].Stride;
                        outerStride2 -= innerStride2 * @out.Shape.Dimensions[1].Length;

                        for (long i = 0; i < opsOuter; i++)
                        {
                            for (long j = 0; j < opsInner; j++)
                            {
                                d2[ix2] = (System.UInt64)(scalar);
                                ix2 += innerStride2;
                            }

                            ix2 += outerStride2;
                        }
                    }
                    else
                    {
                        long n = @out.Shape.Dimensions.LongLength - 3;
                        long[] limits = @out.Shape.Dimensions.Where(x => n-- > 0).Select(x => x.Length).ToArray();
                        long[] counters = new long[limits.LongLength];

                        long totalOps = limits.LongLength == 0 ? 1 : limits.Aggregate<long>((a, b) => a * b);

                        //This chunck of variables are used to prevent repeated calculations of offsets
                        long dimIndex0 = 0 + limits.LongLength;
                        long dimIndex1 = 1 + limits.LongLength;
                        long dimIndex2 = 2 + limits.LongLength;

                        long opsOuter = @out.Shape.Dimensions[0 + limits.LongLength].Length;
                        long opsInner = @out.Shape.Dimensions[1 + limits.LongLength].Length;
                        long opsInnerInner = @out.Shape.Dimensions[2 + limits.LongLength].Length;

                        long outerStride3 = @out.Shape.Dimensions[dimIndex0].Stride;
                        long innerStride3 = @out.Shape.Dimensions[dimIndex1].Stride;
                        long innerInnerStride3 = @out.Shape.Dimensions[dimIndex2].Stride;
                        outerStride3 -= innerStride3 * @out.Shape.Dimensions[dimIndex1].Length;
                        innerStride3 -= innerInnerStride3 * @out.Shape.Dimensions[dimIndex2].Length;

                        for (long outer = 0; outer < totalOps; outer++)
                        {
                            //Get the array offset for the first element in the outer dimension
                            long ix3 = @out.Shape[counters];

                            for (long i = 0; i < opsOuter; i++)
                            {
                                for (long j = 0; j < opsInner; j++)
                                {
                                    for (long k = 0; k < opsInnerInner; k++)
                                    {
                                        d2[ix3] = (System.UInt64)(scalar);
                                        ix3 += innerInnerStride3;
                                    }

                                    ix3 += innerStride3;
                                }

                                ix3 += outerStride3;
                            }

                            if (counters.LongLength > 0)
                            {
                                //Basically a ripple carry adder
                                long p = counters.LongLength - 1;
                                while (++counters[p] == limits[p] && p > 0)
                                {
                                    counters[p] = 0;
                                    p--;
                                }
                            }
                        }
                    }
                }
            }
        }
        /// <summary>
        /// Unsafe implementation of applying a unary operation
        /// </summary>
        /// <typeparam name="C">The type of operation to perform</typeparam>
        /// <param name="op">The operation instance</param>
        /// <param name="in1">The input argument</param>
        /// <param name="out">The output target</param>
        internal static void UFunc_Op_Inner_Unary_Flush_UInt16_TypedImpl<C>(NumCIL.UInt64.ToUInt64 op, NdArray<System.UInt16> in1, NdArray<System.UInt64> @out)
            where C : IUnaryOp<System.UInt16>
        {
            unsafe
            {
                using (var f1 = new Pinner(in1.DataAccessor))
                using (var f2 = new Pinner(@out.DataAccessor))
                {
                    var d1 = (System.UInt16*)f1.ptr;
                    var d2 = (System.UInt64*)f2.ptr;

                    if (@out.Shape.Dimensions.Length == 1)
                    {
                        long totalOps = @out.Shape.Dimensions[0].Length;

                        long ix1 = in1.Shape.Offset;
                        long ix2 = @out.Shape.Offset;

                        long stride1 = in1.Shape.Dimensions[0].Stride;
                        long stride2 = @out.Shape.Dimensions[0].Stride;


                        if (stride1 == stride2 && ix1 == ix2)
                        {
                            //Best case, all are equal, just keep a single counter
                            for (long i = 0; i < totalOps; i++)
                            {
                                d2[ix1] = (System.UInt64)(d1[ix1]);
                                ix1 += stride1;
                            }
                        }
                        else
                        {
                            for (long i = 0; i < totalOps; i++)
                            {
                                d2[ix2] = (System.UInt64)(d1[ix1]);
                                ix1 += stride1;
                                ix2 += stride2;
                            }
                        }
                    }
                    else if (@out.Shape.Dimensions.Length == 2)
                    {
                        long opsOuter = @out.Shape.Dimensions[0].Length;
                        long opsInner = @out.Shape.Dimensions[1].Length;

                        long ix1 = in1.Shape.Offset;
                        long ix2 = @out.Shape.Offset;

                        long outerStride1 = in1.Shape.Dimensions[0].Stride;
                        long outerStride2 = @out.Shape.Dimensions[0].Stride;

                        long innerStride1 = in1.Shape.Dimensions[1].Stride;
                        long innerStride2 = @out.Shape.Dimensions[1].Stride;

                        outerStride1 -= innerStride1 * in1.Shape.Dimensions[1].Length;
                        outerStride2 -= innerStride2 * @out.Shape.Dimensions[1].Length;

                        for (long i = 0; i < opsOuter; i++)
                        {
                            for (long j = 0; j < opsInner; j++)
                            {
                                d2[ix2] = (System.UInt64)(d1[ix1]);
                                ix1 += innerStride1;
                                ix2 += innerStride2;
                            }

                            ix1 += outerStride1;
                            ix2 += outerStride2;
                        }
                    }
                    else
                    {
                        long n = in1.Shape.Dimensions.LongLength - 3;
                        long[] limits = in1.Shape.Dimensions.Where(x => n-- > 0).Select(x => x.Length).ToArray();
                        long[] counters = new long[limits.LongLength];

                        long totalOps = limits.LongLength == 0 ? 1 : limits.Aggregate<long>((a, b) => a * b);

                        //This chunck of variables are used to prevent repeated calculations of offsets
                        long dimIndex0 = 0 + limits.LongLength;
                        long dimIndex1 = 1 + limits.LongLength;
                        long dimIndex2 = 2 + limits.LongLength;

                        long opsOuter = @out.Shape.Dimensions[0 + limits.LongLength].Length;
                        long opsInner = @out.Shape.Dimensions[1 + limits.LongLength].Length;
                        long opsInnerInner = @out.Shape.Dimensions[2 + limits.LongLength].Length;

                        long outerStride1 = in1.Shape.Dimensions[dimIndex0].Stride;
                        long outerStride3 = @out.Shape.Dimensions[dimIndex0].Stride;

                        long innerStride1 = in1.Shape.Dimensions[dimIndex1].Stride;
                        long innerStride3 = @out.Shape.Dimensions[dimIndex1].Stride;

                        long innerInnerStride1 = in1.Shape.Dimensions[dimIndex2].Stride;
                        long innerInnerStride3 = @out.Shape.Dimensions[dimIndex2].Stride;

                        outerStride1 -= innerStride1 * in1.Shape.Dimensions[dimIndex1].Length;
                        outerStride3 -= innerStride3 * @out.Shape.Dimensions[dimIndex1].Length;

                        innerStride1 -= innerInnerStride1 * in1.Shape.Dimensions[dimIndex2].Length;
                        innerStride3 -= innerInnerStride3 * @out.Shape.Dimensions[dimIndex2].Length;

                        for (long outer = 0; outer < totalOps; outer++)
                        {
                            //Get the array offset for the first element in the outer dimension
                            long ix1 = in1.Shape[counters];
                            long ix3 = @out.Shape[counters];


                            for (long i = 0; i < opsOuter; i++)
                            {
                                for (long j = 0; j < opsInner; j++)
                                {
                                    for (long k = 0; k < opsInnerInner; k++)
                                    {
                                        d2[ix3] = (System.UInt64)(d1[ix1]);
                                        ix1 += innerInnerStride1;
                                        ix3 += innerInnerStride3;
                                    }

                                    ix1 += innerStride1;
                                    ix3 += innerStride3;
                                }

                                ix1 += outerStride1;
                                ix3 += outerStride3;
                            }

                            if (counters.LongLength > 0)
                            {
                                //Basically a ripple carry adder
                                long p = counters.LongLength - 1;
                                while (++counters[p] == limits[p] && p > 0)
                                {
                                    counters[p] = 0;
                                    p--;
                                }
                            }
                        }
                    }
                }
            }
        }

        /// <summary>
        /// Unsafe implementation of applying a unary operation
        /// </summary>
        /// <typeparam name="C">The type of operation to perform</typeparam>
        /// <param name="op">The operation instance</param>
        /// <param name="scalar">The input scalar argument</param>
        /// <param name="out">The output target</param>
        internal static void UFunc_Op_Inner_Unary_Scalar_Flush_UInt16_TypedImpl<C>(NumCIL.UInt64.ToUInt64 op, System.UInt16 scalar, NdArray<System.UInt64> @out)
            where C : IUnaryOp<System.UInt16>
        {
            unsafe
            {
                using (var f2 = new Pinner(@out.DataAccessor))
                {
                    var d2 = (System.UInt64*)f2.ptr;

                    if (@out.Shape.Dimensions.Length == 1)
                    {
                        long totalOps = @out.Shape.Dimensions[0].Length;
                        long ix2 = @out.Shape.Offset;
                        long stride2 = @out.Shape.Dimensions[0].Stride;

                        for (long i = 0; i < totalOps; i++)
                        {
                            d2[ix2] = (System.UInt64)(scalar);
                            ix2 += stride2;
                        }
                    }
                    else if (@out.Shape.Dimensions.Length == 2)
                    {
                        long opsOuter = @out.Shape.Dimensions[0].Length;
                        long opsInner = @out.Shape.Dimensions[1].Length;

                        long ix2 = @out.Shape.Offset;
                        long outerStride2 = @out.Shape.Dimensions[0].Stride;
                        long innerStride2 = @out.Shape.Dimensions[1].Stride;
                        outerStride2 -= innerStride2 * @out.Shape.Dimensions[1].Length;

                        for (long i = 0; i < opsOuter; i++)
                        {
                            for (long j = 0; j < opsInner; j++)
                            {
                                d2[ix2] = (System.UInt64)(scalar);
                                ix2 += innerStride2;
                            }

                            ix2 += outerStride2;
                        }
                    }
                    else
                    {
                        long n = @out.Shape.Dimensions.LongLength - 3;
                        long[] limits = @out.Shape.Dimensions.Where(x => n-- > 0).Select(x => x.Length).ToArray();
                        long[] counters = new long[limits.LongLength];

                        long totalOps = limits.LongLength == 0 ? 1 : limits.Aggregate<long>((a, b) => a * b);

                        //This chunck of variables are used to prevent repeated calculations of offsets
                        long dimIndex0 = 0 + limits.LongLength;
                        long dimIndex1 = 1 + limits.LongLength;
                        long dimIndex2 = 2 + limits.LongLength;

                        long opsOuter = @out.Shape.Dimensions[0 + limits.LongLength].Length;
                        long opsInner = @out.Shape.Dimensions[1 + limits.LongLength].Length;
                        long opsInnerInner = @out.Shape.Dimensions[2 + limits.LongLength].Length;

                        long outerStride3 = @out.Shape.Dimensions[dimIndex0].Stride;
                        long innerStride3 = @out.Shape.Dimensions[dimIndex1].Stride;
                        long innerInnerStride3 = @out.Shape.Dimensions[dimIndex2].Stride;
                        outerStride3 -= innerStride3 * @out.Shape.Dimensions[dimIndex1].Length;
                        innerStride3 -= innerInnerStride3 * @out.Shape.Dimensions[dimIndex2].Length;

                        for (long outer = 0; outer < totalOps; outer++)
                        {
                            //Get the array offset for the first element in the outer dimension
                            long ix3 = @out.Shape[counters];

                            for (long i = 0; i < opsOuter; i++)
                            {
                                for (long j = 0; j < opsInner; j++)
                                {
                                    for (long k = 0; k < opsInnerInner; k++)
                                    {
                                        d2[ix3] = (System.UInt64)(scalar);
                                        ix3 += innerInnerStride3;
                                    }

                                    ix3 += innerStride3;
                                }

                                ix3 += outerStride3;
                            }

                            if (counters.LongLength > 0)
                            {
                                //Basically a ripple carry adder
                                long p = counters.LongLength - 1;
                                while (++counters[p] == limits[p] && p > 0)
                                {
                                    counters[p] = 0;
                                    p--;
                                }
                            }
                        }
                    }
                }
            }
        }
        /// <summary>
        /// Unsafe implementation of applying a unary operation
        /// </summary>
        /// <typeparam name="C">The type of operation to perform</typeparam>
        /// <param name="op">The operation instance</param>
        /// <param name="in1">The input argument</param>
        /// <param name="out">The output target</param>
        internal static void UFunc_Op_Inner_Unary_Flush_Int32_TypedImpl<C>(NumCIL.UInt64.ToUInt64 op, NdArray<System.Int32> in1, NdArray<System.UInt64> @out)
            where C : IUnaryOp<System.Int32>
        {
            unsafe
            {
                using (var f1 = new Pinner(in1.DataAccessor))
                using (var f2 = new Pinner(@out.DataAccessor))
                {
                    var d1 = (System.Int32*)f1.ptr;
                    var d2 = (System.UInt64*)f2.ptr;

                    if (@out.Shape.Dimensions.Length == 1)
                    {
                        long totalOps = @out.Shape.Dimensions[0].Length;

                        long ix1 = in1.Shape.Offset;
                        long ix2 = @out.Shape.Offset;

                        long stride1 = in1.Shape.Dimensions[0].Stride;
                        long stride2 = @out.Shape.Dimensions[0].Stride;


                        if (stride1 == stride2 && ix1 == ix2)
                        {
                            //Best case, all are equal, just keep a single counter
                            for (long i = 0; i < totalOps; i++)
                            {
                                d2[ix1] = (System.UInt64)(d1[ix1]);
                                ix1 += stride1;
                            }
                        }
                        else
                        {
                            for (long i = 0; i < totalOps; i++)
                            {
                                d2[ix2] = (System.UInt64)(d1[ix1]);
                                ix1 += stride1;
                                ix2 += stride2;
                            }
                        }
                    }
                    else if (@out.Shape.Dimensions.Length == 2)
                    {
                        long opsOuter = @out.Shape.Dimensions[0].Length;
                        long opsInner = @out.Shape.Dimensions[1].Length;

                        long ix1 = in1.Shape.Offset;
                        long ix2 = @out.Shape.Offset;

                        long outerStride1 = in1.Shape.Dimensions[0].Stride;
                        long outerStride2 = @out.Shape.Dimensions[0].Stride;

                        long innerStride1 = in1.Shape.Dimensions[1].Stride;
                        long innerStride2 = @out.Shape.Dimensions[1].Stride;

                        outerStride1 -= innerStride1 * in1.Shape.Dimensions[1].Length;
                        outerStride2 -= innerStride2 * @out.Shape.Dimensions[1].Length;

                        for (long i = 0; i < opsOuter; i++)
                        {
                            for (long j = 0; j < opsInner; j++)
                            {
                                d2[ix2] = (System.UInt64)(d1[ix1]);
                                ix1 += innerStride1;
                                ix2 += innerStride2;
                            }

                            ix1 += outerStride1;
                            ix2 += outerStride2;
                        }
                    }
                    else
                    {
                        long n = in1.Shape.Dimensions.LongLength - 3;
                        long[] limits = in1.Shape.Dimensions.Where(x => n-- > 0).Select(x => x.Length).ToArray();
                        long[] counters = new long[limits.LongLength];

                        long totalOps = limits.LongLength == 0 ? 1 : limits.Aggregate<long>((a, b) => a * b);

                        //This chunck of variables are used to prevent repeated calculations of offsets
                        long dimIndex0 = 0 + limits.LongLength;
                        long dimIndex1 = 1 + limits.LongLength;
                        long dimIndex2 = 2 + limits.LongLength;

                        long opsOuter = @out.Shape.Dimensions[0 + limits.LongLength].Length;
                        long opsInner = @out.Shape.Dimensions[1 + limits.LongLength].Length;
                        long opsInnerInner = @out.Shape.Dimensions[2 + limits.LongLength].Length;

                        long outerStride1 = in1.Shape.Dimensions[dimIndex0].Stride;
                        long outerStride3 = @out.Shape.Dimensions[dimIndex0].Stride;

                        long innerStride1 = in1.Shape.Dimensions[dimIndex1].Stride;
                        long innerStride3 = @out.Shape.Dimensions[dimIndex1].Stride;

                        long innerInnerStride1 = in1.Shape.Dimensions[dimIndex2].Stride;
                        long innerInnerStride3 = @out.Shape.Dimensions[dimIndex2].Stride;

                        outerStride1 -= innerStride1 * in1.Shape.Dimensions[dimIndex1].Length;
                        outerStride3 -= innerStride3 * @out.Shape.Dimensions[dimIndex1].Length;

                        innerStride1 -= innerInnerStride1 * in1.Shape.Dimensions[dimIndex2].Length;
                        innerStride3 -= innerInnerStride3 * @out.Shape.Dimensions[dimIndex2].Length;

                        for (long outer = 0; outer < totalOps; outer++)
                        {
                            //Get the array offset for the first element in the outer dimension
                            long ix1 = in1.Shape[counters];
                            long ix3 = @out.Shape[counters];


                            for (long i = 0; i < opsOuter; i++)
                            {
                                for (long j = 0; j < opsInner; j++)
                                {
                                    for (long k = 0; k < opsInnerInner; k++)
                                    {
                                        d2[ix3] = (System.UInt64)(d1[ix1]);
                                        ix1 += innerInnerStride1;
                                        ix3 += innerInnerStride3;
                                    }

                                    ix1 += innerStride1;
                                    ix3 += innerStride3;
                                }

                                ix1 += outerStride1;
                                ix3 += outerStride3;
                            }

                            if (counters.LongLength > 0)
                            {
                                //Basically a ripple carry adder
                                long p = counters.LongLength - 1;
                                while (++counters[p] == limits[p] && p > 0)
                                {
                                    counters[p] = 0;
                                    p--;
                                }
                            }
                        }
                    }
                }
            }
        }

        /// <summary>
        /// Unsafe implementation of applying a unary operation
        /// </summary>
        /// <typeparam name="C">The type of operation to perform</typeparam>
        /// <param name="op">The operation instance</param>
        /// <param name="scalar">The input scalar argument</param>
        /// <param name="out">The output target</param>
        internal static void UFunc_Op_Inner_Unary_Scalar_Flush_Int32_TypedImpl<C>(NumCIL.UInt64.ToUInt64 op, System.Int32 scalar, NdArray<System.UInt64> @out)
            where C : IUnaryOp<System.Int32>
        {
            unsafe
            {
                using (var f2 = new Pinner(@out.DataAccessor))
                {
                    var d2 = (System.UInt64*)f2.ptr;

                    if (@out.Shape.Dimensions.Length == 1)
                    {
                        long totalOps = @out.Shape.Dimensions[0].Length;
                        long ix2 = @out.Shape.Offset;
                        long stride2 = @out.Shape.Dimensions[0].Stride;

                        for (long i = 0; i < totalOps; i++)
                        {
                            d2[ix2] = (System.UInt64)(scalar);
                            ix2 += stride2;
                        }
                    }
                    else if (@out.Shape.Dimensions.Length == 2)
                    {
                        long opsOuter = @out.Shape.Dimensions[0].Length;
                        long opsInner = @out.Shape.Dimensions[1].Length;

                        long ix2 = @out.Shape.Offset;
                        long outerStride2 = @out.Shape.Dimensions[0].Stride;
                        long innerStride2 = @out.Shape.Dimensions[1].Stride;
                        outerStride2 -= innerStride2 * @out.Shape.Dimensions[1].Length;

                        for (long i = 0; i < opsOuter; i++)
                        {
                            for (long j = 0; j < opsInner; j++)
                            {
                                d2[ix2] = (System.UInt64)(scalar);
                                ix2 += innerStride2;
                            }

                            ix2 += outerStride2;
                        }
                    }
                    else
                    {
                        long n = @out.Shape.Dimensions.LongLength - 3;
                        long[] limits = @out.Shape.Dimensions.Where(x => n-- > 0).Select(x => x.Length).ToArray();
                        long[] counters = new long[limits.LongLength];

                        long totalOps = limits.LongLength == 0 ? 1 : limits.Aggregate<long>((a, b) => a * b);

                        //This chunck of variables are used to prevent repeated calculations of offsets
                        long dimIndex0 = 0 + limits.LongLength;
                        long dimIndex1 = 1 + limits.LongLength;
                        long dimIndex2 = 2 + limits.LongLength;

                        long opsOuter = @out.Shape.Dimensions[0 + limits.LongLength].Length;
                        long opsInner = @out.Shape.Dimensions[1 + limits.LongLength].Length;
                        long opsInnerInner = @out.Shape.Dimensions[2 + limits.LongLength].Length;

                        long outerStride3 = @out.Shape.Dimensions[dimIndex0].Stride;
                        long innerStride3 = @out.Shape.Dimensions[dimIndex1].Stride;
                        long innerInnerStride3 = @out.Shape.Dimensions[dimIndex2].Stride;
                        outerStride3 -= innerStride3 * @out.Shape.Dimensions[dimIndex1].Length;
                        innerStride3 -= innerInnerStride3 * @out.Shape.Dimensions[dimIndex2].Length;

                        for (long outer = 0; outer < totalOps; outer++)
                        {
                            //Get the array offset for the first element in the outer dimension
                            long ix3 = @out.Shape[counters];

                            for (long i = 0; i < opsOuter; i++)
                            {
                                for (long j = 0; j < opsInner; j++)
                                {
                                    for (long k = 0; k < opsInnerInner; k++)
                                    {
                                        d2[ix3] = (System.UInt64)(scalar);
                                        ix3 += innerInnerStride3;
                                    }

                                    ix3 += innerStride3;
                                }

                                ix3 += outerStride3;
                            }

                            if (counters.LongLength > 0)
                            {
                                //Basically a ripple carry adder
                                long p = counters.LongLength - 1;
                                while (++counters[p] == limits[p] && p > 0)
                                {
                                    counters[p] = 0;
                                    p--;
                                }
                            }
                        }
                    }
                }
            }
        }
        /// <summary>
        /// Unsafe implementation of applying a unary operation
        /// </summary>
        /// <typeparam name="C">The type of operation to perform</typeparam>
        /// <param name="op">The operation instance</param>
        /// <param name="in1">The input argument</param>
        /// <param name="out">The output target</param>
        internal static void UFunc_Op_Inner_Unary_Flush_UInt32_TypedImpl<C>(NumCIL.UInt64.ToUInt64 op, NdArray<System.UInt32> in1, NdArray<System.UInt64> @out)
            where C : IUnaryOp<System.UInt32>
        {
            unsafe
            {
                using (var f1 = new Pinner(in1.DataAccessor))
                using (var f2 = new Pinner(@out.DataAccessor))
                {
                    var d1 = (System.UInt32*)f1.ptr;
                    var d2 = (System.UInt64*)f2.ptr;

                    if (@out.Shape.Dimensions.Length == 1)
                    {
                        long totalOps = @out.Shape.Dimensions[0].Length;

                        long ix1 = in1.Shape.Offset;
                        long ix2 = @out.Shape.Offset;

                        long stride1 = in1.Shape.Dimensions[0].Stride;
                        long stride2 = @out.Shape.Dimensions[0].Stride;


                        if (stride1 == stride2 && ix1 == ix2)
                        {
                            //Best case, all are equal, just keep a single counter
                            for (long i = 0; i < totalOps; i++)
                            {
                                d2[ix1] = (System.UInt64)(d1[ix1]);
                                ix1 += stride1;
                            }
                        }
                        else
                        {
                            for (long i = 0; i < totalOps; i++)
                            {
                                d2[ix2] = (System.UInt64)(d1[ix1]);
                                ix1 += stride1;
                                ix2 += stride2;
                            }
                        }
                    }
                    else if (@out.Shape.Dimensions.Length == 2)
                    {
                        long opsOuter = @out.Shape.Dimensions[0].Length;
                        long opsInner = @out.Shape.Dimensions[1].Length;

                        long ix1 = in1.Shape.Offset;
                        long ix2 = @out.Shape.Offset;

                        long outerStride1 = in1.Shape.Dimensions[0].Stride;
                        long outerStride2 = @out.Shape.Dimensions[0].Stride;

                        long innerStride1 = in1.Shape.Dimensions[1].Stride;
                        long innerStride2 = @out.Shape.Dimensions[1].Stride;

                        outerStride1 -= innerStride1 * in1.Shape.Dimensions[1].Length;
                        outerStride2 -= innerStride2 * @out.Shape.Dimensions[1].Length;

                        for (long i = 0; i < opsOuter; i++)
                        {
                            for (long j = 0; j < opsInner; j++)
                            {
                                d2[ix2] = (System.UInt64)(d1[ix1]);
                                ix1 += innerStride1;
                                ix2 += innerStride2;
                            }

                            ix1 += outerStride1;
                            ix2 += outerStride2;
                        }
                    }
                    else
                    {
                        long n = in1.Shape.Dimensions.LongLength - 3;
                        long[] limits = in1.Shape.Dimensions.Where(x => n-- > 0).Select(x => x.Length).ToArray();
                        long[] counters = new long[limits.LongLength];

                        long totalOps = limits.LongLength == 0 ? 1 : limits.Aggregate<long>((a, b) => a * b);

                        //This chunck of variables are used to prevent repeated calculations of offsets
                        long dimIndex0 = 0 + limits.LongLength;
                        long dimIndex1 = 1 + limits.LongLength;
                        long dimIndex2 = 2 + limits.LongLength;

                        long opsOuter = @out.Shape.Dimensions[0 + limits.LongLength].Length;
                        long opsInner = @out.Shape.Dimensions[1 + limits.LongLength].Length;
                        long opsInnerInner = @out.Shape.Dimensions[2 + limits.LongLength].Length;

                        long outerStride1 = in1.Shape.Dimensions[dimIndex0].Stride;
                        long outerStride3 = @out.Shape.Dimensions[dimIndex0].Stride;

                        long innerStride1 = in1.Shape.Dimensions[dimIndex1].Stride;
                        long innerStride3 = @out.Shape.Dimensions[dimIndex1].Stride;

                        long innerInnerStride1 = in1.Shape.Dimensions[dimIndex2].Stride;
                        long innerInnerStride3 = @out.Shape.Dimensions[dimIndex2].Stride;

                        outerStride1 -= innerStride1 * in1.Shape.Dimensions[dimIndex1].Length;
                        outerStride3 -= innerStride3 * @out.Shape.Dimensions[dimIndex1].Length;

                        innerStride1 -= innerInnerStride1 * in1.Shape.Dimensions[dimIndex2].Length;
                        innerStride3 -= innerInnerStride3 * @out.Shape.Dimensions[dimIndex2].Length;

                        for (long outer = 0; outer < totalOps; outer++)
                        {
                            //Get the array offset for the first element in the outer dimension
                            long ix1 = in1.Shape[counters];
                            long ix3 = @out.Shape[counters];


                            for (long i = 0; i < opsOuter; i++)
                            {
                                for (long j = 0; j < opsInner; j++)
                                {
                                    for (long k = 0; k < opsInnerInner; k++)
                                    {
                                        d2[ix3] = (System.UInt64)(d1[ix1]);
                                        ix1 += innerInnerStride1;
                                        ix3 += innerInnerStride3;
                                    }

                                    ix1 += innerStride1;
                                    ix3 += innerStride3;
                                }

                                ix1 += outerStride1;
                                ix3 += outerStride3;
                            }

                            if (counters.LongLength > 0)
                            {
                                //Basically a ripple carry adder
                                long p = counters.LongLength - 1;
                                while (++counters[p] == limits[p] && p > 0)
                                {
                                    counters[p] = 0;
                                    p--;
                                }
                            }
                        }
                    }
                }
            }
        }

        /// <summary>
        /// Unsafe implementation of applying a unary operation
        /// </summary>
        /// <typeparam name="C">The type of operation to perform</typeparam>
        /// <param name="op">The operation instance</param>
        /// <param name="scalar">The input scalar argument</param>
        /// <param name="out">The output target</param>
        internal static void UFunc_Op_Inner_Unary_Scalar_Flush_UInt32_TypedImpl<C>(NumCIL.UInt64.ToUInt64 op, System.UInt32 scalar, NdArray<System.UInt64> @out)
            where C : IUnaryOp<System.UInt32>
        {
            unsafe
            {
                using (var f2 = new Pinner(@out.DataAccessor))
                {
                    var d2 = (System.UInt64*)f2.ptr;

                    if (@out.Shape.Dimensions.Length == 1)
                    {
                        long totalOps = @out.Shape.Dimensions[0].Length;
                        long ix2 = @out.Shape.Offset;
                        long stride2 = @out.Shape.Dimensions[0].Stride;

                        for (long i = 0; i < totalOps; i++)
                        {
                            d2[ix2] = (System.UInt64)(scalar);
                            ix2 += stride2;
                        }
                    }
                    else if (@out.Shape.Dimensions.Length == 2)
                    {
                        long opsOuter = @out.Shape.Dimensions[0].Length;
                        long opsInner = @out.Shape.Dimensions[1].Length;

                        long ix2 = @out.Shape.Offset;
                        long outerStride2 = @out.Shape.Dimensions[0].Stride;
                        long innerStride2 = @out.Shape.Dimensions[1].Stride;
                        outerStride2 -= innerStride2 * @out.Shape.Dimensions[1].Length;

                        for (long i = 0; i < opsOuter; i++)
                        {
                            for (long j = 0; j < opsInner; j++)
                            {
                                d2[ix2] = (System.UInt64)(scalar);
                                ix2 += innerStride2;
                            }

                            ix2 += outerStride2;
                        }
                    }
                    else
                    {
                        long n = @out.Shape.Dimensions.LongLength - 3;
                        long[] limits = @out.Shape.Dimensions.Where(x => n-- > 0).Select(x => x.Length).ToArray();
                        long[] counters = new long[limits.LongLength];

                        long totalOps = limits.LongLength == 0 ? 1 : limits.Aggregate<long>((a, b) => a * b);

                        //This chunck of variables are used to prevent repeated calculations of offsets
                        long dimIndex0 = 0 + limits.LongLength;
                        long dimIndex1 = 1 + limits.LongLength;
                        long dimIndex2 = 2 + limits.LongLength;

                        long opsOuter = @out.Shape.Dimensions[0 + limits.LongLength].Length;
                        long opsInner = @out.Shape.Dimensions[1 + limits.LongLength].Length;
                        long opsInnerInner = @out.Shape.Dimensions[2 + limits.LongLength].Length;

                        long outerStride3 = @out.Shape.Dimensions[dimIndex0].Stride;
                        long innerStride3 = @out.Shape.Dimensions[dimIndex1].Stride;
                        long innerInnerStride3 = @out.Shape.Dimensions[dimIndex2].Stride;
                        outerStride3 -= innerStride3 * @out.Shape.Dimensions[dimIndex1].Length;
                        innerStride3 -= innerInnerStride3 * @out.Shape.Dimensions[dimIndex2].Length;

                        for (long outer = 0; outer < totalOps; outer++)
                        {
                            //Get the array offset for the first element in the outer dimension
                            long ix3 = @out.Shape[counters];

                            for (long i = 0; i < opsOuter; i++)
                            {
                                for (long j = 0; j < opsInner; j++)
                                {
                                    for (long k = 0; k < opsInnerInner; k++)
                                    {
                                        d2[ix3] = (System.UInt64)(scalar);
                                        ix3 += innerInnerStride3;
                                    }

                                    ix3 += innerStride3;
                                }

                                ix3 += outerStride3;
                            }

                            if (counters.LongLength > 0)
                            {
                                //Basically a ripple carry adder
                                long p = counters.LongLength - 1;
                                while (++counters[p] == limits[p] && p > 0)
                                {
                                    counters[p] = 0;
                                    p--;
                                }
                            }
                        }
                    }
                }
            }
        }
        /// <summary>
        /// Unsafe implementation of applying a unary operation
        /// </summary>
        /// <typeparam name="C">The type of operation to perform</typeparam>
        /// <param name="op">The operation instance</param>
        /// <param name="in1">The input argument</param>
        /// <param name="out">The output target</param>
        internal static void UFunc_Op_Inner_Unary_Flush_Int64_TypedImpl<C>(NumCIL.UInt64.ToUInt64 op, NdArray<System.Int64> in1, NdArray<System.UInt64> @out)
            where C : IUnaryOp<System.Int64>
        {
            unsafe
            {
                using (var f1 = new Pinner(in1.DataAccessor))
                using (var f2 = new Pinner(@out.DataAccessor))
                {
                    var d1 = (System.Int64*)f1.ptr;
                    var d2 = (System.UInt64*)f2.ptr;

                    if (@out.Shape.Dimensions.Length == 1)
                    {
                        long totalOps = @out.Shape.Dimensions[0].Length;

                        long ix1 = in1.Shape.Offset;
                        long ix2 = @out.Shape.Offset;

                        long stride1 = in1.Shape.Dimensions[0].Stride;
                        long stride2 = @out.Shape.Dimensions[0].Stride;


                        if (stride1 == stride2 && ix1 == ix2)
                        {
                            //Best case, all are equal, just keep a single counter
                            for (long i = 0; i < totalOps; i++)
                            {
                                d2[ix1] = (System.UInt64)(d1[ix1]);
                                ix1 += stride1;
                            }
                        }
                        else
                        {
                            for (long i = 0; i < totalOps; i++)
                            {
                                d2[ix2] = (System.UInt64)(d1[ix1]);
                                ix1 += stride1;
                                ix2 += stride2;
                            }
                        }
                    }
                    else if (@out.Shape.Dimensions.Length == 2)
                    {
                        long opsOuter = @out.Shape.Dimensions[0].Length;
                        long opsInner = @out.Shape.Dimensions[1].Length;

                        long ix1 = in1.Shape.Offset;
                        long ix2 = @out.Shape.Offset;

                        long outerStride1 = in1.Shape.Dimensions[0].Stride;
                        long outerStride2 = @out.Shape.Dimensions[0].Stride;

                        long innerStride1 = in1.Shape.Dimensions[1].Stride;
                        long innerStride2 = @out.Shape.Dimensions[1].Stride;

                        outerStride1 -= innerStride1 * in1.Shape.Dimensions[1].Length;
                        outerStride2 -= innerStride2 * @out.Shape.Dimensions[1].Length;

                        for (long i = 0; i < opsOuter; i++)
                        {
                            for (long j = 0; j < opsInner; j++)
                            {
                                d2[ix2] = (System.UInt64)(d1[ix1]);
                                ix1 += innerStride1;
                                ix2 += innerStride2;
                            }

                            ix1 += outerStride1;
                            ix2 += outerStride2;
                        }
                    }
                    else
                    {
                        long n = in1.Shape.Dimensions.LongLength - 3;
                        long[] limits = in1.Shape.Dimensions.Where(x => n-- > 0).Select(x => x.Length).ToArray();
                        long[] counters = new long[limits.LongLength];

                        long totalOps = limits.LongLength == 0 ? 1 : limits.Aggregate<long>((a, b) => a * b);

                        //This chunck of variables are used to prevent repeated calculations of offsets
                        long dimIndex0 = 0 + limits.LongLength;
                        long dimIndex1 = 1 + limits.LongLength;
                        long dimIndex2 = 2 + limits.LongLength;

                        long opsOuter = @out.Shape.Dimensions[0 + limits.LongLength].Length;
                        long opsInner = @out.Shape.Dimensions[1 + limits.LongLength].Length;
                        long opsInnerInner = @out.Shape.Dimensions[2 + limits.LongLength].Length;

                        long outerStride1 = in1.Shape.Dimensions[dimIndex0].Stride;
                        long outerStride3 = @out.Shape.Dimensions[dimIndex0].Stride;

                        long innerStride1 = in1.Shape.Dimensions[dimIndex1].Stride;
                        long innerStride3 = @out.Shape.Dimensions[dimIndex1].Stride;

                        long innerInnerStride1 = in1.Shape.Dimensions[dimIndex2].Stride;
                        long innerInnerStride3 = @out.Shape.Dimensions[dimIndex2].Stride;

                        outerStride1 -= innerStride1 * in1.Shape.Dimensions[dimIndex1].Length;
                        outerStride3 -= innerStride3 * @out.Shape.Dimensions[dimIndex1].Length;

                        innerStride1 -= innerInnerStride1 * in1.Shape.Dimensions[dimIndex2].Length;
                        innerStride3 -= innerInnerStride3 * @out.Shape.Dimensions[dimIndex2].Length;

                        for (long outer = 0; outer < totalOps; outer++)
                        {
                            //Get the array offset for the first element in the outer dimension
                            long ix1 = in1.Shape[counters];
                            long ix3 = @out.Shape[counters];


                            for (long i = 0; i < opsOuter; i++)
                            {
                                for (long j = 0; j < opsInner; j++)
                                {
                                    for (long k = 0; k < opsInnerInner; k++)
                                    {
                                        d2[ix3] = (System.UInt64)(d1[ix1]);
                                        ix1 += innerInnerStride1;
                                        ix3 += innerInnerStride3;
                                    }

                                    ix1 += innerStride1;
                                    ix3 += innerStride3;
                                }

                                ix1 += outerStride1;
                                ix3 += outerStride3;
                            }

                            if (counters.LongLength > 0)
                            {
                                //Basically a ripple carry adder
                                long p = counters.LongLength - 1;
                                while (++counters[p] == limits[p] && p > 0)
                                {
                                    counters[p] = 0;
                                    p--;
                                }
                            }
                        }
                    }
                }
            }
        }

        /// <summary>
        /// Unsafe implementation of applying a unary operation
        /// </summary>
        /// <typeparam name="C">The type of operation to perform</typeparam>
        /// <param name="op">The operation instance</param>
        /// <param name="scalar">The input scalar argument</param>
        /// <param name="out">The output target</param>
        internal static void UFunc_Op_Inner_Unary_Scalar_Flush_Int64_TypedImpl<C>(NumCIL.UInt64.ToUInt64 op, System.Int64 scalar, NdArray<System.UInt64> @out)
            where C : IUnaryOp<System.Int64>
        {
            unsafe
            {
                using (var f2 = new Pinner(@out.DataAccessor))
                {
                    var d2 = (System.UInt64*)f2.ptr;

                    if (@out.Shape.Dimensions.Length == 1)
                    {
                        long totalOps = @out.Shape.Dimensions[0].Length;
                        long ix2 = @out.Shape.Offset;
                        long stride2 = @out.Shape.Dimensions[0].Stride;

                        for (long i = 0; i < totalOps; i++)
                        {
                            d2[ix2] = (System.UInt64)(scalar);
                            ix2 += stride2;
                        }
                    }
                    else if (@out.Shape.Dimensions.Length == 2)
                    {
                        long opsOuter = @out.Shape.Dimensions[0].Length;
                        long opsInner = @out.Shape.Dimensions[1].Length;

                        long ix2 = @out.Shape.Offset;
                        long outerStride2 = @out.Shape.Dimensions[0].Stride;
                        long innerStride2 = @out.Shape.Dimensions[1].Stride;
                        outerStride2 -= innerStride2 * @out.Shape.Dimensions[1].Length;

                        for (long i = 0; i < opsOuter; i++)
                        {
                            for (long j = 0; j < opsInner; j++)
                            {
                                d2[ix2] = (System.UInt64)(scalar);
                                ix2 += innerStride2;
                            }

                            ix2 += outerStride2;
                        }
                    }
                    else
                    {
                        long n = @out.Shape.Dimensions.LongLength - 3;
                        long[] limits = @out.Shape.Dimensions.Where(x => n-- > 0).Select(x => x.Length).ToArray();
                        long[] counters = new long[limits.LongLength];

                        long totalOps = limits.LongLength == 0 ? 1 : limits.Aggregate<long>((a, b) => a * b);

                        //This chunck of variables are used to prevent repeated calculations of offsets
                        long dimIndex0 = 0 + limits.LongLength;
                        long dimIndex1 = 1 + limits.LongLength;
                        long dimIndex2 = 2 + limits.LongLength;

                        long opsOuter = @out.Shape.Dimensions[0 + limits.LongLength].Length;
                        long opsInner = @out.Shape.Dimensions[1 + limits.LongLength].Length;
                        long opsInnerInner = @out.Shape.Dimensions[2 + limits.LongLength].Length;

                        long outerStride3 = @out.Shape.Dimensions[dimIndex0].Stride;
                        long innerStride3 = @out.Shape.Dimensions[dimIndex1].Stride;
                        long innerInnerStride3 = @out.Shape.Dimensions[dimIndex2].Stride;
                        outerStride3 -= innerStride3 * @out.Shape.Dimensions[dimIndex1].Length;
                        innerStride3 -= innerInnerStride3 * @out.Shape.Dimensions[dimIndex2].Length;

                        for (long outer = 0; outer < totalOps; outer++)
                        {
                            //Get the array offset for the first element in the outer dimension
                            long ix3 = @out.Shape[counters];

                            for (long i = 0; i < opsOuter; i++)
                            {
                                for (long j = 0; j < opsInner; j++)
                                {
                                    for (long k = 0; k < opsInnerInner; k++)
                                    {
                                        d2[ix3] = (System.UInt64)(scalar);
                                        ix3 += innerInnerStride3;
                                    }

                                    ix3 += innerStride3;
                                }

                                ix3 += outerStride3;
                            }

                            if (counters.LongLength > 0)
                            {
                                //Basically a ripple carry adder
                                long p = counters.LongLength - 1;
                                while (++counters[p] == limits[p] && p > 0)
                                {
                                    counters[p] = 0;
                                    p--;
                                }
                            }
                        }
                    }
                }
            }
        }
        /// <summary>
        /// Unsafe implementation of applying a unary operation
        /// </summary>
        /// <typeparam name="C">The type of operation to perform</typeparam>
        /// <param name="op">The operation instance</param>
        /// <param name="in1">The input argument</param>
        /// <param name="out">The output target</param>
        internal static void UFunc_Op_Inner_Unary_Flush_Single_TypedImpl<C>(NumCIL.UInt64.ToUInt64 op, NdArray<System.Single> in1, NdArray<System.UInt64> @out)
            where C : IUnaryOp<System.Single>
        {
            unsafe
            {
                using (var f1 = new Pinner(in1.DataAccessor))
                using (var f2 = new Pinner(@out.DataAccessor))
                {
                    var d1 = (System.Single*)f1.ptr;
                    var d2 = (System.UInt64*)f2.ptr;

                    if (@out.Shape.Dimensions.Length == 1)
                    {
                        long totalOps = @out.Shape.Dimensions[0].Length;

                        long ix1 = in1.Shape.Offset;
                        long ix2 = @out.Shape.Offset;

                        long stride1 = in1.Shape.Dimensions[0].Stride;
                        long stride2 = @out.Shape.Dimensions[0].Stride;


                        if (stride1 == stride2 && ix1 == ix2)
                        {
                            //Best case, all are equal, just keep a single counter
                            for (long i = 0; i < totalOps; i++)
                            {
                                d2[ix1] = (System.UInt64)(d1[ix1]);
                                ix1 += stride1;
                            }
                        }
                        else
                        {
                            for (long i = 0; i < totalOps; i++)
                            {
                                d2[ix2] = (System.UInt64)(d1[ix1]);
                                ix1 += stride1;
                                ix2 += stride2;
                            }
                        }
                    }
                    else if (@out.Shape.Dimensions.Length == 2)
                    {
                        long opsOuter = @out.Shape.Dimensions[0].Length;
                        long opsInner = @out.Shape.Dimensions[1].Length;

                        long ix1 = in1.Shape.Offset;
                        long ix2 = @out.Shape.Offset;

                        long outerStride1 = in1.Shape.Dimensions[0].Stride;
                        long outerStride2 = @out.Shape.Dimensions[0].Stride;

                        long innerStride1 = in1.Shape.Dimensions[1].Stride;
                        long innerStride2 = @out.Shape.Dimensions[1].Stride;

                        outerStride1 -= innerStride1 * in1.Shape.Dimensions[1].Length;
                        outerStride2 -= innerStride2 * @out.Shape.Dimensions[1].Length;

                        for (long i = 0; i < opsOuter; i++)
                        {
                            for (long j = 0; j < opsInner; j++)
                            {
                                d2[ix2] = (System.UInt64)(d1[ix1]);
                                ix1 += innerStride1;
                                ix2 += innerStride2;
                            }

                            ix1 += outerStride1;
                            ix2 += outerStride2;
                        }
                    }
                    else
                    {
                        long n = in1.Shape.Dimensions.LongLength - 3;
                        long[] limits = in1.Shape.Dimensions.Where(x => n-- > 0).Select(x => x.Length).ToArray();
                        long[] counters = new long[limits.LongLength];

                        long totalOps = limits.LongLength == 0 ? 1 : limits.Aggregate<long>((a, b) => a * b);

                        //This chunck of variables are used to prevent repeated calculations of offsets
                        long dimIndex0 = 0 + limits.LongLength;
                        long dimIndex1 = 1 + limits.LongLength;
                        long dimIndex2 = 2 + limits.LongLength;

                        long opsOuter = @out.Shape.Dimensions[0 + limits.LongLength].Length;
                        long opsInner = @out.Shape.Dimensions[1 + limits.LongLength].Length;
                        long opsInnerInner = @out.Shape.Dimensions[2 + limits.LongLength].Length;

                        long outerStride1 = in1.Shape.Dimensions[dimIndex0].Stride;
                        long outerStride3 = @out.Shape.Dimensions[dimIndex0].Stride;

                        long innerStride1 = in1.Shape.Dimensions[dimIndex1].Stride;
                        long innerStride3 = @out.Shape.Dimensions[dimIndex1].Stride;

                        long innerInnerStride1 = in1.Shape.Dimensions[dimIndex2].Stride;
                        long innerInnerStride3 = @out.Shape.Dimensions[dimIndex2].Stride;

                        outerStride1 -= innerStride1 * in1.Shape.Dimensions[dimIndex1].Length;
                        outerStride3 -= innerStride3 * @out.Shape.Dimensions[dimIndex1].Length;

                        innerStride1 -= innerInnerStride1 * in1.Shape.Dimensions[dimIndex2].Length;
                        innerStride3 -= innerInnerStride3 * @out.Shape.Dimensions[dimIndex2].Length;

                        for (long outer = 0; outer < totalOps; outer++)
                        {
                            //Get the array offset for the first element in the outer dimension
                            long ix1 = in1.Shape[counters];
                            long ix3 = @out.Shape[counters];


                            for (long i = 0; i < opsOuter; i++)
                            {
                                for (long j = 0; j < opsInner; j++)
                                {
                                    for (long k = 0; k < opsInnerInner; k++)
                                    {
                                        d2[ix3] = (System.UInt64)(d1[ix1]);
                                        ix1 += innerInnerStride1;
                                        ix3 += innerInnerStride3;
                                    }

                                    ix1 += innerStride1;
                                    ix3 += innerStride3;
                                }

                                ix1 += outerStride1;
                                ix3 += outerStride3;
                            }

                            if (counters.LongLength > 0)
                            {
                                //Basically a ripple carry adder
                                long p = counters.LongLength - 1;
                                while (++counters[p] == limits[p] && p > 0)
                                {
                                    counters[p] = 0;
                                    p--;
                                }
                            }
                        }
                    }
                }
            }
        }

        /// <summary>
        /// Unsafe implementation of applying a unary operation
        /// </summary>
        /// <typeparam name="C">The type of operation to perform</typeparam>
        /// <param name="op">The operation instance</param>
        /// <param name="scalar">The input scalar argument</param>
        /// <param name="out">The output target</param>
        internal static void UFunc_Op_Inner_Unary_Scalar_Flush_Single_TypedImpl<C>(NumCIL.UInt64.ToUInt64 op, System.Single scalar, NdArray<System.UInt64> @out)
            where C : IUnaryOp<System.Single>
        {
            unsafe
            {
                using (var f2 = new Pinner(@out.DataAccessor))
                {
                    var d2 = (System.UInt64*)f2.ptr;

                    if (@out.Shape.Dimensions.Length == 1)
                    {
                        long totalOps = @out.Shape.Dimensions[0].Length;
                        long ix2 = @out.Shape.Offset;
                        long stride2 = @out.Shape.Dimensions[0].Stride;

                        for (long i = 0; i < totalOps; i++)
                        {
                            d2[ix2] = (System.UInt64)(scalar);
                            ix2 += stride2;
                        }
                    }
                    else if (@out.Shape.Dimensions.Length == 2)
                    {
                        long opsOuter = @out.Shape.Dimensions[0].Length;
                        long opsInner = @out.Shape.Dimensions[1].Length;

                        long ix2 = @out.Shape.Offset;
                        long outerStride2 = @out.Shape.Dimensions[0].Stride;
                        long innerStride2 = @out.Shape.Dimensions[1].Stride;
                        outerStride2 -= innerStride2 * @out.Shape.Dimensions[1].Length;

                        for (long i = 0; i < opsOuter; i++)
                        {
                            for (long j = 0; j < opsInner; j++)
                            {
                                d2[ix2] = (System.UInt64)(scalar);
                                ix2 += innerStride2;
                            }

                            ix2 += outerStride2;
                        }
                    }
                    else
                    {
                        long n = @out.Shape.Dimensions.LongLength - 3;
                        long[] limits = @out.Shape.Dimensions.Where(x => n-- > 0).Select(x => x.Length).ToArray();
                        long[] counters = new long[limits.LongLength];

                        long totalOps = limits.LongLength == 0 ? 1 : limits.Aggregate<long>((a, b) => a * b);

                        //This chunck of variables are used to prevent repeated calculations of offsets
                        long dimIndex0 = 0 + limits.LongLength;
                        long dimIndex1 = 1 + limits.LongLength;
                        long dimIndex2 = 2 + limits.LongLength;

                        long opsOuter = @out.Shape.Dimensions[0 + limits.LongLength].Length;
                        long opsInner = @out.Shape.Dimensions[1 + limits.LongLength].Length;
                        long opsInnerInner = @out.Shape.Dimensions[2 + limits.LongLength].Length;

                        long outerStride3 = @out.Shape.Dimensions[dimIndex0].Stride;
                        long innerStride3 = @out.Shape.Dimensions[dimIndex1].Stride;
                        long innerInnerStride3 = @out.Shape.Dimensions[dimIndex2].Stride;
                        outerStride3 -= innerStride3 * @out.Shape.Dimensions[dimIndex1].Length;
                        innerStride3 -= innerInnerStride3 * @out.Shape.Dimensions[dimIndex2].Length;

                        for (long outer = 0; outer < totalOps; outer++)
                        {
                            //Get the array offset for the first element in the outer dimension
                            long ix3 = @out.Shape[counters];

                            for (long i = 0; i < opsOuter; i++)
                            {
                                for (long j = 0; j < opsInner; j++)
                                {
                                    for (long k = 0; k < opsInnerInner; k++)
                                    {
                                        d2[ix3] = (System.UInt64)(scalar);
                                        ix3 += innerInnerStride3;
                                    }

                                    ix3 += innerStride3;
                                }

                                ix3 += outerStride3;
                            }

                            if (counters.LongLength > 0)
                            {
                                //Basically a ripple carry adder
                                long p = counters.LongLength - 1;
                                while (++counters[p] == limits[p] && p > 0)
                                {
                                    counters[p] = 0;
                                    p--;
                                }
                            }
                        }
                    }
                }
            }
        }
        /// <summary>
        /// Unsafe implementation of applying a unary operation
        /// </summary>
        /// <typeparam name="C">The type of operation to perform</typeparam>
        /// <param name="op">The operation instance</param>
        /// <param name="in1">The input argument</param>
        /// <param name="out">The output target</param>
        internal static void UFunc_Op_Inner_Unary_Flush_Double_TypedImpl<C>(NumCIL.UInt64.ToUInt64 op, NdArray<System.Double> in1, NdArray<System.UInt64> @out)
            where C : IUnaryOp<System.Double>
        {
            unsafe
            {
                using (var f1 = new Pinner(in1.DataAccessor))
                using (var f2 = new Pinner(@out.DataAccessor))
                {
                    var d1 = (System.Double*)f1.ptr;
                    var d2 = (System.UInt64*)f2.ptr;

                    if (@out.Shape.Dimensions.Length == 1)
                    {
                        long totalOps = @out.Shape.Dimensions[0].Length;

                        long ix1 = in1.Shape.Offset;
                        long ix2 = @out.Shape.Offset;

                        long stride1 = in1.Shape.Dimensions[0].Stride;
                        long stride2 = @out.Shape.Dimensions[0].Stride;


                        if (stride1 == stride2 && ix1 == ix2)
                        {
                            //Best case, all are equal, just keep a single counter
                            for (long i = 0; i < totalOps; i++)
                            {
                                d2[ix1] = (System.UInt64)(d1[ix1]);
                                ix1 += stride1;
                            }
                        }
                        else
                        {
                            for (long i = 0; i < totalOps; i++)
                            {
                                d2[ix2] = (System.UInt64)(d1[ix1]);
                                ix1 += stride1;
                                ix2 += stride2;
                            }
                        }
                    }
                    else if (@out.Shape.Dimensions.Length == 2)
                    {
                        long opsOuter = @out.Shape.Dimensions[0].Length;
                        long opsInner = @out.Shape.Dimensions[1].Length;

                        long ix1 = in1.Shape.Offset;
                        long ix2 = @out.Shape.Offset;

                        long outerStride1 = in1.Shape.Dimensions[0].Stride;
                        long outerStride2 = @out.Shape.Dimensions[0].Stride;

                        long innerStride1 = in1.Shape.Dimensions[1].Stride;
                        long innerStride2 = @out.Shape.Dimensions[1].Stride;

                        outerStride1 -= innerStride1 * in1.Shape.Dimensions[1].Length;
                        outerStride2 -= innerStride2 * @out.Shape.Dimensions[1].Length;

                        for (long i = 0; i < opsOuter; i++)
                        {
                            for (long j = 0; j < opsInner; j++)
                            {
                                d2[ix2] = (System.UInt64)(d1[ix1]);
                                ix1 += innerStride1;
                                ix2 += innerStride2;
                            }

                            ix1 += outerStride1;
                            ix2 += outerStride2;
                        }
                    }
                    else
                    {
                        long n = in1.Shape.Dimensions.LongLength - 3;
                        long[] limits = in1.Shape.Dimensions.Where(x => n-- > 0).Select(x => x.Length).ToArray();
                        long[] counters = new long[limits.LongLength];

                        long totalOps = limits.LongLength == 0 ? 1 : limits.Aggregate<long>((a, b) => a * b);

                        //This chunck of variables are used to prevent repeated calculations of offsets
                        long dimIndex0 = 0 + limits.LongLength;
                        long dimIndex1 = 1 + limits.LongLength;
                        long dimIndex2 = 2 + limits.LongLength;

                        long opsOuter = @out.Shape.Dimensions[0 + limits.LongLength].Length;
                        long opsInner = @out.Shape.Dimensions[1 + limits.LongLength].Length;
                        long opsInnerInner = @out.Shape.Dimensions[2 + limits.LongLength].Length;

                        long outerStride1 = in1.Shape.Dimensions[dimIndex0].Stride;
                        long outerStride3 = @out.Shape.Dimensions[dimIndex0].Stride;

                        long innerStride1 = in1.Shape.Dimensions[dimIndex1].Stride;
                        long innerStride3 = @out.Shape.Dimensions[dimIndex1].Stride;

                        long innerInnerStride1 = in1.Shape.Dimensions[dimIndex2].Stride;
                        long innerInnerStride3 = @out.Shape.Dimensions[dimIndex2].Stride;

                        outerStride1 -= innerStride1 * in1.Shape.Dimensions[dimIndex1].Length;
                        outerStride3 -= innerStride3 * @out.Shape.Dimensions[dimIndex1].Length;

                        innerStride1 -= innerInnerStride1 * in1.Shape.Dimensions[dimIndex2].Length;
                        innerStride3 -= innerInnerStride3 * @out.Shape.Dimensions[dimIndex2].Length;

                        for (long outer = 0; outer < totalOps; outer++)
                        {
                            //Get the array offset for the first element in the outer dimension
                            long ix1 = in1.Shape[counters];
                            long ix3 = @out.Shape[counters];


                            for (long i = 0; i < opsOuter; i++)
                            {
                                for (long j = 0; j < opsInner; j++)
                                {
                                    for (long k = 0; k < opsInnerInner; k++)
                                    {
                                        d2[ix3] = (System.UInt64)(d1[ix1]);
                                        ix1 += innerInnerStride1;
                                        ix3 += innerInnerStride3;
                                    }

                                    ix1 += innerStride1;
                                    ix3 += innerStride3;
                                }

                                ix1 += outerStride1;
                                ix3 += outerStride3;
                            }

                            if (counters.LongLength > 0)
                            {
                                //Basically a ripple carry adder
                                long p = counters.LongLength - 1;
                                while (++counters[p] == limits[p] && p > 0)
                                {
                                    counters[p] = 0;
                                    p--;
                                }
                            }
                        }
                    }
                }
            }
        }

        /// <summary>
        /// Unsafe implementation of applying a unary operation
        /// </summary>
        /// <typeparam name="C">The type of operation to perform</typeparam>
        /// <param name="op">The operation instance</param>
        /// <param name="scalar">The input scalar argument</param>
        /// <param name="out">The output target</param>
        internal static void UFunc_Op_Inner_Unary_Scalar_Flush_Double_TypedImpl<C>(NumCIL.UInt64.ToUInt64 op, System.Double scalar, NdArray<System.UInt64> @out)
            where C : IUnaryOp<System.Double>
        {
            unsafe
            {
                using (var f2 = new Pinner(@out.DataAccessor))
                {
                    var d2 = (System.UInt64*)f2.ptr;

                    if (@out.Shape.Dimensions.Length == 1)
                    {
                        long totalOps = @out.Shape.Dimensions[0].Length;
                        long ix2 = @out.Shape.Offset;
                        long stride2 = @out.Shape.Dimensions[0].Stride;

                        for (long i = 0; i < totalOps; i++)
                        {
                            d2[ix2] = (System.UInt64)(scalar);
                            ix2 += stride2;
                        }
                    }
                    else if (@out.Shape.Dimensions.Length == 2)
                    {
                        long opsOuter = @out.Shape.Dimensions[0].Length;
                        long opsInner = @out.Shape.Dimensions[1].Length;

                        long ix2 = @out.Shape.Offset;
                        long outerStride2 = @out.Shape.Dimensions[0].Stride;
                        long innerStride2 = @out.Shape.Dimensions[1].Stride;
                        outerStride2 -= innerStride2 * @out.Shape.Dimensions[1].Length;

                        for (long i = 0; i < opsOuter; i++)
                        {
                            for (long j = 0; j < opsInner; j++)
                            {
                                d2[ix2] = (System.UInt64)(scalar);
                                ix2 += innerStride2;
                            }

                            ix2 += outerStride2;
                        }
                    }
                    else
                    {
                        long n = @out.Shape.Dimensions.LongLength - 3;
                        long[] limits = @out.Shape.Dimensions.Where(x => n-- > 0).Select(x => x.Length).ToArray();
                        long[] counters = new long[limits.LongLength];

                        long totalOps = limits.LongLength == 0 ? 1 : limits.Aggregate<long>((a, b) => a * b);

                        //This chunck of variables are used to prevent repeated calculations of offsets
                        long dimIndex0 = 0 + limits.LongLength;
                        long dimIndex1 = 1 + limits.LongLength;
                        long dimIndex2 = 2 + limits.LongLength;

                        long opsOuter = @out.Shape.Dimensions[0 + limits.LongLength].Length;
                        long opsInner = @out.Shape.Dimensions[1 + limits.LongLength].Length;
                        long opsInnerInner = @out.Shape.Dimensions[2 + limits.LongLength].Length;

                        long outerStride3 = @out.Shape.Dimensions[dimIndex0].Stride;
                        long innerStride3 = @out.Shape.Dimensions[dimIndex1].Stride;
                        long innerInnerStride3 = @out.Shape.Dimensions[dimIndex2].Stride;
                        outerStride3 -= innerStride3 * @out.Shape.Dimensions[dimIndex1].Length;
                        innerStride3 -= innerInnerStride3 * @out.Shape.Dimensions[dimIndex2].Length;

                        for (long outer = 0; outer < totalOps; outer++)
                        {
                            //Get the array offset for the first element in the outer dimension
                            long ix3 = @out.Shape[counters];

                            for (long i = 0; i < opsOuter; i++)
                            {
                                for (long j = 0; j < opsInner; j++)
                                {
                                    for (long k = 0; k < opsInnerInner; k++)
                                    {
                                        d2[ix3] = (System.UInt64)(scalar);
                                        ix3 += innerInnerStride3;
                                    }

                                    ix3 += innerStride3;
                                }

                                ix3 += outerStride3;
                            }

                            if (counters.LongLength > 0)
                            {
                                //Basically a ripple carry adder
                                long p = counters.LongLength - 1;
                                while (++counters[p] == limits[p] && p > 0)
                                {
                                    counters[p] = 0;
                                    p--;
                                }
                            }
                        }
                    }
                }
            }
        }
        /// <summary>
        /// Unsafe implementation of applying a unary operation
        /// </summary>
        /// <typeparam name="C">The type of operation to perform</typeparam>
        /// <param name="op">The operation instance</param>
        /// <param name="in1">The input argument</param>
        /// <param name="out">The output target</param>
        internal static void UFunc_Op_Inner_Unary_Flush_Boolean_TypedImpl<C>(NumCIL.Boolean.ToUInt64 op, NdArray<System.Boolean> in1, NdArray<System.UInt64> @out)
            where C : IUnaryOp<System.Boolean>
        {
            unsafe
            {
                using (var f1 = new Pinner(in1.DataAccessor))
                using (var f2 = new Pinner(@out.DataAccessor))
                {
                    var d1 = (System.Boolean*)f1.ptr;
                    var d2 = (System.UInt64*)f2.ptr;

                    if (@out.Shape.Dimensions.Length == 1)
                    {
                        long totalOps = @out.Shape.Dimensions[0].Length;

                        long ix1 = in1.Shape.Offset;
                        long ix2 = @out.Shape.Offset;

                        long stride1 = in1.Shape.Dimensions[0].Stride;
                        long stride2 = @out.Shape.Dimensions[0].Stride;


                        if (stride1 == stride2 && ix1 == ix2)
                        {
                            //Best case, all are equal, just keep a single counter
                            for (long i = 0; i < totalOps; i++)
                            {
                                d2[ix1] = (System.UInt64)(d1[ix1] ? 1 : 0 );
                                ix1 += stride1;
                            }
                        }
                        else
                        {
                            for (long i = 0; i < totalOps; i++)
                            {
                                d2[ix2] = (System.UInt64)(d1[ix1] ? 1 : 0 );
                                ix1 += stride1;
                                ix2 += stride2;
                            }
                        }
                    }
                    else if (@out.Shape.Dimensions.Length == 2)
                    {
                        long opsOuter = @out.Shape.Dimensions[0].Length;
                        long opsInner = @out.Shape.Dimensions[1].Length;

                        long ix1 = in1.Shape.Offset;
                        long ix2 = @out.Shape.Offset;

                        long outerStride1 = in1.Shape.Dimensions[0].Stride;
                        long outerStride2 = @out.Shape.Dimensions[0].Stride;

                        long innerStride1 = in1.Shape.Dimensions[1].Stride;
                        long innerStride2 = @out.Shape.Dimensions[1].Stride;

                        outerStride1 -= innerStride1 * in1.Shape.Dimensions[1].Length;
                        outerStride2 -= innerStride2 * @out.Shape.Dimensions[1].Length;

                        for (long i = 0; i < opsOuter; i++)
                        {
                            for (long j = 0; j < opsInner; j++)
                            {
                                d2[ix2] = (System.UInt64)(d1[ix1] ? 1 : 0 );
                                ix1 += innerStride1;
                                ix2 += innerStride2;
                            }

                            ix1 += outerStride1;
                            ix2 += outerStride2;
                        }
                    }
                    else
                    {
                        long n = in1.Shape.Dimensions.LongLength - 3;
                        long[] limits = in1.Shape.Dimensions.Where(x => n-- > 0).Select(x => x.Length).ToArray();
                        long[] counters = new long[limits.LongLength];

                        long totalOps = limits.LongLength == 0 ? 1 : limits.Aggregate<long>((a, b) => a * b);

                        //This chunck of variables are used to prevent repeated calculations of offsets
                        long dimIndex0 = 0 + limits.LongLength;
                        long dimIndex1 = 1 + limits.LongLength;
                        long dimIndex2 = 2 + limits.LongLength;

                        long opsOuter = @out.Shape.Dimensions[0 + limits.LongLength].Length;
                        long opsInner = @out.Shape.Dimensions[1 + limits.LongLength].Length;
                        long opsInnerInner = @out.Shape.Dimensions[2 + limits.LongLength].Length;

                        long outerStride1 = in1.Shape.Dimensions[dimIndex0].Stride;
                        long outerStride3 = @out.Shape.Dimensions[dimIndex0].Stride;

                        long innerStride1 = in1.Shape.Dimensions[dimIndex1].Stride;
                        long innerStride3 = @out.Shape.Dimensions[dimIndex1].Stride;

                        long innerInnerStride1 = in1.Shape.Dimensions[dimIndex2].Stride;
                        long innerInnerStride3 = @out.Shape.Dimensions[dimIndex2].Stride;

                        outerStride1 -= innerStride1 * in1.Shape.Dimensions[dimIndex1].Length;
                        outerStride3 -= innerStride3 * @out.Shape.Dimensions[dimIndex1].Length;

                        innerStride1 -= innerInnerStride1 * in1.Shape.Dimensions[dimIndex2].Length;
                        innerStride3 -= innerInnerStride3 * @out.Shape.Dimensions[dimIndex2].Length;

                        for (long outer = 0; outer < totalOps; outer++)
                        {
                            //Get the array offset for the first element in the outer dimension
                            long ix1 = in1.Shape[counters];
                            long ix3 = @out.Shape[counters];


                            for (long i = 0; i < opsOuter; i++)
                            {
                                for (long j = 0; j < opsInner; j++)
                                {
                                    for (long k = 0; k < opsInnerInner; k++)
                                    {
                                        d2[ix3] = (System.UInt64)(d1[ix1] ? 1 : 0 );
                                        ix1 += innerInnerStride1;
                                        ix3 += innerInnerStride3;
                                    }

                                    ix1 += innerStride1;
                                    ix3 += innerStride3;
                                }

                                ix1 += outerStride1;
                                ix3 += outerStride3;
                            }

                            if (counters.LongLength > 0)
                            {
                                //Basically a ripple carry adder
                                long p = counters.LongLength - 1;
                                while (++counters[p] == limits[p] && p > 0)
                                {
                                    counters[p] = 0;
                                    p--;
                                }
                            }
                        }
                    }
                }
            }
        }

        /// <summary>
        /// Unsafe implementation of applying a unary operation
        /// </summary>
        /// <typeparam name="C">The type of operation to perform</typeparam>
        /// <param name="op">The operation instance</param>
        /// <param name="scalar">The input scalar argument</param>
        /// <param name="out">The output target</param>
        internal static void UFunc_Op_Inner_Unary_Scalar_Flush_Boolean_TypedImpl<C>(NumCIL.Boolean.ToUInt64 op, System.Boolean scalar, NdArray<System.UInt64> @out)
            where C : IUnaryOp<System.Boolean>
        {
            unsafe
            {
                using (var f2 = new Pinner(@out.DataAccessor))
                {
                    var d2 = (System.UInt64*)f2.ptr;

                    if (@out.Shape.Dimensions.Length == 1)
                    {
                        long totalOps = @out.Shape.Dimensions[0].Length;
                        long ix2 = @out.Shape.Offset;
                        long stride2 = @out.Shape.Dimensions[0].Stride;

                        for (long i = 0; i < totalOps; i++)
                        {
                            d2[ix2] = (System.UInt64)(scalar ? 1 : 0 );
                            ix2 += stride2;
                        }
                    }
                    else if (@out.Shape.Dimensions.Length == 2)
                    {
                        long opsOuter = @out.Shape.Dimensions[0].Length;
                        long opsInner = @out.Shape.Dimensions[1].Length;

                        long ix2 = @out.Shape.Offset;
                        long outerStride2 = @out.Shape.Dimensions[0].Stride;
                        long innerStride2 = @out.Shape.Dimensions[1].Stride;
                        outerStride2 -= innerStride2 * @out.Shape.Dimensions[1].Length;

                        for (long i = 0; i < opsOuter; i++)
                        {
                            for (long j = 0; j < opsInner; j++)
                            {
                                d2[ix2] = (System.UInt64)(scalar ? 1 : 0 );
                                ix2 += innerStride2;
                            }

                            ix2 += outerStride2;
                        }
                    }
                    else
                    {
                        long n = @out.Shape.Dimensions.LongLength - 3;
                        long[] limits = @out.Shape.Dimensions.Where(x => n-- > 0).Select(x => x.Length).ToArray();
                        long[] counters = new long[limits.LongLength];

                        long totalOps = limits.LongLength == 0 ? 1 : limits.Aggregate<long>((a, b) => a * b);

                        //This chunck of variables are used to prevent repeated calculations of offsets
                        long dimIndex0 = 0 + limits.LongLength;
                        long dimIndex1 = 1 + limits.LongLength;
                        long dimIndex2 = 2 + limits.LongLength;

                        long opsOuter = @out.Shape.Dimensions[0 + limits.LongLength].Length;
                        long opsInner = @out.Shape.Dimensions[1 + limits.LongLength].Length;
                        long opsInnerInner = @out.Shape.Dimensions[2 + limits.LongLength].Length;

                        long outerStride3 = @out.Shape.Dimensions[dimIndex0].Stride;
                        long innerStride3 = @out.Shape.Dimensions[dimIndex1].Stride;
                        long innerInnerStride3 = @out.Shape.Dimensions[dimIndex2].Stride;
                        outerStride3 -= innerStride3 * @out.Shape.Dimensions[dimIndex1].Length;
                        innerStride3 -= innerInnerStride3 * @out.Shape.Dimensions[dimIndex2].Length;

                        for (long outer = 0; outer < totalOps; outer++)
                        {
                            //Get the array offset for the first element in the outer dimension
                            long ix3 = @out.Shape[counters];

                            for (long i = 0; i < opsOuter; i++)
                            {
                                for (long j = 0; j < opsInner; j++)
                                {
                                    for (long k = 0; k < opsInnerInner; k++)
                                    {
                                        d2[ix3] = (System.UInt64)(scalar ? 1 : 0 );
                                        ix3 += innerInnerStride3;
                                    }

                                    ix3 += innerStride3;
                                }

                                ix3 += outerStride3;
                            }

                            if (counters.LongLength > 0)
                            {
                                //Basically a ripple carry adder
                                long p = counters.LongLength - 1;
                                while (++counters[p] == limits[p] && p > 0)
                                {
                                    counters[p] = 0;
                                    p--;
                                }
                            }
                        }
                    }
                }
            }
        }
        /// <summary>
        /// Unsafe implementation of applying a unary operation
        /// </summary>
        /// <typeparam name="C">The type of operation to perform</typeparam>
        /// <param name="op">The operation instance</param>
        /// <param name="in1">The input argument</param>
        /// <param name="out">The output target</param>
        internal static void UFunc_Op_Inner_Unary_Flush_SByte_TypedImpl<C>(NumCIL.Float.ToFloat op, NdArray<System.SByte> in1, NdArray<System.Single> @out)
            where C : IUnaryOp<System.SByte>
        {
            unsafe
            {
                using (var f1 = new Pinner(in1.DataAccessor))
                using (var f2 = new Pinner(@out.DataAccessor))
                {
                    var d1 = (System.SByte*)f1.ptr;
                    var d2 = (System.Single*)f2.ptr;

                    if (@out.Shape.Dimensions.Length == 1)
                    {
                        long totalOps = @out.Shape.Dimensions[0].Length;

                        long ix1 = in1.Shape.Offset;
                        long ix2 = @out.Shape.Offset;

                        long stride1 = in1.Shape.Dimensions[0].Stride;
                        long stride2 = @out.Shape.Dimensions[0].Stride;


                        if (stride1 == stride2 && ix1 == ix2)
                        {
                            //Best case, all are equal, just keep a single counter
                            for (long i = 0; i < totalOps; i++)
                            {
                                d2[ix1] = (System.Single)(d1[ix1]);
                                ix1 += stride1;
                            }
                        }
                        else
                        {
                            for (long i = 0; i < totalOps; i++)
                            {
                                d2[ix2] = (System.Single)(d1[ix1]);
                                ix1 += stride1;
                                ix2 += stride2;
                            }
                        }
                    }
                    else if (@out.Shape.Dimensions.Length == 2)
                    {
                        long opsOuter = @out.Shape.Dimensions[0].Length;
                        long opsInner = @out.Shape.Dimensions[1].Length;

                        long ix1 = in1.Shape.Offset;
                        long ix2 = @out.Shape.Offset;

                        long outerStride1 = in1.Shape.Dimensions[0].Stride;
                        long outerStride2 = @out.Shape.Dimensions[0].Stride;

                        long innerStride1 = in1.Shape.Dimensions[1].Stride;
                        long innerStride2 = @out.Shape.Dimensions[1].Stride;

                        outerStride1 -= innerStride1 * in1.Shape.Dimensions[1].Length;
                        outerStride2 -= innerStride2 * @out.Shape.Dimensions[1].Length;

                        for (long i = 0; i < opsOuter; i++)
                        {
                            for (long j = 0; j < opsInner; j++)
                            {
                                d2[ix2] = (System.Single)(d1[ix1]);
                                ix1 += innerStride1;
                                ix2 += innerStride2;
                            }

                            ix1 += outerStride1;
                            ix2 += outerStride2;
                        }
                    }
                    else
                    {
                        long n = in1.Shape.Dimensions.LongLength - 3;
                        long[] limits = in1.Shape.Dimensions.Where(x => n-- > 0).Select(x => x.Length).ToArray();
                        long[] counters = new long[limits.LongLength];

                        long totalOps = limits.LongLength == 0 ? 1 : limits.Aggregate<long>((a, b) => a * b);

                        //This chunck of variables are used to prevent repeated calculations of offsets
                        long dimIndex0 = 0 + limits.LongLength;
                        long dimIndex1 = 1 + limits.LongLength;
                        long dimIndex2 = 2 + limits.LongLength;

                        long opsOuter = @out.Shape.Dimensions[0 + limits.LongLength].Length;
                        long opsInner = @out.Shape.Dimensions[1 + limits.LongLength].Length;
                        long opsInnerInner = @out.Shape.Dimensions[2 + limits.LongLength].Length;

                        long outerStride1 = in1.Shape.Dimensions[dimIndex0].Stride;
                        long outerStride3 = @out.Shape.Dimensions[dimIndex0].Stride;

                        long innerStride1 = in1.Shape.Dimensions[dimIndex1].Stride;
                        long innerStride3 = @out.Shape.Dimensions[dimIndex1].Stride;

                        long innerInnerStride1 = in1.Shape.Dimensions[dimIndex2].Stride;
                        long innerInnerStride3 = @out.Shape.Dimensions[dimIndex2].Stride;

                        outerStride1 -= innerStride1 * in1.Shape.Dimensions[dimIndex1].Length;
                        outerStride3 -= innerStride3 * @out.Shape.Dimensions[dimIndex1].Length;

                        innerStride1 -= innerInnerStride1 * in1.Shape.Dimensions[dimIndex2].Length;
                        innerStride3 -= innerInnerStride3 * @out.Shape.Dimensions[dimIndex2].Length;

                        for (long outer = 0; outer < totalOps; outer++)
                        {
                            //Get the array offset for the first element in the outer dimension
                            long ix1 = in1.Shape[counters];
                            long ix3 = @out.Shape[counters];


                            for (long i = 0; i < opsOuter; i++)
                            {
                                for (long j = 0; j < opsInner; j++)
                                {
                                    for (long k = 0; k < opsInnerInner; k++)
                                    {
                                        d2[ix3] = (System.Single)(d1[ix1]);
                                        ix1 += innerInnerStride1;
                                        ix3 += innerInnerStride3;
                                    }

                                    ix1 += innerStride1;
                                    ix3 += innerStride3;
                                }

                                ix1 += outerStride1;
                                ix3 += outerStride3;
                            }

                            if (counters.LongLength > 0)
                            {
                                //Basically a ripple carry adder
                                long p = counters.LongLength - 1;
                                while (++counters[p] == limits[p] && p > 0)
                                {
                                    counters[p] = 0;
                                    p--;
                                }
                            }
                        }
                    }
                }
            }
        }

        /// <summary>
        /// Unsafe implementation of applying a unary operation
        /// </summary>
        /// <typeparam name="C">The type of operation to perform</typeparam>
        /// <param name="op">The operation instance</param>
        /// <param name="scalar">The input scalar argument</param>
        /// <param name="out">The output target</param>
        internal static void UFunc_Op_Inner_Unary_Scalar_Flush_SByte_TypedImpl<C>(NumCIL.Float.ToFloat op, System.SByte scalar, NdArray<System.Single> @out)
            where C : IUnaryOp<System.SByte>
        {
            unsafe
            {
                using (var f2 = new Pinner(@out.DataAccessor))
                {
                    var d2 = (System.Single*)f2.ptr;

                    if (@out.Shape.Dimensions.Length == 1)
                    {
                        long totalOps = @out.Shape.Dimensions[0].Length;
                        long ix2 = @out.Shape.Offset;
                        long stride2 = @out.Shape.Dimensions[0].Stride;

                        for (long i = 0; i < totalOps; i++)
                        {
                            d2[ix2] = (System.Single)(scalar);
                            ix2 += stride2;
                        }
                    }
                    else if (@out.Shape.Dimensions.Length == 2)
                    {
                        long opsOuter = @out.Shape.Dimensions[0].Length;
                        long opsInner = @out.Shape.Dimensions[1].Length;

                        long ix2 = @out.Shape.Offset;
                        long outerStride2 = @out.Shape.Dimensions[0].Stride;
                        long innerStride2 = @out.Shape.Dimensions[1].Stride;
                        outerStride2 -= innerStride2 * @out.Shape.Dimensions[1].Length;

                        for (long i = 0; i < opsOuter; i++)
                        {
                            for (long j = 0; j < opsInner; j++)
                            {
                                d2[ix2] = (System.Single)(scalar);
                                ix2 += innerStride2;
                            }

                            ix2 += outerStride2;
                        }
                    }
                    else
                    {
                        long n = @out.Shape.Dimensions.LongLength - 3;
                        long[] limits = @out.Shape.Dimensions.Where(x => n-- > 0).Select(x => x.Length).ToArray();
                        long[] counters = new long[limits.LongLength];

                        long totalOps = limits.LongLength == 0 ? 1 : limits.Aggregate<long>((a, b) => a * b);

                        //This chunck of variables are used to prevent repeated calculations of offsets
                        long dimIndex0 = 0 + limits.LongLength;
                        long dimIndex1 = 1 + limits.LongLength;
                        long dimIndex2 = 2 + limits.LongLength;

                        long opsOuter = @out.Shape.Dimensions[0 + limits.LongLength].Length;
                        long opsInner = @out.Shape.Dimensions[1 + limits.LongLength].Length;
                        long opsInnerInner = @out.Shape.Dimensions[2 + limits.LongLength].Length;

                        long outerStride3 = @out.Shape.Dimensions[dimIndex0].Stride;
                        long innerStride3 = @out.Shape.Dimensions[dimIndex1].Stride;
                        long innerInnerStride3 = @out.Shape.Dimensions[dimIndex2].Stride;
                        outerStride3 -= innerStride3 * @out.Shape.Dimensions[dimIndex1].Length;
                        innerStride3 -= innerInnerStride3 * @out.Shape.Dimensions[dimIndex2].Length;

                        for (long outer = 0; outer < totalOps; outer++)
                        {
                            //Get the array offset for the first element in the outer dimension
                            long ix3 = @out.Shape[counters];

                            for (long i = 0; i < opsOuter; i++)
                            {
                                for (long j = 0; j < opsInner; j++)
                                {
                                    for (long k = 0; k < opsInnerInner; k++)
                                    {
                                        d2[ix3] = (System.Single)(scalar);
                                        ix3 += innerInnerStride3;
                                    }

                                    ix3 += innerStride3;
                                }

                                ix3 += outerStride3;
                            }

                            if (counters.LongLength > 0)
                            {
                                //Basically a ripple carry adder
                                long p = counters.LongLength - 1;
                                while (++counters[p] == limits[p] && p > 0)
                                {
                                    counters[p] = 0;
                                    p--;
                                }
                            }
                        }
                    }
                }
            }
        }
        /// <summary>
        /// Unsafe implementation of applying a unary operation
        /// </summary>
        /// <typeparam name="C">The type of operation to perform</typeparam>
        /// <param name="op">The operation instance</param>
        /// <param name="in1">The input argument</param>
        /// <param name="out">The output target</param>
        internal static void UFunc_Op_Inner_Unary_Flush_Byte_TypedImpl<C>(NumCIL.Float.ToFloat op, NdArray<System.Byte> in1, NdArray<System.Single> @out)
            where C : IUnaryOp<System.Byte>
        {
            unsafe
            {
                using (var f1 = new Pinner(in1.DataAccessor))
                using (var f2 = new Pinner(@out.DataAccessor))
                {
                    var d1 = (System.Byte*)f1.ptr;
                    var d2 = (System.Single*)f2.ptr;

                    if (@out.Shape.Dimensions.Length == 1)
                    {
                        long totalOps = @out.Shape.Dimensions[0].Length;

                        long ix1 = in1.Shape.Offset;
                        long ix2 = @out.Shape.Offset;

                        long stride1 = in1.Shape.Dimensions[0].Stride;
                        long stride2 = @out.Shape.Dimensions[0].Stride;


                        if (stride1 == stride2 && ix1 == ix2)
                        {
                            //Best case, all are equal, just keep a single counter
                            for (long i = 0; i < totalOps; i++)
                            {
                                d2[ix1] = (System.Single)(d1[ix1]);
                                ix1 += stride1;
                            }
                        }
                        else
                        {
                            for (long i = 0; i < totalOps; i++)
                            {
                                d2[ix2] = (System.Single)(d1[ix1]);
                                ix1 += stride1;
                                ix2 += stride2;
                            }
                        }
                    }
                    else if (@out.Shape.Dimensions.Length == 2)
                    {
                        long opsOuter = @out.Shape.Dimensions[0].Length;
                        long opsInner = @out.Shape.Dimensions[1].Length;

                        long ix1 = in1.Shape.Offset;
                        long ix2 = @out.Shape.Offset;

                        long outerStride1 = in1.Shape.Dimensions[0].Stride;
                        long outerStride2 = @out.Shape.Dimensions[0].Stride;

                        long innerStride1 = in1.Shape.Dimensions[1].Stride;
                        long innerStride2 = @out.Shape.Dimensions[1].Stride;

                        outerStride1 -= innerStride1 * in1.Shape.Dimensions[1].Length;
                        outerStride2 -= innerStride2 * @out.Shape.Dimensions[1].Length;

                        for (long i = 0; i < opsOuter; i++)
                        {
                            for (long j = 0; j < opsInner; j++)
                            {
                                d2[ix2] = (System.Single)(d1[ix1]);
                                ix1 += innerStride1;
                                ix2 += innerStride2;
                            }

                            ix1 += outerStride1;
                            ix2 += outerStride2;
                        }
                    }
                    else
                    {
                        long n = in1.Shape.Dimensions.LongLength - 3;
                        long[] limits = in1.Shape.Dimensions.Where(x => n-- > 0).Select(x => x.Length).ToArray();
                        long[] counters = new long[limits.LongLength];

                        long totalOps = limits.LongLength == 0 ? 1 : limits.Aggregate<long>((a, b) => a * b);

                        //This chunck of variables are used to prevent repeated calculations of offsets
                        long dimIndex0 = 0 + limits.LongLength;
                        long dimIndex1 = 1 + limits.LongLength;
                        long dimIndex2 = 2 + limits.LongLength;

                        long opsOuter = @out.Shape.Dimensions[0 + limits.LongLength].Length;
                        long opsInner = @out.Shape.Dimensions[1 + limits.LongLength].Length;
                        long opsInnerInner = @out.Shape.Dimensions[2 + limits.LongLength].Length;

                        long outerStride1 = in1.Shape.Dimensions[dimIndex0].Stride;
                        long outerStride3 = @out.Shape.Dimensions[dimIndex0].Stride;

                        long innerStride1 = in1.Shape.Dimensions[dimIndex1].Stride;
                        long innerStride3 = @out.Shape.Dimensions[dimIndex1].Stride;

                        long innerInnerStride1 = in1.Shape.Dimensions[dimIndex2].Stride;
                        long innerInnerStride3 = @out.Shape.Dimensions[dimIndex2].Stride;

                        outerStride1 -= innerStride1 * in1.Shape.Dimensions[dimIndex1].Length;
                        outerStride3 -= innerStride3 * @out.Shape.Dimensions[dimIndex1].Length;

                        innerStride1 -= innerInnerStride1 * in1.Shape.Dimensions[dimIndex2].Length;
                        innerStride3 -= innerInnerStride3 * @out.Shape.Dimensions[dimIndex2].Length;

                        for (long outer = 0; outer < totalOps; outer++)
                        {
                            //Get the array offset for the first element in the outer dimension
                            long ix1 = in1.Shape[counters];
                            long ix3 = @out.Shape[counters];


                            for (long i = 0; i < opsOuter; i++)
                            {
                                for (long j = 0; j < opsInner; j++)
                                {
                                    for (long k = 0; k < opsInnerInner; k++)
                                    {
                                        d2[ix3] = (System.Single)(d1[ix1]);
                                        ix1 += innerInnerStride1;
                                        ix3 += innerInnerStride3;
                                    }

                                    ix1 += innerStride1;
                                    ix3 += innerStride3;
                                }

                                ix1 += outerStride1;
                                ix3 += outerStride3;
                            }

                            if (counters.LongLength > 0)
                            {
                                //Basically a ripple carry adder
                                long p = counters.LongLength - 1;
                                while (++counters[p] == limits[p] && p > 0)
                                {
                                    counters[p] = 0;
                                    p--;
                                }
                            }
                        }
                    }
                }
            }
        }

        /// <summary>
        /// Unsafe implementation of applying a unary operation
        /// </summary>
        /// <typeparam name="C">The type of operation to perform</typeparam>
        /// <param name="op">The operation instance</param>
        /// <param name="scalar">The input scalar argument</param>
        /// <param name="out">The output target</param>
        internal static void UFunc_Op_Inner_Unary_Scalar_Flush_Byte_TypedImpl<C>(NumCIL.Float.ToFloat op, System.Byte scalar, NdArray<System.Single> @out)
            where C : IUnaryOp<System.Byte>
        {
            unsafe
            {
                using (var f2 = new Pinner(@out.DataAccessor))
                {
                    var d2 = (System.Single*)f2.ptr;

                    if (@out.Shape.Dimensions.Length == 1)
                    {
                        long totalOps = @out.Shape.Dimensions[0].Length;
                        long ix2 = @out.Shape.Offset;
                        long stride2 = @out.Shape.Dimensions[0].Stride;

                        for (long i = 0; i < totalOps; i++)
                        {
                            d2[ix2] = (System.Single)(scalar);
                            ix2 += stride2;
                        }
                    }
                    else if (@out.Shape.Dimensions.Length == 2)
                    {
                        long opsOuter = @out.Shape.Dimensions[0].Length;
                        long opsInner = @out.Shape.Dimensions[1].Length;

                        long ix2 = @out.Shape.Offset;
                        long outerStride2 = @out.Shape.Dimensions[0].Stride;
                        long innerStride2 = @out.Shape.Dimensions[1].Stride;
                        outerStride2 -= innerStride2 * @out.Shape.Dimensions[1].Length;

                        for (long i = 0; i < opsOuter; i++)
                        {
                            for (long j = 0; j < opsInner; j++)
                            {
                                d2[ix2] = (System.Single)(scalar);
                                ix2 += innerStride2;
                            }

                            ix2 += outerStride2;
                        }
                    }
                    else
                    {
                        long n = @out.Shape.Dimensions.LongLength - 3;
                        long[] limits = @out.Shape.Dimensions.Where(x => n-- > 0).Select(x => x.Length).ToArray();
                        long[] counters = new long[limits.LongLength];

                        long totalOps = limits.LongLength == 0 ? 1 : limits.Aggregate<long>((a, b) => a * b);

                        //This chunck of variables are used to prevent repeated calculations of offsets
                        long dimIndex0 = 0 + limits.LongLength;
                        long dimIndex1 = 1 + limits.LongLength;
                        long dimIndex2 = 2 + limits.LongLength;

                        long opsOuter = @out.Shape.Dimensions[0 + limits.LongLength].Length;
                        long opsInner = @out.Shape.Dimensions[1 + limits.LongLength].Length;
                        long opsInnerInner = @out.Shape.Dimensions[2 + limits.LongLength].Length;

                        long outerStride3 = @out.Shape.Dimensions[dimIndex0].Stride;
                        long innerStride3 = @out.Shape.Dimensions[dimIndex1].Stride;
                        long innerInnerStride3 = @out.Shape.Dimensions[dimIndex2].Stride;
                        outerStride3 -= innerStride3 * @out.Shape.Dimensions[dimIndex1].Length;
                        innerStride3 -= innerInnerStride3 * @out.Shape.Dimensions[dimIndex2].Length;

                        for (long outer = 0; outer < totalOps; outer++)
                        {
                            //Get the array offset for the first element in the outer dimension
                            long ix3 = @out.Shape[counters];

                            for (long i = 0; i < opsOuter; i++)
                            {
                                for (long j = 0; j < opsInner; j++)
                                {
                                    for (long k = 0; k < opsInnerInner; k++)
                                    {
                                        d2[ix3] = (System.Single)(scalar);
                                        ix3 += innerInnerStride3;
                                    }

                                    ix3 += innerStride3;
                                }

                                ix3 += outerStride3;
                            }

                            if (counters.LongLength > 0)
                            {
                                //Basically a ripple carry adder
                                long p = counters.LongLength - 1;
                                while (++counters[p] == limits[p] && p > 0)
                                {
                                    counters[p] = 0;
                                    p--;
                                }
                            }
                        }
                    }
                }
            }
        }
        /// <summary>
        /// Unsafe implementation of applying a unary operation
        /// </summary>
        /// <typeparam name="C">The type of operation to perform</typeparam>
        /// <param name="op">The operation instance</param>
        /// <param name="in1">The input argument</param>
        /// <param name="out">The output target</param>
        internal static void UFunc_Op_Inner_Unary_Flush_Int16_TypedImpl<C>(NumCIL.Float.ToFloat op, NdArray<System.Int16> in1, NdArray<System.Single> @out)
            where C : IUnaryOp<System.Int16>
        {
            unsafe
            {
                using (var f1 = new Pinner(in1.DataAccessor))
                using (var f2 = new Pinner(@out.DataAccessor))
                {
                    var d1 = (System.Int16*)f1.ptr;
                    var d2 = (System.Single*)f2.ptr;

                    if (@out.Shape.Dimensions.Length == 1)
                    {
                        long totalOps = @out.Shape.Dimensions[0].Length;

                        long ix1 = in1.Shape.Offset;
                        long ix2 = @out.Shape.Offset;

                        long stride1 = in1.Shape.Dimensions[0].Stride;
                        long stride2 = @out.Shape.Dimensions[0].Stride;


                        if (stride1 == stride2 && ix1 == ix2)
                        {
                            //Best case, all are equal, just keep a single counter
                            for (long i = 0; i < totalOps; i++)
                            {
                                d2[ix1] = (System.Single)(d1[ix1]);
                                ix1 += stride1;
                            }
                        }
                        else
                        {
                            for (long i = 0; i < totalOps; i++)
                            {
                                d2[ix2] = (System.Single)(d1[ix1]);
                                ix1 += stride1;
                                ix2 += stride2;
                            }
                        }
                    }
                    else if (@out.Shape.Dimensions.Length == 2)
                    {
                        long opsOuter = @out.Shape.Dimensions[0].Length;
                        long opsInner = @out.Shape.Dimensions[1].Length;

                        long ix1 = in1.Shape.Offset;
                        long ix2 = @out.Shape.Offset;

                        long outerStride1 = in1.Shape.Dimensions[0].Stride;
                        long outerStride2 = @out.Shape.Dimensions[0].Stride;

                        long innerStride1 = in1.Shape.Dimensions[1].Stride;
                        long innerStride2 = @out.Shape.Dimensions[1].Stride;

                        outerStride1 -= innerStride1 * in1.Shape.Dimensions[1].Length;
                        outerStride2 -= innerStride2 * @out.Shape.Dimensions[1].Length;

                        for (long i = 0; i < opsOuter; i++)
                        {
                            for (long j = 0; j < opsInner; j++)
                            {
                                d2[ix2] = (System.Single)(d1[ix1]);
                                ix1 += innerStride1;
                                ix2 += innerStride2;
                            }

                            ix1 += outerStride1;
                            ix2 += outerStride2;
                        }
                    }
                    else
                    {
                        long n = in1.Shape.Dimensions.LongLength - 3;
                        long[] limits = in1.Shape.Dimensions.Where(x => n-- > 0).Select(x => x.Length).ToArray();
                        long[] counters = new long[limits.LongLength];

                        long totalOps = limits.LongLength == 0 ? 1 : limits.Aggregate<long>((a, b) => a * b);

                        //This chunck of variables are used to prevent repeated calculations of offsets
                        long dimIndex0 = 0 + limits.LongLength;
                        long dimIndex1 = 1 + limits.LongLength;
                        long dimIndex2 = 2 + limits.LongLength;

                        long opsOuter = @out.Shape.Dimensions[0 + limits.LongLength].Length;
                        long opsInner = @out.Shape.Dimensions[1 + limits.LongLength].Length;
                        long opsInnerInner = @out.Shape.Dimensions[2 + limits.LongLength].Length;

                        long outerStride1 = in1.Shape.Dimensions[dimIndex0].Stride;
                        long outerStride3 = @out.Shape.Dimensions[dimIndex0].Stride;

                        long innerStride1 = in1.Shape.Dimensions[dimIndex1].Stride;
                        long innerStride3 = @out.Shape.Dimensions[dimIndex1].Stride;

                        long innerInnerStride1 = in1.Shape.Dimensions[dimIndex2].Stride;
                        long innerInnerStride3 = @out.Shape.Dimensions[dimIndex2].Stride;

                        outerStride1 -= innerStride1 * in1.Shape.Dimensions[dimIndex1].Length;
                        outerStride3 -= innerStride3 * @out.Shape.Dimensions[dimIndex1].Length;

                        innerStride1 -= innerInnerStride1 * in1.Shape.Dimensions[dimIndex2].Length;
                        innerStride3 -= innerInnerStride3 * @out.Shape.Dimensions[dimIndex2].Length;

                        for (long outer = 0; outer < totalOps; outer++)
                        {
                            //Get the array offset for the first element in the outer dimension
                            long ix1 = in1.Shape[counters];
                            long ix3 = @out.Shape[counters];


                            for (long i = 0; i < opsOuter; i++)
                            {
                                for (long j = 0; j < opsInner; j++)
                                {
                                    for (long k = 0; k < opsInnerInner; k++)
                                    {
                                        d2[ix3] = (System.Single)(d1[ix1]);
                                        ix1 += innerInnerStride1;
                                        ix3 += innerInnerStride3;
                                    }

                                    ix1 += innerStride1;
                                    ix3 += innerStride3;
                                }

                                ix1 += outerStride1;
                                ix3 += outerStride3;
                            }

                            if (counters.LongLength > 0)
                            {
                                //Basically a ripple carry adder
                                long p = counters.LongLength - 1;
                                while (++counters[p] == limits[p] && p > 0)
                                {
                                    counters[p] = 0;
                                    p--;
                                }
                            }
                        }
                    }
                }
            }
        }

        /// <summary>
        /// Unsafe implementation of applying a unary operation
        /// </summary>
        /// <typeparam name="C">The type of operation to perform</typeparam>
        /// <param name="op">The operation instance</param>
        /// <param name="scalar">The input scalar argument</param>
        /// <param name="out">The output target</param>
        internal static void UFunc_Op_Inner_Unary_Scalar_Flush_Int16_TypedImpl<C>(NumCIL.Float.ToFloat op, System.Int16 scalar, NdArray<System.Single> @out)
            where C : IUnaryOp<System.Int16>
        {
            unsafe
            {
                using (var f2 = new Pinner(@out.DataAccessor))
                {
                    var d2 = (System.Single*)f2.ptr;

                    if (@out.Shape.Dimensions.Length == 1)
                    {
                        long totalOps = @out.Shape.Dimensions[0].Length;
                        long ix2 = @out.Shape.Offset;
                        long stride2 = @out.Shape.Dimensions[0].Stride;

                        for (long i = 0; i < totalOps; i++)
                        {
                            d2[ix2] = (System.Single)(scalar);
                            ix2 += stride2;
                        }
                    }
                    else if (@out.Shape.Dimensions.Length == 2)
                    {
                        long opsOuter = @out.Shape.Dimensions[0].Length;
                        long opsInner = @out.Shape.Dimensions[1].Length;

                        long ix2 = @out.Shape.Offset;
                        long outerStride2 = @out.Shape.Dimensions[0].Stride;
                        long innerStride2 = @out.Shape.Dimensions[1].Stride;
                        outerStride2 -= innerStride2 * @out.Shape.Dimensions[1].Length;

                        for (long i = 0; i < opsOuter; i++)
                        {
                            for (long j = 0; j < opsInner; j++)
                            {
                                d2[ix2] = (System.Single)(scalar);
                                ix2 += innerStride2;
                            }

                            ix2 += outerStride2;
                        }
                    }
                    else
                    {
                        long n = @out.Shape.Dimensions.LongLength - 3;
                        long[] limits = @out.Shape.Dimensions.Where(x => n-- > 0).Select(x => x.Length).ToArray();
                        long[] counters = new long[limits.LongLength];

                        long totalOps = limits.LongLength == 0 ? 1 : limits.Aggregate<long>((a, b) => a * b);

                        //This chunck of variables are used to prevent repeated calculations of offsets
                        long dimIndex0 = 0 + limits.LongLength;
                        long dimIndex1 = 1 + limits.LongLength;
                        long dimIndex2 = 2 + limits.LongLength;

                        long opsOuter = @out.Shape.Dimensions[0 + limits.LongLength].Length;
                        long opsInner = @out.Shape.Dimensions[1 + limits.LongLength].Length;
                        long opsInnerInner = @out.Shape.Dimensions[2 + limits.LongLength].Length;

                        long outerStride3 = @out.Shape.Dimensions[dimIndex0].Stride;
                        long innerStride3 = @out.Shape.Dimensions[dimIndex1].Stride;
                        long innerInnerStride3 = @out.Shape.Dimensions[dimIndex2].Stride;
                        outerStride3 -= innerStride3 * @out.Shape.Dimensions[dimIndex1].Length;
                        innerStride3 -= innerInnerStride3 * @out.Shape.Dimensions[dimIndex2].Length;

                        for (long outer = 0; outer < totalOps; outer++)
                        {
                            //Get the array offset for the first element in the outer dimension
                            long ix3 = @out.Shape[counters];

                            for (long i = 0; i < opsOuter; i++)
                            {
                                for (long j = 0; j < opsInner; j++)
                                {
                                    for (long k = 0; k < opsInnerInner; k++)
                                    {
                                        d2[ix3] = (System.Single)(scalar);
                                        ix3 += innerInnerStride3;
                                    }

                                    ix3 += innerStride3;
                                }

                                ix3 += outerStride3;
                            }

                            if (counters.LongLength > 0)
                            {
                                //Basically a ripple carry adder
                                long p = counters.LongLength - 1;
                                while (++counters[p] == limits[p] && p > 0)
                                {
                                    counters[p] = 0;
                                    p--;
                                }
                            }
                        }
                    }
                }
            }
        }
        /// <summary>
        /// Unsafe implementation of applying a unary operation
        /// </summary>
        /// <typeparam name="C">The type of operation to perform</typeparam>
        /// <param name="op">The operation instance</param>
        /// <param name="in1">The input argument</param>
        /// <param name="out">The output target</param>
        internal static void UFunc_Op_Inner_Unary_Flush_UInt16_TypedImpl<C>(NumCIL.Float.ToFloat op, NdArray<System.UInt16> in1, NdArray<System.Single> @out)
            where C : IUnaryOp<System.UInt16>
        {
            unsafe
            {
                using (var f1 = new Pinner(in1.DataAccessor))
                using (var f2 = new Pinner(@out.DataAccessor))
                {
                    var d1 = (System.UInt16*)f1.ptr;
                    var d2 = (System.Single*)f2.ptr;

                    if (@out.Shape.Dimensions.Length == 1)
                    {
                        long totalOps = @out.Shape.Dimensions[0].Length;

                        long ix1 = in1.Shape.Offset;
                        long ix2 = @out.Shape.Offset;

                        long stride1 = in1.Shape.Dimensions[0].Stride;
                        long stride2 = @out.Shape.Dimensions[0].Stride;


                        if (stride1 == stride2 && ix1 == ix2)
                        {
                            //Best case, all are equal, just keep a single counter
                            for (long i = 0; i < totalOps; i++)
                            {
                                d2[ix1] = (System.Single)(d1[ix1]);
                                ix1 += stride1;
                            }
                        }
                        else
                        {
                            for (long i = 0; i < totalOps; i++)
                            {
                                d2[ix2] = (System.Single)(d1[ix1]);
                                ix1 += stride1;
                                ix2 += stride2;
                            }
                        }
                    }
                    else if (@out.Shape.Dimensions.Length == 2)
                    {
                        long opsOuter = @out.Shape.Dimensions[0].Length;
                        long opsInner = @out.Shape.Dimensions[1].Length;

                        long ix1 = in1.Shape.Offset;
                        long ix2 = @out.Shape.Offset;

                        long outerStride1 = in1.Shape.Dimensions[0].Stride;
                        long outerStride2 = @out.Shape.Dimensions[0].Stride;

                        long innerStride1 = in1.Shape.Dimensions[1].Stride;
                        long innerStride2 = @out.Shape.Dimensions[1].Stride;

                        outerStride1 -= innerStride1 * in1.Shape.Dimensions[1].Length;
                        outerStride2 -= innerStride2 * @out.Shape.Dimensions[1].Length;

                        for (long i = 0; i < opsOuter; i++)
                        {
                            for (long j = 0; j < opsInner; j++)
                            {
                                d2[ix2] = (System.Single)(d1[ix1]);
                                ix1 += innerStride1;
                                ix2 += innerStride2;
                            }

                            ix1 += outerStride1;
                            ix2 += outerStride2;
                        }
                    }
                    else
                    {
                        long n = in1.Shape.Dimensions.LongLength - 3;
                        long[] limits = in1.Shape.Dimensions.Where(x => n-- > 0).Select(x => x.Length).ToArray();
                        long[] counters = new long[limits.LongLength];

                        long totalOps = limits.LongLength == 0 ? 1 : limits.Aggregate<long>((a, b) => a * b);

                        //This chunck of variables are used to prevent repeated calculations of offsets
                        long dimIndex0 = 0 + limits.LongLength;
                        long dimIndex1 = 1 + limits.LongLength;
                        long dimIndex2 = 2 + limits.LongLength;

                        long opsOuter = @out.Shape.Dimensions[0 + limits.LongLength].Length;
                        long opsInner = @out.Shape.Dimensions[1 + limits.LongLength].Length;
                        long opsInnerInner = @out.Shape.Dimensions[2 + limits.LongLength].Length;

                        long outerStride1 = in1.Shape.Dimensions[dimIndex0].Stride;
                        long outerStride3 = @out.Shape.Dimensions[dimIndex0].Stride;

                        long innerStride1 = in1.Shape.Dimensions[dimIndex1].Stride;
                        long innerStride3 = @out.Shape.Dimensions[dimIndex1].Stride;

                        long innerInnerStride1 = in1.Shape.Dimensions[dimIndex2].Stride;
                        long innerInnerStride3 = @out.Shape.Dimensions[dimIndex2].Stride;

                        outerStride1 -= innerStride1 * in1.Shape.Dimensions[dimIndex1].Length;
                        outerStride3 -= innerStride3 * @out.Shape.Dimensions[dimIndex1].Length;

                        innerStride1 -= innerInnerStride1 * in1.Shape.Dimensions[dimIndex2].Length;
                        innerStride3 -= innerInnerStride3 * @out.Shape.Dimensions[dimIndex2].Length;

                        for (long outer = 0; outer < totalOps; outer++)
                        {
                            //Get the array offset for the first element in the outer dimension
                            long ix1 = in1.Shape[counters];
                            long ix3 = @out.Shape[counters];


                            for (long i = 0; i < opsOuter; i++)
                            {
                                for (long j = 0; j < opsInner; j++)
                                {
                                    for (long k = 0; k < opsInnerInner; k++)
                                    {
                                        d2[ix3] = (System.Single)(d1[ix1]);
                                        ix1 += innerInnerStride1;
                                        ix3 += innerInnerStride3;
                                    }

                                    ix1 += innerStride1;
                                    ix3 += innerStride3;
                                }

                                ix1 += outerStride1;
                                ix3 += outerStride3;
                            }

                            if (counters.LongLength > 0)
                            {
                                //Basically a ripple carry adder
                                long p = counters.LongLength - 1;
                                while (++counters[p] == limits[p] && p > 0)
                                {
                                    counters[p] = 0;
                                    p--;
                                }
                            }
                        }
                    }
                }
            }
        }

        /// <summary>
        /// Unsafe implementation of applying a unary operation
        /// </summary>
        /// <typeparam name="C">The type of operation to perform</typeparam>
        /// <param name="op">The operation instance</param>
        /// <param name="scalar">The input scalar argument</param>
        /// <param name="out">The output target</param>
        internal static void UFunc_Op_Inner_Unary_Scalar_Flush_UInt16_TypedImpl<C>(NumCIL.Float.ToFloat op, System.UInt16 scalar, NdArray<System.Single> @out)
            where C : IUnaryOp<System.UInt16>
        {
            unsafe
            {
                using (var f2 = new Pinner(@out.DataAccessor))
                {
                    var d2 = (System.Single*)f2.ptr;

                    if (@out.Shape.Dimensions.Length == 1)
                    {
                        long totalOps = @out.Shape.Dimensions[0].Length;
                        long ix2 = @out.Shape.Offset;
                        long stride2 = @out.Shape.Dimensions[0].Stride;

                        for (long i = 0; i < totalOps; i++)
                        {
                            d2[ix2] = (System.Single)(scalar);
                            ix2 += stride2;
                        }
                    }
                    else if (@out.Shape.Dimensions.Length == 2)
                    {
                        long opsOuter = @out.Shape.Dimensions[0].Length;
                        long opsInner = @out.Shape.Dimensions[1].Length;

                        long ix2 = @out.Shape.Offset;
                        long outerStride2 = @out.Shape.Dimensions[0].Stride;
                        long innerStride2 = @out.Shape.Dimensions[1].Stride;
                        outerStride2 -= innerStride2 * @out.Shape.Dimensions[1].Length;

                        for (long i = 0; i < opsOuter; i++)
                        {
                            for (long j = 0; j < opsInner; j++)
                            {
                                d2[ix2] = (System.Single)(scalar);
                                ix2 += innerStride2;
                            }

                            ix2 += outerStride2;
                        }
                    }
                    else
                    {
                        long n = @out.Shape.Dimensions.LongLength - 3;
                        long[] limits = @out.Shape.Dimensions.Where(x => n-- > 0).Select(x => x.Length).ToArray();
                        long[] counters = new long[limits.LongLength];

                        long totalOps = limits.LongLength == 0 ? 1 : limits.Aggregate<long>((a, b) => a * b);

                        //This chunck of variables are used to prevent repeated calculations of offsets
                        long dimIndex0 = 0 + limits.LongLength;
                        long dimIndex1 = 1 + limits.LongLength;
                        long dimIndex2 = 2 + limits.LongLength;

                        long opsOuter = @out.Shape.Dimensions[0 + limits.LongLength].Length;
                        long opsInner = @out.Shape.Dimensions[1 + limits.LongLength].Length;
                        long opsInnerInner = @out.Shape.Dimensions[2 + limits.LongLength].Length;

                        long outerStride3 = @out.Shape.Dimensions[dimIndex0].Stride;
                        long innerStride3 = @out.Shape.Dimensions[dimIndex1].Stride;
                        long innerInnerStride3 = @out.Shape.Dimensions[dimIndex2].Stride;
                        outerStride3 -= innerStride3 * @out.Shape.Dimensions[dimIndex1].Length;
                        innerStride3 -= innerInnerStride3 * @out.Shape.Dimensions[dimIndex2].Length;

                        for (long outer = 0; outer < totalOps; outer++)
                        {
                            //Get the array offset for the first element in the outer dimension
                            long ix3 = @out.Shape[counters];

                            for (long i = 0; i < opsOuter; i++)
                            {
                                for (long j = 0; j < opsInner; j++)
                                {
                                    for (long k = 0; k < opsInnerInner; k++)
                                    {
                                        d2[ix3] = (System.Single)(scalar);
                                        ix3 += innerInnerStride3;
                                    }

                                    ix3 += innerStride3;
                                }

                                ix3 += outerStride3;
                            }

                            if (counters.LongLength > 0)
                            {
                                //Basically a ripple carry adder
                                long p = counters.LongLength - 1;
                                while (++counters[p] == limits[p] && p > 0)
                                {
                                    counters[p] = 0;
                                    p--;
                                }
                            }
                        }
                    }
                }
            }
        }
        /// <summary>
        /// Unsafe implementation of applying a unary operation
        /// </summary>
        /// <typeparam name="C">The type of operation to perform</typeparam>
        /// <param name="op">The operation instance</param>
        /// <param name="in1">The input argument</param>
        /// <param name="out">The output target</param>
        internal static void UFunc_Op_Inner_Unary_Flush_Int32_TypedImpl<C>(NumCIL.Float.ToFloat op, NdArray<System.Int32> in1, NdArray<System.Single> @out)
            where C : IUnaryOp<System.Int32>
        {
            unsafe
            {
                using (var f1 = new Pinner(in1.DataAccessor))
                using (var f2 = new Pinner(@out.DataAccessor))
                {
                    var d1 = (System.Int32*)f1.ptr;
                    var d2 = (System.Single*)f2.ptr;

                    if (@out.Shape.Dimensions.Length == 1)
                    {
                        long totalOps = @out.Shape.Dimensions[0].Length;

                        long ix1 = in1.Shape.Offset;
                        long ix2 = @out.Shape.Offset;

                        long stride1 = in1.Shape.Dimensions[0].Stride;
                        long stride2 = @out.Shape.Dimensions[0].Stride;


                        if (stride1 == stride2 && ix1 == ix2)
                        {
                            //Best case, all are equal, just keep a single counter
                            for (long i = 0; i < totalOps; i++)
                            {
                                d2[ix1] = (System.Single)(d1[ix1]);
                                ix1 += stride1;
                            }
                        }
                        else
                        {
                            for (long i = 0; i < totalOps; i++)
                            {
                                d2[ix2] = (System.Single)(d1[ix1]);
                                ix1 += stride1;
                                ix2 += stride2;
                            }
                        }
                    }
                    else if (@out.Shape.Dimensions.Length == 2)
                    {
                        long opsOuter = @out.Shape.Dimensions[0].Length;
                        long opsInner = @out.Shape.Dimensions[1].Length;

                        long ix1 = in1.Shape.Offset;
                        long ix2 = @out.Shape.Offset;

                        long outerStride1 = in1.Shape.Dimensions[0].Stride;
                        long outerStride2 = @out.Shape.Dimensions[0].Stride;

                        long innerStride1 = in1.Shape.Dimensions[1].Stride;
                        long innerStride2 = @out.Shape.Dimensions[1].Stride;

                        outerStride1 -= innerStride1 * in1.Shape.Dimensions[1].Length;
                        outerStride2 -= innerStride2 * @out.Shape.Dimensions[1].Length;

                        for (long i = 0; i < opsOuter; i++)
                        {
                            for (long j = 0; j < opsInner; j++)
                            {
                                d2[ix2] = (System.Single)(d1[ix1]);
                                ix1 += innerStride1;
                                ix2 += innerStride2;
                            }

                            ix1 += outerStride1;
                            ix2 += outerStride2;
                        }
                    }
                    else
                    {
                        long n = in1.Shape.Dimensions.LongLength - 3;
                        long[] limits = in1.Shape.Dimensions.Where(x => n-- > 0).Select(x => x.Length).ToArray();
                        long[] counters = new long[limits.LongLength];

                        long totalOps = limits.LongLength == 0 ? 1 : limits.Aggregate<long>((a, b) => a * b);

                        //This chunck of variables are used to prevent repeated calculations of offsets
                        long dimIndex0 = 0 + limits.LongLength;
                        long dimIndex1 = 1 + limits.LongLength;
                        long dimIndex2 = 2 + limits.LongLength;

                        long opsOuter = @out.Shape.Dimensions[0 + limits.LongLength].Length;
                        long opsInner = @out.Shape.Dimensions[1 + limits.LongLength].Length;
                        long opsInnerInner = @out.Shape.Dimensions[2 + limits.LongLength].Length;

                        long outerStride1 = in1.Shape.Dimensions[dimIndex0].Stride;
                        long outerStride3 = @out.Shape.Dimensions[dimIndex0].Stride;

                        long innerStride1 = in1.Shape.Dimensions[dimIndex1].Stride;
                        long innerStride3 = @out.Shape.Dimensions[dimIndex1].Stride;

                        long innerInnerStride1 = in1.Shape.Dimensions[dimIndex2].Stride;
                        long innerInnerStride3 = @out.Shape.Dimensions[dimIndex2].Stride;

                        outerStride1 -= innerStride1 * in1.Shape.Dimensions[dimIndex1].Length;
                        outerStride3 -= innerStride3 * @out.Shape.Dimensions[dimIndex1].Length;

                        innerStride1 -= innerInnerStride1 * in1.Shape.Dimensions[dimIndex2].Length;
                        innerStride3 -= innerInnerStride3 * @out.Shape.Dimensions[dimIndex2].Length;

                        for (long outer = 0; outer < totalOps; outer++)
                        {
                            //Get the array offset for the first element in the outer dimension
                            long ix1 = in1.Shape[counters];
                            long ix3 = @out.Shape[counters];


                            for (long i = 0; i < opsOuter; i++)
                            {
                                for (long j = 0; j < opsInner; j++)
                                {
                                    for (long k = 0; k < opsInnerInner; k++)
                                    {
                                        d2[ix3] = (System.Single)(d1[ix1]);
                                        ix1 += innerInnerStride1;
                                        ix3 += innerInnerStride3;
                                    }

                                    ix1 += innerStride1;
                                    ix3 += innerStride3;
                                }

                                ix1 += outerStride1;
                                ix3 += outerStride3;
                            }

                            if (counters.LongLength > 0)
                            {
                                //Basically a ripple carry adder
                                long p = counters.LongLength - 1;
                                while (++counters[p] == limits[p] && p > 0)
                                {
                                    counters[p] = 0;
                                    p--;
                                }
                            }
                        }
                    }
                }
            }
        }

        /// <summary>
        /// Unsafe implementation of applying a unary operation
        /// </summary>
        /// <typeparam name="C">The type of operation to perform</typeparam>
        /// <param name="op">The operation instance</param>
        /// <param name="scalar">The input scalar argument</param>
        /// <param name="out">The output target</param>
        internal static void UFunc_Op_Inner_Unary_Scalar_Flush_Int32_TypedImpl<C>(NumCIL.Float.ToFloat op, System.Int32 scalar, NdArray<System.Single> @out)
            where C : IUnaryOp<System.Int32>
        {
            unsafe
            {
                using (var f2 = new Pinner(@out.DataAccessor))
                {
                    var d2 = (System.Single*)f2.ptr;

                    if (@out.Shape.Dimensions.Length == 1)
                    {
                        long totalOps = @out.Shape.Dimensions[0].Length;
                        long ix2 = @out.Shape.Offset;
                        long stride2 = @out.Shape.Dimensions[0].Stride;

                        for (long i = 0; i < totalOps; i++)
                        {
                            d2[ix2] = (System.Single)(scalar);
                            ix2 += stride2;
                        }
                    }
                    else if (@out.Shape.Dimensions.Length == 2)
                    {
                        long opsOuter = @out.Shape.Dimensions[0].Length;
                        long opsInner = @out.Shape.Dimensions[1].Length;

                        long ix2 = @out.Shape.Offset;
                        long outerStride2 = @out.Shape.Dimensions[0].Stride;
                        long innerStride2 = @out.Shape.Dimensions[1].Stride;
                        outerStride2 -= innerStride2 * @out.Shape.Dimensions[1].Length;

                        for (long i = 0; i < opsOuter; i++)
                        {
                            for (long j = 0; j < opsInner; j++)
                            {
                                d2[ix2] = (System.Single)(scalar);
                                ix2 += innerStride2;
                            }

                            ix2 += outerStride2;
                        }
                    }
                    else
                    {
                        long n = @out.Shape.Dimensions.LongLength - 3;
                        long[] limits = @out.Shape.Dimensions.Where(x => n-- > 0).Select(x => x.Length).ToArray();
                        long[] counters = new long[limits.LongLength];

                        long totalOps = limits.LongLength == 0 ? 1 : limits.Aggregate<long>((a, b) => a * b);

                        //This chunck of variables are used to prevent repeated calculations of offsets
                        long dimIndex0 = 0 + limits.LongLength;
                        long dimIndex1 = 1 + limits.LongLength;
                        long dimIndex2 = 2 + limits.LongLength;

                        long opsOuter = @out.Shape.Dimensions[0 + limits.LongLength].Length;
                        long opsInner = @out.Shape.Dimensions[1 + limits.LongLength].Length;
                        long opsInnerInner = @out.Shape.Dimensions[2 + limits.LongLength].Length;

                        long outerStride3 = @out.Shape.Dimensions[dimIndex0].Stride;
                        long innerStride3 = @out.Shape.Dimensions[dimIndex1].Stride;
                        long innerInnerStride3 = @out.Shape.Dimensions[dimIndex2].Stride;
                        outerStride3 -= innerStride3 * @out.Shape.Dimensions[dimIndex1].Length;
                        innerStride3 -= innerInnerStride3 * @out.Shape.Dimensions[dimIndex2].Length;

                        for (long outer = 0; outer < totalOps; outer++)
                        {
                            //Get the array offset for the first element in the outer dimension
                            long ix3 = @out.Shape[counters];

                            for (long i = 0; i < opsOuter; i++)
                            {
                                for (long j = 0; j < opsInner; j++)
                                {
                                    for (long k = 0; k < opsInnerInner; k++)
                                    {
                                        d2[ix3] = (System.Single)(scalar);
                                        ix3 += innerInnerStride3;
                                    }

                                    ix3 += innerStride3;
                                }

                                ix3 += outerStride3;
                            }

                            if (counters.LongLength > 0)
                            {
                                //Basically a ripple carry adder
                                long p = counters.LongLength - 1;
                                while (++counters[p] == limits[p] && p > 0)
                                {
                                    counters[p] = 0;
                                    p--;
                                }
                            }
                        }
                    }
                }
            }
        }
        /// <summary>
        /// Unsafe implementation of applying a unary operation
        /// </summary>
        /// <typeparam name="C">The type of operation to perform</typeparam>
        /// <param name="op">The operation instance</param>
        /// <param name="in1">The input argument</param>
        /// <param name="out">The output target</param>
        internal static void UFunc_Op_Inner_Unary_Flush_UInt32_TypedImpl<C>(NumCIL.Float.ToFloat op, NdArray<System.UInt32> in1, NdArray<System.Single> @out)
            where C : IUnaryOp<System.UInt32>
        {
            unsafe
            {
                using (var f1 = new Pinner(in1.DataAccessor))
                using (var f2 = new Pinner(@out.DataAccessor))
                {
                    var d1 = (System.UInt32*)f1.ptr;
                    var d2 = (System.Single*)f2.ptr;

                    if (@out.Shape.Dimensions.Length == 1)
                    {
                        long totalOps = @out.Shape.Dimensions[0].Length;

                        long ix1 = in1.Shape.Offset;
                        long ix2 = @out.Shape.Offset;

                        long stride1 = in1.Shape.Dimensions[0].Stride;
                        long stride2 = @out.Shape.Dimensions[0].Stride;


                        if (stride1 == stride2 && ix1 == ix2)
                        {
                            //Best case, all are equal, just keep a single counter
                            for (long i = 0; i < totalOps; i++)
                            {
                                d2[ix1] = (System.Single)(d1[ix1]);
                                ix1 += stride1;
                            }
                        }
                        else
                        {
                            for (long i = 0; i < totalOps; i++)
                            {
                                d2[ix2] = (System.Single)(d1[ix1]);
                                ix1 += stride1;
                                ix2 += stride2;
                            }
                        }
                    }
                    else if (@out.Shape.Dimensions.Length == 2)
                    {
                        long opsOuter = @out.Shape.Dimensions[0].Length;
                        long opsInner = @out.Shape.Dimensions[1].Length;

                        long ix1 = in1.Shape.Offset;
                        long ix2 = @out.Shape.Offset;

                        long outerStride1 = in1.Shape.Dimensions[0].Stride;
                        long outerStride2 = @out.Shape.Dimensions[0].Stride;

                        long innerStride1 = in1.Shape.Dimensions[1].Stride;
                        long innerStride2 = @out.Shape.Dimensions[1].Stride;

                        outerStride1 -= innerStride1 * in1.Shape.Dimensions[1].Length;
                        outerStride2 -= innerStride2 * @out.Shape.Dimensions[1].Length;

                        for (long i = 0; i < opsOuter; i++)
                        {
                            for (long j = 0; j < opsInner; j++)
                            {
                                d2[ix2] = (System.Single)(d1[ix1]);
                                ix1 += innerStride1;
                                ix2 += innerStride2;
                            }

                            ix1 += outerStride1;
                            ix2 += outerStride2;
                        }
                    }
                    else
                    {
                        long n = in1.Shape.Dimensions.LongLength - 3;
                        long[] limits = in1.Shape.Dimensions.Where(x => n-- > 0).Select(x => x.Length).ToArray();
                        long[] counters = new long[limits.LongLength];

                        long totalOps = limits.LongLength == 0 ? 1 : limits.Aggregate<long>((a, b) => a * b);

                        //This chunck of variables are used to prevent repeated calculations of offsets
                        long dimIndex0 = 0 + limits.LongLength;
                        long dimIndex1 = 1 + limits.LongLength;
                        long dimIndex2 = 2 + limits.LongLength;

                        long opsOuter = @out.Shape.Dimensions[0 + limits.LongLength].Length;
                        long opsInner = @out.Shape.Dimensions[1 + limits.LongLength].Length;
                        long opsInnerInner = @out.Shape.Dimensions[2 + limits.LongLength].Length;

                        long outerStride1 = in1.Shape.Dimensions[dimIndex0].Stride;
                        long outerStride3 = @out.Shape.Dimensions[dimIndex0].Stride;

                        long innerStride1 = in1.Shape.Dimensions[dimIndex1].Stride;
                        long innerStride3 = @out.Shape.Dimensions[dimIndex1].Stride;

                        long innerInnerStride1 = in1.Shape.Dimensions[dimIndex2].Stride;
                        long innerInnerStride3 = @out.Shape.Dimensions[dimIndex2].Stride;

                        outerStride1 -= innerStride1 * in1.Shape.Dimensions[dimIndex1].Length;
                        outerStride3 -= innerStride3 * @out.Shape.Dimensions[dimIndex1].Length;

                        innerStride1 -= innerInnerStride1 * in1.Shape.Dimensions[dimIndex2].Length;
                        innerStride3 -= innerInnerStride3 * @out.Shape.Dimensions[dimIndex2].Length;

                        for (long outer = 0; outer < totalOps; outer++)
                        {
                            //Get the array offset for the first element in the outer dimension
                            long ix1 = in1.Shape[counters];
                            long ix3 = @out.Shape[counters];


                            for (long i = 0; i < opsOuter; i++)
                            {
                                for (long j = 0; j < opsInner; j++)
                                {
                                    for (long k = 0; k < opsInnerInner; k++)
                                    {
                                        d2[ix3] = (System.Single)(d1[ix1]);
                                        ix1 += innerInnerStride1;
                                        ix3 += innerInnerStride3;
                                    }

                                    ix1 += innerStride1;
                                    ix3 += innerStride3;
                                }

                                ix1 += outerStride1;
                                ix3 += outerStride3;
                            }

                            if (counters.LongLength > 0)
                            {
                                //Basically a ripple carry adder
                                long p = counters.LongLength - 1;
                                while (++counters[p] == limits[p] && p > 0)
                                {
                                    counters[p] = 0;
                                    p--;
                                }
                            }
                        }
                    }
                }
            }
        }

        /// <summary>
        /// Unsafe implementation of applying a unary operation
        /// </summary>
        /// <typeparam name="C">The type of operation to perform</typeparam>
        /// <param name="op">The operation instance</param>
        /// <param name="scalar">The input scalar argument</param>
        /// <param name="out">The output target</param>
        internal static void UFunc_Op_Inner_Unary_Scalar_Flush_UInt32_TypedImpl<C>(NumCIL.Float.ToFloat op, System.UInt32 scalar, NdArray<System.Single> @out)
            where C : IUnaryOp<System.UInt32>
        {
            unsafe
            {
                using (var f2 = new Pinner(@out.DataAccessor))
                {
                    var d2 = (System.Single*)f2.ptr;

                    if (@out.Shape.Dimensions.Length == 1)
                    {
                        long totalOps = @out.Shape.Dimensions[0].Length;
                        long ix2 = @out.Shape.Offset;
                        long stride2 = @out.Shape.Dimensions[0].Stride;

                        for (long i = 0; i < totalOps; i++)
                        {
                            d2[ix2] = (System.Single)(scalar);
                            ix2 += stride2;
                        }
                    }
                    else if (@out.Shape.Dimensions.Length == 2)
                    {
                        long opsOuter = @out.Shape.Dimensions[0].Length;
                        long opsInner = @out.Shape.Dimensions[1].Length;

                        long ix2 = @out.Shape.Offset;
                        long outerStride2 = @out.Shape.Dimensions[0].Stride;
                        long innerStride2 = @out.Shape.Dimensions[1].Stride;
                        outerStride2 -= innerStride2 * @out.Shape.Dimensions[1].Length;

                        for (long i = 0; i < opsOuter; i++)
                        {
                            for (long j = 0; j < opsInner; j++)
                            {
                                d2[ix2] = (System.Single)(scalar);
                                ix2 += innerStride2;
                            }

                            ix2 += outerStride2;
                        }
                    }
                    else
                    {
                        long n = @out.Shape.Dimensions.LongLength - 3;
                        long[] limits = @out.Shape.Dimensions.Where(x => n-- > 0).Select(x => x.Length).ToArray();
                        long[] counters = new long[limits.LongLength];

                        long totalOps = limits.LongLength == 0 ? 1 : limits.Aggregate<long>((a, b) => a * b);

                        //This chunck of variables are used to prevent repeated calculations of offsets
                        long dimIndex0 = 0 + limits.LongLength;
                        long dimIndex1 = 1 + limits.LongLength;
                        long dimIndex2 = 2 + limits.LongLength;

                        long opsOuter = @out.Shape.Dimensions[0 + limits.LongLength].Length;
                        long opsInner = @out.Shape.Dimensions[1 + limits.LongLength].Length;
                        long opsInnerInner = @out.Shape.Dimensions[2 + limits.LongLength].Length;

                        long outerStride3 = @out.Shape.Dimensions[dimIndex0].Stride;
                        long innerStride3 = @out.Shape.Dimensions[dimIndex1].Stride;
                        long innerInnerStride3 = @out.Shape.Dimensions[dimIndex2].Stride;
                        outerStride3 -= innerStride3 * @out.Shape.Dimensions[dimIndex1].Length;
                        innerStride3 -= innerInnerStride3 * @out.Shape.Dimensions[dimIndex2].Length;

                        for (long outer = 0; outer < totalOps; outer++)
                        {
                            //Get the array offset for the first element in the outer dimension
                            long ix3 = @out.Shape[counters];

                            for (long i = 0; i < opsOuter; i++)
                            {
                                for (long j = 0; j < opsInner; j++)
                                {
                                    for (long k = 0; k < opsInnerInner; k++)
                                    {
                                        d2[ix3] = (System.Single)(scalar);
                                        ix3 += innerInnerStride3;
                                    }

                                    ix3 += innerStride3;
                                }

                                ix3 += outerStride3;
                            }

                            if (counters.LongLength > 0)
                            {
                                //Basically a ripple carry adder
                                long p = counters.LongLength - 1;
                                while (++counters[p] == limits[p] && p > 0)
                                {
                                    counters[p] = 0;
                                    p--;
                                }
                            }
                        }
                    }
                }
            }
        }
        /// <summary>
        /// Unsafe implementation of applying a unary operation
        /// </summary>
        /// <typeparam name="C">The type of operation to perform</typeparam>
        /// <param name="op">The operation instance</param>
        /// <param name="in1">The input argument</param>
        /// <param name="out">The output target</param>
        internal static void UFunc_Op_Inner_Unary_Flush_Int64_TypedImpl<C>(NumCIL.Float.ToFloat op, NdArray<System.Int64> in1, NdArray<System.Single> @out)
            where C : IUnaryOp<System.Int64>
        {
            unsafe
            {
                using (var f1 = new Pinner(in1.DataAccessor))
                using (var f2 = new Pinner(@out.DataAccessor))
                {
                    var d1 = (System.Int64*)f1.ptr;
                    var d2 = (System.Single*)f2.ptr;

                    if (@out.Shape.Dimensions.Length == 1)
                    {
                        long totalOps = @out.Shape.Dimensions[0].Length;

                        long ix1 = in1.Shape.Offset;
                        long ix2 = @out.Shape.Offset;

                        long stride1 = in1.Shape.Dimensions[0].Stride;
                        long stride2 = @out.Shape.Dimensions[0].Stride;


                        if (stride1 == stride2 && ix1 == ix2)
                        {
                            //Best case, all are equal, just keep a single counter
                            for (long i = 0; i < totalOps; i++)
                            {
                                d2[ix1] = (System.Single)(d1[ix1]);
                                ix1 += stride1;
                            }
                        }
                        else
                        {
                            for (long i = 0; i < totalOps; i++)
                            {
                                d2[ix2] = (System.Single)(d1[ix1]);
                                ix1 += stride1;
                                ix2 += stride2;
                            }
                        }
                    }
                    else if (@out.Shape.Dimensions.Length == 2)
                    {
                        long opsOuter = @out.Shape.Dimensions[0].Length;
                        long opsInner = @out.Shape.Dimensions[1].Length;

                        long ix1 = in1.Shape.Offset;
                        long ix2 = @out.Shape.Offset;

                        long outerStride1 = in1.Shape.Dimensions[0].Stride;
                        long outerStride2 = @out.Shape.Dimensions[0].Stride;

                        long innerStride1 = in1.Shape.Dimensions[1].Stride;
                        long innerStride2 = @out.Shape.Dimensions[1].Stride;

                        outerStride1 -= innerStride1 * in1.Shape.Dimensions[1].Length;
                        outerStride2 -= innerStride2 * @out.Shape.Dimensions[1].Length;

                        for (long i = 0; i < opsOuter; i++)
                        {
                            for (long j = 0; j < opsInner; j++)
                            {
                                d2[ix2] = (System.Single)(d1[ix1]);
                                ix1 += innerStride1;
                                ix2 += innerStride2;
                            }

                            ix1 += outerStride1;
                            ix2 += outerStride2;
                        }
                    }
                    else
                    {
                        long n = in1.Shape.Dimensions.LongLength - 3;
                        long[] limits = in1.Shape.Dimensions.Where(x => n-- > 0).Select(x => x.Length).ToArray();
                        long[] counters = new long[limits.LongLength];

                        long totalOps = limits.LongLength == 0 ? 1 : limits.Aggregate<long>((a, b) => a * b);

                        //This chunck of variables are used to prevent repeated calculations of offsets
                        long dimIndex0 = 0 + limits.LongLength;
                        long dimIndex1 = 1 + limits.LongLength;
                        long dimIndex2 = 2 + limits.LongLength;

                        long opsOuter = @out.Shape.Dimensions[0 + limits.LongLength].Length;
                        long opsInner = @out.Shape.Dimensions[1 + limits.LongLength].Length;
                        long opsInnerInner = @out.Shape.Dimensions[2 + limits.LongLength].Length;

                        long outerStride1 = in1.Shape.Dimensions[dimIndex0].Stride;
                        long outerStride3 = @out.Shape.Dimensions[dimIndex0].Stride;

                        long innerStride1 = in1.Shape.Dimensions[dimIndex1].Stride;
                        long innerStride3 = @out.Shape.Dimensions[dimIndex1].Stride;

                        long innerInnerStride1 = in1.Shape.Dimensions[dimIndex2].Stride;
                        long innerInnerStride3 = @out.Shape.Dimensions[dimIndex2].Stride;

                        outerStride1 -= innerStride1 * in1.Shape.Dimensions[dimIndex1].Length;
                        outerStride3 -= innerStride3 * @out.Shape.Dimensions[dimIndex1].Length;

                        innerStride1 -= innerInnerStride1 * in1.Shape.Dimensions[dimIndex2].Length;
                        innerStride3 -= innerInnerStride3 * @out.Shape.Dimensions[dimIndex2].Length;

                        for (long outer = 0; outer < totalOps; outer++)
                        {
                            //Get the array offset for the first element in the outer dimension
                            long ix1 = in1.Shape[counters];
                            long ix3 = @out.Shape[counters];


                            for (long i = 0; i < opsOuter; i++)
                            {
                                for (long j = 0; j < opsInner; j++)
                                {
                                    for (long k = 0; k < opsInnerInner; k++)
                                    {
                                        d2[ix3] = (System.Single)(d1[ix1]);
                                        ix1 += innerInnerStride1;
                                        ix3 += innerInnerStride3;
                                    }

                                    ix1 += innerStride1;
                                    ix3 += innerStride3;
                                }

                                ix1 += outerStride1;
                                ix3 += outerStride3;
                            }

                            if (counters.LongLength > 0)
                            {
                                //Basically a ripple carry adder
                                long p = counters.LongLength - 1;
                                while (++counters[p] == limits[p] && p > 0)
                                {
                                    counters[p] = 0;
                                    p--;
                                }
                            }
                        }
                    }
                }
            }
        }

        /// <summary>
        /// Unsafe implementation of applying a unary operation
        /// </summary>
        /// <typeparam name="C">The type of operation to perform</typeparam>
        /// <param name="op">The operation instance</param>
        /// <param name="scalar">The input scalar argument</param>
        /// <param name="out">The output target</param>
        internal static void UFunc_Op_Inner_Unary_Scalar_Flush_Int64_TypedImpl<C>(NumCIL.Float.ToFloat op, System.Int64 scalar, NdArray<System.Single> @out)
            where C : IUnaryOp<System.Int64>
        {
            unsafe
            {
                using (var f2 = new Pinner(@out.DataAccessor))
                {
                    var d2 = (System.Single*)f2.ptr;

                    if (@out.Shape.Dimensions.Length == 1)
                    {
                        long totalOps = @out.Shape.Dimensions[0].Length;
                        long ix2 = @out.Shape.Offset;
                        long stride2 = @out.Shape.Dimensions[0].Stride;

                        for (long i = 0; i < totalOps; i++)
                        {
                            d2[ix2] = (System.Single)(scalar);
                            ix2 += stride2;
                        }
                    }
                    else if (@out.Shape.Dimensions.Length == 2)
                    {
                        long opsOuter = @out.Shape.Dimensions[0].Length;
                        long opsInner = @out.Shape.Dimensions[1].Length;

                        long ix2 = @out.Shape.Offset;
                        long outerStride2 = @out.Shape.Dimensions[0].Stride;
                        long innerStride2 = @out.Shape.Dimensions[1].Stride;
                        outerStride2 -= innerStride2 * @out.Shape.Dimensions[1].Length;

                        for (long i = 0; i < opsOuter; i++)
                        {
                            for (long j = 0; j < opsInner; j++)
                            {
                                d2[ix2] = (System.Single)(scalar);
                                ix2 += innerStride2;
                            }

                            ix2 += outerStride2;
                        }
                    }
                    else
                    {
                        long n = @out.Shape.Dimensions.LongLength - 3;
                        long[] limits = @out.Shape.Dimensions.Where(x => n-- > 0).Select(x => x.Length).ToArray();
                        long[] counters = new long[limits.LongLength];

                        long totalOps = limits.LongLength == 0 ? 1 : limits.Aggregate<long>((a, b) => a * b);

                        //This chunck of variables are used to prevent repeated calculations of offsets
                        long dimIndex0 = 0 + limits.LongLength;
                        long dimIndex1 = 1 + limits.LongLength;
                        long dimIndex2 = 2 + limits.LongLength;

                        long opsOuter = @out.Shape.Dimensions[0 + limits.LongLength].Length;
                        long opsInner = @out.Shape.Dimensions[1 + limits.LongLength].Length;
                        long opsInnerInner = @out.Shape.Dimensions[2 + limits.LongLength].Length;

                        long outerStride3 = @out.Shape.Dimensions[dimIndex0].Stride;
                        long innerStride3 = @out.Shape.Dimensions[dimIndex1].Stride;
                        long innerInnerStride3 = @out.Shape.Dimensions[dimIndex2].Stride;
                        outerStride3 -= innerStride3 * @out.Shape.Dimensions[dimIndex1].Length;
                        innerStride3 -= innerInnerStride3 * @out.Shape.Dimensions[dimIndex2].Length;

                        for (long outer = 0; outer < totalOps; outer++)
                        {
                            //Get the array offset for the first element in the outer dimension
                            long ix3 = @out.Shape[counters];

                            for (long i = 0; i < opsOuter; i++)
                            {
                                for (long j = 0; j < opsInner; j++)
                                {
                                    for (long k = 0; k < opsInnerInner; k++)
                                    {
                                        d2[ix3] = (System.Single)(scalar);
                                        ix3 += innerInnerStride3;
                                    }

                                    ix3 += innerStride3;
                                }

                                ix3 += outerStride3;
                            }

                            if (counters.LongLength > 0)
                            {
                                //Basically a ripple carry adder
                                long p = counters.LongLength - 1;
                                while (++counters[p] == limits[p] && p > 0)
                                {
                                    counters[p] = 0;
                                    p--;
                                }
                            }
                        }
                    }
                }
            }
        }
        /// <summary>
        /// Unsafe implementation of applying a unary operation
        /// </summary>
        /// <typeparam name="C">The type of operation to perform</typeparam>
        /// <param name="op">The operation instance</param>
        /// <param name="in1">The input argument</param>
        /// <param name="out">The output target</param>
        internal static void UFunc_Op_Inner_Unary_Flush_UInt64_TypedImpl<C>(NumCIL.Float.ToFloat op, NdArray<System.UInt64> in1, NdArray<System.Single> @out)
            where C : IUnaryOp<System.UInt64>
        {
            unsafe
            {
                using (var f1 = new Pinner(in1.DataAccessor))
                using (var f2 = new Pinner(@out.DataAccessor))
                {
                    var d1 = (System.UInt64*)f1.ptr;
                    var d2 = (System.Single*)f2.ptr;

                    if (@out.Shape.Dimensions.Length == 1)
                    {
                        long totalOps = @out.Shape.Dimensions[0].Length;

                        long ix1 = in1.Shape.Offset;
                        long ix2 = @out.Shape.Offset;

                        long stride1 = in1.Shape.Dimensions[0].Stride;
                        long stride2 = @out.Shape.Dimensions[0].Stride;


                        if (stride1 == stride2 && ix1 == ix2)
                        {
                            //Best case, all are equal, just keep a single counter
                            for (long i = 0; i < totalOps; i++)
                            {
                                d2[ix1] = (System.Single)(d1[ix1]);
                                ix1 += stride1;
                            }
                        }
                        else
                        {
                            for (long i = 0; i < totalOps; i++)
                            {
                                d2[ix2] = (System.Single)(d1[ix1]);
                                ix1 += stride1;
                                ix2 += stride2;
                            }
                        }
                    }
                    else if (@out.Shape.Dimensions.Length == 2)
                    {
                        long opsOuter = @out.Shape.Dimensions[0].Length;
                        long opsInner = @out.Shape.Dimensions[1].Length;

                        long ix1 = in1.Shape.Offset;
                        long ix2 = @out.Shape.Offset;

                        long outerStride1 = in1.Shape.Dimensions[0].Stride;
                        long outerStride2 = @out.Shape.Dimensions[0].Stride;

                        long innerStride1 = in1.Shape.Dimensions[1].Stride;
                        long innerStride2 = @out.Shape.Dimensions[1].Stride;

                        outerStride1 -= innerStride1 * in1.Shape.Dimensions[1].Length;
                        outerStride2 -= innerStride2 * @out.Shape.Dimensions[1].Length;

                        for (long i = 0; i < opsOuter; i++)
                        {
                            for (long j = 0; j < opsInner; j++)
                            {
                                d2[ix2] = (System.Single)(d1[ix1]);
                                ix1 += innerStride1;
                                ix2 += innerStride2;
                            }

                            ix1 += outerStride1;
                            ix2 += outerStride2;
                        }
                    }
                    else
                    {
                        long n = in1.Shape.Dimensions.LongLength - 3;
                        long[] limits = in1.Shape.Dimensions.Where(x => n-- > 0).Select(x => x.Length).ToArray();
                        long[] counters = new long[limits.LongLength];

                        long totalOps = limits.LongLength == 0 ? 1 : limits.Aggregate<long>((a, b) => a * b);

                        //This chunck of variables are used to prevent repeated calculations of offsets
                        long dimIndex0 = 0 + limits.LongLength;
                        long dimIndex1 = 1 + limits.LongLength;
                        long dimIndex2 = 2 + limits.LongLength;

                        long opsOuter = @out.Shape.Dimensions[0 + limits.LongLength].Length;
                        long opsInner = @out.Shape.Dimensions[1 + limits.LongLength].Length;
                        long opsInnerInner = @out.Shape.Dimensions[2 + limits.LongLength].Length;

                        long outerStride1 = in1.Shape.Dimensions[dimIndex0].Stride;
                        long outerStride3 = @out.Shape.Dimensions[dimIndex0].Stride;

                        long innerStride1 = in1.Shape.Dimensions[dimIndex1].Stride;
                        long innerStride3 = @out.Shape.Dimensions[dimIndex1].Stride;

                        long innerInnerStride1 = in1.Shape.Dimensions[dimIndex2].Stride;
                        long innerInnerStride3 = @out.Shape.Dimensions[dimIndex2].Stride;

                        outerStride1 -= innerStride1 * in1.Shape.Dimensions[dimIndex1].Length;
                        outerStride3 -= innerStride3 * @out.Shape.Dimensions[dimIndex1].Length;

                        innerStride1 -= innerInnerStride1 * in1.Shape.Dimensions[dimIndex2].Length;
                        innerStride3 -= innerInnerStride3 * @out.Shape.Dimensions[dimIndex2].Length;

                        for (long outer = 0; outer < totalOps; outer++)
                        {
                            //Get the array offset for the first element in the outer dimension
                            long ix1 = in1.Shape[counters];
                            long ix3 = @out.Shape[counters];


                            for (long i = 0; i < opsOuter; i++)
                            {
                                for (long j = 0; j < opsInner; j++)
                                {
                                    for (long k = 0; k < opsInnerInner; k++)
                                    {
                                        d2[ix3] = (System.Single)(d1[ix1]);
                                        ix1 += innerInnerStride1;
                                        ix3 += innerInnerStride3;
                                    }

                                    ix1 += innerStride1;
                                    ix3 += innerStride3;
                                }

                                ix1 += outerStride1;
                                ix3 += outerStride3;
                            }

                            if (counters.LongLength > 0)
                            {
                                //Basically a ripple carry adder
                                long p = counters.LongLength - 1;
                                while (++counters[p] == limits[p] && p > 0)
                                {
                                    counters[p] = 0;
                                    p--;
                                }
                            }
                        }
                    }
                }
            }
        }

        /// <summary>
        /// Unsafe implementation of applying a unary operation
        /// </summary>
        /// <typeparam name="C">The type of operation to perform</typeparam>
        /// <param name="op">The operation instance</param>
        /// <param name="scalar">The input scalar argument</param>
        /// <param name="out">The output target</param>
        internal static void UFunc_Op_Inner_Unary_Scalar_Flush_UInt64_TypedImpl<C>(NumCIL.Float.ToFloat op, System.UInt64 scalar, NdArray<System.Single> @out)
            where C : IUnaryOp<System.UInt64>
        {
            unsafe
            {
                using (var f2 = new Pinner(@out.DataAccessor))
                {
                    var d2 = (System.Single*)f2.ptr;

                    if (@out.Shape.Dimensions.Length == 1)
                    {
                        long totalOps = @out.Shape.Dimensions[0].Length;
                        long ix2 = @out.Shape.Offset;
                        long stride2 = @out.Shape.Dimensions[0].Stride;

                        for (long i = 0; i < totalOps; i++)
                        {
                            d2[ix2] = (System.Single)(scalar);
                            ix2 += stride2;
                        }
                    }
                    else if (@out.Shape.Dimensions.Length == 2)
                    {
                        long opsOuter = @out.Shape.Dimensions[0].Length;
                        long opsInner = @out.Shape.Dimensions[1].Length;

                        long ix2 = @out.Shape.Offset;
                        long outerStride2 = @out.Shape.Dimensions[0].Stride;
                        long innerStride2 = @out.Shape.Dimensions[1].Stride;
                        outerStride2 -= innerStride2 * @out.Shape.Dimensions[1].Length;

                        for (long i = 0; i < opsOuter; i++)
                        {
                            for (long j = 0; j < opsInner; j++)
                            {
                                d2[ix2] = (System.Single)(scalar);
                                ix2 += innerStride2;
                            }

                            ix2 += outerStride2;
                        }
                    }
                    else
                    {
                        long n = @out.Shape.Dimensions.LongLength - 3;
                        long[] limits = @out.Shape.Dimensions.Where(x => n-- > 0).Select(x => x.Length).ToArray();
                        long[] counters = new long[limits.LongLength];

                        long totalOps = limits.LongLength == 0 ? 1 : limits.Aggregate<long>((a, b) => a * b);

                        //This chunck of variables are used to prevent repeated calculations of offsets
                        long dimIndex0 = 0 + limits.LongLength;
                        long dimIndex1 = 1 + limits.LongLength;
                        long dimIndex2 = 2 + limits.LongLength;

                        long opsOuter = @out.Shape.Dimensions[0 + limits.LongLength].Length;
                        long opsInner = @out.Shape.Dimensions[1 + limits.LongLength].Length;
                        long opsInnerInner = @out.Shape.Dimensions[2 + limits.LongLength].Length;

                        long outerStride3 = @out.Shape.Dimensions[dimIndex0].Stride;
                        long innerStride3 = @out.Shape.Dimensions[dimIndex1].Stride;
                        long innerInnerStride3 = @out.Shape.Dimensions[dimIndex2].Stride;
                        outerStride3 -= innerStride3 * @out.Shape.Dimensions[dimIndex1].Length;
                        innerStride3 -= innerInnerStride3 * @out.Shape.Dimensions[dimIndex2].Length;

                        for (long outer = 0; outer < totalOps; outer++)
                        {
                            //Get the array offset for the first element in the outer dimension
                            long ix3 = @out.Shape[counters];

                            for (long i = 0; i < opsOuter; i++)
                            {
                                for (long j = 0; j < opsInner; j++)
                                {
                                    for (long k = 0; k < opsInnerInner; k++)
                                    {
                                        d2[ix3] = (System.Single)(scalar);
                                        ix3 += innerInnerStride3;
                                    }

                                    ix3 += innerStride3;
                                }

                                ix3 += outerStride3;
                            }

                            if (counters.LongLength > 0)
                            {
                                //Basically a ripple carry adder
                                long p = counters.LongLength - 1;
                                while (++counters[p] == limits[p] && p > 0)
                                {
                                    counters[p] = 0;
                                    p--;
                                }
                            }
                        }
                    }
                }
            }
        }
        /// <summary>
        /// Unsafe implementation of applying a unary operation
        /// </summary>
        /// <typeparam name="C">The type of operation to perform</typeparam>
        /// <param name="op">The operation instance</param>
        /// <param name="in1">The input argument</param>
        /// <param name="out">The output target</param>
        internal static void UFunc_Op_Inner_Unary_Flush_Single_TypedImpl<C>(NumCIL.Float.ToFloat op, NdArray<System.Single> in1, NdArray<System.Single> @out)
            where C : IUnaryOp<System.Single>
        {
            unsafe
            {
                using (var f1 = new Pinner(in1.DataAccessor))
                using (var f2 = new Pinner(@out.DataAccessor))
                {
                    var d1 = (System.Single*)f1.ptr;
                    var d2 = (System.Single*)f2.ptr;

                    if (@out.Shape.Dimensions.Length == 1)
                    {
                        long totalOps = @out.Shape.Dimensions[0].Length;

                        long ix1 = in1.Shape.Offset;
                        long ix2 = @out.Shape.Offset;

                        long stride1 = in1.Shape.Dimensions[0].Stride;
                        long stride2 = @out.Shape.Dimensions[0].Stride;


                        if (stride1 == stride2 && ix1 == ix2)
                        {
                            //Best case, all are equal, just keep a single counter
                            for (long i = 0; i < totalOps; i++)
                            {
                                d2[ix1] = (System.Single)(d1[ix1]);
                                ix1 += stride1;
                            }
                        }
                        else
                        {
                            for (long i = 0; i < totalOps; i++)
                            {
                                d2[ix2] = (System.Single)(d1[ix1]);
                                ix1 += stride1;
                                ix2 += stride2;
                            }
                        }
                    }
                    else if (@out.Shape.Dimensions.Length == 2)
                    {
                        long opsOuter = @out.Shape.Dimensions[0].Length;
                        long opsInner = @out.Shape.Dimensions[1].Length;

                        long ix1 = in1.Shape.Offset;
                        long ix2 = @out.Shape.Offset;

                        long outerStride1 = in1.Shape.Dimensions[0].Stride;
                        long outerStride2 = @out.Shape.Dimensions[0].Stride;

                        long innerStride1 = in1.Shape.Dimensions[1].Stride;
                        long innerStride2 = @out.Shape.Dimensions[1].Stride;

                        outerStride1 -= innerStride1 * in1.Shape.Dimensions[1].Length;
                        outerStride2 -= innerStride2 * @out.Shape.Dimensions[1].Length;

                        for (long i = 0; i < opsOuter; i++)
                        {
                            for (long j = 0; j < opsInner; j++)
                            {
                                d2[ix2] = (System.Single)(d1[ix1]);
                                ix1 += innerStride1;
                                ix2 += innerStride2;
                            }

                            ix1 += outerStride1;
                            ix2 += outerStride2;
                        }
                    }
                    else
                    {
                        long n = in1.Shape.Dimensions.LongLength - 3;
                        long[] limits = in1.Shape.Dimensions.Where(x => n-- > 0).Select(x => x.Length).ToArray();
                        long[] counters = new long[limits.LongLength];

                        long totalOps = limits.LongLength == 0 ? 1 : limits.Aggregate<long>((a, b) => a * b);

                        //This chunck of variables are used to prevent repeated calculations of offsets
                        long dimIndex0 = 0 + limits.LongLength;
                        long dimIndex1 = 1 + limits.LongLength;
                        long dimIndex2 = 2 + limits.LongLength;

                        long opsOuter = @out.Shape.Dimensions[0 + limits.LongLength].Length;
                        long opsInner = @out.Shape.Dimensions[1 + limits.LongLength].Length;
                        long opsInnerInner = @out.Shape.Dimensions[2 + limits.LongLength].Length;

                        long outerStride1 = in1.Shape.Dimensions[dimIndex0].Stride;
                        long outerStride3 = @out.Shape.Dimensions[dimIndex0].Stride;

                        long innerStride1 = in1.Shape.Dimensions[dimIndex1].Stride;
                        long innerStride3 = @out.Shape.Dimensions[dimIndex1].Stride;

                        long innerInnerStride1 = in1.Shape.Dimensions[dimIndex2].Stride;
                        long innerInnerStride3 = @out.Shape.Dimensions[dimIndex2].Stride;

                        outerStride1 -= innerStride1 * in1.Shape.Dimensions[dimIndex1].Length;
                        outerStride3 -= innerStride3 * @out.Shape.Dimensions[dimIndex1].Length;

                        innerStride1 -= innerInnerStride1 * in1.Shape.Dimensions[dimIndex2].Length;
                        innerStride3 -= innerInnerStride3 * @out.Shape.Dimensions[dimIndex2].Length;

                        for (long outer = 0; outer < totalOps; outer++)
                        {
                            //Get the array offset for the first element in the outer dimension
                            long ix1 = in1.Shape[counters];
                            long ix3 = @out.Shape[counters];


                            for (long i = 0; i < opsOuter; i++)
                            {
                                for (long j = 0; j < opsInner; j++)
                                {
                                    for (long k = 0; k < opsInnerInner; k++)
                                    {
                                        d2[ix3] = (System.Single)(d1[ix1]);
                                        ix1 += innerInnerStride1;
                                        ix3 += innerInnerStride3;
                                    }

                                    ix1 += innerStride1;
                                    ix3 += innerStride3;
                                }

                                ix1 += outerStride1;
                                ix3 += outerStride3;
                            }

                            if (counters.LongLength > 0)
                            {
                                //Basically a ripple carry adder
                                long p = counters.LongLength - 1;
                                while (++counters[p] == limits[p] && p > 0)
                                {
                                    counters[p] = 0;
                                    p--;
                                }
                            }
                        }
                    }
                }
            }
        }

        /// <summary>
        /// Unsafe implementation of applying a unary operation
        /// </summary>
        /// <typeparam name="C">The type of operation to perform</typeparam>
        /// <param name="op">The operation instance</param>
        /// <param name="scalar">The input scalar argument</param>
        /// <param name="out">The output target</param>
        internal static void UFunc_Op_Inner_Unary_Scalar_Flush_Single_TypedImpl<C>(NumCIL.Float.ToFloat op, System.Single scalar, NdArray<System.Single> @out)
            where C : IUnaryOp<System.Single>
        {
            unsafe
            {
                using (var f2 = new Pinner(@out.DataAccessor))
                {
                    var d2 = (System.Single*)f2.ptr;

                    if (@out.Shape.Dimensions.Length == 1)
                    {
                        long totalOps = @out.Shape.Dimensions[0].Length;
                        long ix2 = @out.Shape.Offset;
                        long stride2 = @out.Shape.Dimensions[0].Stride;

                        for (long i = 0; i < totalOps; i++)
                        {
                            d2[ix2] = (System.Single)(scalar);
                            ix2 += stride2;
                        }
                    }
                    else if (@out.Shape.Dimensions.Length == 2)
                    {
                        long opsOuter = @out.Shape.Dimensions[0].Length;
                        long opsInner = @out.Shape.Dimensions[1].Length;

                        long ix2 = @out.Shape.Offset;
                        long outerStride2 = @out.Shape.Dimensions[0].Stride;
                        long innerStride2 = @out.Shape.Dimensions[1].Stride;
                        outerStride2 -= innerStride2 * @out.Shape.Dimensions[1].Length;

                        for (long i = 0; i < opsOuter; i++)
                        {
                            for (long j = 0; j < opsInner; j++)
                            {
                                d2[ix2] = (System.Single)(scalar);
                                ix2 += innerStride2;
                            }

                            ix2 += outerStride2;
                        }
                    }
                    else
                    {
                        long n = @out.Shape.Dimensions.LongLength - 3;
                        long[] limits = @out.Shape.Dimensions.Where(x => n-- > 0).Select(x => x.Length).ToArray();
                        long[] counters = new long[limits.LongLength];

                        long totalOps = limits.LongLength == 0 ? 1 : limits.Aggregate<long>((a, b) => a * b);

                        //This chunck of variables are used to prevent repeated calculations of offsets
                        long dimIndex0 = 0 + limits.LongLength;
                        long dimIndex1 = 1 + limits.LongLength;
                        long dimIndex2 = 2 + limits.LongLength;

                        long opsOuter = @out.Shape.Dimensions[0 + limits.LongLength].Length;
                        long opsInner = @out.Shape.Dimensions[1 + limits.LongLength].Length;
                        long opsInnerInner = @out.Shape.Dimensions[2 + limits.LongLength].Length;

                        long outerStride3 = @out.Shape.Dimensions[dimIndex0].Stride;
                        long innerStride3 = @out.Shape.Dimensions[dimIndex1].Stride;
                        long innerInnerStride3 = @out.Shape.Dimensions[dimIndex2].Stride;
                        outerStride3 -= innerStride3 * @out.Shape.Dimensions[dimIndex1].Length;
                        innerStride3 -= innerInnerStride3 * @out.Shape.Dimensions[dimIndex2].Length;

                        for (long outer = 0; outer < totalOps; outer++)
                        {
                            //Get the array offset for the first element in the outer dimension
                            long ix3 = @out.Shape[counters];

                            for (long i = 0; i < opsOuter; i++)
                            {
                                for (long j = 0; j < opsInner; j++)
                                {
                                    for (long k = 0; k < opsInnerInner; k++)
                                    {
                                        d2[ix3] = (System.Single)(scalar);
                                        ix3 += innerInnerStride3;
                                    }

                                    ix3 += innerStride3;
                                }

                                ix3 += outerStride3;
                            }

                            if (counters.LongLength > 0)
                            {
                                //Basically a ripple carry adder
                                long p = counters.LongLength - 1;
                                while (++counters[p] == limits[p] && p > 0)
                                {
                                    counters[p] = 0;
                                    p--;
                                }
                            }
                        }
                    }
                }
            }
        }
        /// <summary>
        /// Unsafe implementation of applying a unary operation
        /// </summary>
        /// <typeparam name="C">The type of operation to perform</typeparam>
        /// <param name="op">The operation instance</param>
        /// <param name="in1">The input argument</param>
        /// <param name="out">The output target</param>
        internal static void UFunc_Op_Inner_Unary_Flush_Double_TypedImpl<C>(NumCIL.Float.ToFloat op, NdArray<System.Double> in1, NdArray<System.Single> @out)
            where C : IUnaryOp<System.Double>
        {
            unsafe
            {
                using (var f1 = new Pinner(in1.DataAccessor))
                using (var f2 = new Pinner(@out.DataAccessor))
                {
                    var d1 = (System.Double*)f1.ptr;
                    var d2 = (System.Single*)f2.ptr;

                    if (@out.Shape.Dimensions.Length == 1)
                    {
                        long totalOps = @out.Shape.Dimensions[0].Length;

                        long ix1 = in1.Shape.Offset;
                        long ix2 = @out.Shape.Offset;

                        long stride1 = in1.Shape.Dimensions[0].Stride;
                        long stride2 = @out.Shape.Dimensions[0].Stride;


                        if (stride1 == stride2 && ix1 == ix2)
                        {
                            //Best case, all are equal, just keep a single counter
                            for (long i = 0; i < totalOps; i++)
                            {
                                d2[ix1] = (System.Single)(d1[ix1]);
                                ix1 += stride1;
                            }
                        }
                        else
                        {
                            for (long i = 0; i < totalOps; i++)
                            {
                                d2[ix2] = (System.Single)(d1[ix1]);
                                ix1 += stride1;
                                ix2 += stride2;
                            }
                        }
                    }
                    else if (@out.Shape.Dimensions.Length == 2)
                    {
                        long opsOuter = @out.Shape.Dimensions[0].Length;
                        long opsInner = @out.Shape.Dimensions[1].Length;

                        long ix1 = in1.Shape.Offset;
                        long ix2 = @out.Shape.Offset;

                        long outerStride1 = in1.Shape.Dimensions[0].Stride;
                        long outerStride2 = @out.Shape.Dimensions[0].Stride;

                        long innerStride1 = in1.Shape.Dimensions[1].Stride;
                        long innerStride2 = @out.Shape.Dimensions[1].Stride;

                        outerStride1 -= innerStride1 * in1.Shape.Dimensions[1].Length;
                        outerStride2 -= innerStride2 * @out.Shape.Dimensions[1].Length;

                        for (long i = 0; i < opsOuter; i++)
                        {
                            for (long j = 0; j < opsInner; j++)
                            {
                                d2[ix2] = (System.Single)(d1[ix1]);
                                ix1 += innerStride1;
                                ix2 += innerStride2;
                            }

                            ix1 += outerStride1;
                            ix2 += outerStride2;
                        }
                    }
                    else
                    {
                        long n = in1.Shape.Dimensions.LongLength - 3;
                        long[] limits = in1.Shape.Dimensions.Where(x => n-- > 0).Select(x => x.Length).ToArray();
                        long[] counters = new long[limits.LongLength];

                        long totalOps = limits.LongLength == 0 ? 1 : limits.Aggregate<long>((a, b) => a * b);

                        //This chunck of variables are used to prevent repeated calculations of offsets
                        long dimIndex0 = 0 + limits.LongLength;
                        long dimIndex1 = 1 + limits.LongLength;
                        long dimIndex2 = 2 + limits.LongLength;

                        long opsOuter = @out.Shape.Dimensions[0 + limits.LongLength].Length;
                        long opsInner = @out.Shape.Dimensions[1 + limits.LongLength].Length;
                        long opsInnerInner = @out.Shape.Dimensions[2 + limits.LongLength].Length;

                        long outerStride1 = in1.Shape.Dimensions[dimIndex0].Stride;
                        long outerStride3 = @out.Shape.Dimensions[dimIndex0].Stride;

                        long innerStride1 = in1.Shape.Dimensions[dimIndex1].Stride;
                        long innerStride3 = @out.Shape.Dimensions[dimIndex1].Stride;

                        long innerInnerStride1 = in1.Shape.Dimensions[dimIndex2].Stride;
                        long innerInnerStride3 = @out.Shape.Dimensions[dimIndex2].Stride;

                        outerStride1 -= innerStride1 * in1.Shape.Dimensions[dimIndex1].Length;
                        outerStride3 -= innerStride3 * @out.Shape.Dimensions[dimIndex1].Length;

                        innerStride1 -= innerInnerStride1 * in1.Shape.Dimensions[dimIndex2].Length;
                        innerStride3 -= innerInnerStride3 * @out.Shape.Dimensions[dimIndex2].Length;

                        for (long outer = 0; outer < totalOps; outer++)
                        {
                            //Get the array offset for the first element in the outer dimension
                            long ix1 = in1.Shape[counters];
                            long ix3 = @out.Shape[counters];


                            for (long i = 0; i < opsOuter; i++)
                            {
                                for (long j = 0; j < opsInner; j++)
                                {
                                    for (long k = 0; k < opsInnerInner; k++)
                                    {
                                        d2[ix3] = (System.Single)(d1[ix1]);
                                        ix1 += innerInnerStride1;
                                        ix3 += innerInnerStride3;
                                    }

                                    ix1 += innerStride1;
                                    ix3 += innerStride3;
                                }

                                ix1 += outerStride1;
                                ix3 += outerStride3;
                            }

                            if (counters.LongLength > 0)
                            {
                                //Basically a ripple carry adder
                                long p = counters.LongLength - 1;
                                while (++counters[p] == limits[p] && p > 0)
                                {
                                    counters[p] = 0;
                                    p--;
                                }
                            }
                        }
                    }
                }
            }
        }

        /// <summary>
        /// Unsafe implementation of applying a unary operation
        /// </summary>
        /// <typeparam name="C">The type of operation to perform</typeparam>
        /// <param name="op">The operation instance</param>
        /// <param name="scalar">The input scalar argument</param>
        /// <param name="out">The output target</param>
        internal static void UFunc_Op_Inner_Unary_Scalar_Flush_Double_TypedImpl<C>(NumCIL.Float.ToFloat op, System.Double scalar, NdArray<System.Single> @out)
            where C : IUnaryOp<System.Double>
        {
            unsafe
            {
                using (var f2 = new Pinner(@out.DataAccessor))
                {
                    var d2 = (System.Single*)f2.ptr;

                    if (@out.Shape.Dimensions.Length == 1)
                    {
                        long totalOps = @out.Shape.Dimensions[0].Length;
                        long ix2 = @out.Shape.Offset;
                        long stride2 = @out.Shape.Dimensions[0].Stride;

                        for (long i = 0; i < totalOps; i++)
                        {
                            d2[ix2] = (System.Single)(scalar);
                            ix2 += stride2;
                        }
                    }
                    else if (@out.Shape.Dimensions.Length == 2)
                    {
                        long opsOuter = @out.Shape.Dimensions[0].Length;
                        long opsInner = @out.Shape.Dimensions[1].Length;

                        long ix2 = @out.Shape.Offset;
                        long outerStride2 = @out.Shape.Dimensions[0].Stride;
                        long innerStride2 = @out.Shape.Dimensions[1].Stride;
                        outerStride2 -= innerStride2 * @out.Shape.Dimensions[1].Length;

                        for (long i = 0; i < opsOuter; i++)
                        {
                            for (long j = 0; j < opsInner; j++)
                            {
                                d2[ix2] = (System.Single)(scalar);
                                ix2 += innerStride2;
                            }

                            ix2 += outerStride2;
                        }
                    }
                    else
                    {
                        long n = @out.Shape.Dimensions.LongLength - 3;
                        long[] limits = @out.Shape.Dimensions.Where(x => n-- > 0).Select(x => x.Length).ToArray();
                        long[] counters = new long[limits.LongLength];

                        long totalOps = limits.LongLength == 0 ? 1 : limits.Aggregate<long>((a, b) => a * b);

                        //This chunck of variables are used to prevent repeated calculations of offsets
                        long dimIndex0 = 0 + limits.LongLength;
                        long dimIndex1 = 1 + limits.LongLength;
                        long dimIndex2 = 2 + limits.LongLength;

                        long opsOuter = @out.Shape.Dimensions[0 + limits.LongLength].Length;
                        long opsInner = @out.Shape.Dimensions[1 + limits.LongLength].Length;
                        long opsInnerInner = @out.Shape.Dimensions[2 + limits.LongLength].Length;

                        long outerStride3 = @out.Shape.Dimensions[dimIndex0].Stride;
                        long innerStride3 = @out.Shape.Dimensions[dimIndex1].Stride;
                        long innerInnerStride3 = @out.Shape.Dimensions[dimIndex2].Stride;
                        outerStride3 -= innerStride3 * @out.Shape.Dimensions[dimIndex1].Length;
                        innerStride3 -= innerInnerStride3 * @out.Shape.Dimensions[dimIndex2].Length;

                        for (long outer = 0; outer < totalOps; outer++)
                        {
                            //Get the array offset for the first element in the outer dimension
                            long ix3 = @out.Shape[counters];

                            for (long i = 0; i < opsOuter; i++)
                            {
                                for (long j = 0; j < opsInner; j++)
                                {
                                    for (long k = 0; k < opsInnerInner; k++)
                                    {
                                        d2[ix3] = (System.Single)(scalar);
                                        ix3 += innerInnerStride3;
                                    }

                                    ix3 += innerStride3;
                                }

                                ix3 += outerStride3;
                            }

                            if (counters.LongLength > 0)
                            {
                                //Basically a ripple carry adder
                                long p = counters.LongLength - 1;
                                while (++counters[p] == limits[p] && p > 0)
                                {
                                    counters[p] = 0;
                                    p--;
                                }
                            }
                        }
                    }
                }
            }
        }
        /// <summary>
        /// Unsafe implementation of applying a unary operation
        /// </summary>
        /// <typeparam name="C">The type of operation to perform</typeparam>
        /// <param name="op">The operation instance</param>
        /// <param name="in1">The input argument</param>
        /// <param name="out">The output target</param>
        internal static void UFunc_Op_Inner_Unary_Flush_Boolean_TypedImpl<C>(NumCIL.Boolean.ToFloat op, NdArray<System.Boolean> in1, NdArray<System.Single> @out)
            where C : IUnaryOp<System.Boolean>
        {
            unsafe
            {
                using (var f1 = new Pinner(in1.DataAccessor))
                using (var f2 = new Pinner(@out.DataAccessor))
                {
                    var d1 = (System.Boolean*)f1.ptr;
                    var d2 = (System.Single*)f2.ptr;

                    if (@out.Shape.Dimensions.Length == 1)
                    {
                        long totalOps = @out.Shape.Dimensions[0].Length;

                        long ix1 = in1.Shape.Offset;
                        long ix2 = @out.Shape.Offset;

                        long stride1 = in1.Shape.Dimensions[0].Stride;
                        long stride2 = @out.Shape.Dimensions[0].Stride;


                        if (stride1 == stride2 && ix1 == ix2)
                        {
                            //Best case, all are equal, just keep a single counter
                            for (long i = 0; i < totalOps; i++)
                            {
                                d2[ix1] = (System.Single)(d1[ix1] ? 1 : 0 );
                                ix1 += stride1;
                            }
                        }
                        else
                        {
                            for (long i = 0; i < totalOps; i++)
                            {
                                d2[ix2] = (System.Single)(d1[ix1] ? 1 : 0 );
                                ix1 += stride1;
                                ix2 += stride2;
                            }
                        }
                    }
                    else if (@out.Shape.Dimensions.Length == 2)
                    {
                        long opsOuter = @out.Shape.Dimensions[0].Length;
                        long opsInner = @out.Shape.Dimensions[1].Length;

                        long ix1 = in1.Shape.Offset;
                        long ix2 = @out.Shape.Offset;

                        long outerStride1 = in1.Shape.Dimensions[0].Stride;
                        long outerStride2 = @out.Shape.Dimensions[0].Stride;

                        long innerStride1 = in1.Shape.Dimensions[1].Stride;
                        long innerStride2 = @out.Shape.Dimensions[1].Stride;

                        outerStride1 -= innerStride1 * in1.Shape.Dimensions[1].Length;
                        outerStride2 -= innerStride2 * @out.Shape.Dimensions[1].Length;

                        for (long i = 0; i < opsOuter; i++)
                        {
                            for (long j = 0; j < opsInner; j++)
                            {
                                d2[ix2] = (System.Single)(d1[ix1] ? 1 : 0 );
                                ix1 += innerStride1;
                                ix2 += innerStride2;
                            }

                            ix1 += outerStride1;
                            ix2 += outerStride2;
                        }
                    }
                    else
                    {
                        long n = in1.Shape.Dimensions.LongLength - 3;
                        long[] limits = in1.Shape.Dimensions.Where(x => n-- > 0).Select(x => x.Length).ToArray();
                        long[] counters = new long[limits.LongLength];

                        long totalOps = limits.LongLength == 0 ? 1 : limits.Aggregate<long>((a, b) => a * b);

                        //This chunck of variables are used to prevent repeated calculations of offsets
                        long dimIndex0 = 0 + limits.LongLength;
                        long dimIndex1 = 1 + limits.LongLength;
                        long dimIndex2 = 2 + limits.LongLength;

                        long opsOuter = @out.Shape.Dimensions[0 + limits.LongLength].Length;
                        long opsInner = @out.Shape.Dimensions[1 + limits.LongLength].Length;
                        long opsInnerInner = @out.Shape.Dimensions[2 + limits.LongLength].Length;

                        long outerStride1 = in1.Shape.Dimensions[dimIndex0].Stride;
                        long outerStride3 = @out.Shape.Dimensions[dimIndex0].Stride;

                        long innerStride1 = in1.Shape.Dimensions[dimIndex1].Stride;
                        long innerStride3 = @out.Shape.Dimensions[dimIndex1].Stride;

                        long innerInnerStride1 = in1.Shape.Dimensions[dimIndex2].Stride;
                        long innerInnerStride3 = @out.Shape.Dimensions[dimIndex2].Stride;

                        outerStride1 -= innerStride1 * in1.Shape.Dimensions[dimIndex1].Length;
                        outerStride3 -= innerStride3 * @out.Shape.Dimensions[dimIndex1].Length;

                        innerStride1 -= innerInnerStride1 * in1.Shape.Dimensions[dimIndex2].Length;
                        innerStride3 -= innerInnerStride3 * @out.Shape.Dimensions[dimIndex2].Length;

                        for (long outer = 0; outer < totalOps; outer++)
                        {
                            //Get the array offset for the first element in the outer dimension
                            long ix1 = in1.Shape[counters];
                            long ix3 = @out.Shape[counters];


                            for (long i = 0; i < opsOuter; i++)
                            {
                                for (long j = 0; j < opsInner; j++)
                                {
                                    for (long k = 0; k < opsInnerInner; k++)
                                    {
                                        d2[ix3] = (System.Single)(d1[ix1] ? 1 : 0 );
                                        ix1 += innerInnerStride1;
                                        ix3 += innerInnerStride3;
                                    }

                                    ix1 += innerStride1;
                                    ix3 += innerStride3;
                                }

                                ix1 += outerStride1;
                                ix3 += outerStride3;
                            }

                            if (counters.LongLength > 0)
                            {
                                //Basically a ripple carry adder
                                long p = counters.LongLength - 1;
                                while (++counters[p] == limits[p] && p > 0)
                                {
                                    counters[p] = 0;
                                    p--;
                                }
                            }
                        }
                    }
                }
            }
        }

        /// <summary>
        /// Unsafe implementation of applying a unary operation
        /// </summary>
        /// <typeparam name="C">The type of operation to perform</typeparam>
        /// <param name="op">The operation instance</param>
        /// <param name="scalar">The input scalar argument</param>
        /// <param name="out">The output target</param>
        internal static void UFunc_Op_Inner_Unary_Scalar_Flush_Boolean_TypedImpl<C>(NumCIL.Boolean.ToFloat op, System.Boolean scalar, NdArray<System.Single> @out)
            where C : IUnaryOp<System.Boolean>
        {
            unsafe
            {
                using (var f2 = new Pinner(@out.DataAccessor))
                {
                    var d2 = (System.Single*)f2.ptr;

                    if (@out.Shape.Dimensions.Length == 1)
                    {
                        long totalOps = @out.Shape.Dimensions[0].Length;
                        long ix2 = @out.Shape.Offset;
                        long stride2 = @out.Shape.Dimensions[0].Stride;

                        for (long i = 0; i < totalOps; i++)
                        {
                            d2[ix2] = (System.Single)(scalar ? 1 : 0 );
                            ix2 += stride2;
                        }
                    }
                    else if (@out.Shape.Dimensions.Length == 2)
                    {
                        long opsOuter = @out.Shape.Dimensions[0].Length;
                        long opsInner = @out.Shape.Dimensions[1].Length;

                        long ix2 = @out.Shape.Offset;
                        long outerStride2 = @out.Shape.Dimensions[0].Stride;
                        long innerStride2 = @out.Shape.Dimensions[1].Stride;
                        outerStride2 -= innerStride2 * @out.Shape.Dimensions[1].Length;

                        for (long i = 0; i < opsOuter; i++)
                        {
                            for (long j = 0; j < opsInner; j++)
                            {
                                d2[ix2] = (System.Single)(scalar ? 1 : 0 );
                                ix2 += innerStride2;
                            }

                            ix2 += outerStride2;
                        }
                    }
                    else
                    {
                        long n = @out.Shape.Dimensions.LongLength - 3;
                        long[] limits = @out.Shape.Dimensions.Where(x => n-- > 0).Select(x => x.Length).ToArray();
                        long[] counters = new long[limits.LongLength];

                        long totalOps = limits.LongLength == 0 ? 1 : limits.Aggregate<long>((a, b) => a * b);

                        //This chunck of variables are used to prevent repeated calculations of offsets
                        long dimIndex0 = 0 + limits.LongLength;
                        long dimIndex1 = 1 + limits.LongLength;
                        long dimIndex2 = 2 + limits.LongLength;

                        long opsOuter = @out.Shape.Dimensions[0 + limits.LongLength].Length;
                        long opsInner = @out.Shape.Dimensions[1 + limits.LongLength].Length;
                        long opsInnerInner = @out.Shape.Dimensions[2 + limits.LongLength].Length;

                        long outerStride3 = @out.Shape.Dimensions[dimIndex0].Stride;
                        long innerStride3 = @out.Shape.Dimensions[dimIndex1].Stride;
                        long innerInnerStride3 = @out.Shape.Dimensions[dimIndex2].Stride;
                        outerStride3 -= innerStride3 * @out.Shape.Dimensions[dimIndex1].Length;
                        innerStride3 -= innerInnerStride3 * @out.Shape.Dimensions[dimIndex2].Length;

                        for (long outer = 0; outer < totalOps; outer++)
                        {
                            //Get the array offset for the first element in the outer dimension
                            long ix3 = @out.Shape[counters];

                            for (long i = 0; i < opsOuter; i++)
                            {
                                for (long j = 0; j < opsInner; j++)
                                {
                                    for (long k = 0; k < opsInnerInner; k++)
                                    {
                                        d2[ix3] = (System.Single)(scalar ? 1 : 0 );
                                        ix3 += innerInnerStride3;
                                    }

                                    ix3 += innerStride3;
                                }

                                ix3 += outerStride3;
                            }

                            if (counters.LongLength > 0)
                            {
                                //Basically a ripple carry adder
                                long p = counters.LongLength - 1;
                                while (++counters[p] == limits[p] && p > 0)
                                {
                                    counters[p] = 0;
                                    p--;
                                }
                            }
                        }
                    }
                }
            }
        }
        /// <summary>
        /// Unsafe implementation of applying a unary operation
        /// </summary>
        /// <typeparam name="C">The type of operation to perform</typeparam>
        /// <param name="op">The operation instance</param>
        /// <param name="in1">The input argument</param>
        /// <param name="out">The output target</param>
        internal static void UFunc_Op_Inner_Unary_Flush_SByte_TypedImpl<C>(NumCIL.Double.ToDouble op, NdArray<System.SByte> in1, NdArray<System.Double> @out)
            where C : IUnaryOp<System.SByte>
        {
            unsafe
            {
                using (var f1 = new Pinner(in1.DataAccessor))
                using (var f2 = new Pinner(@out.DataAccessor))
                {
                    var d1 = (System.SByte*)f1.ptr;
                    var d2 = (System.Double*)f2.ptr;

                    if (@out.Shape.Dimensions.Length == 1)
                    {
                        long totalOps = @out.Shape.Dimensions[0].Length;

                        long ix1 = in1.Shape.Offset;
                        long ix2 = @out.Shape.Offset;

                        long stride1 = in1.Shape.Dimensions[0].Stride;
                        long stride2 = @out.Shape.Dimensions[0].Stride;


                        if (stride1 == stride2 && ix1 == ix2)
                        {
                            //Best case, all are equal, just keep a single counter
                            for (long i = 0; i < totalOps; i++)
                            {
                                d2[ix1] = (System.Double)(d1[ix1]);
                                ix1 += stride1;
                            }
                        }
                        else
                        {
                            for (long i = 0; i < totalOps; i++)
                            {
                                d2[ix2] = (System.Double)(d1[ix1]);
                                ix1 += stride1;
                                ix2 += stride2;
                            }
                        }
                    }
                    else if (@out.Shape.Dimensions.Length == 2)
                    {
                        long opsOuter = @out.Shape.Dimensions[0].Length;
                        long opsInner = @out.Shape.Dimensions[1].Length;

                        long ix1 = in1.Shape.Offset;
                        long ix2 = @out.Shape.Offset;

                        long outerStride1 = in1.Shape.Dimensions[0].Stride;
                        long outerStride2 = @out.Shape.Dimensions[0].Stride;

                        long innerStride1 = in1.Shape.Dimensions[1].Stride;
                        long innerStride2 = @out.Shape.Dimensions[1].Stride;

                        outerStride1 -= innerStride1 * in1.Shape.Dimensions[1].Length;
                        outerStride2 -= innerStride2 * @out.Shape.Dimensions[1].Length;

                        for (long i = 0; i < opsOuter; i++)
                        {
                            for (long j = 0; j < opsInner; j++)
                            {
                                d2[ix2] = (System.Double)(d1[ix1]);
                                ix1 += innerStride1;
                                ix2 += innerStride2;
                            }

                            ix1 += outerStride1;
                            ix2 += outerStride2;
                        }
                    }
                    else
                    {
                        long n = in1.Shape.Dimensions.LongLength - 3;
                        long[] limits = in1.Shape.Dimensions.Where(x => n-- > 0).Select(x => x.Length).ToArray();
                        long[] counters = new long[limits.LongLength];

                        long totalOps = limits.LongLength == 0 ? 1 : limits.Aggregate<long>((a, b) => a * b);

                        //This chunck of variables are used to prevent repeated calculations of offsets
                        long dimIndex0 = 0 + limits.LongLength;
                        long dimIndex1 = 1 + limits.LongLength;
                        long dimIndex2 = 2 + limits.LongLength;

                        long opsOuter = @out.Shape.Dimensions[0 + limits.LongLength].Length;
                        long opsInner = @out.Shape.Dimensions[1 + limits.LongLength].Length;
                        long opsInnerInner = @out.Shape.Dimensions[2 + limits.LongLength].Length;

                        long outerStride1 = in1.Shape.Dimensions[dimIndex0].Stride;
                        long outerStride3 = @out.Shape.Dimensions[dimIndex0].Stride;

                        long innerStride1 = in1.Shape.Dimensions[dimIndex1].Stride;
                        long innerStride3 = @out.Shape.Dimensions[dimIndex1].Stride;

                        long innerInnerStride1 = in1.Shape.Dimensions[dimIndex2].Stride;
                        long innerInnerStride3 = @out.Shape.Dimensions[dimIndex2].Stride;

                        outerStride1 -= innerStride1 * in1.Shape.Dimensions[dimIndex1].Length;
                        outerStride3 -= innerStride3 * @out.Shape.Dimensions[dimIndex1].Length;

                        innerStride1 -= innerInnerStride1 * in1.Shape.Dimensions[dimIndex2].Length;
                        innerStride3 -= innerInnerStride3 * @out.Shape.Dimensions[dimIndex2].Length;

                        for (long outer = 0; outer < totalOps; outer++)
                        {
                            //Get the array offset for the first element in the outer dimension
                            long ix1 = in1.Shape[counters];
                            long ix3 = @out.Shape[counters];


                            for (long i = 0; i < opsOuter; i++)
                            {
                                for (long j = 0; j < opsInner; j++)
                                {
                                    for (long k = 0; k < opsInnerInner; k++)
                                    {
                                        d2[ix3] = (System.Double)(d1[ix1]);
                                        ix1 += innerInnerStride1;
                                        ix3 += innerInnerStride3;
                                    }

                                    ix1 += innerStride1;
                                    ix3 += innerStride3;
                                }

                                ix1 += outerStride1;
                                ix3 += outerStride3;
                            }

                            if (counters.LongLength > 0)
                            {
                                //Basically a ripple carry adder
                                long p = counters.LongLength - 1;
                                while (++counters[p] == limits[p] && p > 0)
                                {
                                    counters[p] = 0;
                                    p--;
                                }
                            }
                        }
                    }
                }
            }
        }

        /// <summary>
        /// Unsafe implementation of applying a unary operation
        /// </summary>
        /// <typeparam name="C">The type of operation to perform</typeparam>
        /// <param name="op">The operation instance</param>
        /// <param name="scalar">The input scalar argument</param>
        /// <param name="out">The output target</param>
        internal static void UFunc_Op_Inner_Unary_Scalar_Flush_SByte_TypedImpl<C>(NumCIL.Double.ToDouble op, System.SByte scalar, NdArray<System.Double> @out)
            where C : IUnaryOp<System.SByte>
        {
            unsafe
            {
                using (var f2 = new Pinner(@out.DataAccessor))
                {
                    var d2 = (System.Double*)f2.ptr;

                    if (@out.Shape.Dimensions.Length == 1)
                    {
                        long totalOps = @out.Shape.Dimensions[0].Length;
                        long ix2 = @out.Shape.Offset;
                        long stride2 = @out.Shape.Dimensions[0].Stride;

                        for (long i = 0; i < totalOps; i++)
                        {
                            d2[ix2] = (System.Double)(scalar);
                            ix2 += stride2;
                        }
                    }
                    else if (@out.Shape.Dimensions.Length == 2)
                    {
                        long opsOuter = @out.Shape.Dimensions[0].Length;
                        long opsInner = @out.Shape.Dimensions[1].Length;

                        long ix2 = @out.Shape.Offset;
                        long outerStride2 = @out.Shape.Dimensions[0].Stride;
                        long innerStride2 = @out.Shape.Dimensions[1].Stride;
                        outerStride2 -= innerStride2 * @out.Shape.Dimensions[1].Length;

                        for (long i = 0; i < opsOuter; i++)
                        {
                            for (long j = 0; j < opsInner; j++)
                            {
                                d2[ix2] = (System.Double)(scalar);
                                ix2 += innerStride2;
                            }

                            ix2 += outerStride2;
                        }
                    }
                    else
                    {
                        long n = @out.Shape.Dimensions.LongLength - 3;
                        long[] limits = @out.Shape.Dimensions.Where(x => n-- > 0).Select(x => x.Length).ToArray();
                        long[] counters = new long[limits.LongLength];

                        long totalOps = limits.LongLength == 0 ? 1 : limits.Aggregate<long>((a, b) => a * b);

                        //This chunck of variables are used to prevent repeated calculations of offsets
                        long dimIndex0 = 0 + limits.LongLength;
                        long dimIndex1 = 1 + limits.LongLength;
                        long dimIndex2 = 2 + limits.LongLength;

                        long opsOuter = @out.Shape.Dimensions[0 + limits.LongLength].Length;
                        long opsInner = @out.Shape.Dimensions[1 + limits.LongLength].Length;
                        long opsInnerInner = @out.Shape.Dimensions[2 + limits.LongLength].Length;

                        long outerStride3 = @out.Shape.Dimensions[dimIndex0].Stride;
                        long innerStride3 = @out.Shape.Dimensions[dimIndex1].Stride;
                        long innerInnerStride3 = @out.Shape.Dimensions[dimIndex2].Stride;
                        outerStride3 -= innerStride3 * @out.Shape.Dimensions[dimIndex1].Length;
                        innerStride3 -= innerInnerStride3 * @out.Shape.Dimensions[dimIndex2].Length;

                        for (long outer = 0; outer < totalOps; outer++)
                        {
                            //Get the array offset for the first element in the outer dimension
                            long ix3 = @out.Shape[counters];

                            for (long i = 0; i < opsOuter; i++)
                            {
                                for (long j = 0; j < opsInner; j++)
                                {
                                    for (long k = 0; k < opsInnerInner; k++)
                                    {
                                        d2[ix3] = (System.Double)(scalar);
                                        ix3 += innerInnerStride3;
                                    }

                                    ix3 += innerStride3;
                                }

                                ix3 += outerStride3;
                            }

                            if (counters.LongLength > 0)
                            {
                                //Basically a ripple carry adder
                                long p = counters.LongLength - 1;
                                while (++counters[p] == limits[p] && p > 0)
                                {
                                    counters[p] = 0;
                                    p--;
                                }
                            }
                        }
                    }
                }
            }
        }
        /// <summary>
        /// Unsafe implementation of applying a unary operation
        /// </summary>
        /// <typeparam name="C">The type of operation to perform</typeparam>
        /// <param name="op">The operation instance</param>
        /// <param name="in1">The input argument</param>
        /// <param name="out">The output target</param>
        internal static void UFunc_Op_Inner_Unary_Flush_Byte_TypedImpl<C>(NumCIL.Double.ToDouble op, NdArray<System.Byte> in1, NdArray<System.Double> @out)
            where C : IUnaryOp<System.Byte>
        {
            unsafe
            {
                using (var f1 = new Pinner(in1.DataAccessor))
                using (var f2 = new Pinner(@out.DataAccessor))
                {
                    var d1 = (System.Byte*)f1.ptr;
                    var d2 = (System.Double*)f2.ptr;

                    if (@out.Shape.Dimensions.Length == 1)
                    {
                        long totalOps = @out.Shape.Dimensions[0].Length;

                        long ix1 = in1.Shape.Offset;
                        long ix2 = @out.Shape.Offset;

                        long stride1 = in1.Shape.Dimensions[0].Stride;
                        long stride2 = @out.Shape.Dimensions[0].Stride;


                        if (stride1 == stride2 && ix1 == ix2)
                        {
                            //Best case, all are equal, just keep a single counter
                            for (long i = 0; i < totalOps; i++)
                            {
                                d2[ix1] = (System.Double)(d1[ix1]);
                                ix1 += stride1;
                            }
                        }
                        else
                        {
                            for (long i = 0; i < totalOps; i++)
                            {
                                d2[ix2] = (System.Double)(d1[ix1]);
                                ix1 += stride1;
                                ix2 += stride2;
                            }
                        }
                    }
                    else if (@out.Shape.Dimensions.Length == 2)
                    {
                        long opsOuter = @out.Shape.Dimensions[0].Length;
                        long opsInner = @out.Shape.Dimensions[1].Length;

                        long ix1 = in1.Shape.Offset;
                        long ix2 = @out.Shape.Offset;

                        long outerStride1 = in1.Shape.Dimensions[0].Stride;
                        long outerStride2 = @out.Shape.Dimensions[0].Stride;

                        long innerStride1 = in1.Shape.Dimensions[1].Stride;
                        long innerStride2 = @out.Shape.Dimensions[1].Stride;

                        outerStride1 -= innerStride1 * in1.Shape.Dimensions[1].Length;
                        outerStride2 -= innerStride2 * @out.Shape.Dimensions[1].Length;

                        for (long i = 0; i < opsOuter; i++)
                        {
                            for (long j = 0; j < opsInner; j++)
                            {
                                d2[ix2] = (System.Double)(d1[ix1]);
                                ix1 += innerStride1;
                                ix2 += innerStride2;
                            }

                            ix1 += outerStride1;
                            ix2 += outerStride2;
                        }
                    }
                    else
                    {
                        long n = in1.Shape.Dimensions.LongLength - 3;
                        long[] limits = in1.Shape.Dimensions.Where(x => n-- > 0).Select(x => x.Length).ToArray();
                        long[] counters = new long[limits.LongLength];

                        long totalOps = limits.LongLength == 0 ? 1 : limits.Aggregate<long>((a, b) => a * b);

                        //This chunck of variables are used to prevent repeated calculations of offsets
                        long dimIndex0 = 0 + limits.LongLength;
                        long dimIndex1 = 1 + limits.LongLength;
                        long dimIndex2 = 2 + limits.LongLength;

                        long opsOuter = @out.Shape.Dimensions[0 + limits.LongLength].Length;
                        long opsInner = @out.Shape.Dimensions[1 + limits.LongLength].Length;
                        long opsInnerInner = @out.Shape.Dimensions[2 + limits.LongLength].Length;

                        long outerStride1 = in1.Shape.Dimensions[dimIndex0].Stride;
                        long outerStride3 = @out.Shape.Dimensions[dimIndex0].Stride;

                        long innerStride1 = in1.Shape.Dimensions[dimIndex1].Stride;
                        long innerStride3 = @out.Shape.Dimensions[dimIndex1].Stride;

                        long innerInnerStride1 = in1.Shape.Dimensions[dimIndex2].Stride;
                        long innerInnerStride3 = @out.Shape.Dimensions[dimIndex2].Stride;

                        outerStride1 -= innerStride1 * in1.Shape.Dimensions[dimIndex1].Length;
                        outerStride3 -= innerStride3 * @out.Shape.Dimensions[dimIndex1].Length;

                        innerStride1 -= innerInnerStride1 * in1.Shape.Dimensions[dimIndex2].Length;
                        innerStride3 -= innerInnerStride3 * @out.Shape.Dimensions[dimIndex2].Length;

                        for (long outer = 0; outer < totalOps; outer++)
                        {
                            //Get the array offset for the first element in the outer dimension
                            long ix1 = in1.Shape[counters];
                            long ix3 = @out.Shape[counters];


                            for (long i = 0; i < opsOuter; i++)
                            {
                                for (long j = 0; j < opsInner; j++)
                                {
                                    for (long k = 0; k < opsInnerInner; k++)
                                    {
                                        d2[ix3] = (System.Double)(d1[ix1]);
                                        ix1 += innerInnerStride1;
                                        ix3 += innerInnerStride3;
                                    }

                                    ix1 += innerStride1;
                                    ix3 += innerStride3;
                                }

                                ix1 += outerStride1;
                                ix3 += outerStride3;
                            }

                            if (counters.LongLength > 0)
                            {
                                //Basically a ripple carry adder
                                long p = counters.LongLength - 1;
                                while (++counters[p] == limits[p] && p > 0)
                                {
                                    counters[p] = 0;
                                    p--;
                                }
                            }
                        }
                    }
                }
            }
        }

        /// <summary>
        /// Unsafe implementation of applying a unary operation
        /// </summary>
        /// <typeparam name="C">The type of operation to perform</typeparam>
        /// <param name="op">The operation instance</param>
        /// <param name="scalar">The input scalar argument</param>
        /// <param name="out">The output target</param>
        internal static void UFunc_Op_Inner_Unary_Scalar_Flush_Byte_TypedImpl<C>(NumCIL.Double.ToDouble op, System.Byte scalar, NdArray<System.Double> @out)
            where C : IUnaryOp<System.Byte>
        {
            unsafe
            {
                using (var f2 = new Pinner(@out.DataAccessor))
                {
                    var d2 = (System.Double*)f2.ptr;

                    if (@out.Shape.Dimensions.Length == 1)
                    {
                        long totalOps = @out.Shape.Dimensions[0].Length;
                        long ix2 = @out.Shape.Offset;
                        long stride2 = @out.Shape.Dimensions[0].Stride;

                        for (long i = 0; i < totalOps; i++)
                        {
                            d2[ix2] = (System.Double)(scalar);
                            ix2 += stride2;
                        }
                    }
                    else if (@out.Shape.Dimensions.Length == 2)
                    {
                        long opsOuter = @out.Shape.Dimensions[0].Length;
                        long opsInner = @out.Shape.Dimensions[1].Length;

                        long ix2 = @out.Shape.Offset;
                        long outerStride2 = @out.Shape.Dimensions[0].Stride;
                        long innerStride2 = @out.Shape.Dimensions[1].Stride;
                        outerStride2 -= innerStride2 * @out.Shape.Dimensions[1].Length;

                        for (long i = 0; i < opsOuter; i++)
                        {
                            for (long j = 0; j < opsInner; j++)
                            {
                                d2[ix2] = (System.Double)(scalar);
                                ix2 += innerStride2;
                            }

                            ix2 += outerStride2;
                        }
                    }
                    else
                    {
                        long n = @out.Shape.Dimensions.LongLength - 3;
                        long[] limits = @out.Shape.Dimensions.Where(x => n-- > 0).Select(x => x.Length).ToArray();
                        long[] counters = new long[limits.LongLength];

                        long totalOps = limits.LongLength == 0 ? 1 : limits.Aggregate<long>((a, b) => a * b);

                        //This chunck of variables are used to prevent repeated calculations of offsets
                        long dimIndex0 = 0 + limits.LongLength;
                        long dimIndex1 = 1 + limits.LongLength;
                        long dimIndex2 = 2 + limits.LongLength;

                        long opsOuter = @out.Shape.Dimensions[0 + limits.LongLength].Length;
                        long opsInner = @out.Shape.Dimensions[1 + limits.LongLength].Length;
                        long opsInnerInner = @out.Shape.Dimensions[2 + limits.LongLength].Length;

                        long outerStride3 = @out.Shape.Dimensions[dimIndex0].Stride;
                        long innerStride3 = @out.Shape.Dimensions[dimIndex1].Stride;
                        long innerInnerStride3 = @out.Shape.Dimensions[dimIndex2].Stride;
                        outerStride3 -= innerStride3 * @out.Shape.Dimensions[dimIndex1].Length;
                        innerStride3 -= innerInnerStride3 * @out.Shape.Dimensions[dimIndex2].Length;

                        for (long outer = 0; outer < totalOps; outer++)
                        {
                            //Get the array offset for the first element in the outer dimension
                            long ix3 = @out.Shape[counters];

                            for (long i = 0; i < opsOuter; i++)
                            {
                                for (long j = 0; j < opsInner; j++)
                                {
                                    for (long k = 0; k < opsInnerInner; k++)
                                    {
                                        d2[ix3] = (System.Double)(scalar);
                                        ix3 += innerInnerStride3;
                                    }

                                    ix3 += innerStride3;
                                }

                                ix3 += outerStride3;
                            }

                            if (counters.LongLength > 0)
                            {
                                //Basically a ripple carry adder
                                long p = counters.LongLength - 1;
                                while (++counters[p] == limits[p] && p > 0)
                                {
                                    counters[p] = 0;
                                    p--;
                                }
                            }
                        }
                    }
                }
            }
        }
        /// <summary>
        /// Unsafe implementation of applying a unary operation
        /// </summary>
        /// <typeparam name="C">The type of operation to perform</typeparam>
        /// <param name="op">The operation instance</param>
        /// <param name="in1">The input argument</param>
        /// <param name="out">The output target</param>
        internal static void UFunc_Op_Inner_Unary_Flush_Int16_TypedImpl<C>(NumCIL.Double.ToDouble op, NdArray<System.Int16> in1, NdArray<System.Double> @out)
            where C : IUnaryOp<System.Int16>
        {
            unsafe
            {
                using (var f1 = new Pinner(in1.DataAccessor))
                using (var f2 = new Pinner(@out.DataAccessor))
                {
                    var d1 = (System.Int16*)f1.ptr;
                    var d2 = (System.Double*)f2.ptr;

                    if (@out.Shape.Dimensions.Length == 1)
                    {
                        long totalOps = @out.Shape.Dimensions[0].Length;

                        long ix1 = in1.Shape.Offset;
                        long ix2 = @out.Shape.Offset;

                        long stride1 = in1.Shape.Dimensions[0].Stride;
                        long stride2 = @out.Shape.Dimensions[0].Stride;


                        if (stride1 == stride2 && ix1 == ix2)
                        {
                            //Best case, all are equal, just keep a single counter
                            for (long i = 0; i < totalOps; i++)
                            {
                                d2[ix1] = (System.Double)(d1[ix1]);
                                ix1 += stride1;
                            }
                        }
                        else
                        {
                            for (long i = 0; i < totalOps; i++)
                            {
                                d2[ix2] = (System.Double)(d1[ix1]);
                                ix1 += stride1;
                                ix2 += stride2;
                            }
                        }
                    }
                    else if (@out.Shape.Dimensions.Length == 2)
                    {
                        long opsOuter = @out.Shape.Dimensions[0].Length;
                        long opsInner = @out.Shape.Dimensions[1].Length;

                        long ix1 = in1.Shape.Offset;
                        long ix2 = @out.Shape.Offset;

                        long outerStride1 = in1.Shape.Dimensions[0].Stride;
                        long outerStride2 = @out.Shape.Dimensions[0].Stride;

                        long innerStride1 = in1.Shape.Dimensions[1].Stride;
                        long innerStride2 = @out.Shape.Dimensions[1].Stride;

                        outerStride1 -= innerStride1 * in1.Shape.Dimensions[1].Length;
                        outerStride2 -= innerStride2 * @out.Shape.Dimensions[1].Length;

                        for (long i = 0; i < opsOuter; i++)
                        {
                            for (long j = 0; j < opsInner; j++)
                            {
                                d2[ix2] = (System.Double)(d1[ix1]);
                                ix1 += innerStride1;
                                ix2 += innerStride2;
                            }

                            ix1 += outerStride1;
                            ix2 += outerStride2;
                        }
                    }
                    else
                    {
                        long n = in1.Shape.Dimensions.LongLength - 3;
                        long[] limits = in1.Shape.Dimensions.Where(x => n-- > 0).Select(x => x.Length).ToArray();
                        long[] counters = new long[limits.LongLength];

                        long totalOps = limits.LongLength == 0 ? 1 : limits.Aggregate<long>((a, b) => a * b);

                        //This chunck of variables are used to prevent repeated calculations of offsets
                        long dimIndex0 = 0 + limits.LongLength;
                        long dimIndex1 = 1 + limits.LongLength;
                        long dimIndex2 = 2 + limits.LongLength;

                        long opsOuter = @out.Shape.Dimensions[0 + limits.LongLength].Length;
                        long opsInner = @out.Shape.Dimensions[1 + limits.LongLength].Length;
                        long opsInnerInner = @out.Shape.Dimensions[2 + limits.LongLength].Length;

                        long outerStride1 = in1.Shape.Dimensions[dimIndex0].Stride;
                        long outerStride3 = @out.Shape.Dimensions[dimIndex0].Stride;

                        long innerStride1 = in1.Shape.Dimensions[dimIndex1].Stride;
                        long innerStride3 = @out.Shape.Dimensions[dimIndex1].Stride;

                        long innerInnerStride1 = in1.Shape.Dimensions[dimIndex2].Stride;
                        long innerInnerStride3 = @out.Shape.Dimensions[dimIndex2].Stride;

                        outerStride1 -= innerStride1 * in1.Shape.Dimensions[dimIndex1].Length;
                        outerStride3 -= innerStride3 * @out.Shape.Dimensions[dimIndex1].Length;

                        innerStride1 -= innerInnerStride1 * in1.Shape.Dimensions[dimIndex2].Length;
                        innerStride3 -= innerInnerStride3 * @out.Shape.Dimensions[dimIndex2].Length;

                        for (long outer = 0; outer < totalOps; outer++)
                        {
                            //Get the array offset for the first element in the outer dimension
                            long ix1 = in1.Shape[counters];
                            long ix3 = @out.Shape[counters];


                            for (long i = 0; i < opsOuter; i++)
                            {
                                for (long j = 0; j < opsInner; j++)
                                {
                                    for (long k = 0; k < opsInnerInner; k++)
                                    {
                                        d2[ix3] = (System.Double)(d1[ix1]);
                                        ix1 += innerInnerStride1;
                                        ix3 += innerInnerStride3;
                                    }

                                    ix1 += innerStride1;
                                    ix3 += innerStride3;
                                }

                                ix1 += outerStride1;
                                ix3 += outerStride3;
                            }

                            if (counters.LongLength > 0)
                            {
                                //Basically a ripple carry adder
                                long p = counters.LongLength - 1;
                                while (++counters[p] == limits[p] && p > 0)
                                {
                                    counters[p] = 0;
                                    p--;
                                }
                            }
                        }
                    }
                }
            }
        }

        /// <summary>
        /// Unsafe implementation of applying a unary operation
        /// </summary>
        /// <typeparam name="C">The type of operation to perform</typeparam>
        /// <param name="op">The operation instance</param>
        /// <param name="scalar">The input scalar argument</param>
        /// <param name="out">The output target</param>
        internal static void UFunc_Op_Inner_Unary_Scalar_Flush_Int16_TypedImpl<C>(NumCIL.Double.ToDouble op, System.Int16 scalar, NdArray<System.Double> @out)
            where C : IUnaryOp<System.Int16>
        {
            unsafe
            {
                using (var f2 = new Pinner(@out.DataAccessor))
                {
                    var d2 = (System.Double*)f2.ptr;

                    if (@out.Shape.Dimensions.Length == 1)
                    {
                        long totalOps = @out.Shape.Dimensions[0].Length;
                        long ix2 = @out.Shape.Offset;
                        long stride2 = @out.Shape.Dimensions[0].Stride;

                        for (long i = 0; i < totalOps; i++)
                        {
                            d2[ix2] = (System.Double)(scalar);
                            ix2 += stride2;
                        }
                    }
                    else if (@out.Shape.Dimensions.Length == 2)
                    {
                        long opsOuter = @out.Shape.Dimensions[0].Length;
                        long opsInner = @out.Shape.Dimensions[1].Length;

                        long ix2 = @out.Shape.Offset;
                        long outerStride2 = @out.Shape.Dimensions[0].Stride;
                        long innerStride2 = @out.Shape.Dimensions[1].Stride;
                        outerStride2 -= innerStride2 * @out.Shape.Dimensions[1].Length;

                        for (long i = 0; i < opsOuter; i++)
                        {
                            for (long j = 0; j < opsInner; j++)
                            {
                                d2[ix2] = (System.Double)(scalar);
                                ix2 += innerStride2;
                            }

                            ix2 += outerStride2;
                        }
                    }
                    else
                    {
                        long n = @out.Shape.Dimensions.LongLength - 3;
                        long[] limits = @out.Shape.Dimensions.Where(x => n-- > 0).Select(x => x.Length).ToArray();
                        long[] counters = new long[limits.LongLength];

                        long totalOps = limits.LongLength == 0 ? 1 : limits.Aggregate<long>((a, b) => a * b);

                        //This chunck of variables are used to prevent repeated calculations of offsets
                        long dimIndex0 = 0 + limits.LongLength;
                        long dimIndex1 = 1 + limits.LongLength;
                        long dimIndex2 = 2 + limits.LongLength;

                        long opsOuter = @out.Shape.Dimensions[0 + limits.LongLength].Length;
                        long opsInner = @out.Shape.Dimensions[1 + limits.LongLength].Length;
                        long opsInnerInner = @out.Shape.Dimensions[2 + limits.LongLength].Length;

                        long outerStride3 = @out.Shape.Dimensions[dimIndex0].Stride;
                        long innerStride3 = @out.Shape.Dimensions[dimIndex1].Stride;
                        long innerInnerStride3 = @out.Shape.Dimensions[dimIndex2].Stride;
                        outerStride3 -= innerStride3 * @out.Shape.Dimensions[dimIndex1].Length;
                        innerStride3 -= innerInnerStride3 * @out.Shape.Dimensions[dimIndex2].Length;

                        for (long outer = 0; outer < totalOps; outer++)
                        {
                            //Get the array offset for the first element in the outer dimension
                            long ix3 = @out.Shape[counters];

                            for (long i = 0; i < opsOuter; i++)
                            {
                                for (long j = 0; j < opsInner; j++)
                                {
                                    for (long k = 0; k < opsInnerInner; k++)
                                    {
                                        d2[ix3] = (System.Double)(scalar);
                                        ix3 += innerInnerStride3;
                                    }

                                    ix3 += innerStride3;
                                }

                                ix3 += outerStride3;
                            }

                            if (counters.LongLength > 0)
                            {
                                //Basically a ripple carry adder
                                long p = counters.LongLength - 1;
                                while (++counters[p] == limits[p] && p > 0)
                                {
                                    counters[p] = 0;
                                    p--;
                                }
                            }
                        }
                    }
                }
            }
        }
        /// <summary>
        /// Unsafe implementation of applying a unary operation
        /// </summary>
        /// <typeparam name="C">The type of operation to perform</typeparam>
        /// <param name="op">The operation instance</param>
        /// <param name="in1">The input argument</param>
        /// <param name="out">The output target</param>
        internal static void UFunc_Op_Inner_Unary_Flush_UInt16_TypedImpl<C>(NumCIL.Double.ToDouble op, NdArray<System.UInt16> in1, NdArray<System.Double> @out)
            where C : IUnaryOp<System.UInt16>
        {
            unsafe
            {
                using (var f1 = new Pinner(in1.DataAccessor))
                using (var f2 = new Pinner(@out.DataAccessor))
                {
                    var d1 = (System.UInt16*)f1.ptr;
                    var d2 = (System.Double*)f2.ptr;

                    if (@out.Shape.Dimensions.Length == 1)
                    {
                        long totalOps = @out.Shape.Dimensions[0].Length;

                        long ix1 = in1.Shape.Offset;
                        long ix2 = @out.Shape.Offset;

                        long stride1 = in1.Shape.Dimensions[0].Stride;
                        long stride2 = @out.Shape.Dimensions[0].Stride;


                        if (stride1 == stride2 && ix1 == ix2)
                        {
                            //Best case, all are equal, just keep a single counter
                            for (long i = 0; i < totalOps; i++)
                            {
                                d2[ix1] = (System.Double)(d1[ix1]);
                                ix1 += stride1;
                            }
                        }
                        else
                        {
                            for (long i = 0; i < totalOps; i++)
                            {
                                d2[ix2] = (System.Double)(d1[ix1]);
                                ix1 += stride1;
                                ix2 += stride2;
                            }
                        }
                    }
                    else if (@out.Shape.Dimensions.Length == 2)
                    {
                        long opsOuter = @out.Shape.Dimensions[0].Length;
                        long opsInner = @out.Shape.Dimensions[1].Length;

                        long ix1 = in1.Shape.Offset;
                        long ix2 = @out.Shape.Offset;

                        long outerStride1 = in1.Shape.Dimensions[0].Stride;
                        long outerStride2 = @out.Shape.Dimensions[0].Stride;

                        long innerStride1 = in1.Shape.Dimensions[1].Stride;
                        long innerStride2 = @out.Shape.Dimensions[1].Stride;

                        outerStride1 -= innerStride1 * in1.Shape.Dimensions[1].Length;
                        outerStride2 -= innerStride2 * @out.Shape.Dimensions[1].Length;

                        for (long i = 0; i < opsOuter; i++)
                        {
                            for (long j = 0; j < opsInner; j++)
                            {
                                d2[ix2] = (System.Double)(d1[ix1]);
                                ix1 += innerStride1;
                                ix2 += innerStride2;
                            }

                            ix1 += outerStride1;
                            ix2 += outerStride2;
                        }
                    }
                    else
                    {
                        long n = in1.Shape.Dimensions.LongLength - 3;
                        long[] limits = in1.Shape.Dimensions.Where(x => n-- > 0).Select(x => x.Length).ToArray();
                        long[] counters = new long[limits.LongLength];

                        long totalOps = limits.LongLength == 0 ? 1 : limits.Aggregate<long>((a, b) => a * b);

                        //This chunck of variables are used to prevent repeated calculations of offsets
                        long dimIndex0 = 0 + limits.LongLength;
                        long dimIndex1 = 1 + limits.LongLength;
                        long dimIndex2 = 2 + limits.LongLength;

                        long opsOuter = @out.Shape.Dimensions[0 + limits.LongLength].Length;
                        long opsInner = @out.Shape.Dimensions[1 + limits.LongLength].Length;
                        long opsInnerInner = @out.Shape.Dimensions[2 + limits.LongLength].Length;

                        long outerStride1 = in1.Shape.Dimensions[dimIndex0].Stride;
                        long outerStride3 = @out.Shape.Dimensions[dimIndex0].Stride;

                        long innerStride1 = in1.Shape.Dimensions[dimIndex1].Stride;
                        long innerStride3 = @out.Shape.Dimensions[dimIndex1].Stride;

                        long innerInnerStride1 = in1.Shape.Dimensions[dimIndex2].Stride;
                        long innerInnerStride3 = @out.Shape.Dimensions[dimIndex2].Stride;

                        outerStride1 -= innerStride1 * in1.Shape.Dimensions[dimIndex1].Length;
                        outerStride3 -= innerStride3 * @out.Shape.Dimensions[dimIndex1].Length;

                        innerStride1 -= innerInnerStride1 * in1.Shape.Dimensions[dimIndex2].Length;
                        innerStride3 -= innerInnerStride3 * @out.Shape.Dimensions[dimIndex2].Length;

                        for (long outer = 0; outer < totalOps; outer++)
                        {
                            //Get the array offset for the first element in the outer dimension
                            long ix1 = in1.Shape[counters];
                            long ix3 = @out.Shape[counters];


                            for (long i = 0; i < opsOuter; i++)
                            {
                                for (long j = 0; j < opsInner; j++)
                                {
                                    for (long k = 0; k < opsInnerInner; k++)
                                    {
                                        d2[ix3] = (System.Double)(d1[ix1]);
                                        ix1 += innerInnerStride1;
                                        ix3 += innerInnerStride3;
                                    }

                                    ix1 += innerStride1;
                                    ix3 += innerStride3;
                                }

                                ix1 += outerStride1;
                                ix3 += outerStride3;
                            }

                            if (counters.LongLength > 0)
                            {
                                //Basically a ripple carry adder
                                long p = counters.LongLength - 1;
                                while (++counters[p] == limits[p] && p > 0)
                                {
                                    counters[p] = 0;
                                    p--;
                                }
                            }
                        }
                    }
                }
            }
        }

        /// <summary>
        /// Unsafe implementation of applying a unary operation
        /// </summary>
        /// <typeparam name="C">The type of operation to perform</typeparam>
        /// <param name="op">The operation instance</param>
        /// <param name="scalar">The input scalar argument</param>
        /// <param name="out">The output target</param>
        internal static void UFunc_Op_Inner_Unary_Scalar_Flush_UInt16_TypedImpl<C>(NumCIL.Double.ToDouble op, System.UInt16 scalar, NdArray<System.Double> @out)
            where C : IUnaryOp<System.UInt16>
        {
            unsafe
            {
                using (var f2 = new Pinner(@out.DataAccessor))
                {
                    var d2 = (System.Double*)f2.ptr;

                    if (@out.Shape.Dimensions.Length == 1)
                    {
                        long totalOps = @out.Shape.Dimensions[0].Length;
                        long ix2 = @out.Shape.Offset;
                        long stride2 = @out.Shape.Dimensions[0].Stride;

                        for (long i = 0; i < totalOps; i++)
                        {
                            d2[ix2] = (System.Double)(scalar);
                            ix2 += stride2;
                        }
                    }
                    else if (@out.Shape.Dimensions.Length == 2)
                    {
                        long opsOuter = @out.Shape.Dimensions[0].Length;
                        long opsInner = @out.Shape.Dimensions[1].Length;

                        long ix2 = @out.Shape.Offset;
                        long outerStride2 = @out.Shape.Dimensions[0].Stride;
                        long innerStride2 = @out.Shape.Dimensions[1].Stride;
                        outerStride2 -= innerStride2 * @out.Shape.Dimensions[1].Length;

                        for (long i = 0; i < opsOuter; i++)
                        {
                            for (long j = 0; j < opsInner; j++)
                            {
                                d2[ix2] = (System.Double)(scalar);
                                ix2 += innerStride2;
                            }

                            ix2 += outerStride2;
                        }
                    }
                    else
                    {
                        long n = @out.Shape.Dimensions.LongLength - 3;
                        long[] limits = @out.Shape.Dimensions.Where(x => n-- > 0).Select(x => x.Length).ToArray();
                        long[] counters = new long[limits.LongLength];

                        long totalOps = limits.LongLength == 0 ? 1 : limits.Aggregate<long>((a, b) => a * b);

                        //This chunck of variables are used to prevent repeated calculations of offsets
                        long dimIndex0 = 0 + limits.LongLength;
                        long dimIndex1 = 1 + limits.LongLength;
                        long dimIndex2 = 2 + limits.LongLength;

                        long opsOuter = @out.Shape.Dimensions[0 + limits.LongLength].Length;
                        long opsInner = @out.Shape.Dimensions[1 + limits.LongLength].Length;
                        long opsInnerInner = @out.Shape.Dimensions[2 + limits.LongLength].Length;

                        long outerStride3 = @out.Shape.Dimensions[dimIndex0].Stride;
                        long innerStride3 = @out.Shape.Dimensions[dimIndex1].Stride;
                        long innerInnerStride3 = @out.Shape.Dimensions[dimIndex2].Stride;
                        outerStride3 -= innerStride3 * @out.Shape.Dimensions[dimIndex1].Length;
                        innerStride3 -= innerInnerStride3 * @out.Shape.Dimensions[dimIndex2].Length;

                        for (long outer = 0; outer < totalOps; outer++)
                        {
                            //Get the array offset for the first element in the outer dimension
                            long ix3 = @out.Shape[counters];

                            for (long i = 0; i < opsOuter; i++)
                            {
                                for (long j = 0; j < opsInner; j++)
                                {
                                    for (long k = 0; k < opsInnerInner; k++)
                                    {
                                        d2[ix3] = (System.Double)(scalar);
                                        ix3 += innerInnerStride3;
                                    }

                                    ix3 += innerStride3;
                                }

                                ix3 += outerStride3;
                            }

                            if (counters.LongLength > 0)
                            {
                                //Basically a ripple carry adder
                                long p = counters.LongLength - 1;
                                while (++counters[p] == limits[p] && p > 0)
                                {
                                    counters[p] = 0;
                                    p--;
                                }
                            }
                        }
                    }
                }
            }
        }
        /// <summary>
        /// Unsafe implementation of applying a unary operation
        /// </summary>
        /// <typeparam name="C">The type of operation to perform</typeparam>
        /// <param name="op">The operation instance</param>
        /// <param name="in1">The input argument</param>
        /// <param name="out">The output target</param>
        internal static void UFunc_Op_Inner_Unary_Flush_Int32_TypedImpl<C>(NumCIL.Double.ToDouble op, NdArray<System.Int32> in1, NdArray<System.Double> @out)
            where C : IUnaryOp<System.Int32>
        {
            unsafe
            {
                using (var f1 = new Pinner(in1.DataAccessor))
                using (var f2 = new Pinner(@out.DataAccessor))
                {
                    var d1 = (System.Int32*)f1.ptr;
                    var d2 = (System.Double*)f2.ptr;

                    if (@out.Shape.Dimensions.Length == 1)
                    {
                        long totalOps = @out.Shape.Dimensions[0].Length;

                        long ix1 = in1.Shape.Offset;
                        long ix2 = @out.Shape.Offset;

                        long stride1 = in1.Shape.Dimensions[0].Stride;
                        long stride2 = @out.Shape.Dimensions[0].Stride;


                        if (stride1 == stride2 && ix1 == ix2)
                        {
                            //Best case, all are equal, just keep a single counter
                            for (long i = 0; i < totalOps; i++)
                            {
                                d2[ix1] = (System.Double)(d1[ix1]);
                                ix1 += stride1;
                            }
                        }
                        else
                        {
                            for (long i = 0; i < totalOps; i++)
                            {
                                d2[ix2] = (System.Double)(d1[ix1]);
                                ix1 += stride1;
                                ix2 += stride2;
                            }
                        }
                    }
                    else if (@out.Shape.Dimensions.Length == 2)
                    {
                        long opsOuter = @out.Shape.Dimensions[0].Length;
                        long opsInner = @out.Shape.Dimensions[1].Length;

                        long ix1 = in1.Shape.Offset;
                        long ix2 = @out.Shape.Offset;

                        long outerStride1 = in1.Shape.Dimensions[0].Stride;
                        long outerStride2 = @out.Shape.Dimensions[0].Stride;

                        long innerStride1 = in1.Shape.Dimensions[1].Stride;
                        long innerStride2 = @out.Shape.Dimensions[1].Stride;

                        outerStride1 -= innerStride1 * in1.Shape.Dimensions[1].Length;
                        outerStride2 -= innerStride2 * @out.Shape.Dimensions[1].Length;

                        for (long i = 0; i < opsOuter; i++)
                        {
                            for (long j = 0; j < opsInner; j++)
                            {
                                d2[ix2] = (System.Double)(d1[ix1]);
                                ix1 += innerStride1;
                                ix2 += innerStride2;
                            }

                            ix1 += outerStride1;
                            ix2 += outerStride2;
                        }
                    }
                    else
                    {
                        long n = in1.Shape.Dimensions.LongLength - 3;
                        long[] limits = in1.Shape.Dimensions.Where(x => n-- > 0).Select(x => x.Length).ToArray();
                        long[] counters = new long[limits.LongLength];

                        long totalOps = limits.LongLength == 0 ? 1 : limits.Aggregate<long>((a, b) => a * b);

                        //This chunck of variables are used to prevent repeated calculations of offsets
                        long dimIndex0 = 0 + limits.LongLength;
                        long dimIndex1 = 1 + limits.LongLength;
                        long dimIndex2 = 2 + limits.LongLength;

                        long opsOuter = @out.Shape.Dimensions[0 + limits.LongLength].Length;
                        long opsInner = @out.Shape.Dimensions[1 + limits.LongLength].Length;
                        long opsInnerInner = @out.Shape.Dimensions[2 + limits.LongLength].Length;

                        long outerStride1 = in1.Shape.Dimensions[dimIndex0].Stride;
                        long outerStride3 = @out.Shape.Dimensions[dimIndex0].Stride;

                        long innerStride1 = in1.Shape.Dimensions[dimIndex1].Stride;
                        long innerStride3 = @out.Shape.Dimensions[dimIndex1].Stride;

                        long innerInnerStride1 = in1.Shape.Dimensions[dimIndex2].Stride;
                        long innerInnerStride3 = @out.Shape.Dimensions[dimIndex2].Stride;

                        outerStride1 -= innerStride1 * in1.Shape.Dimensions[dimIndex1].Length;
                        outerStride3 -= innerStride3 * @out.Shape.Dimensions[dimIndex1].Length;

                        innerStride1 -= innerInnerStride1 * in1.Shape.Dimensions[dimIndex2].Length;
                        innerStride3 -= innerInnerStride3 * @out.Shape.Dimensions[dimIndex2].Length;

                        for (long outer = 0; outer < totalOps; outer++)
                        {
                            //Get the array offset for the first element in the outer dimension
                            long ix1 = in1.Shape[counters];
                            long ix3 = @out.Shape[counters];


                            for (long i = 0; i < opsOuter; i++)
                            {
                                for (long j = 0; j < opsInner; j++)
                                {
                                    for (long k = 0; k < opsInnerInner; k++)
                                    {
                                        d2[ix3] = (System.Double)(d1[ix1]);
                                        ix1 += innerInnerStride1;
                                        ix3 += innerInnerStride3;
                                    }

                                    ix1 += innerStride1;
                                    ix3 += innerStride3;
                                }

                                ix1 += outerStride1;
                                ix3 += outerStride3;
                            }

                            if (counters.LongLength > 0)
                            {
                                //Basically a ripple carry adder
                                long p = counters.LongLength - 1;
                                while (++counters[p] == limits[p] && p > 0)
                                {
                                    counters[p] = 0;
                                    p--;
                                }
                            }
                        }
                    }
                }
            }
        }

        /// <summary>
        /// Unsafe implementation of applying a unary operation
        /// </summary>
        /// <typeparam name="C">The type of operation to perform</typeparam>
        /// <param name="op">The operation instance</param>
        /// <param name="scalar">The input scalar argument</param>
        /// <param name="out">The output target</param>
        internal static void UFunc_Op_Inner_Unary_Scalar_Flush_Int32_TypedImpl<C>(NumCIL.Double.ToDouble op, System.Int32 scalar, NdArray<System.Double> @out)
            where C : IUnaryOp<System.Int32>
        {
            unsafe
            {
                using (var f2 = new Pinner(@out.DataAccessor))
                {
                    var d2 = (System.Double*)f2.ptr;

                    if (@out.Shape.Dimensions.Length == 1)
                    {
                        long totalOps = @out.Shape.Dimensions[0].Length;
                        long ix2 = @out.Shape.Offset;
                        long stride2 = @out.Shape.Dimensions[0].Stride;

                        for (long i = 0; i < totalOps; i++)
                        {
                            d2[ix2] = (System.Double)(scalar);
                            ix2 += stride2;
                        }
                    }
                    else if (@out.Shape.Dimensions.Length == 2)
                    {
                        long opsOuter = @out.Shape.Dimensions[0].Length;
                        long opsInner = @out.Shape.Dimensions[1].Length;

                        long ix2 = @out.Shape.Offset;
                        long outerStride2 = @out.Shape.Dimensions[0].Stride;
                        long innerStride2 = @out.Shape.Dimensions[1].Stride;
                        outerStride2 -= innerStride2 * @out.Shape.Dimensions[1].Length;

                        for (long i = 0; i < opsOuter; i++)
                        {
                            for (long j = 0; j < opsInner; j++)
                            {
                                d2[ix2] = (System.Double)(scalar);
                                ix2 += innerStride2;
                            }

                            ix2 += outerStride2;
                        }
                    }
                    else
                    {
                        long n = @out.Shape.Dimensions.LongLength - 3;
                        long[] limits = @out.Shape.Dimensions.Where(x => n-- > 0).Select(x => x.Length).ToArray();
                        long[] counters = new long[limits.LongLength];

                        long totalOps = limits.LongLength == 0 ? 1 : limits.Aggregate<long>((a, b) => a * b);

                        //This chunck of variables are used to prevent repeated calculations of offsets
                        long dimIndex0 = 0 + limits.LongLength;
                        long dimIndex1 = 1 + limits.LongLength;
                        long dimIndex2 = 2 + limits.LongLength;

                        long opsOuter = @out.Shape.Dimensions[0 + limits.LongLength].Length;
                        long opsInner = @out.Shape.Dimensions[1 + limits.LongLength].Length;
                        long opsInnerInner = @out.Shape.Dimensions[2 + limits.LongLength].Length;

                        long outerStride3 = @out.Shape.Dimensions[dimIndex0].Stride;
                        long innerStride3 = @out.Shape.Dimensions[dimIndex1].Stride;
                        long innerInnerStride3 = @out.Shape.Dimensions[dimIndex2].Stride;
                        outerStride3 -= innerStride3 * @out.Shape.Dimensions[dimIndex1].Length;
                        innerStride3 -= innerInnerStride3 * @out.Shape.Dimensions[dimIndex2].Length;

                        for (long outer = 0; outer < totalOps; outer++)
                        {
                            //Get the array offset for the first element in the outer dimension
                            long ix3 = @out.Shape[counters];

                            for (long i = 0; i < opsOuter; i++)
                            {
                                for (long j = 0; j < opsInner; j++)
                                {
                                    for (long k = 0; k < opsInnerInner; k++)
                                    {
                                        d2[ix3] = (System.Double)(scalar);
                                        ix3 += innerInnerStride3;
                                    }

                                    ix3 += innerStride3;
                                }

                                ix3 += outerStride3;
                            }

                            if (counters.LongLength > 0)
                            {
                                //Basically a ripple carry adder
                                long p = counters.LongLength - 1;
                                while (++counters[p] == limits[p] && p > 0)
                                {
                                    counters[p] = 0;
                                    p--;
                                }
                            }
                        }
                    }
                }
            }
        }
        /// <summary>
        /// Unsafe implementation of applying a unary operation
        /// </summary>
        /// <typeparam name="C">The type of operation to perform</typeparam>
        /// <param name="op">The operation instance</param>
        /// <param name="in1">The input argument</param>
        /// <param name="out">The output target</param>
        internal static void UFunc_Op_Inner_Unary_Flush_UInt32_TypedImpl<C>(NumCIL.Double.ToDouble op, NdArray<System.UInt32> in1, NdArray<System.Double> @out)
            where C : IUnaryOp<System.UInt32>
        {
            unsafe
            {
                using (var f1 = new Pinner(in1.DataAccessor))
                using (var f2 = new Pinner(@out.DataAccessor))
                {
                    var d1 = (System.UInt32*)f1.ptr;
                    var d2 = (System.Double*)f2.ptr;

                    if (@out.Shape.Dimensions.Length == 1)
                    {
                        long totalOps = @out.Shape.Dimensions[0].Length;

                        long ix1 = in1.Shape.Offset;
                        long ix2 = @out.Shape.Offset;

                        long stride1 = in1.Shape.Dimensions[0].Stride;
                        long stride2 = @out.Shape.Dimensions[0].Stride;


                        if (stride1 == stride2 && ix1 == ix2)
                        {
                            //Best case, all are equal, just keep a single counter
                            for (long i = 0; i < totalOps; i++)
                            {
                                d2[ix1] = (System.Double)(d1[ix1]);
                                ix1 += stride1;
                            }
                        }
                        else
                        {
                            for (long i = 0; i < totalOps; i++)
                            {
                                d2[ix2] = (System.Double)(d1[ix1]);
                                ix1 += stride1;
                                ix2 += stride2;
                            }
                        }
                    }
                    else if (@out.Shape.Dimensions.Length == 2)
                    {
                        long opsOuter = @out.Shape.Dimensions[0].Length;
                        long opsInner = @out.Shape.Dimensions[1].Length;

                        long ix1 = in1.Shape.Offset;
                        long ix2 = @out.Shape.Offset;

                        long outerStride1 = in1.Shape.Dimensions[0].Stride;
                        long outerStride2 = @out.Shape.Dimensions[0].Stride;

                        long innerStride1 = in1.Shape.Dimensions[1].Stride;
                        long innerStride2 = @out.Shape.Dimensions[1].Stride;

                        outerStride1 -= innerStride1 * in1.Shape.Dimensions[1].Length;
                        outerStride2 -= innerStride2 * @out.Shape.Dimensions[1].Length;

                        for (long i = 0; i < opsOuter; i++)
                        {
                            for (long j = 0; j < opsInner; j++)
                            {
                                d2[ix2] = (System.Double)(d1[ix1]);
                                ix1 += innerStride1;
                                ix2 += innerStride2;
                            }

                            ix1 += outerStride1;
                            ix2 += outerStride2;
                        }
                    }
                    else
                    {
                        long n = in1.Shape.Dimensions.LongLength - 3;
                        long[] limits = in1.Shape.Dimensions.Where(x => n-- > 0).Select(x => x.Length).ToArray();
                        long[] counters = new long[limits.LongLength];

                        long totalOps = limits.LongLength == 0 ? 1 : limits.Aggregate<long>((a, b) => a * b);

                        //This chunck of variables are used to prevent repeated calculations of offsets
                        long dimIndex0 = 0 + limits.LongLength;
                        long dimIndex1 = 1 + limits.LongLength;
                        long dimIndex2 = 2 + limits.LongLength;

                        long opsOuter = @out.Shape.Dimensions[0 + limits.LongLength].Length;
                        long opsInner = @out.Shape.Dimensions[1 + limits.LongLength].Length;
                        long opsInnerInner = @out.Shape.Dimensions[2 + limits.LongLength].Length;

                        long outerStride1 = in1.Shape.Dimensions[dimIndex0].Stride;
                        long outerStride3 = @out.Shape.Dimensions[dimIndex0].Stride;

                        long innerStride1 = in1.Shape.Dimensions[dimIndex1].Stride;
                        long innerStride3 = @out.Shape.Dimensions[dimIndex1].Stride;

                        long innerInnerStride1 = in1.Shape.Dimensions[dimIndex2].Stride;
                        long innerInnerStride3 = @out.Shape.Dimensions[dimIndex2].Stride;

                        outerStride1 -= innerStride1 * in1.Shape.Dimensions[dimIndex1].Length;
                        outerStride3 -= innerStride3 * @out.Shape.Dimensions[dimIndex1].Length;

                        innerStride1 -= innerInnerStride1 * in1.Shape.Dimensions[dimIndex2].Length;
                        innerStride3 -= innerInnerStride3 * @out.Shape.Dimensions[dimIndex2].Length;

                        for (long outer = 0; outer < totalOps; outer++)
                        {
                            //Get the array offset for the first element in the outer dimension
                            long ix1 = in1.Shape[counters];
                            long ix3 = @out.Shape[counters];


                            for (long i = 0; i < opsOuter; i++)
                            {
                                for (long j = 0; j < opsInner; j++)
                                {
                                    for (long k = 0; k < opsInnerInner; k++)
                                    {
                                        d2[ix3] = (System.Double)(d1[ix1]);
                                        ix1 += innerInnerStride1;
                                        ix3 += innerInnerStride3;
                                    }

                                    ix1 += innerStride1;
                                    ix3 += innerStride3;
                                }

                                ix1 += outerStride1;
                                ix3 += outerStride3;
                            }

                            if (counters.LongLength > 0)
                            {
                                //Basically a ripple carry adder
                                long p = counters.LongLength - 1;
                                while (++counters[p] == limits[p] && p > 0)
                                {
                                    counters[p] = 0;
                                    p--;
                                }
                            }
                        }
                    }
                }
            }
        }

        /// <summary>
        /// Unsafe implementation of applying a unary operation
        /// </summary>
        /// <typeparam name="C">The type of operation to perform</typeparam>
        /// <param name="op">The operation instance</param>
        /// <param name="scalar">The input scalar argument</param>
        /// <param name="out">The output target</param>
        internal static void UFunc_Op_Inner_Unary_Scalar_Flush_UInt32_TypedImpl<C>(NumCIL.Double.ToDouble op, System.UInt32 scalar, NdArray<System.Double> @out)
            where C : IUnaryOp<System.UInt32>
        {
            unsafe
            {
                using (var f2 = new Pinner(@out.DataAccessor))
                {
                    var d2 = (System.Double*)f2.ptr;

                    if (@out.Shape.Dimensions.Length == 1)
                    {
                        long totalOps = @out.Shape.Dimensions[0].Length;
                        long ix2 = @out.Shape.Offset;
                        long stride2 = @out.Shape.Dimensions[0].Stride;

                        for (long i = 0; i < totalOps; i++)
                        {
                            d2[ix2] = (System.Double)(scalar);
                            ix2 += stride2;
                        }
                    }
                    else if (@out.Shape.Dimensions.Length == 2)
                    {
                        long opsOuter = @out.Shape.Dimensions[0].Length;
                        long opsInner = @out.Shape.Dimensions[1].Length;

                        long ix2 = @out.Shape.Offset;
                        long outerStride2 = @out.Shape.Dimensions[0].Stride;
                        long innerStride2 = @out.Shape.Dimensions[1].Stride;
                        outerStride2 -= innerStride2 * @out.Shape.Dimensions[1].Length;

                        for (long i = 0; i < opsOuter; i++)
                        {
                            for (long j = 0; j < opsInner; j++)
                            {
                                d2[ix2] = (System.Double)(scalar);
                                ix2 += innerStride2;
                            }

                            ix2 += outerStride2;
                        }
                    }
                    else
                    {
                        long n = @out.Shape.Dimensions.LongLength - 3;
                        long[] limits = @out.Shape.Dimensions.Where(x => n-- > 0).Select(x => x.Length).ToArray();
                        long[] counters = new long[limits.LongLength];

                        long totalOps = limits.LongLength == 0 ? 1 : limits.Aggregate<long>((a, b) => a * b);

                        //This chunck of variables are used to prevent repeated calculations of offsets
                        long dimIndex0 = 0 + limits.LongLength;
                        long dimIndex1 = 1 + limits.LongLength;
                        long dimIndex2 = 2 + limits.LongLength;

                        long opsOuter = @out.Shape.Dimensions[0 + limits.LongLength].Length;
                        long opsInner = @out.Shape.Dimensions[1 + limits.LongLength].Length;
                        long opsInnerInner = @out.Shape.Dimensions[2 + limits.LongLength].Length;

                        long outerStride3 = @out.Shape.Dimensions[dimIndex0].Stride;
                        long innerStride3 = @out.Shape.Dimensions[dimIndex1].Stride;
                        long innerInnerStride3 = @out.Shape.Dimensions[dimIndex2].Stride;
                        outerStride3 -= innerStride3 * @out.Shape.Dimensions[dimIndex1].Length;
                        innerStride3 -= innerInnerStride3 * @out.Shape.Dimensions[dimIndex2].Length;

                        for (long outer = 0; outer < totalOps; outer++)
                        {
                            //Get the array offset for the first element in the outer dimension
                            long ix3 = @out.Shape[counters];

                            for (long i = 0; i < opsOuter; i++)
                            {
                                for (long j = 0; j < opsInner; j++)
                                {
                                    for (long k = 0; k < opsInnerInner; k++)
                                    {
                                        d2[ix3] = (System.Double)(scalar);
                                        ix3 += innerInnerStride3;
                                    }

                                    ix3 += innerStride3;
                                }

                                ix3 += outerStride3;
                            }

                            if (counters.LongLength > 0)
                            {
                                //Basically a ripple carry adder
                                long p = counters.LongLength - 1;
                                while (++counters[p] == limits[p] && p > 0)
                                {
                                    counters[p] = 0;
                                    p--;
                                }
                            }
                        }
                    }
                }
            }
        }
        /// <summary>
        /// Unsafe implementation of applying a unary operation
        /// </summary>
        /// <typeparam name="C">The type of operation to perform</typeparam>
        /// <param name="op">The operation instance</param>
        /// <param name="in1">The input argument</param>
        /// <param name="out">The output target</param>
        internal static void UFunc_Op_Inner_Unary_Flush_Int64_TypedImpl<C>(NumCIL.Double.ToDouble op, NdArray<System.Int64> in1, NdArray<System.Double> @out)
            where C : IUnaryOp<System.Int64>
        {
            unsafe
            {
                using (var f1 = new Pinner(in1.DataAccessor))
                using (var f2 = new Pinner(@out.DataAccessor))
                {
                    var d1 = (System.Int64*)f1.ptr;
                    var d2 = (System.Double*)f2.ptr;

                    if (@out.Shape.Dimensions.Length == 1)
                    {
                        long totalOps = @out.Shape.Dimensions[0].Length;

                        long ix1 = in1.Shape.Offset;
                        long ix2 = @out.Shape.Offset;

                        long stride1 = in1.Shape.Dimensions[0].Stride;
                        long stride2 = @out.Shape.Dimensions[0].Stride;


                        if (stride1 == stride2 && ix1 == ix2)
                        {
                            //Best case, all are equal, just keep a single counter
                            for (long i = 0; i < totalOps; i++)
                            {
                                d2[ix1] = (System.Double)(d1[ix1]);
                                ix1 += stride1;
                            }
                        }
                        else
                        {
                            for (long i = 0; i < totalOps; i++)
                            {
                                d2[ix2] = (System.Double)(d1[ix1]);
                                ix1 += stride1;
                                ix2 += stride2;
                            }
                        }
                    }
                    else if (@out.Shape.Dimensions.Length == 2)
                    {
                        long opsOuter = @out.Shape.Dimensions[0].Length;
                        long opsInner = @out.Shape.Dimensions[1].Length;

                        long ix1 = in1.Shape.Offset;
                        long ix2 = @out.Shape.Offset;

                        long outerStride1 = in1.Shape.Dimensions[0].Stride;
                        long outerStride2 = @out.Shape.Dimensions[0].Stride;

                        long innerStride1 = in1.Shape.Dimensions[1].Stride;
                        long innerStride2 = @out.Shape.Dimensions[1].Stride;

                        outerStride1 -= innerStride1 * in1.Shape.Dimensions[1].Length;
                        outerStride2 -= innerStride2 * @out.Shape.Dimensions[1].Length;

                        for (long i = 0; i < opsOuter; i++)
                        {
                            for (long j = 0; j < opsInner; j++)
                            {
                                d2[ix2] = (System.Double)(d1[ix1]);
                                ix1 += innerStride1;
                                ix2 += innerStride2;
                            }

                            ix1 += outerStride1;
                            ix2 += outerStride2;
                        }
                    }
                    else
                    {
                        long n = in1.Shape.Dimensions.LongLength - 3;
                        long[] limits = in1.Shape.Dimensions.Where(x => n-- > 0).Select(x => x.Length).ToArray();
                        long[] counters = new long[limits.LongLength];

                        long totalOps = limits.LongLength == 0 ? 1 : limits.Aggregate<long>((a, b) => a * b);

                        //This chunck of variables are used to prevent repeated calculations of offsets
                        long dimIndex0 = 0 + limits.LongLength;
                        long dimIndex1 = 1 + limits.LongLength;
                        long dimIndex2 = 2 + limits.LongLength;

                        long opsOuter = @out.Shape.Dimensions[0 + limits.LongLength].Length;
                        long opsInner = @out.Shape.Dimensions[1 + limits.LongLength].Length;
                        long opsInnerInner = @out.Shape.Dimensions[2 + limits.LongLength].Length;

                        long outerStride1 = in1.Shape.Dimensions[dimIndex0].Stride;
                        long outerStride3 = @out.Shape.Dimensions[dimIndex0].Stride;

                        long innerStride1 = in1.Shape.Dimensions[dimIndex1].Stride;
                        long innerStride3 = @out.Shape.Dimensions[dimIndex1].Stride;

                        long innerInnerStride1 = in1.Shape.Dimensions[dimIndex2].Stride;
                        long innerInnerStride3 = @out.Shape.Dimensions[dimIndex2].Stride;

                        outerStride1 -= innerStride1 * in1.Shape.Dimensions[dimIndex1].Length;
                        outerStride3 -= innerStride3 * @out.Shape.Dimensions[dimIndex1].Length;

                        innerStride1 -= innerInnerStride1 * in1.Shape.Dimensions[dimIndex2].Length;
                        innerStride3 -= innerInnerStride3 * @out.Shape.Dimensions[dimIndex2].Length;

                        for (long outer = 0; outer < totalOps; outer++)
                        {
                            //Get the array offset for the first element in the outer dimension
                            long ix1 = in1.Shape[counters];
                            long ix3 = @out.Shape[counters];


                            for (long i = 0; i < opsOuter; i++)
                            {
                                for (long j = 0; j < opsInner; j++)
                                {
                                    for (long k = 0; k < opsInnerInner; k++)
                                    {
                                        d2[ix3] = (System.Double)(d1[ix1]);
                                        ix1 += innerInnerStride1;
                                        ix3 += innerInnerStride3;
                                    }

                                    ix1 += innerStride1;
                                    ix3 += innerStride3;
                                }

                                ix1 += outerStride1;
                                ix3 += outerStride3;
                            }

                            if (counters.LongLength > 0)
                            {
                                //Basically a ripple carry adder
                                long p = counters.LongLength - 1;
                                while (++counters[p] == limits[p] && p > 0)
                                {
                                    counters[p] = 0;
                                    p--;
                                }
                            }
                        }
                    }
                }
            }
        }

        /// <summary>
        /// Unsafe implementation of applying a unary operation
        /// </summary>
        /// <typeparam name="C">The type of operation to perform</typeparam>
        /// <param name="op">The operation instance</param>
        /// <param name="scalar">The input scalar argument</param>
        /// <param name="out">The output target</param>
        internal static void UFunc_Op_Inner_Unary_Scalar_Flush_Int64_TypedImpl<C>(NumCIL.Double.ToDouble op, System.Int64 scalar, NdArray<System.Double> @out)
            where C : IUnaryOp<System.Int64>
        {
            unsafe
            {
                using (var f2 = new Pinner(@out.DataAccessor))
                {
                    var d2 = (System.Double*)f2.ptr;

                    if (@out.Shape.Dimensions.Length == 1)
                    {
                        long totalOps = @out.Shape.Dimensions[0].Length;
                        long ix2 = @out.Shape.Offset;
                        long stride2 = @out.Shape.Dimensions[0].Stride;

                        for (long i = 0; i < totalOps; i++)
                        {
                            d2[ix2] = (System.Double)(scalar);
                            ix2 += stride2;
                        }
                    }
                    else if (@out.Shape.Dimensions.Length == 2)
                    {
                        long opsOuter = @out.Shape.Dimensions[0].Length;
                        long opsInner = @out.Shape.Dimensions[1].Length;

                        long ix2 = @out.Shape.Offset;
                        long outerStride2 = @out.Shape.Dimensions[0].Stride;
                        long innerStride2 = @out.Shape.Dimensions[1].Stride;
                        outerStride2 -= innerStride2 * @out.Shape.Dimensions[1].Length;

                        for (long i = 0; i < opsOuter; i++)
                        {
                            for (long j = 0; j < opsInner; j++)
                            {
                                d2[ix2] = (System.Double)(scalar);
                                ix2 += innerStride2;
                            }

                            ix2 += outerStride2;
                        }
                    }
                    else
                    {
                        long n = @out.Shape.Dimensions.LongLength - 3;
                        long[] limits = @out.Shape.Dimensions.Where(x => n-- > 0).Select(x => x.Length).ToArray();
                        long[] counters = new long[limits.LongLength];

                        long totalOps = limits.LongLength == 0 ? 1 : limits.Aggregate<long>((a, b) => a * b);

                        //This chunck of variables are used to prevent repeated calculations of offsets
                        long dimIndex0 = 0 + limits.LongLength;
                        long dimIndex1 = 1 + limits.LongLength;
                        long dimIndex2 = 2 + limits.LongLength;

                        long opsOuter = @out.Shape.Dimensions[0 + limits.LongLength].Length;
                        long opsInner = @out.Shape.Dimensions[1 + limits.LongLength].Length;
                        long opsInnerInner = @out.Shape.Dimensions[2 + limits.LongLength].Length;

                        long outerStride3 = @out.Shape.Dimensions[dimIndex0].Stride;
                        long innerStride3 = @out.Shape.Dimensions[dimIndex1].Stride;
                        long innerInnerStride3 = @out.Shape.Dimensions[dimIndex2].Stride;
                        outerStride3 -= innerStride3 * @out.Shape.Dimensions[dimIndex1].Length;
                        innerStride3 -= innerInnerStride3 * @out.Shape.Dimensions[dimIndex2].Length;

                        for (long outer = 0; outer < totalOps; outer++)
                        {
                            //Get the array offset for the first element in the outer dimension
                            long ix3 = @out.Shape[counters];

                            for (long i = 0; i < opsOuter; i++)
                            {
                                for (long j = 0; j < opsInner; j++)
                                {
                                    for (long k = 0; k < opsInnerInner; k++)
                                    {
                                        d2[ix3] = (System.Double)(scalar);
                                        ix3 += innerInnerStride3;
                                    }

                                    ix3 += innerStride3;
                                }

                                ix3 += outerStride3;
                            }

                            if (counters.LongLength > 0)
                            {
                                //Basically a ripple carry adder
                                long p = counters.LongLength - 1;
                                while (++counters[p] == limits[p] && p > 0)
                                {
                                    counters[p] = 0;
                                    p--;
                                }
                            }
                        }
                    }
                }
            }
        }
        /// <summary>
        /// Unsafe implementation of applying a unary operation
        /// </summary>
        /// <typeparam name="C">The type of operation to perform</typeparam>
        /// <param name="op">The operation instance</param>
        /// <param name="in1">The input argument</param>
        /// <param name="out">The output target</param>
        internal static void UFunc_Op_Inner_Unary_Flush_UInt64_TypedImpl<C>(NumCIL.Double.ToDouble op, NdArray<System.UInt64> in1, NdArray<System.Double> @out)
            where C : IUnaryOp<System.UInt64>
        {
            unsafe
            {
                using (var f1 = new Pinner(in1.DataAccessor))
                using (var f2 = new Pinner(@out.DataAccessor))
                {
                    var d1 = (System.UInt64*)f1.ptr;
                    var d2 = (System.Double*)f2.ptr;

                    if (@out.Shape.Dimensions.Length == 1)
                    {
                        long totalOps = @out.Shape.Dimensions[0].Length;

                        long ix1 = in1.Shape.Offset;
                        long ix2 = @out.Shape.Offset;

                        long stride1 = in1.Shape.Dimensions[0].Stride;
                        long stride2 = @out.Shape.Dimensions[0].Stride;


                        if (stride1 == stride2 && ix1 == ix2)
                        {
                            //Best case, all are equal, just keep a single counter
                            for (long i = 0; i < totalOps; i++)
                            {
                                d2[ix1] = (System.Double)(d1[ix1]);
                                ix1 += stride1;
                            }
                        }
                        else
                        {
                            for (long i = 0; i < totalOps; i++)
                            {
                                d2[ix2] = (System.Double)(d1[ix1]);
                                ix1 += stride1;
                                ix2 += stride2;
                            }
                        }
                    }
                    else if (@out.Shape.Dimensions.Length == 2)
                    {
                        long opsOuter = @out.Shape.Dimensions[0].Length;
                        long opsInner = @out.Shape.Dimensions[1].Length;

                        long ix1 = in1.Shape.Offset;
                        long ix2 = @out.Shape.Offset;

                        long outerStride1 = in1.Shape.Dimensions[0].Stride;
                        long outerStride2 = @out.Shape.Dimensions[0].Stride;

                        long innerStride1 = in1.Shape.Dimensions[1].Stride;
                        long innerStride2 = @out.Shape.Dimensions[1].Stride;

                        outerStride1 -= innerStride1 * in1.Shape.Dimensions[1].Length;
                        outerStride2 -= innerStride2 * @out.Shape.Dimensions[1].Length;

                        for (long i = 0; i < opsOuter; i++)
                        {
                            for (long j = 0; j < opsInner; j++)
                            {
                                d2[ix2] = (System.Double)(d1[ix1]);
                                ix1 += innerStride1;
                                ix2 += innerStride2;
                            }

                            ix1 += outerStride1;
                            ix2 += outerStride2;
                        }
                    }
                    else
                    {
                        long n = in1.Shape.Dimensions.LongLength - 3;
                        long[] limits = in1.Shape.Dimensions.Where(x => n-- > 0).Select(x => x.Length).ToArray();
                        long[] counters = new long[limits.LongLength];

                        long totalOps = limits.LongLength == 0 ? 1 : limits.Aggregate<long>((a, b) => a * b);

                        //This chunck of variables are used to prevent repeated calculations of offsets
                        long dimIndex0 = 0 + limits.LongLength;
                        long dimIndex1 = 1 + limits.LongLength;
                        long dimIndex2 = 2 + limits.LongLength;

                        long opsOuter = @out.Shape.Dimensions[0 + limits.LongLength].Length;
                        long opsInner = @out.Shape.Dimensions[1 + limits.LongLength].Length;
                        long opsInnerInner = @out.Shape.Dimensions[2 + limits.LongLength].Length;

                        long outerStride1 = in1.Shape.Dimensions[dimIndex0].Stride;
                        long outerStride3 = @out.Shape.Dimensions[dimIndex0].Stride;

                        long innerStride1 = in1.Shape.Dimensions[dimIndex1].Stride;
                        long innerStride3 = @out.Shape.Dimensions[dimIndex1].Stride;

                        long innerInnerStride1 = in1.Shape.Dimensions[dimIndex2].Stride;
                        long innerInnerStride3 = @out.Shape.Dimensions[dimIndex2].Stride;

                        outerStride1 -= innerStride1 * in1.Shape.Dimensions[dimIndex1].Length;
                        outerStride3 -= innerStride3 * @out.Shape.Dimensions[dimIndex1].Length;

                        innerStride1 -= innerInnerStride1 * in1.Shape.Dimensions[dimIndex2].Length;
                        innerStride3 -= innerInnerStride3 * @out.Shape.Dimensions[dimIndex2].Length;

                        for (long outer = 0; outer < totalOps; outer++)
                        {
                            //Get the array offset for the first element in the outer dimension
                            long ix1 = in1.Shape[counters];
                            long ix3 = @out.Shape[counters];


                            for (long i = 0; i < opsOuter; i++)
                            {
                                for (long j = 0; j < opsInner; j++)
                                {
                                    for (long k = 0; k < opsInnerInner; k++)
                                    {
                                        d2[ix3] = (System.Double)(d1[ix1]);
                                        ix1 += innerInnerStride1;
                                        ix3 += innerInnerStride3;
                                    }

                                    ix1 += innerStride1;
                                    ix3 += innerStride3;
                                }

                                ix1 += outerStride1;
                                ix3 += outerStride3;
                            }

                            if (counters.LongLength > 0)
                            {
                                //Basically a ripple carry adder
                                long p = counters.LongLength - 1;
                                while (++counters[p] == limits[p] && p > 0)
                                {
                                    counters[p] = 0;
                                    p--;
                                }
                            }
                        }
                    }
                }
            }
        }

        /// <summary>
        /// Unsafe implementation of applying a unary operation
        /// </summary>
        /// <typeparam name="C">The type of operation to perform</typeparam>
        /// <param name="op">The operation instance</param>
        /// <param name="scalar">The input scalar argument</param>
        /// <param name="out">The output target</param>
        internal static void UFunc_Op_Inner_Unary_Scalar_Flush_UInt64_TypedImpl<C>(NumCIL.Double.ToDouble op, System.UInt64 scalar, NdArray<System.Double> @out)
            where C : IUnaryOp<System.UInt64>
        {
            unsafe
            {
                using (var f2 = new Pinner(@out.DataAccessor))
                {
                    var d2 = (System.Double*)f2.ptr;

                    if (@out.Shape.Dimensions.Length == 1)
                    {
                        long totalOps = @out.Shape.Dimensions[0].Length;
                        long ix2 = @out.Shape.Offset;
                        long stride2 = @out.Shape.Dimensions[0].Stride;

                        for (long i = 0; i < totalOps; i++)
                        {
                            d2[ix2] = (System.Double)(scalar);
                            ix2 += stride2;
                        }
                    }
                    else if (@out.Shape.Dimensions.Length == 2)
                    {
                        long opsOuter = @out.Shape.Dimensions[0].Length;
                        long opsInner = @out.Shape.Dimensions[1].Length;

                        long ix2 = @out.Shape.Offset;
                        long outerStride2 = @out.Shape.Dimensions[0].Stride;
                        long innerStride2 = @out.Shape.Dimensions[1].Stride;
                        outerStride2 -= innerStride2 * @out.Shape.Dimensions[1].Length;

                        for (long i = 0; i < opsOuter; i++)
                        {
                            for (long j = 0; j < opsInner; j++)
                            {
                                d2[ix2] = (System.Double)(scalar);
                                ix2 += innerStride2;
                            }

                            ix2 += outerStride2;
                        }
                    }
                    else
                    {
                        long n = @out.Shape.Dimensions.LongLength - 3;
                        long[] limits = @out.Shape.Dimensions.Where(x => n-- > 0).Select(x => x.Length).ToArray();
                        long[] counters = new long[limits.LongLength];

                        long totalOps = limits.LongLength == 0 ? 1 : limits.Aggregate<long>((a, b) => a * b);

                        //This chunck of variables are used to prevent repeated calculations of offsets
                        long dimIndex0 = 0 + limits.LongLength;
                        long dimIndex1 = 1 + limits.LongLength;
                        long dimIndex2 = 2 + limits.LongLength;

                        long opsOuter = @out.Shape.Dimensions[0 + limits.LongLength].Length;
                        long opsInner = @out.Shape.Dimensions[1 + limits.LongLength].Length;
                        long opsInnerInner = @out.Shape.Dimensions[2 + limits.LongLength].Length;

                        long outerStride3 = @out.Shape.Dimensions[dimIndex0].Stride;
                        long innerStride3 = @out.Shape.Dimensions[dimIndex1].Stride;
                        long innerInnerStride3 = @out.Shape.Dimensions[dimIndex2].Stride;
                        outerStride3 -= innerStride3 * @out.Shape.Dimensions[dimIndex1].Length;
                        innerStride3 -= innerInnerStride3 * @out.Shape.Dimensions[dimIndex2].Length;

                        for (long outer = 0; outer < totalOps; outer++)
                        {
                            //Get the array offset for the first element in the outer dimension
                            long ix3 = @out.Shape[counters];

                            for (long i = 0; i < opsOuter; i++)
                            {
                                for (long j = 0; j < opsInner; j++)
                                {
                                    for (long k = 0; k < opsInnerInner; k++)
                                    {
                                        d2[ix3] = (System.Double)(scalar);
                                        ix3 += innerInnerStride3;
                                    }

                                    ix3 += innerStride3;
                                }

                                ix3 += outerStride3;
                            }

                            if (counters.LongLength > 0)
                            {
                                //Basically a ripple carry adder
                                long p = counters.LongLength - 1;
                                while (++counters[p] == limits[p] && p > 0)
                                {
                                    counters[p] = 0;
                                    p--;
                                }
                            }
                        }
                    }
                }
            }
        }
        /// <summary>
        /// Unsafe implementation of applying a unary operation
        /// </summary>
        /// <typeparam name="C">The type of operation to perform</typeparam>
        /// <param name="op">The operation instance</param>
        /// <param name="in1">The input argument</param>
        /// <param name="out">The output target</param>
        internal static void UFunc_Op_Inner_Unary_Flush_Single_TypedImpl<C>(NumCIL.Double.ToDouble op, NdArray<System.Single> in1, NdArray<System.Double> @out)
            where C : IUnaryOp<System.Single>
        {
            unsafe
            {
                using (var f1 = new Pinner(in1.DataAccessor))
                using (var f2 = new Pinner(@out.DataAccessor))
                {
                    var d1 = (System.Single*)f1.ptr;
                    var d2 = (System.Double*)f2.ptr;

                    if (@out.Shape.Dimensions.Length == 1)
                    {
                        long totalOps = @out.Shape.Dimensions[0].Length;

                        long ix1 = in1.Shape.Offset;
                        long ix2 = @out.Shape.Offset;

                        long stride1 = in1.Shape.Dimensions[0].Stride;
                        long stride2 = @out.Shape.Dimensions[0].Stride;


                        if (stride1 == stride2 && ix1 == ix2)
                        {
                            //Best case, all are equal, just keep a single counter
                            for (long i = 0; i < totalOps; i++)
                            {
                                d2[ix1] = (System.Double)(d1[ix1]);
                                ix1 += stride1;
                            }
                        }
                        else
                        {
                            for (long i = 0; i < totalOps; i++)
                            {
                                d2[ix2] = (System.Double)(d1[ix1]);
                                ix1 += stride1;
                                ix2 += stride2;
                            }
                        }
                    }
                    else if (@out.Shape.Dimensions.Length == 2)
                    {
                        long opsOuter = @out.Shape.Dimensions[0].Length;
                        long opsInner = @out.Shape.Dimensions[1].Length;

                        long ix1 = in1.Shape.Offset;
                        long ix2 = @out.Shape.Offset;

                        long outerStride1 = in1.Shape.Dimensions[0].Stride;
                        long outerStride2 = @out.Shape.Dimensions[0].Stride;

                        long innerStride1 = in1.Shape.Dimensions[1].Stride;
                        long innerStride2 = @out.Shape.Dimensions[1].Stride;

                        outerStride1 -= innerStride1 * in1.Shape.Dimensions[1].Length;
                        outerStride2 -= innerStride2 * @out.Shape.Dimensions[1].Length;

                        for (long i = 0; i < opsOuter; i++)
                        {
                            for (long j = 0; j < opsInner; j++)
                            {
                                d2[ix2] = (System.Double)(d1[ix1]);
                                ix1 += innerStride1;
                                ix2 += innerStride2;
                            }

                            ix1 += outerStride1;
                            ix2 += outerStride2;
                        }
                    }
                    else
                    {
                        long n = in1.Shape.Dimensions.LongLength - 3;
                        long[] limits = in1.Shape.Dimensions.Where(x => n-- > 0).Select(x => x.Length).ToArray();
                        long[] counters = new long[limits.LongLength];

                        long totalOps = limits.LongLength == 0 ? 1 : limits.Aggregate<long>((a, b) => a * b);

                        //This chunck of variables are used to prevent repeated calculations of offsets
                        long dimIndex0 = 0 + limits.LongLength;
                        long dimIndex1 = 1 + limits.LongLength;
                        long dimIndex2 = 2 + limits.LongLength;

                        long opsOuter = @out.Shape.Dimensions[0 + limits.LongLength].Length;
                        long opsInner = @out.Shape.Dimensions[1 + limits.LongLength].Length;
                        long opsInnerInner = @out.Shape.Dimensions[2 + limits.LongLength].Length;

                        long outerStride1 = in1.Shape.Dimensions[dimIndex0].Stride;
                        long outerStride3 = @out.Shape.Dimensions[dimIndex0].Stride;

                        long innerStride1 = in1.Shape.Dimensions[dimIndex1].Stride;
                        long innerStride3 = @out.Shape.Dimensions[dimIndex1].Stride;

                        long innerInnerStride1 = in1.Shape.Dimensions[dimIndex2].Stride;
                        long innerInnerStride3 = @out.Shape.Dimensions[dimIndex2].Stride;

                        outerStride1 -= innerStride1 * in1.Shape.Dimensions[dimIndex1].Length;
                        outerStride3 -= innerStride3 * @out.Shape.Dimensions[dimIndex1].Length;

                        innerStride1 -= innerInnerStride1 * in1.Shape.Dimensions[dimIndex2].Length;
                        innerStride3 -= innerInnerStride3 * @out.Shape.Dimensions[dimIndex2].Length;

                        for (long outer = 0; outer < totalOps; outer++)
                        {
                            //Get the array offset for the first element in the outer dimension
                            long ix1 = in1.Shape[counters];
                            long ix3 = @out.Shape[counters];


                            for (long i = 0; i < opsOuter; i++)
                            {
                                for (long j = 0; j < opsInner; j++)
                                {
                                    for (long k = 0; k < opsInnerInner; k++)
                                    {
                                        d2[ix3] = (System.Double)(d1[ix1]);
                                        ix1 += innerInnerStride1;
                                        ix3 += innerInnerStride3;
                                    }

                                    ix1 += innerStride1;
                                    ix3 += innerStride3;
                                }

                                ix1 += outerStride1;
                                ix3 += outerStride3;
                            }

                            if (counters.LongLength > 0)
                            {
                                //Basically a ripple carry adder
                                long p = counters.LongLength - 1;
                                while (++counters[p] == limits[p] && p > 0)
                                {
                                    counters[p] = 0;
                                    p--;
                                }
                            }
                        }
                    }
                }
            }
        }

        /// <summary>
        /// Unsafe implementation of applying a unary operation
        /// </summary>
        /// <typeparam name="C">The type of operation to perform</typeparam>
        /// <param name="op">The operation instance</param>
        /// <param name="scalar">The input scalar argument</param>
        /// <param name="out">The output target</param>
        internal static void UFunc_Op_Inner_Unary_Scalar_Flush_Single_TypedImpl<C>(NumCIL.Double.ToDouble op, System.Single scalar, NdArray<System.Double> @out)
            where C : IUnaryOp<System.Single>
        {
            unsafe
            {
                using (var f2 = new Pinner(@out.DataAccessor))
                {
                    var d2 = (System.Double*)f2.ptr;

                    if (@out.Shape.Dimensions.Length == 1)
                    {
                        long totalOps = @out.Shape.Dimensions[0].Length;
                        long ix2 = @out.Shape.Offset;
                        long stride2 = @out.Shape.Dimensions[0].Stride;

                        for (long i = 0; i < totalOps; i++)
                        {
                            d2[ix2] = (System.Double)(scalar);
                            ix2 += stride2;
                        }
                    }
                    else if (@out.Shape.Dimensions.Length == 2)
                    {
                        long opsOuter = @out.Shape.Dimensions[0].Length;
                        long opsInner = @out.Shape.Dimensions[1].Length;

                        long ix2 = @out.Shape.Offset;
                        long outerStride2 = @out.Shape.Dimensions[0].Stride;
                        long innerStride2 = @out.Shape.Dimensions[1].Stride;
                        outerStride2 -= innerStride2 * @out.Shape.Dimensions[1].Length;

                        for (long i = 0; i < opsOuter; i++)
                        {
                            for (long j = 0; j < opsInner; j++)
                            {
                                d2[ix2] = (System.Double)(scalar);
                                ix2 += innerStride2;
                            }

                            ix2 += outerStride2;
                        }
                    }
                    else
                    {
                        long n = @out.Shape.Dimensions.LongLength - 3;
                        long[] limits = @out.Shape.Dimensions.Where(x => n-- > 0).Select(x => x.Length).ToArray();
                        long[] counters = new long[limits.LongLength];

                        long totalOps = limits.LongLength == 0 ? 1 : limits.Aggregate<long>((a, b) => a * b);

                        //This chunck of variables are used to prevent repeated calculations of offsets
                        long dimIndex0 = 0 + limits.LongLength;
                        long dimIndex1 = 1 + limits.LongLength;
                        long dimIndex2 = 2 + limits.LongLength;

                        long opsOuter = @out.Shape.Dimensions[0 + limits.LongLength].Length;
                        long opsInner = @out.Shape.Dimensions[1 + limits.LongLength].Length;
                        long opsInnerInner = @out.Shape.Dimensions[2 + limits.LongLength].Length;

                        long outerStride3 = @out.Shape.Dimensions[dimIndex0].Stride;
                        long innerStride3 = @out.Shape.Dimensions[dimIndex1].Stride;
                        long innerInnerStride3 = @out.Shape.Dimensions[dimIndex2].Stride;
                        outerStride3 -= innerStride3 * @out.Shape.Dimensions[dimIndex1].Length;
                        innerStride3 -= innerInnerStride3 * @out.Shape.Dimensions[dimIndex2].Length;

                        for (long outer = 0; outer < totalOps; outer++)
                        {
                            //Get the array offset for the first element in the outer dimension
                            long ix3 = @out.Shape[counters];

                            for (long i = 0; i < opsOuter; i++)
                            {
                                for (long j = 0; j < opsInner; j++)
                                {
                                    for (long k = 0; k < opsInnerInner; k++)
                                    {
                                        d2[ix3] = (System.Double)(scalar);
                                        ix3 += innerInnerStride3;
                                    }

                                    ix3 += innerStride3;
                                }

                                ix3 += outerStride3;
                            }

                            if (counters.LongLength > 0)
                            {
                                //Basically a ripple carry adder
                                long p = counters.LongLength - 1;
                                while (++counters[p] == limits[p] && p > 0)
                                {
                                    counters[p] = 0;
                                    p--;
                                }
                            }
                        }
                    }
                }
            }
        }
        /// <summary>
        /// Unsafe implementation of applying a unary operation
        /// </summary>
        /// <typeparam name="C">The type of operation to perform</typeparam>
        /// <param name="op">The operation instance</param>
        /// <param name="in1">The input argument</param>
        /// <param name="out">The output target</param>
        internal static void UFunc_Op_Inner_Unary_Flush_Boolean_TypedImpl<C>(NumCIL.Boolean.ToDouble op, NdArray<System.Boolean> in1, NdArray<System.Double> @out)
            where C : IUnaryOp<System.Boolean>
        {
            unsafe
            {
                using (var f1 = new Pinner(in1.DataAccessor))
                using (var f2 = new Pinner(@out.DataAccessor))
                {
                    var d1 = (System.Boolean*)f1.ptr;
                    var d2 = (System.Double*)f2.ptr;

                    if (@out.Shape.Dimensions.Length == 1)
                    {
                        long totalOps = @out.Shape.Dimensions[0].Length;

                        long ix1 = in1.Shape.Offset;
                        long ix2 = @out.Shape.Offset;

                        long stride1 = in1.Shape.Dimensions[0].Stride;
                        long stride2 = @out.Shape.Dimensions[0].Stride;


                        if (stride1 == stride2 && ix1 == ix2)
                        {
                            //Best case, all are equal, just keep a single counter
                            for (long i = 0; i < totalOps; i++)
                            {
                                d2[ix1] = (System.Double)(d1[ix1] ? 1 : 0 );
                                ix1 += stride1;
                            }
                        }
                        else
                        {
                            for (long i = 0; i < totalOps; i++)
                            {
                                d2[ix2] = (System.Double)(d1[ix1] ? 1 : 0 );
                                ix1 += stride1;
                                ix2 += stride2;
                            }
                        }
                    }
                    else if (@out.Shape.Dimensions.Length == 2)
                    {
                        long opsOuter = @out.Shape.Dimensions[0].Length;
                        long opsInner = @out.Shape.Dimensions[1].Length;

                        long ix1 = in1.Shape.Offset;
                        long ix2 = @out.Shape.Offset;

                        long outerStride1 = in1.Shape.Dimensions[0].Stride;
                        long outerStride2 = @out.Shape.Dimensions[0].Stride;

                        long innerStride1 = in1.Shape.Dimensions[1].Stride;
                        long innerStride2 = @out.Shape.Dimensions[1].Stride;

                        outerStride1 -= innerStride1 * in1.Shape.Dimensions[1].Length;
                        outerStride2 -= innerStride2 * @out.Shape.Dimensions[1].Length;

                        for (long i = 0; i < opsOuter; i++)
                        {
                            for (long j = 0; j < opsInner; j++)
                            {
                                d2[ix2] = (System.Double)(d1[ix1] ? 1 : 0 );
                                ix1 += innerStride1;
                                ix2 += innerStride2;
                            }

                            ix1 += outerStride1;
                            ix2 += outerStride2;
                        }
                    }
                    else
                    {
                        long n = in1.Shape.Dimensions.LongLength - 3;
                        long[] limits = in1.Shape.Dimensions.Where(x => n-- > 0).Select(x => x.Length).ToArray();
                        long[] counters = new long[limits.LongLength];

                        long totalOps = limits.LongLength == 0 ? 1 : limits.Aggregate<long>((a, b) => a * b);

                        //This chunck of variables are used to prevent repeated calculations of offsets
                        long dimIndex0 = 0 + limits.LongLength;
                        long dimIndex1 = 1 + limits.LongLength;
                        long dimIndex2 = 2 + limits.LongLength;

                        long opsOuter = @out.Shape.Dimensions[0 + limits.LongLength].Length;
                        long opsInner = @out.Shape.Dimensions[1 + limits.LongLength].Length;
                        long opsInnerInner = @out.Shape.Dimensions[2 + limits.LongLength].Length;

                        long outerStride1 = in1.Shape.Dimensions[dimIndex0].Stride;
                        long outerStride3 = @out.Shape.Dimensions[dimIndex0].Stride;

                        long innerStride1 = in1.Shape.Dimensions[dimIndex1].Stride;
                        long innerStride3 = @out.Shape.Dimensions[dimIndex1].Stride;

                        long innerInnerStride1 = in1.Shape.Dimensions[dimIndex2].Stride;
                        long innerInnerStride3 = @out.Shape.Dimensions[dimIndex2].Stride;

                        outerStride1 -= innerStride1 * in1.Shape.Dimensions[dimIndex1].Length;
                        outerStride3 -= innerStride3 * @out.Shape.Dimensions[dimIndex1].Length;

                        innerStride1 -= innerInnerStride1 * in1.Shape.Dimensions[dimIndex2].Length;
                        innerStride3 -= innerInnerStride3 * @out.Shape.Dimensions[dimIndex2].Length;

                        for (long outer = 0; outer < totalOps; outer++)
                        {
                            //Get the array offset for the first element in the outer dimension
                            long ix1 = in1.Shape[counters];
                            long ix3 = @out.Shape[counters];


                            for (long i = 0; i < opsOuter; i++)
                            {
                                for (long j = 0; j < opsInner; j++)
                                {
                                    for (long k = 0; k < opsInnerInner; k++)
                                    {
                                        d2[ix3] = (System.Double)(d1[ix1] ? 1 : 0 );
                                        ix1 += innerInnerStride1;
                                        ix3 += innerInnerStride3;
                                    }

                                    ix1 += innerStride1;
                                    ix3 += innerStride3;
                                }

                                ix1 += outerStride1;
                                ix3 += outerStride3;
                            }

                            if (counters.LongLength > 0)
                            {
                                //Basically a ripple carry adder
                                long p = counters.LongLength - 1;
                                while (++counters[p] == limits[p] && p > 0)
                                {
                                    counters[p] = 0;
                                    p--;
                                }
                            }
                        }
                    }
                }
            }
        }

        /// <summary>
        /// Unsafe implementation of applying a unary operation
        /// </summary>
        /// <typeparam name="C">The type of operation to perform</typeparam>
        /// <param name="op">The operation instance</param>
        /// <param name="scalar">The input scalar argument</param>
        /// <param name="out">The output target</param>
        internal static void UFunc_Op_Inner_Unary_Scalar_Flush_Boolean_TypedImpl<C>(NumCIL.Boolean.ToDouble op, System.Boolean scalar, NdArray<System.Double> @out)
            where C : IUnaryOp<System.Boolean>
        {
            unsafe
            {
                using (var f2 = new Pinner(@out.DataAccessor))
                {
                    var d2 = (System.Double*)f2.ptr;

                    if (@out.Shape.Dimensions.Length == 1)
                    {
                        long totalOps = @out.Shape.Dimensions[0].Length;
                        long ix2 = @out.Shape.Offset;
                        long stride2 = @out.Shape.Dimensions[0].Stride;

                        for (long i = 0; i < totalOps; i++)
                        {
                            d2[ix2] = (System.Double)(scalar ? 1 : 0 );
                            ix2 += stride2;
                        }
                    }
                    else if (@out.Shape.Dimensions.Length == 2)
                    {
                        long opsOuter = @out.Shape.Dimensions[0].Length;
                        long opsInner = @out.Shape.Dimensions[1].Length;

                        long ix2 = @out.Shape.Offset;
                        long outerStride2 = @out.Shape.Dimensions[0].Stride;
                        long innerStride2 = @out.Shape.Dimensions[1].Stride;
                        outerStride2 -= innerStride2 * @out.Shape.Dimensions[1].Length;

                        for (long i = 0; i < opsOuter; i++)
                        {
                            for (long j = 0; j < opsInner; j++)
                            {
                                d2[ix2] = (System.Double)(scalar ? 1 : 0 );
                                ix2 += innerStride2;
                            }

                            ix2 += outerStride2;
                        }
                    }
                    else
                    {
                        long n = @out.Shape.Dimensions.LongLength - 3;
                        long[] limits = @out.Shape.Dimensions.Where(x => n-- > 0).Select(x => x.Length).ToArray();
                        long[] counters = new long[limits.LongLength];

                        long totalOps = limits.LongLength == 0 ? 1 : limits.Aggregate<long>((a, b) => a * b);

                        //This chunck of variables are used to prevent repeated calculations of offsets
                        long dimIndex0 = 0 + limits.LongLength;
                        long dimIndex1 = 1 + limits.LongLength;
                        long dimIndex2 = 2 + limits.LongLength;

                        long opsOuter = @out.Shape.Dimensions[0 + limits.LongLength].Length;
                        long opsInner = @out.Shape.Dimensions[1 + limits.LongLength].Length;
                        long opsInnerInner = @out.Shape.Dimensions[2 + limits.LongLength].Length;

                        long outerStride3 = @out.Shape.Dimensions[dimIndex0].Stride;
                        long innerStride3 = @out.Shape.Dimensions[dimIndex1].Stride;
                        long innerInnerStride3 = @out.Shape.Dimensions[dimIndex2].Stride;
                        outerStride3 -= innerStride3 * @out.Shape.Dimensions[dimIndex1].Length;
                        innerStride3 -= innerInnerStride3 * @out.Shape.Dimensions[dimIndex2].Length;

                        for (long outer = 0; outer < totalOps; outer++)
                        {
                            //Get the array offset for the first element in the outer dimension
                            long ix3 = @out.Shape[counters];

                            for (long i = 0; i < opsOuter; i++)
                            {
                                for (long j = 0; j < opsInner; j++)
                                {
                                    for (long k = 0; k < opsInnerInner; k++)
                                    {
                                        d2[ix3] = (System.Double)(scalar ? 1 : 0 );
                                        ix3 += innerInnerStride3;
                                    }

                                    ix3 += innerStride3;
                                }

                                ix3 += outerStride3;
                            }

                            if (counters.LongLength > 0)
                            {
                                //Basically a ripple carry adder
                                long p = counters.LongLength - 1;
                                while (++counters[p] == limits[p] && p > 0)
                                {
                                    counters[p] = 0;
                                    p--;
                                }
                            }
                        }
                    }
                }
            }
        }
	}
}